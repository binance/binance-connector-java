/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.travelrule;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.wallet.rest.WalletRestApiUtil;
import com.binance.connector.client.wallet.rest.api.WalletRestApi;
import com.binance.connector.client.wallet.rest.model.OnboardedVaspListResponse;

/** API examples for TravelRuleApi */
public class OnboardedVaspListExample {
    private WalletRestApi api;

    public WalletRestApi getApi() {
        if (api == null) {
            ClientConfiguration clientConfiguration = WalletRestApiUtil.getClientConfiguration();
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new WalletRestApi(clientConfiguration);
        }
        return api;
    }

    /**
     * Onboarded VASP list (for local entities that require travel rule) (supporting network)
     * (USER_DATA)
     *
     * <p>Fetch the onboarded VASP list for local entities that required travel rule. * This
     * endpoint specifically uses per second IP rate limit, user&#39;s total second level IP rate
     * Weight: 18000 Request limit: 10 requests per second &gt; * This endpoint specifically uses
     * per second IP rate limit, user&#39;s total second level IP rate limit is 180000/second.
     * Response from the endpoint contains header key X-SAPI-USED-IP-WEIGHT-1S, which defines weight
     * used by the current IP.
     *
     * @throws ApiException if the Api call fails
     */
    public void onboardedVaspListExample() throws ApiException {
        ApiResponse<OnboardedVaspListResponse> response = getApi().onboardedVaspList();
        System.out.println(response.getData());
    }
}
