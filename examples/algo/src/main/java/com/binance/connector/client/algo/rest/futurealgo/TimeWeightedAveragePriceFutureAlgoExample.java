/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.algo.rest.futurealgo;

import com.binance.connector.client.algo.rest.AlgoRestApiUtil;
import com.binance.connector.client.algo.rest.api.AlgoRestApi;
import com.binance.connector.client.algo.rest.model.TimeWeightedAveragePriceFutureAlgoRequest;
import com.binance.connector.client.algo.rest.model.TimeWeightedAveragePriceFutureAlgoResponse;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;

/** API examples for FutureAlgoApi */
public class TimeWeightedAveragePriceFutureAlgoExample {
    private AlgoRestApi api;

    public AlgoRestApi getApi() {
        if (api == null) {
            ClientConfiguration clientConfiguration = AlgoRestApiUtil.getClientConfiguration();
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new AlgoRestApi(clientConfiguration);
        }
        return api;
    }

    /**
     * Time-Weighted Average Price(Twap) New Order(TRADE)
     *
     * <p>Send in a Twap new order. Only support on USDⓈ-M Contracts. * Total Algo open orders max
     * allowed: &#x60;30&#x60; orders. * Leverage of symbols and position mode will be the same as
     * your futures account settings. You can set up through the trading page or fapi. * Receiving
     * &#x60;\&quot;success\&quot;: true&#x60; does not mean that your order will be executed.
     * Please use the query order endpoints（&#x60;GET sapi/v1/algo/futures/openOrders&#x60; or
     * &#x60;GET sapi/v1/algo/futures/historicalOrders&#x60;） to check the order status. For
     * example: Your futures balance is insufficient, or open position with reduce only or position
     * side is inconsistent with your own setting. In these cases you will receive
     * &#x60;\&quot;success\&quot;: true&#x60;, but the order status will be &#x60;expired&#x60;
     * after we check it. * &#x60;quantity&#x60; * 60 / &#x60;duration&#x60; should be larger than
     * minQty * &#x60;duration&#x60; cannot be less than 5 mins or more than 24 hours. * For
     * delivery contracts, TWAP end time should be one hour earlier than the delivery time of the
     * symbol. * You need to enable &#x60;Futures Trading Permission&#x60; for the api key which
     * requests this endpoint. * Base URL: https://api.binance.com Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    public void timeWeightedAveragePriceFutureAlgoExample() throws ApiException {
        TimeWeightedAveragePriceFutureAlgoRequest timeWeightedAveragePriceFutureAlgoRequest =
                new TimeWeightedAveragePriceFutureAlgoRequest();
        timeWeightedAveragePriceFutureAlgoRequest.symbol("BTCUSDT");
        timeWeightedAveragePriceFutureAlgoRequest.side("BUY");
        timeWeightedAveragePriceFutureAlgoRequest.quantity(1d);
        timeWeightedAveragePriceFutureAlgoRequest.duration(5000L);
        ApiResponse<TimeWeightedAveragePriceFutureAlgoResponse> response =
                getApi().timeWeightedAveragePriceFutureAlgo(
                                timeWeightedAveragePriceFutureAlgoRequest);
        System.out.println(response.getData());
    }
}
