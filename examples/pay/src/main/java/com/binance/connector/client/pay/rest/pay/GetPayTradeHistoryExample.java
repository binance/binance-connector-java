/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.pay.rest.pay;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.pay.rest.PayRestApiUtil;
import com.binance.connector.client.pay.rest.api.PayRestApi;
import com.binance.connector.client.pay.rest.model.GetPayTradeHistoryResponse;

/** API examples for PayApi */
public class GetPayTradeHistoryExample {
    private PayRestApi api;

    public PayRestApi getApi() {
        if (api == null) {
            ClientConfiguration clientConfiguration = PayRestApiUtil.getClientConfiguration();
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new PayRestApi(clientConfiguration);
        }
        return api;
    }

    /**
     * Get Pay Trade History
     *
     * <p>Get Pay Trade History * If startTime and endTime are not sent, the recent 90 days&#39;
     * data will be returned. * The max interval between startTime and endTime is 90 days. * Support
     * for querying orders within the last 18 months. * For payerInfo and receiverInfoï¼Œthere are
     * different return values in different orderTypes. * Sender&#39;s perspective when orderType is
     * C2C * payerInfo : binanceId * receiverInfo : name,
     * binanceId/accountId/email/countryCode/phoneNumber/mobileCode (based on user input) *
     * Receiver&#39;s perspective when orderType is C2C * payerInfo : name, accountId * receiverInfo
     * : binanceId * Sender&#39;s perspective when orderType is CRYPTO_BOX * payerInfo : binanceId *
     * receiverInfo : name(the value is always \&quot;Crypto Box\&quot;) * Receiver&#39;s
     * perspective when orderType is CRYPTO_BOX * payerInfo : name, accountId * receiverInfo :
     * binanceId * Sender&#39;s perspective when orderType is PAY * payerInfo : binanceId *
     * receiverInfo : name * Receiver&#39;s perspective when orderType is PAY * payerInfo : name,
     * accountId * receiverInfo : binanceId, name * Sender&#39;s perspective when orderType is
     * PAY_REFUND * payerInfo : binanceId, name * receiverInfo : name, accountId * Receiver&#39;s
     * perspective when orderType is PAY_REFUND * payerInfo : name * receiverInfo : binanceId *
     * Sender&#39;s perspective when orderType is PAYOUT * payerInfo : binanceId, name *
     * receiverInfo : name, accountId * Receiver&#39;s perspective when orderType is PAYOUT *
     * payerInfo : name * receiverInfo : binanceId * Receiver&#39;s perspective when orderType is
     * CRYPTO_BOX_RF * payerInfo : name(the value is always \&quot;Crypto Box\&quot;) * receiverInfo
     * : binanceId * Sender&#39;s perspective when orderType is REMITTANCE * payerInfo : binanceId *
     * receiverInfo : name, institutionName, cardNumber, digitalWalletId Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    public void getPayTradeHistoryExample() throws ApiException {
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long limit = 100L;
        Long recvWindow = 5000L;
        ApiResponse<GetPayTradeHistoryResponse> response =
                getApi().getPayTradeHistory(startTime, endTime, limit, recvWindow);
        System.out.println(response.getData());
    }
}
