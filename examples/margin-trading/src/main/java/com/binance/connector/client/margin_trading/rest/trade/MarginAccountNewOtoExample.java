/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.trade;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.margin_trading.rest.MarginTradingRestApiUtil;
import com.binance.connector.client.margin_trading.rest.api.MarginTradingRestApi;
import com.binance.connector.client.margin_trading.rest.model.MarginAccountNewOtoRequest;
import com.binance.connector.client.margin_trading.rest.model.MarginAccountNewOtoResponse;

/** API examples for TradeApi */
public class MarginAccountNewOtoExample {
    private MarginTradingRestApi api;

    public MarginTradingRestApi getApi() {
        if (api == null) {
            ClientConfiguration clientConfiguration =
                    MarginTradingRestApiUtil.getClientConfiguration();
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new MarginTradingRestApi(clientConfiguration);
        }
        return api;
    }

    /**
     * Margin Account New OTO (TRADE)
     *
     * <p>Post a new OTO order for margin account: - An OTO (One-Triggers-the-Other) is an order
     * list comprised of 2 orders. - The first order is called the **working order** and must be
     * &#x60;LIMIT&#x60; or &#x60;LIMIT_MAKER&#x60;. Initially, only the working order goes on the
     * order book. - The second order is called the **pending order**. It can be any order type
     * except for &#x60;MARKET&#x60; orders using parameter &#x60;quoteOrderQty&#x60;. The pending
     * order is only placed on the order book when the working order gets **fully filled**. - If
     * either the working order or the pending order is cancelled individually, the other order in
     * the order list will also be canceled or expired. - When the order list is placed, if the
     * working order gets **immediately fully filled**, the placement response will show the working
     * order as &#x60;FILLED&#x60; but the pending order will still appear as
     * &#x60;PENDING_NEW&#x60;. You need to query the status of the pending order again to see its
     * updated status. - OTOs add **2 orders** to the unfilled order count,
     * &#x60;EXCHANGE_MAX_NUM_ORDERS&#x60; filter and &#x60;MAX_NUM_ORDERS&#x60; filter. *
     * autoRepayAtCancel is suggested to set as “FALSE” to keep liability unrepaid under high
     * frequent new order/cancel order execution * Depending on the &#x60;pendingType&#x60; or
     * &#x60;workingType&#x60;, some optional parameters will become mandatory: Weight: 6(UID)
     *
     * @throws ApiException if the Api call fails
     */
    public void marginAccountNewOtoExample() throws ApiException {
        MarginAccountNewOtoRequest marginAccountNewOtoRequest = new MarginAccountNewOtoRequest();
        marginAccountNewOtoRequest.symbol("");
        marginAccountNewOtoRequest.workingType("");
        marginAccountNewOtoRequest.workingSide("");
        marginAccountNewOtoRequest.workingPrice(1.0d);
        marginAccountNewOtoRequest.workingQuantity(1.0d);
        marginAccountNewOtoRequest.workingIcebergQty(1.0d);
        marginAccountNewOtoRequest.pendingType("Order Types");
        marginAccountNewOtoRequest.pendingSide("");
        marginAccountNewOtoRequest.pendingQuantity(1.0d);
        ApiResponse<MarginAccountNewOtoResponse> response =
                getApi().marginAccountNewOto(marginAccountNewOtoRequest);
        System.out.println(response.getData());
    }
}
