/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.trade;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.margin_trading.rest.MarginTradingRestApiUtil;
import com.binance.connector.client.margin_trading.rest.api.MarginTradingRestApi;
import com.binance.connector.client.margin_trading.rest.model.MarginAccountNewOtocoRequest;
import com.binance.connector.client.margin_trading.rest.model.MarginAccountNewOtocoResponse;

/** API examples for TradeApi */
public class MarginAccountNewOtocoExample {
    private MarginTradingRestApi api;

    public MarginTradingRestApi getApi() {
        if (api == null) {
            ClientConfiguration clientConfiguration =
                    MarginTradingRestApiUtil.getClientConfiguration();
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new MarginTradingRestApi(clientConfiguration);
        }
        return api;
    }

    /**
     * Margin Account New OTOCO (TRADE)
     *
     * <p>Post a new OTOCO order for margin account： - An OTOCO (One-Triggers-One-Cancels-the-Other)
     * is an order list comprised of 3 orders. - The first order is called the **working order** and
     * must be &#x60;LIMIT&#x60; or &#x60;LIMIT_MAKER&#x60;. Initially, only the working order goes
     * on the order book. - The behavior of the working order is the same as the OTO. - OTOCO has 2
     * pending orders (pending above and pending below), forming an OCO pair. The pending orders are
     * only placed on the order book when the working order gets **fully filled**. - The rules of
     * the pending above and pending below follow the same rules as the [Order List
     * OCO](https://developers.binance.com/docs/margin_trading/trade/Margin-Account-New-OCO). -
     * OTOCOs add **3 orders** against the unfilled order count, &#x60;EXCHANGE_MAX_NUM_ORDERS&#x60;
     * filter, and &#x60;MAX_NUM_ORDERS&#x60; filter. * autoRepayAtCancel is suggested to set as
     * “FALSE” to keep liability unrepaid under high frequent new order/cancel order execution *
     * Depending on the &#x60;pendingAboveType&#x60;/&#x60;pendingBelowType&#x60; or
     * &#x60;workingType&#x60;, some optional parameters will become mandatory: Weight: 6(UID)
     *
     * @throws ApiException if the Api call fails
     */
    public void marginAccountNewOtocoExample() throws ApiException {
        MarginAccountNewOtocoRequest marginAccountNewOtocoRequest =
                new MarginAccountNewOtocoRequest();
        marginAccountNewOtocoRequest.symbol("");
        marginAccountNewOtocoRequest.workingType("");
        marginAccountNewOtocoRequest.workingSide("");
        marginAccountNewOtocoRequest.workingPrice(1d);
        marginAccountNewOtocoRequest.workingQuantity(1d);
        marginAccountNewOtocoRequest.pendingSide("");
        marginAccountNewOtocoRequest.pendingQuantity(1d);
        marginAccountNewOtocoRequest.pendingAboveType("");
        ApiResponse<MarginAccountNewOtocoResponse> response =
                getApi().marginAccountNewOtoco(marginAccountNewOtocoRequest);
        System.out.println(response.getData());
    }
}
