/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.rest.trade;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.derivatives_trading_coin_futures.rest.DerivativesTradingCoinFuturesRestApiUtil;
import com.binance.connector.client.derivatives_trading_coin_futures.rest.api.DerivativesTradingCoinFuturesRestApi;
import com.binance.connector.client.derivatives_trading_coin_futures.rest.model.AllOrdersResponse;

/** API examples for TradeApi */
public class AllOrdersExample {
    private DerivativesTradingCoinFuturesRestApi api;

    public DerivativesTradingCoinFuturesRestApi getApi() {
        if (api == null) {
            ClientConfiguration clientConfiguration =
                    DerivativesTradingCoinFuturesRestApiUtil.getClientConfiguration();
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new DerivativesTradingCoinFuturesRestApi(clientConfiguration);
        }
        return api;
    }

    /**
     * All Orders (USER_DATA)
     *
     * <p>Get all account orders; active, canceled, or filled. * These orders will not be found: *
     * order status is CANCELED or EXPIRED AND order has NO filled trade AND created time + 3 days
     * &lt; current time * order create time + 90 days &lt; current time * Either &#x60;symbol&#x60;
     * or &#x60;pair&#x60; must be sent. * &#x60;pair&#x60; can&#39;t be sent with
     * &#x60;orderId&#x60; * If &#x60;orderId&#x60; is set, it will get orders &gt;&#x3D; that
     * &#x60;orderId&#x60;. Otherwise most recent orders are returned. * If orderId is set, it will
     * get orders &gt;&#x3D; that orderId. Otherwise most recent orders are returned. * The query
     * time period must be less then 7 days( default as the recent 7 days). Weight: 20 with symbol,
     * 40 with pair
     *
     * @throws ApiException if the Api call fails
     */
    public void allOrdersExample() throws ApiException {
        String symbol = "";
        String pair = "";
        Long orderId = 1L;
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long limit = 100L;
        Long recvWindow = 5000L;
        ApiResponse<AllOrdersResponse> response =
                getApi().allOrders(symbol, pair, orderId, startTime, endTime, limit, recvWindow);
        System.out.println(response.getData());
    }
}
