/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.rest.trade;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.derivatives_trading_coin_futures.rest.DerivativesTradingCoinFuturesRestApiUtil;
import com.binance.connector.client.derivatives_trading_coin_futures.rest.api.DerivativesTradingCoinFuturesRestApi;
import com.binance.connector.client.derivatives_trading_coin_futures.rest.model.PositionAdlQuantileEstimationResponse;

/** API examples for TradeApi */
public class PositionAdlQuantileEstimationExample {
    private DerivativesTradingCoinFuturesRestApi api;

    public DerivativesTradingCoinFuturesRestApi getApi() {
        if (api == null) {
            ClientConfiguration clientConfiguration =
                    DerivativesTradingCoinFuturesRestApiUtil.getClientConfiguration();
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new DerivativesTradingCoinFuturesRestApi(clientConfiguration);
        }
        return api;
    }

    /**
     * Position ADL Quantile Estimation(USER_DATA)
     *
     * <p>Query position ADL quantile estimation * Values update every 30s. * Values 0, 1, 2, 3, 4
     * shows the queue position and possibility of ADL from low to high. * For positions of the
     * symbol are in One-way Mode or isolated margined in Hedge Mode, \&quot;LONG\&quot;,
     * \&quot;SHORT\&quot;, and \&quot;BOTH\&quot; will be returned to show the positions&#39; adl
     * quantiles of different position sides. * If the positions of the symbol are crossed margined
     * in Hedge Mode: * \&quot;HEDGE\&quot; as a sign will be returned instead of
     * \&quot;BOTH\&quot;; * A same value caculated on unrealized pnls on long and short sides&#39;
     * positions will be shown for \&quot;LONG\&quot; and \&quot;SHORT\&quot; when there are
     * positions in both of long and short sides. Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    public void positionAdlQuantileEstimationExample() throws ApiException {
        String symbol = "";
        Long recvWindow = 5000L;
        ApiResponse<PositionAdlQuantileEstimationResponse> response =
                getApi().positionAdlQuantileEstimation(symbol, recvWindow);
        System.out.println(response.getData());
    }
}
