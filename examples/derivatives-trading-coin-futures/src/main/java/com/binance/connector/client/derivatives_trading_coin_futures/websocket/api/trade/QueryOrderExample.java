/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.trade;

import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.websocket.configuration.WebSocketClientConfiguration;
import com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.DerivativesTradingCoinFuturesWebSocketApiUtil;
import com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.api.DerivativesTradingCoinFuturesWebSocketApi;
import com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.model.QueryOrderRequest;
import com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.model.QueryOrderResponse;
import java.util.concurrent.CompletableFuture;

/** API examples for TradeApi */
public class QueryOrderExample {
    private DerivativesTradingCoinFuturesWebSocketApi api;

    public DerivativesTradingCoinFuturesWebSocketApi getApi() {
        if (api == null) {
            WebSocketClientConfiguration clientConfiguration =
                    DerivativesTradingCoinFuturesWebSocketApiUtil.getClientConfiguration();
            clientConfiguration.setAutoLogon(false);
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("/path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new DerivativesTradingCoinFuturesWebSocketApi(clientConfiguration);
        }
        return api;
    }

    /**
     * Query Order (USER_DATA)
     *
     * <p>Check an order&#39;s status. * These orders will not be found: * order status is
     * &#x60;CANCELED&#x60; or &#x60;EXPIRED&#x60; **AND** order has NO filled trade **AND** created
     * time + 3 days &lt; current time * order create time + 90 days &lt; current time * Either
     * &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. * &#x60;orderId&#x60; is
     * self-increment for each specific &#x60;symbol&#x60; Weight: 1
     */
    public void queryOrderExampleAsync() {
        QueryOrderRequest queryOrderRequest = new QueryOrderRequest();
        queryOrderRequest.symbol("");
        CompletableFuture<QueryOrderResponse> future = getApi().queryOrder(queryOrderRequest);
        future.handle(
                (response, error) -> {
                    if (error != null) {
                        System.err.println(error);
                    }
                    System.out.println(response);
                    return response;
                });
    }

    /**
     * Query Order (USER_DATA)
     *
     * <p>Check an order&#39;s status. * These orders will not be found: * order status is
     * &#x60;CANCELED&#x60; or &#x60;EXPIRED&#x60; **AND** order has NO filled trade **AND** created
     * time + 3 days &lt; current time * order create time + 90 days &lt; current time * Either
     * &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. * &#x60;orderId&#x60; is
     * self-increment for each specific &#x60;symbol&#x60; Weight: 1
     */
    public void queryOrderExampleSync() {
        QueryOrderRequest queryOrderRequest = new QueryOrderRequest();
        queryOrderRequest.symbol("");
        CompletableFuture<QueryOrderResponse> future = getApi().queryOrder(queryOrderRequest);
        QueryOrderResponse response = future.join();
        System.out.println(response);
    }
}
