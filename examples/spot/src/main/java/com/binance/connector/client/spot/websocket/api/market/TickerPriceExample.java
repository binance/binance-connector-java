/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.market;

import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.websocket.configuration.WebSocketClientConfiguration;
import com.binance.connector.client.spot.websocket.api.SpotWebSocketApiUtil;
import com.binance.connector.client.spot.websocket.api.api.SpotWebSocketApi;
import com.binance.connector.client.spot.websocket.api.model.TickerPriceRequest;
import com.binance.connector.client.spot.websocket.api.model.TickerPriceResponse;
import java.util.concurrent.CompletableFuture;

/** API examples for MarketApi */
public class TickerPriceExample {
    private SpotWebSocketApi api;

    public SpotWebSocketApi getApi() {
        if (api == null) {
            WebSocketClientConfiguration clientConfiguration =
                    SpotWebSocketApiUtil.getClientConfiguration();
            clientConfiguration.setAutoLogon(false);
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("/path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new SpotWebSocketApi(clientConfiguration);
        }
        return api;
    }

    /**
     * WebSocket Symbol price ticker
     *
     * <p>Get the latest market price for a symbol. If you need access to real-time price updates,
     * please consider using WebSocket Streams: * &#x60;&lt;symbol&gt;@aggTrade&#x60; *
     * &#x60;&lt;symbol&gt;@trade&#x60; Weight: Adjusted based on the number of requested symbols: |
     * Parameter | Weight | | --------- |:------:| | &#x60;symbol&#x60; | 2 | | &#x60;symbols&#x60;
     * | 4 | | none | 4 |
     */
    public void tickerPriceExampleAsync() {
        TickerPriceRequest tickerPriceRequest = new TickerPriceRequest();
        CompletableFuture<TickerPriceResponse> future = getApi().tickerPrice(tickerPriceRequest);
        future.handle(
                (response, error) -> {
                    if (error != null) {
                        System.err.println(error);
                    }
                    System.out.println(response);
                    return response;
                });
    }

    /**
     * WebSocket Symbol price ticker
     *
     * <p>Get the latest market price for a symbol. If you need access to real-time price updates,
     * please consider using WebSocket Streams: * &#x60;&lt;symbol&gt;@aggTrade&#x60; *
     * &#x60;&lt;symbol&gt;@trade&#x60; Weight: Adjusted based on the number of requested symbols: |
     * Parameter | Weight | | --------- |:------:| | &#x60;symbol&#x60; | 2 | | &#x60;symbols&#x60;
     * | 4 | | none | 4 |
     */
    public void tickerPriceExampleSync() {
        TickerPriceRequest tickerPriceRequest = new TickerPriceRequest();
        CompletableFuture<TickerPriceResponse> future = getApi().tickerPrice(tickerPriceRequest);
        TickerPriceResponse response = future.join();
        System.out.println(response);
    }
}
