/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.trade;

import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.websocket.configuration.WebSocketClientConfiguration;
import com.binance.connector.client.spot.websocket.api.SpotWebSocketApiUtil;
import com.binance.connector.client.spot.websocket.api.api.SpotWebSocketApi;
import com.binance.connector.client.spot.websocket.api.model.OrderListPlaceOtocoRequest;
import com.binance.connector.client.spot.websocket.api.model.OrderListPlaceOtocoResponse;
import com.binance.connector.client.spot.websocket.api.model.PendingAboveType;
import com.binance.connector.client.spot.websocket.api.model.PendingSide;
import com.binance.connector.client.spot.websocket.api.model.WorkingSide;
import com.binance.connector.client.spot.websocket.api.model.WorkingType;
import java.util.concurrent.CompletableFuture;

/** API examples for TradeApi */
public class OrderListPlaceOtocoExample {
    private SpotWebSocketApi api;

    public SpotWebSocketApi getApi() {
        if (api == null) {
            WebSocketClientConfiguration clientConfiguration =
                    SpotWebSocketApiUtil.getClientConfiguration();
            clientConfiguration.setAutoLogon(false);
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("/path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new SpotWebSocketApi(clientConfiguration);
        }
        return api;
    }

    /**
     * WebSocket Place new Order list - OTOCO
     *
     * <p>Place an OTOCO. * An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised
     * of 3 orders. * The first order is called the **working order** and must be &#x60;LIMIT&#x60;
     * or &#x60;LIMIT_MAKER&#x60;. Initially, only the working order goes on the order book. * The
     * behavior of the working order is the same as the [OTO](#place-new-order-list---oto-trade). *
     * OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The
     * pending orders are only placed on the order book when the working order gets **fully
     * filled**. * OTOCOs add **3 orders** to the unfilled order count,
     * &#x60;EXCHANGE_MAX_NUM_ORDERS&#x60; filter, and &#x60;MAX_NUM_ORDERS&#x60; filter. Weight: 1
     */
    public void orderListPlaceOtocoExampleAsync() {
        OrderListPlaceOtocoRequest orderListPlaceOtocoRequest = new OrderListPlaceOtocoRequest();
        orderListPlaceOtocoRequest.symbol("BNBUSDT");
        orderListPlaceOtocoRequest.workingType(WorkingType.LIMIT);
        orderListPlaceOtocoRequest.workingSide(WorkingSide.BUY);
        orderListPlaceOtocoRequest.workingPrice(1.0d);
        orderListPlaceOtocoRequest.workingQuantity(1.0d);
        orderListPlaceOtocoRequest.pendingSide(PendingSide.BUY);
        orderListPlaceOtocoRequest.pendingQuantity(1.0d);
        orderListPlaceOtocoRequest.pendingAboveType(PendingAboveType.STOP_LOSS_LIMIT);
        CompletableFuture<OrderListPlaceOtocoResponse> future =
                getApi().orderListPlaceOtoco(orderListPlaceOtocoRequest);
        future.handle(
                (response, error) -> {
                    if (error != null) {
                        System.err.println(error);
                    }
                    System.out.println(response);
                    return response;
                });
    }

    /**
     * WebSocket Place new Order list - OTOCO
     *
     * <p>Place an OTOCO. * An OTOCO (One-Triggers-One-Cancels-the-Other) is an order list comprised
     * of 3 orders. * The first order is called the **working order** and must be &#x60;LIMIT&#x60;
     * or &#x60;LIMIT_MAKER&#x60;. Initially, only the working order goes on the order book. * The
     * behavior of the working order is the same as the [OTO](#place-new-order-list---oto-trade). *
     * OTOCO has 2 pending orders (pending above and pending below), forming an OCO pair. The
     * pending orders are only placed on the order book when the working order gets **fully
     * filled**. * OTOCOs add **3 orders** to the unfilled order count,
     * &#x60;EXCHANGE_MAX_NUM_ORDERS&#x60; filter, and &#x60;MAX_NUM_ORDERS&#x60; filter. Weight: 1
     */
    public void orderListPlaceOtocoExampleSync() {
        OrderListPlaceOtocoRequest orderListPlaceOtocoRequest = new OrderListPlaceOtocoRequest();
        orderListPlaceOtocoRequest.symbol("BNBUSDT");
        orderListPlaceOtocoRequest.workingType(WorkingType.LIMIT);
        orderListPlaceOtocoRequest.workingSide(WorkingSide.BUY);
        orderListPlaceOtocoRequest.workingPrice(1.0d);
        orderListPlaceOtocoRequest.workingQuantity(1.0d);
        orderListPlaceOtocoRequest.pendingSide(PendingSide.BUY);
        orderListPlaceOtocoRequest.pendingQuantity(1.0d);
        orderListPlaceOtocoRequest.pendingAboveType(PendingAboveType.STOP_LOSS_LIMIT);
        CompletableFuture<OrderListPlaceOtocoResponse> future =
                getApi().orderListPlaceOtoco(orderListPlaceOtocoRequest);
        OrderListPlaceOtocoResponse response = future.join();
        System.out.println(response);
    }
}
