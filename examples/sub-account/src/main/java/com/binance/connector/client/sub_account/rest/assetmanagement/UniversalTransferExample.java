/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.assetmanagement;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.sub_account.rest.SubAccountRestApiUtil;
import com.binance.connector.client.sub_account.rest.api.SubAccountRestApi;
import com.binance.connector.client.sub_account.rest.model.UniversalTransferRequest;
import com.binance.connector.client.sub_account.rest.model.UniversalTransferResponse;

/** API examples for AssetManagementApi */
public class UniversalTransferExample {
    private SubAccountRestApi api;

    public SubAccountRestApi getApi() {
        if (api == null) {
            ClientConfiguration clientConfiguration =
                    SubAccountRestApiUtil.getClientConfiguration();
            SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
            signatureConfiguration.setApiKey("apiKey");
            signatureConfiguration.setPrivateKey("path/to/private.key");
            clientConfiguration.setSignatureConfiguration(signatureConfiguration);
            api = new SubAccountRestApi(clientConfiguration);
        }
        return api;
    }

    /**
     * Universal Transfer(For Master Account)
     *
     * <p>Universal Transfer * You need to enable \&quot;internal transfer\&quot; option for the api
     * key which requests this endpoint. * Transfer from master account by default if fromEmail is
     * not sent. * Transfer to master account by default if toEmail is not sent. * At least either
     * fromEmail or toEmail need to be sent when the fromAccountType and the toAccountType are the
     * same. * Supported transfer scenarios: * &#x60;SPOT&#x60; transfer to &#x60;SPOT&#x60;,
     * &#x60;USDT_FUTURE&#x60;, &#x60;COIN_FUTURE&#x60; (regardless of master or sub) *
     * &#x60;SPOT&#x60;, &#x60;USDT_FUTURE&#x60;, &#x60;COIN_FUTURE&#x60; transfer to
     * &#x60;SPOT&#x60; (regardless of master or sub) * Master account &#x60;SPOT&#x60; transfer to
     * sub-account &#x60;MARGIN(Cross)&#x60;, &#x60;ISOLATED_MARGIN&#x60; * Sub-account
     * &#x60;MARGIN(Cross)&#x60;, &#x60;ISOLATED_MARGIN&#x60; transfer to master account
     * &#x60;SPOT&#x60; * Sub-account &#x60;MARGIN(Cross)&#x60; transfer to Sub-account
     * &#x60;MARGIN(Cross)&#x60; Weight: 360
     *
     * @throws ApiException if the Api call fails
     */
    public void universalTransferExample() throws ApiException {
        UniversalTransferRequest universalTransferRequest = new UniversalTransferRequest();
        universalTransferRequest.fromAccountType("");
        universalTransferRequest.toAccountType("");
        universalTransferRequest.asset("");
        universalTransferRequest.amount(1d);
        ApiResponse<UniversalTransferResponse> response =
                getApi().universalTransfer(universalTransferRequest);
        System.out.println(response.getData());
    }
}
