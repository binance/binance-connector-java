/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** SubmitDepositQuestionnaireTravelRuleResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SubmitDepositQuestionnaireTravelRuleResponse {
    public static final String SERIALIZED_NAME_TR_ID = "trId";

    @SerializedName(SERIALIZED_NAME_TR_ID)
    @jakarta.annotation.Nullable
    private Long trId;

    public static final String SERIALIZED_NAME_ACCEPTED = "accepted";

    @SerializedName(SERIALIZED_NAME_ACCEPTED)
    @jakarta.annotation.Nullable
    private Boolean accepted;

    public static final String SERIALIZED_NAME_INFO = "info";

    @SerializedName(SERIALIZED_NAME_INFO)
    @jakarta.annotation.Nullable
    private String info;

    public SubmitDepositQuestionnaireTravelRuleResponse() {}

    public SubmitDepositQuestionnaireTravelRuleResponse trId(
            @jakarta.annotation.Nullable Long trId) {
        this.trId = trId;
        return this;
    }

    /**
     * Get trId
     *
     * @return trId
     */
    @jakarta.annotation.Nullable
    public Long getTrId() {
        return trId;
    }

    public void setTrId(@jakarta.annotation.Nullable Long trId) {
        this.trId = trId;
    }

    public SubmitDepositQuestionnaireTravelRuleResponse accepted(
            @jakarta.annotation.Nullable Boolean accepted) {
        this.accepted = accepted;
        return this;
    }

    /**
     * Get accepted
     *
     * @return accepted
     */
    @jakarta.annotation.Nullable
    public Boolean getAccepted() {
        return accepted;
    }

    public void setAccepted(@jakarta.annotation.Nullable Boolean accepted) {
        this.accepted = accepted;
    }

    public SubmitDepositQuestionnaireTravelRuleResponse info(
            @jakarta.annotation.Nullable String info) {
        this.info = info;
        return this;
    }

    /**
     * Get info
     *
     * @return info
     */
    @jakarta.annotation.Nullable
    public String getInfo() {
        return info;
    }

    public void setInfo(@jakarta.annotation.Nullable String info) {
        this.info = info;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubmitDepositQuestionnaireTravelRuleResponse submitDepositQuestionnaireTravelRuleResponse =
                (SubmitDepositQuestionnaireTravelRuleResponse) o;
        return Objects.equals(this.trId, submitDepositQuestionnaireTravelRuleResponse.trId)
                && Objects.equals(
                        this.accepted, submitDepositQuestionnaireTravelRuleResponse.accepted)
                && Objects.equals(this.info, submitDepositQuestionnaireTravelRuleResponse.info);
    }

    @Override
    public int hashCode() {
        return Objects.hash(trId, accepted, info);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubmitDepositQuestionnaireTravelRuleResponse {\n");
        sb.append("		trId: ").append(toIndentedString(trId)).append("\n");
        sb.append("		accepted: ").append(toIndentedString(accepted)).append("\n");
        sb.append("		info: ").append(toIndentedString(info)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object trIdValue = getTrId();
        String trIdValueAsString = "";
        trIdValueAsString = trIdValue.toString();
        sb.append("trId=").append(urlEncode(trIdValueAsString)).append("");
        Object acceptedValue = getAccepted();
        String acceptedValueAsString = "";
        acceptedValueAsString = acceptedValue.toString();
        sb.append("accepted=").append(urlEncode(acceptedValueAsString)).append("");
        Object infoValue = getInfo();
        String infoValueAsString = "";
        infoValueAsString = infoValue.toString();
        sb.append("info=").append(urlEncode(infoValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("trId");
        openapiFields.add("accepted");
        openapiFields.add("info");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     SubmitDepositQuestionnaireTravelRuleResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SubmitDepositQuestionnaireTravelRuleResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " SubmitDepositQuestionnaireTravelRuleResponse is not found"
                                    + " in the empty JSON string",
                                SubmitDepositQuestionnaireTravelRuleResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SubmitDepositQuestionnaireTravelRuleResponse.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `SubmitDepositQuestionnaireTravelRuleResponse` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull())
                && !jsonObj.get("info").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `info` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("info").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SubmitDepositQuestionnaireTravelRuleResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'SubmitDepositQuestionnaireTravelRuleResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SubmitDepositQuestionnaireTravelRuleResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(SubmitDepositQuestionnaireTravelRuleResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SubmitDepositQuestionnaireTravelRuleResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, SubmitDepositQuestionnaireTravelRuleResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SubmitDepositQuestionnaireTravelRuleResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SubmitDepositQuestionnaireTravelRuleResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SubmitDepositQuestionnaireTravelRuleResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     SubmitDepositQuestionnaireTravelRuleResponse
     */
    public static SubmitDepositQuestionnaireTravelRuleResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, SubmitDepositQuestionnaireTravelRuleResponse.class);
    }

    /**
     * Convert an instance of SubmitDepositQuestionnaireTravelRuleResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
