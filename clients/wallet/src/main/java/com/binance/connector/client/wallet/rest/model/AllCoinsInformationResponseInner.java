/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AllCoinsInformationResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AllCoinsInformationResponseInner {
    public static final String SERIALIZED_NAME_COIN = "coin";

    @SerializedName(SERIALIZED_NAME_COIN)
    @jakarta.annotation.Nullable
    private String coin;

    public static final String SERIALIZED_NAME_DEPOSIT_ALL_ENABLE = "depositAllEnable";

    @SerializedName(SERIALIZED_NAME_DEPOSIT_ALL_ENABLE)
    @jakarta.annotation.Nullable
    private Boolean depositAllEnable;

    public static final String SERIALIZED_NAME_FREE = "free";

    @SerializedName(SERIALIZED_NAME_FREE)
    @jakarta.annotation.Nullable
    private String free;

    public static final String SERIALIZED_NAME_FREEZE = "freeze";

    @SerializedName(SERIALIZED_NAME_FREEZE)
    @jakarta.annotation.Nullable
    private String freeze;

    public static final String SERIALIZED_NAME_IPOABLE = "ipoable";

    @SerializedName(SERIALIZED_NAME_IPOABLE)
    @jakarta.annotation.Nullable
    private String ipoable;

    public static final String SERIALIZED_NAME_IPOING = "ipoing";

    @SerializedName(SERIALIZED_NAME_IPOING)
    @jakarta.annotation.Nullable
    private String ipoing;

    public static final String SERIALIZED_NAME_IS_LEGAL_MONEY = "isLegalMoney";

    @SerializedName(SERIALIZED_NAME_IS_LEGAL_MONEY)
    @jakarta.annotation.Nullable
    private Boolean isLegalMoney;

    public static final String SERIALIZED_NAME_LOCKED = "locked";

    @SerializedName(SERIALIZED_NAME_LOCKED)
    @jakarta.annotation.Nullable
    private String locked;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    @jakarta.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_NETWORK_LIST = "networkList";

    @SerializedName(SERIALIZED_NAME_NETWORK_LIST)
    @jakarta.annotation.Nullable
    private List<@Valid AllCoinsInformationResponseInnerNetworkListInner> networkList;

    public static final String SERIALIZED_NAME_STORAGE = "storage";

    @SerializedName(SERIALIZED_NAME_STORAGE)
    @jakarta.annotation.Nullable
    private String storage;

    public static final String SERIALIZED_NAME_TRADING = "trading";

    @SerializedName(SERIALIZED_NAME_TRADING)
    @jakarta.annotation.Nullable
    private Boolean trading;

    public static final String SERIALIZED_NAME_WITHDRAW_ALL_ENABLE = "withdrawAllEnable";

    @SerializedName(SERIALIZED_NAME_WITHDRAW_ALL_ENABLE)
    @jakarta.annotation.Nullable
    private Boolean withdrawAllEnable;

    public static final String SERIALIZED_NAME_WITHDRAWING = "withdrawing";

    @SerializedName(SERIALIZED_NAME_WITHDRAWING)
    @jakarta.annotation.Nullable
    private String withdrawing;

    public AllCoinsInformationResponseInner() {}

    public AllCoinsInformationResponseInner coin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
        return this;
    }

    /**
     * Get coin
     *
     * @return coin
     */
    @jakarta.annotation.Nullable
    public String getCoin() {
        return coin;
    }

    public void setCoin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
    }

    public AllCoinsInformationResponseInner depositAllEnable(
            @jakarta.annotation.Nullable Boolean depositAllEnable) {
        this.depositAllEnable = depositAllEnable;
        return this;
    }

    /**
     * Get depositAllEnable
     *
     * @return depositAllEnable
     */
    @jakarta.annotation.Nullable
    public Boolean getDepositAllEnable() {
        return depositAllEnable;
    }

    public void setDepositAllEnable(@jakarta.annotation.Nullable Boolean depositAllEnable) {
        this.depositAllEnable = depositAllEnable;
    }

    public AllCoinsInformationResponseInner free(@jakarta.annotation.Nullable String free) {
        this.free = free;
        return this;
    }

    /**
     * Get free
     *
     * @return free
     */
    @jakarta.annotation.Nullable
    public String getFree() {
        return free;
    }

    public void setFree(@jakarta.annotation.Nullable String free) {
        this.free = free;
    }

    public AllCoinsInformationResponseInner freeze(@jakarta.annotation.Nullable String freeze) {
        this.freeze = freeze;
        return this;
    }

    /**
     * Get freeze
     *
     * @return freeze
     */
    @jakarta.annotation.Nullable
    public String getFreeze() {
        return freeze;
    }

    public void setFreeze(@jakarta.annotation.Nullable String freeze) {
        this.freeze = freeze;
    }

    public AllCoinsInformationResponseInner ipoable(@jakarta.annotation.Nullable String ipoable) {
        this.ipoable = ipoable;
        return this;
    }

    /**
     * Get ipoable
     *
     * @return ipoable
     */
    @jakarta.annotation.Nullable
    public String getIpoable() {
        return ipoable;
    }

    public void setIpoable(@jakarta.annotation.Nullable String ipoable) {
        this.ipoable = ipoable;
    }

    public AllCoinsInformationResponseInner ipoing(@jakarta.annotation.Nullable String ipoing) {
        this.ipoing = ipoing;
        return this;
    }

    /**
     * Get ipoing
     *
     * @return ipoing
     */
    @jakarta.annotation.Nullable
    public String getIpoing() {
        return ipoing;
    }

    public void setIpoing(@jakarta.annotation.Nullable String ipoing) {
        this.ipoing = ipoing;
    }

    public AllCoinsInformationResponseInner isLegalMoney(
            @jakarta.annotation.Nullable Boolean isLegalMoney) {
        this.isLegalMoney = isLegalMoney;
        return this;
    }

    /**
     * Get isLegalMoney
     *
     * @return isLegalMoney
     */
    @jakarta.annotation.Nullable
    public Boolean getIsLegalMoney() {
        return isLegalMoney;
    }

    public void setIsLegalMoney(@jakarta.annotation.Nullable Boolean isLegalMoney) {
        this.isLegalMoney = isLegalMoney;
    }

    public AllCoinsInformationResponseInner locked(@jakarta.annotation.Nullable String locked) {
        this.locked = locked;
        return this;
    }

    /**
     * Get locked
     *
     * @return locked
     */
    @jakarta.annotation.Nullable
    public String getLocked() {
        return locked;
    }

    public void setLocked(@jakarta.annotation.Nullable String locked) {
        this.locked = locked;
    }

    public AllCoinsInformationResponseInner name(@jakarta.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @jakarta.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@jakarta.annotation.Nullable String name) {
        this.name = name;
    }

    public AllCoinsInformationResponseInner networkList(
            @jakarta.annotation.Nullable
                    List<@Valid AllCoinsInformationResponseInnerNetworkListInner> networkList) {
        this.networkList = networkList;
        return this;
    }

    public AllCoinsInformationResponseInner addNetworkListItem(
            AllCoinsInformationResponseInnerNetworkListInner networkListItem) {
        if (this.networkList == null) {
            this.networkList = new ArrayList<>();
        }
        this.networkList.add(networkListItem);
        return this;
    }

    /**
     * Get networkList
     *
     * @return networkList
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid AllCoinsInformationResponseInnerNetworkListInner> getNetworkList() {
        return networkList;
    }

    public void setNetworkList(
            @jakarta.annotation.Nullable
                    List<@Valid AllCoinsInformationResponseInnerNetworkListInner> networkList) {
        this.networkList = networkList;
    }

    public AllCoinsInformationResponseInner storage(@jakarta.annotation.Nullable String storage) {
        this.storage = storage;
        return this;
    }

    /**
     * Get storage
     *
     * @return storage
     */
    @jakarta.annotation.Nullable
    public String getStorage() {
        return storage;
    }

    public void setStorage(@jakarta.annotation.Nullable String storage) {
        this.storage = storage;
    }

    public AllCoinsInformationResponseInner trading(@jakarta.annotation.Nullable Boolean trading) {
        this.trading = trading;
        return this;
    }

    /**
     * Get trading
     *
     * @return trading
     */
    @jakarta.annotation.Nullable
    public Boolean getTrading() {
        return trading;
    }

    public void setTrading(@jakarta.annotation.Nullable Boolean trading) {
        this.trading = trading;
    }

    public AllCoinsInformationResponseInner withdrawAllEnable(
            @jakarta.annotation.Nullable Boolean withdrawAllEnable) {
        this.withdrawAllEnable = withdrawAllEnable;
        return this;
    }

    /**
     * Get withdrawAllEnable
     *
     * @return withdrawAllEnable
     */
    @jakarta.annotation.Nullable
    public Boolean getWithdrawAllEnable() {
        return withdrawAllEnable;
    }

    public void setWithdrawAllEnable(@jakarta.annotation.Nullable Boolean withdrawAllEnable) {
        this.withdrawAllEnable = withdrawAllEnable;
    }

    public AllCoinsInformationResponseInner withdrawing(
            @jakarta.annotation.Nullable String withdrawing) {
        this.withdrawing = withdrawing;
        return this;
    }

    /**
     * Get withdrawing
     *
     * @return withdrawing
     */
    @jakarta.annotation.Nullable
    public String getWithdrawing() {
        return withdrawing;
    }

    public void setWithdrawing(@jakarta.annotation.Nullable String withdrawing) {
        this.withdrawing = withdrawing;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AllCoinsInformationResponseInner allCoinsInformationResponseInner =
                (AllCoinsInformationResponseInner) o;
        return Objects.equals(this.coin, allCoinsInformationResponseInner.coin)
                && Objects.equals(
                        this.depositAllEnable, allCoinsInformationResponseInner.depositAllEnable)
                && Objects.equals(this.free, allCoinsInformationResponseInner.free)
                && Objects.equals(this.freeze, allCoinsInformationResponseInner.freeze)
                && Objects.equals(this.ipoable, allCoinsInformationResponseInner.ipoable)
                && Objects.equals(this.ipoing, allCoinsInformationResponseInner.ipoing)
                && Objects.equals(this.isLegalMoney, allCoinsInformationResponseInner.isLegalMoney)
                && Objects.equals(this.locked, allCoinsInformationResponseInner.locked)
                && Objects.equals(this.name, allCoinsInformationResponseInner.name)
                && Objects.equals(this.networkList, allCoinsInformationResponseInner.networkList)
                && Objects.equals(this.storage, allCoinsInformationResponseInner.storage)
                && Objects.equals(this.trading, allCoinsInformationResponseInner.trading)
                && Objects.equals(
                        this.withdrawAllEnable, allCoinsInformationResponseInner.withdrawAllEnable)
                && Objects.equals(this.withdrawing, allCoinsInformationResponseInner.withdrawing);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                coin,
                depositAllEnable,
                free,
                freeze,
                ipoable,
                ipoing,
                isLegalMoney,
                locked,
                name,
                networkList,
                storage,
                trading,
                withdrawAllEnable,
                withdrawing);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AllCoinsInformationResponseInner {\n");
        sb.append("		coin: ").append(toIndentedString(coin)).append("\n");
        sb.append("		depositAllEnable: ").append(toIndentedString(depositAllEnable)).append("\n");
        sb.append("		free: ").append(toIndentedString(free)).append("\n");
        sb.append("		freeze: ").append(toIndentedString(freeze)).append("\n");
        sb.append("		ipoable: ").append(toIndentedString(ipoable)).append("\n");
        sb.append("		ipoing: ").append(toIndentedString(ipoing)).append("\n");
        sb.append("		isLegalMoney: ").append(toIndentedString(isLegalMoney)).append("\n");
        sb.append("		locked: ").append(toIndentedString(locked)).append("\n");
        sb.append("		name: ").append(toIndentedString(name)).append("\n");
        sb.append("		networkList: ").append(toIndentedString(networkList)).append("\n");
        sb.append("		storage: ").append(toIndentedString(storage)).append("\n");
        sb.append("		trading: ").append(toIndentedString(trading)).append("\n");
        sb.append("		withdrawAllEnable: ").append(toIndentedString(withdrawAllEnable)).append("\n");
        sb.append("		withdrawing: ").append(toIndentedString(withdrawing)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object coinValue = getCoin();
        String coinValueAsString = "";
        coinValueAsString = coinValue.toString();
        sb.append("coin=").append(urlEncode(coinValueAsString)).append("");
        Object depositAllEnableValue = getDepositAllEnable();
        String depositAllEnableValueAsString = "";
        depositAllEnableValueAsString = depositAllEnableValue.toString();
        sb.append("depositAllEnable=").append(urlEncode(depositAllEnableValueAsString)).append("");
        Object freeValue = getFree();
        String freeValueAsString = "";
        freeValueAsString = freeValue.toString();
        sb.append("free=").append(urlEncode(freeValueAsString)).append("");
        Object freezeValue = getFreeze();
        String freezeValueAsString = "";
        freezeValueAsString = freezeValue.toString();
        sb.append("freeze=").append(urlEncode(freezeValueAsString)).append("");
        Object ipoableValue = getIpoable();
        String ipoableValueAsString = "";
        ipoableValueAsString = ipoableValue.toString();
        sb.append("ipoable=").append(urlEncode(ipoableValueAsString)).append("");
        Object ipoingValue = getIpoing();
        String ipoingValueAsString = "";
        ipoingValueAsString = ipoingValue.toString();
        sb.append("ipoing=").append(urlEncode(ipoingValueAsString)).append("");
        Object isLegalMoneyValue = getIsLegalMoney();
        String isLegalMoneyValueAsString = "";
        isLegalMoneyValueAsString = isLegalMoneyValue.toString();
        sb.append("isLegalMoney=").append(urlEncode(isLegalMoneyValueAsString)).append("");
        Object lockedValue = getLocked();
        String lockedValueAsString = "";
        lockedValueAsString = lockedValue.toString();
        sb.append("locked=").append(urlEncode(lockedValueAsString)).append("");
        Object nameValue = getName();
        String nameValueAsString = "";
        nameValueAsString = nameValue.toString();
        sb.append("name=").append(urlEncode(nameValueAsString)).append("");
        Object networkListValue = getNetworkList();
        String networkListValueAsString = "";
        networkListValueAsString =
                (String)
                        ((Collection) networkListValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("networkList=").append(urlEncode(networkListValueAsString)).append("");
        Object storageValue = getStorage();
        String storageValueAsString = "";
        storageValueAsString = storageValue.toString();
        sb.append("storage=").append(urlEncode(storageValueAsString)).append("");
        Object tradingValue = getTrading();
        String tradingValueAsString = "";
        tradingValueAsString = tradingValue.toString();
        sb.append("trading=").append(urlEncode(tradingValueAsString)).append("");
        Object withdrawAllEnableValue = getWithdrawAllEnable();
        String withdrawAllEnableValueAsString = "";
        withdrawAllEnableValueAsString = withdrawAllEnableValue.toString();
        sb.append("withdrawAllEnable=")
                .append(urlEncode(withdrawAllEnableValueAsString))
                .append("");
        Object withdrawingValue = getWithdrawing();
        String withdrawingValueAsString = "";
        withdrawingValueAsString = withdrawingValue.toString();
        sb.append("withdrawing=").append(urlEncode(withdrawingValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("coin");
        openapiFields.add("depositAllEnable");
        openapiFields.add("free");
        openapiFields.add("freeze");
        openapiFields.add("ipoable");
        openapiFields.add("ipoing");
        openapiFields.add("isLegalMoney");
        openapiFields.add("locked");
        openapiFields.add("name");
        openapiFields.add("networkList");
        openapiFields.add("storage");
        openapiFields.add("trading");
        openapiFields.add("withdrawAllEnable");
        openapiFields.add("withdrawing");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AllCoinsInformationResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AllCoinsInformationResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AllCoinsInformationResponseInner is"
                                        + " not found in the empty JSON string",
                                AllCoinsInformationResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AllCoinsInformationResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AllCoinsInformationResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull())
                && !jsonObj.get("coin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("coin").toString()));
        }
        if ((jsonObj.get("free") != null && !jsonObj.get("free").isJsonNull())
                && !jsonObj.get("free").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `free` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("free").toString()));
        }
        if ((jsonObj.get("freeze") != null && !jsonObj.get("freeze").isJsonNull())
                && !jsonObj.get("freeze").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `freeze` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("freeze").toString()));
        }
        if ((jsonObj.get("ipoable") != null && !jsonObj.get("ipoable").isJsonNull())
                && !jsonObj.get("ipoable").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ipoable` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("ipoable").toString()));
        }
        if ((jsonObj.get("ipoing") != null && !jsonObj.get("ipoing").isJsonNull())
                && !jsonObj.get("ipoing").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ipoing` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("ipoing").toString()));
        }
        if ((jsonObj.get("locked") != null && !jsonObj.get("locked").isJsonNull())
                && !jsonObj.get("locked").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `locked` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("locked").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if (jsonObj.get("networkList") != null && !jsonObj.get("networkList").isJsonNull()) {
            JsonArray jsonArraynetworkList = jsonObj.getAsJsonArray("networkList");
            if (jsonArraynetworkList != null) {
                // ensure the json data is an array
                if (!jsonObj.get("networkList").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `networkList` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("networkList").toString()));
                }

                // validate the optional field `networkList` (array)
                for (int i = 0; i < jsonArraynetworkList.size(); i++) {
                    AllCoinsInformationResponseInnerNetworkListInner.validateJsonElement(
                            jsonArraynetworkList.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("storage") != null && !jsonObj.get("storage").isJsonNull())
                && !jsonObj.get("storage").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `storage` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("storage").toString()));
        }
        if ((jsonObj.get("withdrawing") != null && !jsonObj.get("withdrawing").isJsonNull())
                && !jsonObj.get("withdrawing").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `withdrawing` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("withdrawing").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AllCoinsInformationResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AllCoinsInformationResponseInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AllCoinsInformationResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AllCoinsInformationResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AllCoinsInformationResponseInner>() {
                        @Override
                        public void write(JsonWriter out, AllCoinsInformationResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AllCoinsInformationResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AllCoinsInformationResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AllCoinsInformationResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AllCoinsInformationResponseInner
     */
    public static AllCoinsInformationResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AllCoinsInformationResponseInner.class);
    }

    /**
     * Convert an instance of AllCoinsInformationResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
