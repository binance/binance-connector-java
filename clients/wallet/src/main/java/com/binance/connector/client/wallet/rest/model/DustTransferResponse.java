/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** DustTransferResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class DustTransferResponse {
    public static final String SERIALIZED_NAME_TOTAL_SERVICE_CHARGE = "totalServiceCharge";

    @SerializedName(SERIALIZED_NAME_TOTAL_SERVICE_CHARGE)
    @jakarta.annotation.Nullable
    private String totalServiceCharge;

    public static final String SERIALIZED_NAME_TOTAL_TRANSFERED = "totalTransfered";

    @SerializedName(SERIALIZED_NAME_TOTAL_TRANSFERED)
    @jakarta.annotation.Nullable
    private String totalTransfered;

    public static final String SERIALIZED_NAME_TRANSFER_RESULT = "transferResult";

    @SerializedName(SERIALIZED_NAME_TRANSFER_RESULT)
    @jakarta.annotation.Nullable
    private List<@Valid DustTransferResponseTransferResultInner> transferResult;

    public DustTransferResponse() {}

    public DustTransferResponse totalServiceCharge(
            @jakarta.annotation.Nullable String totalServiceCharge) {
        this.totalServiceCharge = totalServiceCharge;
        return this;
    }

    /**
     * Get totalServiceCharge
     *
     * @return totalServiceCharge
     */
    @jakarta.annotation.Nullable
    public String getTotalServiceCharge() {
        return totalServiceCharge;
    }

    public void setTotalServiceCharge(@jakarta.annotation.Nullable String totalServiceCharge) {
        this.totalServiceCharge = totalServiceCharge;
    }

    public DustTransferResponse totalTransfered(
            @jakarta.annotation.Nullable String totalTransfered) {
        this.totalTransfered = totalTransfered;
        return this;
    }

    /**
     * Get totalTransfered
     *
     * @return totalTransfered
     */
    @jakarta.annotation.Nullable
    public String getTotalTransfered() {
        return totalTransfered;
    }

    public void setTotalTransfered(@jakarta.annotation.Nullable String totalTransfered) {
        this.totalTransfered = totalTransfered;
    }

    public DustTransferResponse transferResult(
            @jakarta.annotation.Nullable
                    List<@Valid DustTransferResponseTransferResultInner> transferResult) {
        this.transferResult = transferResult;
        return this;
    }

    public DustTransferResponse addTransferResultItem(
            DustTransferResponseTransferResultInner transferResultItem) {
        if (this.transferResult == null) {
            this.transferResult = new ArrayList<>();
        }
        this.transferResult.add(transferResultItem);
        return this;
    }

    /**
     * Get transferResult
     *
     * @return transferResult
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid DustTransferResponseTransferResultInner> getTransferResult() {
        return transferResult;
    }

    public void setTransferResult(
            @jakarta.annotation.Nullable
                    List<@Valid DustTransferResponseTransferResultInner> transferResult) {
        this.transferResult = transferResult;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DustTransferResponse dustTransferResponse = (DustTransferResponse) o;
        return Objects.equals(this.totalServiceCharge, dustTransferResponse.totalServiceCharge)
                && Objects.equals(this.totalTransfered, dustTransferResponse.totalTransfered)
                && Objects.equals(this.transferResult, dustTransferResponse.transferResult);
    }

    @Override
    public int hashCode() {
        return Objects.hash(totalServiceCharge, totalTransfered, transferResult);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DustTransferResponse {\n");
        sb.append("		totalServiceCharge: ")
                .append(toIndentedString(totalServiceCharge))
                .append("\n");
        sb.append("		totalTransfered: ").append(toIndentedString(totalTransfered)).append("\n");
        sb.append("		transferResult: ").append(toIndentedString(transferResult)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object totalServiceChargeValue = getTotalServiceCharge();
        String totalServiceChargeValueAsString = "";
        totalServiceChargeValueAsString = totalServiceChargeValue.toString();
        sb.append("totalServiceCharge=")
                .append(urlEncode(totalServiceChargeValueAsString))
                .append("");
        Object totalTransferedValue = getTotalTransfered();
        String totalTransferedValueAsString = "";
        totalTransferedValueAsString = totalTransferedValue.toString();
        sb.append("totalTransfered=").append(urlEncode(totalTransferedValueAsString)).append("");
        Object transferResultValue = getTransferResult();
        String transferResultValueAsString = "";
        transferResultValueAsString =
                (String)
                        ((Collection) transferResultValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("transferResult=").append(urlEncode(transferResultValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("totalServiceCharge");
        openapiFields.add("totalTransfered");
        openapiFields.add("transferResult");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DustTransferResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DustTransferResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DustTransferResponse is not found in"
                                        + " the empty JSON string",
                                DustTransferResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DustTransferResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DustTransferResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("totalServiceCharge") != null
                        && !jsonObj.get("totalServiceCharge").isJsonNull())
                && !jsonObj.get("totalServiceCharge").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalServiceCharge` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalServiceCharge").toString()));
        }
        if ((jsonObj.get("totalTransfered") != null && !jsonObj.get("totalTransfered").isJsonNull())
                && !jsonObj.get("totalTransfered").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalTransfered` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalTransfered").toString()));
        }
        if (jsonObj.get("transferResult") != null && !jsonObj.get("transferResult").isJsonNull()) {
            JsonArray jsonArraytransferResult = jsonObj.getAsJsonArray("transferResult");
            if (jsonArraytransferResult != null) {
                // ensure the json data is an array
                if (!jsonObj.get("transferResult").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `transferResult` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("transferResult").toString()));
                }

                // validate the optional field `transferResult` (array)
                for (int i = 0; i < jsonArraytransferResult.size(); i++) {
                    DustTransferResponseTransferResultInner.validateJsonElement(
                            jsonArraytransferResult.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DustTransferResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DustTransferResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DustTransferResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(DustTransferResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DustTransferResponse>() {
                        @Override
                        public void write(JsonWriter out, DustTransferResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DustTransferResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DustTransferResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DustTransferResponse
     * @throws IOException if the JSON string is invalid with respect to DustTransferResponse
     */
    public static DustTransferResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DustTransferResponse.class);
    }

    /**
     * Convert an instance of DustTransferResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
