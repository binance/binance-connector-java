/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.wallet.rest.model.AssetDetailResponse;
import com.binance.connector.client.wallet.rest.model.AssetDividendRecordResponse;
import com.binance.connector.client.wallet.rest.model.DustTransferRequest;
import com.binance.connector.client.wallet.rest.model.DustTransferResponse;
import com.binance.connector.client.wallet.rest.model.DustlogResponse;
import com.binance.connector.client.wallet.rest.model.FundingWalletRequest;
import com.binance.connector.client.wallet.rest.model.FundingWalletResponse;
import com.binance.connector.client.wallet.rest.model.GetAssetsThatCanBeConvertedIntoBnbRequest;
import com.binance.connector.client.wallet.rest.model.GetAssetsThatCanBeConvertedIntoBnbResponse;
import com.binance.connector.client.wallet.rest.model.GetCloudMiningPaymentAndRefundHistoryResponse;
import com.binance.connector.client.wallet.rest.model.GetOpenSymbolListResponse;
import com.binance.connector.client.wallet.rest.model.QueryUserDelegationHistoryResponse;
import com.binance.connector.client.wallet.rest.model.QueryUserUniversalTransferHistoryResponse;
import com.binance.connector.client.wallet.rest.model.QueryUserWalletBalanceResponse;
import com.binance.connector.client.wallet.rest.model.ToggleBnbBurnOnSpotTradeAndMarginInterestRequest;
import com.binance.connector.client.wallet.rest.model.ToggleBnbBurnOnSpotTradeAndMarginInterestResponse;
import com.binance.connector.client.wallet.rest.model.TradeFeeResponse;
import com.binance.connector.client.wallet.rest.model.UserAssetRequest;
import com.binance.connector.client.wallet.rest.model.UserAssetResponse;
import com.binance.connector.client.wallet.rest.model.UserUniversalTransferRequest;
import com.binance.connector.client.wallet.rest.model.UserUniversalTransferResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class AssetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-wallet/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public AssetApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public AssetApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assetDetail
     *
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Asset Detail </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/Asset-Detail">Asset Detail
     *     (USER_DATA) Documentation</a>
     */
    private okhttp3.Call assetDetailCall(Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/assetDetail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetDetailValidateBeforeCall(Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method = this.getClass().getMethod("assetDetail", Long.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return assetDetailCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Asset Detail (USER_DATA) Fetch details of assets supported on Binance. * Please get network
     * and other deposit or withdraw details from &#x60;&#x60;GET
     * /sapi/v1/capital/config/getall&#x60;&#x60;. Weight: 1
     *
     * @param recvWindow (optional)
     * @return ApiResponse&lt;AssetDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Asset Detail </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/Asset-Detail">Asset Detail
     *     (USER_DATA) Documentation</a>
     */
    public ApiResponse<AssetDetailResponse> assetDetail(Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall = assetDetailValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AssetDetailResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for assetDividendRecord
     *
     * @param asset (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit min 7, max 30, default 7 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Asset Dividend Record </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/assets-divided-record">Asset
     *     Dividend Record (USER_DATA) Documentation</a>
     */
    private okhttp3.Call assetDividendRecordCall(
            String asset, Long startTime, Long endTime, Long limit, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/assetDividend";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetDividendRecordValidateBeforeCall(
            String asset, Long startTime, Long endTime, Long limit, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {asset, startTime, endTime, limit, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "assetDividendRecord",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return assetDividendRecordCall(asset, startTime, endTime, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Asset Dividend Record (USER_DATA) Query asset dividend record. * There cannot be more than
     * 180 days between parameter &#x60;startTime&#x60; and &#x60;endTime&#x60;. Weight: 10
     *
     * @param asset (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit min 7, max 30, default 7 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;AssetDividendRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Asset Dividend Record </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/assets-divided-record">Asset
     *     Dividend Record (USER_DATA) Documentation</a>
     */
    public ApiResponse<AssetDividendRecordResponse> assetDividendRecord(
            String asset, Long startTime, Long endTime, Long limit, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                assetDividendRecordValidateBeforeCall(asset, startTime, endTime, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AssetDividendRecordResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for dustTransfer
     *
     * @param dustTransferRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Dust Transfer </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/Dust-Transfer">Dust Transfer
     *     (USER_DATA) Documentation</a>
     */
    private okhttp3.Call dustTransferCall(DustTransferRequest dustTransferRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/dust";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dustTransferRequest.getAsset() != null) {
            localVarFormParams.put("asset", dustTransferRequest.getAsset());
        }

        if (dustTransferRequest.getAccountType() != null) {
            localVarFormParams.put("accountType", dustTransferRequest.getAccountType());
        }

        if (dustTransferRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", dustTransferRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dustTransferValidateBeforeCall(DustTransferRequest dustTransferRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {dustTransferRequest};
            Method method = this.getClass().getMethod("dustTransfer", DustTransferRequest.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return dustTransferCall(dustTransferRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Dust Transfer (USER_DATA) Convert dust assets to BNB. * You need to open&#x60;Enable Spot
     * &amp; Margin Trading&#x60; permission for the API Key which requests this endpoint. Weight:
     * 10
     *
     * @param dustTransferRequest (required)
     * @return ApiResponse&lt;DustTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Dust Transfer </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/Dust-Transfer">Dust Transfer
     *     (USER_DATA) Documentation</a>
     */
    public ApiResponse<DustTransferResponse> dustTransfer(
            @Valid @NotNull DustTransferRequest dustTransferRequest) throws ApiException {
        okhttp3.Call localVarCall = dustTransferValidateBeforeCall(dustTransferRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<DustTransferResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for dustlog
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> DustLog </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/dust-log">DustLog(USER_DATA)
     *     Documentation</a>
     */
    private okhttp3.Call dustlogCall(Long startTime, Long endTime, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/dribblet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dustlogValidateBeforeCall(Long startTime, Long endTime, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {startTime, endTime, recvWindow};
            Method method =
                    this.getClass().getMethod("dustlog", Long.class, Long.class, Long.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return dustlogCall(startTime, endTime, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * DustLog(USER_DATA) Dustlog * Only return last 100 records * Only return records after
     * 2020/12/01 Weight: 1
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;DustlogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> DustLog </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/dust-log">DustLog(USER_DATA)
     *     Documentation</a>
     */
    public ApiResponse<DustlogResponse> dustlog(Long startTime, Long endTime, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall = dustlogValidateBeforeCall(startTime, endTime, recvWindow);
        java.lang.reflect.Type localVarReturnType = new TypeToken<DustlogResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for fundingWallet
     *
     * @param fundingWalletRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Funding Wallet </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/Funding-Wallet">Funding Wallet
     *     (USER_DATA) Documentation</a>
     */
    private okhttp3.Call fundingWalletCall(FundingWalletRequest fundingWalletRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/get-funding-asset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fundingWalletRequest.getAsset() != null) {
            localVarFormParams.put("asset", fundingWalletRequest.getAsset());
        }

        if (fundingWalletRequest.getNeedBtcValuation() != null) {
            localVarFormParams.put("needBtcValuation", fundingWalletRequest.getNeedBtcValuation());
        }

        if (fundingWalletRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", fundingWalletRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fundingWalletValidateBeforeCall(FundingWalletRequest fundingWalletRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {fundingWalletRequest};
            Method method = this.getClass().getMethod("fundingWallet", FundingWalletRequest.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return fundingWalletCall(fundingWalletRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Funding Wallet (USER_DATA) Query Funding Wallet * Currently supports querying the following
     * business assets：Binance Pay, Binance Card, Binance Gift Card, Stock Token Weight: 1
     *
     * @param fundingWalletRequest (required)
     * @return ApiResponse&lt;FundingWalletResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Funding Wallet </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/Funding-Wallet">Funding Wallet
     *     (USER_DATA) Documentation</a>
     */
    public ApiResponse<FundingWalletResponse> fundingWallet(
            @Valid @NotNull FundingWalletRequest fundingWalletRequest) throws ApiException {
        okhttp3.Call localVarCall = fundingWalletValidateBeforeCall(fundingWalletRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FundingWalletResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getAssetsThatCanBeConvertedIntoBnb
     *
     * @param getAssetsThatCanBeConvertedIntoBnbRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Assets That Can Be Converted Into BNB </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/assets-can-convert-bnb">Get
     *     Assets That Can Be Converted Into BNB (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getAssetsThatCanBeConvertedIntoBnbCall(
            GetAssetsThatCanBeConvertedIntoBnbRequest getAssetsThatCanBeConvertedIntoBnbRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/dust-btc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (getAssetsThatCanBeConvertedIntoBnbRequest.getAccountType() != null) {
            localVarFormParams.put(
                    "accountType", getAssetsThatCanBeConvertedIntoBnbRequest.getAccountType());
        }

        if (getAssetsThatCanBeConvertedIntoBnbRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", getAssetsThatCanBeConvertedIntoBnbRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssetsThatCanBeConvertedIntoBnbValidateBeforeCall(
            GetAssetsThatCanBeConvertedIntoBnbRequest getAssetsThatCanBeConvertedIntoBnbRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {getAssetsThatCanBeConvertedIntoBnbRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getAssetsThatCanBeConvertedIntoBnb",
                                    GetAssetsThatCanBeConvertedIntoBnbRequest.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getAssetsThatCanBeConvertedIntoBnbCall(
                        getAssetsThatCanBeConvertedIntoBnbRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Assets That Can Be Converted Into BNB (USER_DATA) Get Assets That Can Be Converted Into
     * BNB Weight: 1
     *
     * @param getAssetsThatCanBeConvertedIntoBnbRequest (required)
     * @return ApiResponse&lt;GetAssetsThatCanBeConvertedIntoBnbResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Assets That Can Be Converted Into BNB </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/assets-can-convert-bnb">Get
     *     Assets That Can Be Converted Into BNB (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetAssetsThatCanBeConvertedIntoBnbResponse>
            getAssetsThatCanBeConvertedIntoBnb(
                    @Valid @NotNull
                            GetAssetsThatCanBeConvertedIntoBnbRequest
                                    getAssetsThatCanBeConvertedIntoBnbRequest)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getAssetsThatCanBeConvertedIntoBnbValidateBeforeCall(
                        getAssetsThatCanBeConvertedIntoBnbRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetAssetsThatCanBeConvertedIntoBnbResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getCloudMiningPaymentAndRefundHistory
     *
     * @param startTime (required)
     * @param endTime (required)
     * @param tranId The transaction id (optional)
     * @param clientTranId The unique flag (optional)
     * @param asset (optional)
     * @param current current page, default 1, the min value is 1 (optional)
     * @param size page size, default 10, the max value is 100 (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Cloud-Mining payment and refund history </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/asset/cloud-mining-payment-and-refund-history">Get
     *     Cloud-Mining payment and refund history (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getCloudMiningPaymentAndRefundHistoryCall(
            Long startTime,
            Long endTime,
            Long tranId,
            String clientTranId,
            String asset,
            Long current,
            Long size)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/ledger-transfer/cloud-mining/queryByPage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tranId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tranId", tranId));
        }

        if (clientTranId != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("clientTranId", clientTranId));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCloudMiningPaymentAndRefundHistoryValidateBeforeCall(
            Long startTime,
            Long endTime,
            Long tranId,
            String clientTranId,
            String asset,
            Long current,
            Long size)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                startTime, endTime, tranId, clientTranId, asset, current, size
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getCloudMiningPaymentAndRefundHistory",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getCloudMiningPaymentAndRefundHistoryCall(
                        startTime, endTime, tranId, clientTranId, asset, current, size);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Cloud-Mining payment and refund history (USER_DATA) The query of Cloud-Mining payment and
     * refund history * Just return the SUCCESS records of payment and refund. * For response, type
     * &#x3D; 248 means payment, type &#x3D; 249 means refund, status &#x3D;S means SUCCESS. Weight:
     * 600
     *
     * @param startTime (required)
     * @param endTime (required)
     * @param tranId The transaction id (optional)
     * @param clientTranId The unique flag (optional)
     * @param asset (optional)
     * @param current current page, default 1, the min value is 1 (optional)
     * @param size page size, default 10, the max value is 100 (optional)
     * @return ApiResponse&lt;GetCloudMiningPaymentAndRefundHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Cloud-Mining payment and refund history </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/asset/cloud-mining-payment-and-refund-history">Get
     *     Cloud-Mining payment and refund history (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetCloudMiningPaymentAndRefundHistoryResponse>
            getCloudMiningPaymentAndRefundHistory(
                    @NotNull Long startTime,
                    @NotNull Long endTime,
                    Long tranId,
                    String clientTranId,
                    String asset,
                    Long current,
                    Long size)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getCloudMiningPaymentAndRefundHistoryValidateBeforeCall(
                        startTime, endTime, tranId, clientTranId, asset, current, size);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetCloudMiningPaymentAndRefundHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getOpenSymbolList
     *
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Open Symbol List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/open-symbol-list">Get Open
     *     Symbol List (MARKET_DATA) Documentation</a>
     */
    private okhttp3.Call getOpenSymbolListCall() throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/spot/open-symbol-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOpenSymbolListValidateBeforeCall() throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {};
            Method method = this.getClass().getMethod("getOpenSymbolList");
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getOpenSymbolListCall();
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Open Symbol List (MARKET_DATA) Get the list of symbols that are scheduled to be opened
     * for trading in the market. Weight: 100
     *
     * @return ApiResponse&lt;GetOpenSymbolListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Open Symbol List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/open-symbol-list">Get Open
     *     Symbol List (MARKET_DATA) Documentation</a>
     */
    public ApiResponse<GetOpenSymbolListResponse> getOpenSymbolList() throws ApiException {
        okhttp3.Call localVarCall = getOpenSymbolListValidateBeforeCall();
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetOpenSymbolListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryUserDelegationHistory
     *
     * @param email (required)
     * @param startTime (required)
     * @param endTime (required)
     * @param type Delegate/Undelegate (optional)
     * @param asset (optional)
     * @param current current page, default 1, the min value is 1 (optional)
     * @param size page size, default 10, the max value is 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Delegation History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/query-user-delegation">Query
     *     User Delegation History(For Master Account)(USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryUserDelegationHistoryCall(
            String email,
            Long startTime,
            Long endTime,
            String type,
            String asset,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/custody/transfer-history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryUserDelegationHistoryValidateBeforeCall(
            String email,
            Long startTime,
            Long endTime,
            String type,
            String asset,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                email, startTime, endTime, type, asset, current, size, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryUserDelegationHistory",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryUserDelegationHistoryCall(
                        email, startTime, endTime, type, asset, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query User Delegation History(For Master Account)(USER_DATA) Query User Delegation History *
     * You need to open Enable Spot &amp; Margin Trading permission for the API Key which requests
     * this endpoint Weight: 60
     *
     * @param email (required)
     * @param startTime (required)
     * @param endTime (required)
     * @param type Delegate/Undelegate (optional)
     * @param asset (optional)
     * @param current current page, default 1, the min value is 1 (optional)
     * @param size page size, default 10, the max value is 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryUserDelegationHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Delegation History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/query-user-delegation">Query
     *     User Delegation History(For Master Account)(USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryUserDelegationHistoryResponse> queryUserDelegationHistory(
            @NotNull String email,
            @NotNull Long startTime,
            @NotNull Long endTime,
            String type,
            String asset,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                queryUserDelegationHistoryValidateBeforeCall(
                        email, startTime, endTime, type, asset, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryUserDelegationHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryUserUniversalTransferHistory
     *
     * @param type (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current current page, default 1, the min value is 1 (optional)
     * @param size page size, default 10, the max value is 100 (optional)
     * @param fromSymbol (optional)
     * @param toSymbol (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Universal Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/asset/query-user-universal-transfer">Query
     *     User Universal Transfer History(USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryUserUniversalTransferHistoryCall(
            String type,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            String fromSymbol,
            String toSymbol,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (fromSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromSymbol", fromSymbol));
        }

        if (toSymbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toSymbol", toSymbol));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryUserUniversalTransferHistoryValidateBeforeCall(
            String type,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            String fromSymbol,
            String toSymbol,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                type, startTime, endTime, current, size, fromSymbol, toSymbol, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryUserUniversalTransferHistory",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryUserUniversalTransferHistoryCall(
                        type, startTime, endTime, current, size, fromSymbol, toSymbol, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query User Universal Transfer History(USER_DATA) Query User Universal Transfer History *
     * &#x60;fromSymbol&#x60; must be sent when type are ISOLATEDMARGIN_MARGIN and
     * ISOLATEDMARGIN_ISOLATEDMARGIN * &#x60;toSymbol&#x60; must be sent when type are
     * MARGIN_ISOLATEDMARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN * Support query within the last 6
     * months only * If &#x60;startTime&#x60;and &#x60;endTime&#x60; not sent, return records of the
     * last 7 days by default Weight: 1
     *
     * @param type (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current current page, default 1, the min value is 1 (optional)
     * @param size page size, default 10, the max value is 100 (optional)
     * @param fromSymbol (optional)
     * @param toSymbol (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryUserUniversalTransferHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Universal Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/asset/query-user-universal-transfer">Query
     *     User Universal Transfer History(USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryUserUniversalTransferHistoryResponse> queryUserUniversalTransferHistory(
            @NotNull String type,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            String fromSymbol,
            String toSymbol,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                queryUserUniversalTransferHistoryValidateBeforeCall(
                        type, startTime, endTime, current, size, fromSymbol, toSymbol, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryUserUniversalTransferHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryUserWalletBalance
     *
     * @param quoteAsset &#x60;USDT&#x60;, &#x60;ETH&#x60;, &#x60;USDC&#x60;, &#x60;BNB&#x60;, etc.
     *     default &#x60;BTC&#x60; (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Wallet Balance </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/asset/Query-User-Wallet-Balance">Query
     *     User Wallet Balance (USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryUserWalletBalanceCall(String quoteAsset, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/wallet/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quoteAsset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteAsset", quoteAsset));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryUserWalletBalanceValidateBeforeCall(
            String quoteAsset, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {quoteAsset, recvWindow};
            Method method =
                    this.getClass().getMethod("queryUserWalletBalance", String.class, Long.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryUserWalletBalanceCall(quoteAsset, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query User Wallet Balance (USER_DATA) Query User Wallet Balance * You need to open Permits
     * Universal Transfer permission for the API Key which requests this endpoint. Weight: 60
     *
     * @param quoteAsset &#x60;USDT&#x60;, &#x60;ETH&#x60;, &#x60;USDC&#x60;, &#x60;BNB&#x60;, etc.
     *     default &#x60;BTC&#x60; (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryUserWalletBalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Wallet Balance </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/asset/Query-User-Wallet-Balance">Query
     *     User Wallet Balance (USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryUserWalletBalanceResponse> queryUserWalletBalance(
            String quoteAsset, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                queryUserWalletBalanceValidateBeforeCall(quoteAsset, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryUserWalletBalanceResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for toggleBnbBurnOnSpotTradeAndMarginInterest
     *
     * @param toggleBnbBurnOnSpotTradeAndMarginInterestRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Toggle BNB Burn On Spot Trade And Margin Interest </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/asset/Toggle-BNB-Burn-On-Spot-Trade-And-Margin-Interest">Toggle
     *     BNB Burn On Spot Trade And Margin Interest (USER_DATA) Documentation</a>
     */
    private okhttp3.Call toggleBnbBurnOnSpotTradeAndMarginInterestCall(
            ToggleBnbBurnOnSpotTradeAndMarginInterestRequest
                    toggleBnbBurnOnSpotTradeAndMarginInterestRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/bnbBurn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (toggleBnbBurnOnSpotTradeAndMarginInterestRequest.getSpotBNBBurn() != null) {
            localVarFormParams.put(
                    "spotBNBBurn",
                    toggleBnbBurnOnSpotTradeAndMarginInterestRequest.getSpotBNBBurn());
        }

        if (toggleBnbBurnOnSpotTradeAndMarginInterestRequest.getInterestBNBBurn() != null) {
            localVarFormParams.put(
                    "interestBNBBurn",
                    toggleBnbBurnOnSpotTradeAndMarginInterestRequest.getInterestBNBBurn());
        }

        if (toggleBnbBurnOnSpotTradeAndMarginInterestRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", toggleBnbBurnOnSpotTradeAndMarginInterestRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call toggleBnbBurnOnSpotTradeAndMarginInterestValidateBeforeCall(
            ToggleBnbBurnOnSpotTradeAndMarginInterestRequest
                    toggleBnbBurnOnSpotTradeAndMarginInterestRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {toggleBnbBurnOnSpotTradeAndMarginInterestRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "toggleBnbBurnOnSpotTradeAndMarginInterest",
                                    ToggleBnbBurnOnSpotTradeAndMarginInterestRequest.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return toggleBnbBurnOnSpotTradeAndMarginInterestCall(
                        toggleBnbBurnOnSpotTradeAndMarginInterestRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Toggle BNB Burn On Spot Trade And Margin Interest (USER_DATA) Toggle BNB Burn On Spot Trade
     * And Margin Interest * \&quot;spotBNBBurn\&quot; and \&quot;interestBNBBurn\&quot; should be
     * sent at least one. Weight: 1(IP)
     *
     * @param toggleBnbBurnOnSpotTradeAndMarginInterestRequest (required)
     * @return ApiResponse&lt;ToggleBnbBurnOnSpotTradeAndMarginInterestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Toggle BNB Burn On Spot Trade And Margin Interest </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/asset/Toggle-BNB-Burn-On-Spot-Trade-And-Margin-Interest">Toggle
     *     BNB Burn On Spot Trade And Margin Interest (USER_DATA) Documentation</a>
     */
    public ApiResponse<ToggleBnbBurnOnSpotTradeAndMarginInterestResponse>
            toggleBnbBurnOnSpotTradeAndMarginInterest(
                    @Valid @NotNull
                            ToggleBnbBurnOnSpotTradeAndMarginInterestRequest
                                    toggleBnbBurnOnSpotTradeAndMarginInterestRequest)
                    throws ApiException {
        okhttp3.Call localVarCall =
                toggleBnbBurnOnSpotTradeAndMarginInterestValidateBeforeCall(
                        toggleBnbBurnOnSpotTradeAndMarginInterestRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<ToggleBnbBurnOnSpotTradeAndMarginInterestResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for tradeFee
     *
     * @param symbol (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Trade Fee </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/Trade-Fee">Trade Fee
     *     (USER_DATA) Documentation</a>
     */
    private okhttp3.Call tradeFeeCall(String symbol, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/tradeFee";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tradeFeeValidateBeforeCall(String symbol, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {symbol, recvWindow};
            Method method = this.getClass().getMethod("tradeFee", String.class, Long.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return tradeFeeCall(symbol, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Trade Fee (USER_DATA) Fetch trade fee Weight: 1
     *
     * @param symbol (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;TradeFeeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Trade Fee </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/Trade-Fee">Trade Fee
     *     (USER_DATA) Documentation</a>
     */
    public ApiResponse<TradeFeeResponse> tradeFee(String symbol, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall = tradeFeeValidateBeforeCall(symbol, recvWindow);
        java.lang.reflect.Type localVarReturnType = new TypeToken<TradeFeeResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for userAsset
     *
     * @param userAssetRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Asset </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/user-assets">User Asset
     *     (USER_DATA) Documentation</a>
     */
    private okhttp3.Call userAssetCall(UserAssetRequest userAssetRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v3/asset/getUserAsset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userAssetRequest.getAsset() != null) {
            localVarFormParams.put("asset", userAssetRequest.getAsset());
        }

        if (userAssetRequest.getNeedBtcValuation() != null) {
            localVarFormParams.put("needBtcValuation", userAssetRequest.getNeedBtcValuation());
        }

        if (userAssetRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", userAssetRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userAssetValidateBeforeCall(UserAssetRequest userAssetRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {userAssetRequest};
            Method method = this.getClass().getMethod("userAsset", UserAssetRequest.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return userAssetCall(userAssetRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * User Asset (USER_DATA) Get user assets, just for positive data. * If asset is set, then
     * return this asset, otherwise return all assets positive. * If needBtcValuation is set, then
     * return btcValudation. Weight: 5
     *
     * @param userAssetRequest (required)
     * @return ApiResponse&lt;UserAssetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Asset </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/user-assets">User Asset
     *     (USER_DATA) Documentation</a>
     */
    public ApiResponse<UserAssetResponse> userAsset(
            @Valid @NotNull UserAssetRequest userAssetRequest) throws ApiException {
        okhttp3.Call localVarCall = userAssetValidateBeforeCall(userAssetRequest);
        java.lang.reflect.Type localVarReturnType = new TypeToken<UserAssetResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for userUniversalTransfer
     *
     * @param userUniversalTransferRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Universal Transfer </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/User-Universal-Transfer">User
     *     Universal Transfer (USER_DATA) Documentation</a>
     */
    private okhttp3.Call userUniversalTransferCall(
            UserUniversalTransferRequest userUniversalTransferRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/asset/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userUniversalTransferRequest.getType() != null) {
            localVarFormParams.put("type", userUniversalTransferRequest.getType());
        }

        if (userUniversalTransferRequest.getAsset() != null) {
            localVarFormParams.put("asset", userUniversalTransferRequest.getAsset());
        }

        if (userUniversalTransferRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(userUniversalTransferRequest.getAmount()));
        }

        if (userUniversalTransferRequest.getFromSymbol() != null) {
            localVarFormParams.put("fromSymbol", userUniversalTransferRequest.getFromSymbol());
        }

        if (userUniversalTransferRequest.getToSymbol() != null) {
            localVarFormParams.put("toSymbol", userUniversalTransferRequest.getToSymbol());
        }

        if (userUniversalTransferRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", userUniversalTransferRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userUniversalTransferValidateBeforeCall(
            UserUniversalTransferRequest userUniversalTransferRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {userUniversalTransferRequest};
            Method method =
                    this.getClass()
                            .getMethod("userUniversalTransfer", UserUniversalTransferRequest.class);
            Set<ConstraintViolation<AssetApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return userUniversalTransferCall(userUniversalTransferRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * User Universal Transfer (USER_DATA) user universal transfer * &#x60;fromSymbol&#x60; must be
     * sent when type are ISOLATEDMARGIN_MARGIN and ISOLATEDMARGIN_ISOLATEDMARGIN *
     * &#x60;toSymbol&#x60; must be sent when type are MARGIN_ISOLATEDMARGIN and
     * ISOLATEDMARGIN_ISOLATEDMARGIN * ENUM of transfer types: * MAIN_UMFUTURE Spot account transfer
     * to USDⓈ-M Futures account * MAIN_CMFUTURE Spot account transfer to COIN-M Futures account *
     * MAIN_MARGIN Spot account transfer to Margin（cross）account * UMFUTURE_MAIN USDⓈ-M Futures
     * account transfer to Spot account * UMFUTURE_MARGIN USDⓈ-M Futures account transfer to
     * Margin（cross）account * CMFUTURE_MAIN COIN-M Futures account transfer to Spot account *
     * CMFUTURE_MARGIN COIN-M Futures account transfer to Margin(cross) account * MARGIN_MAIN
     * Margin（cross）account transfer to Spot account * MARGIN_UMFUTURE Margin（cross）account transfer
     * to USDⓈ-M Futures * MARGIN_CMFUTURE Margin（cross）account transfer to COIN-M Futures *
     * ISOLATEDMARGIN_MARGIN Isolated margin account transfer to Margin(cross) account *
     * MARGIN_ISOLATEDMARGIN Margin(cross) account transfer to Isolated margin account *
     * ISOLATEDMARGIN_ISOLATEDMARGIN Isolated margin account transfer to Isolated margin account *
     * MAIN_FUNDING Spot account transfer to Funding account * FUNDING_MAIN Funding account transfer
     * to Spot account * FUNDING_UMFUTURE Funding account transfer to UMFUTURE account *
     * UMFUTURE_FUNDING UMFUTURE account transfer to Funding account * MARGIN_FUNDING MARGIN account
     * transfer to Funding account * FUNDING_MARGIN Funding account transfer to Margin account *
     * FUNDING_CMFUTURE Funding account transfer to CMFUTURE account * CMFUTURE_FUNDING CMFUTURE
     * account transfer to Funding account * MAIN_OPTION Spot account transfer to Options account *
     * OPTION_MAIN Options account transfer to Spot account * UMFUTURE_OPTION USDⓈ-M Futures account
     * transfer to Options account * OPTION_UMFUTURE Options account transfer to USDⓈ-M Futures
     * account * MARGIN_OPTION Margin（cross）account transfer to Options account * OPTION_MARGIN
     * Options account transfer to Margin（cross）account * FUNDING_OPTION Funding account transfer to
     * Options account * OPTION_FUNDING Options account transfer to Funding account *
     * MAIN_PORTFOLIO_MARGIN Spot account transfer to Portfolio Margin account *
     * PORTFOLIO_MARGIN_MAIN Portfolio Margin account transfer to Spot account Weight: 900
     *
     * @param userUniversalTransferRequest (required)
     * @return ApiResponse&lt;UserUniversalTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> User Universal Transfer </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/asset/User-Universal-Transfer">User
     *     Universal Transfer (USER_DATA) Documentation</a>
     */
    public ApiResponse<UserUniversalTransferResponse> userUniversalTransfer(
            @Valid @NotNull UserUniversalTransferRequest userUniversalTransferRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                userUniversalTransferValidateBeforeCall(userUniversalTransferRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<UserUniversalTransferResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
