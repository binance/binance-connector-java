/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetAssetsThatCanBeConvertedIntoBnbResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetAssetsThatCanBeConvertedIntoBnbResponse {
    public static final String SERIALIZED_NAME_DETAILS = "details";

    @SerializedName(SERIALIZED_NAME_DETAILS)
    @jakarta.annotation.Nullable
    private List<@Valid GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner> details;

    public static final String SERIALIZED_NAME_TOTAL_TRANSFER_BTC = "totalTransferBtc";

    @SerializedName(SERIALIZED_NAME_TOTAL_TRANSFER_BTC)
    @jakarta.annotation.Nullable
    private String totalTransferBtc;

    public static final String SERIALIZED_NAME_TOTAL_TRANSFER_B_N_B = "totalTransferBNB";

    @SerializedName(SERIALIZED_NAME_TOTAL_TRANSFER_B_N_B)
    @jakarta.annotation.Nullable
    private String totalTransferBNB;

    public static final String SERIALIZED_NAME_DRIBBLET_PERCENTAGE = "dribbletPercentage";

    @SerializedName(SERIALIZED_NAME_DRIBBLET_PERCENTAGE)
    @jakarta.annotation.Nullable
    private String dribbletPercentage;

    public GetAssetsThatCanBeConvertedIntoBnbResponse() {}

    public GetAssetsThatCanBeConvertedIntoBnbResponse details(
            @jakarta.annotation.Nullable
                    List<@Valid GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner> details) {
        this.details = details;
        return this;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponse addDetailsItem(
            GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner detailsItem) {
        if (this.details == null) {
            this.details = new ArrayList<>();
        }
        this.details.add(detailsItem);
        return this;
    }

    /**
     * Get details
     *
     * @return details
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner> getDetails() {
        return details;
    }

    public void setDetails(
            @jakarta.annotation.Nullable
                    List<@Valid GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner> details) {
        this.details = details;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponse totalTransferBtc(
            @jakarta.annotation.Nullable String totalTransferBtc) {
        this.totalTransferBtc = totalTransferBtc;
        return this;
    }

    /**
     * Get totalTransferBtc
     *
     * @return totalTransferBtc
     */
    @jakarta.annotation.Nullable
    public String getTotalTransferBtc() {
        return totalTransferBtc;
    }

    public void setTotalTransferBtc(@jakarta.annotation.Nullable String totalTransferBtc) {
        this.totalTransferBtc = totalTransferBtc;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponse totalTransferBNB(
            @jakarta.annotation.Nullable String totalTransferBNB) {
        this.totalTransferBNB = totalTransferBNB;
        return this;
    }

    /**
     * Get totalTransferBNB
     *
     * @return totalTransferBNB
     */
    @jakarta.annotation.Nullable
    public String getTotalTransferBNB() {
        return totalTransferBNB;
    }

    public void setTotalTransferBNB(@jakarta.annotation.Nullable String totalTransferBNB) {
        this.totalTransferBNB = totalTransferBNB;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponse dribbletPercentage(
            @jakarta.annotation.Nullable String dribbletPercentage) {
        this.dribbletPercentage = dribbletPercentage;
        return this;
    }

    /**
     * Get dribbletPercentage
     *
     * @return dribbletPercentage
     */
    @jakarta.annotation.Nullable
    public String getDribbletPercentage() {
        return dribbletPercentage;
    }

    public void setDribbletPercentage(@jakarta.annotation.Nullable String dribbletPercentage) {
        this.dribbletPercentage = dribbletPercentage;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAssetsThatCanBeConvertedIntoBnbResponse getAssetsThatCanBeConvertedIntoBnbResponse =
                (GetAssetsThatCanBeConvertedIntoBnbResponse) o;
        return Objects.equals(this.details, getAssetsThatCanBeConvertedIntoBnbResponse.details)
                && Objects.equals(
                        this.totalTransferBtc,
                        getAssetsThatCanBeConvertedIntoBnbResponse.totalTransferBtc)
                && Objects.equals(
                        this.totalTransferBNB,
                        getAssetsThatCanBeConvertedIntoBnbResponse.totalTransferBNB)
                && Objects.equals(
                        this.dribbletPercentage,
                        getAssetsThatCanBeConvertedIntoBnbResponse.dribbletPercentage);
    }

    @Override
    public int hashCode() {
        return Objects.hash(details, totalTransferBtc, totalTransferBNB, dribbletPercentage);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetAssetsThatCanBeConvertedIntoBnbResponse {\n");
        sb.append("		details: ").append(toIndentedString(details)).append("\n");
        sb.append("		totalTransferBtc: ").append(toIndentedString(totalTransferBtc)).append("\n");
        sb.append("		totalTransferBNB: ").append(toIndentedString(totalTransferBNB)).append("\n");
        sb.append("		dribbletPercentage: ")
                .append(toIndentedString(dribbletPercentage))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object detailsValue = getDetails();
        String detailsValueAsString = "";
        detailsValueAsString =
                (String)
                        ((Collection) detailsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("details=").append(urlEncode(detailsValueAsString)).append("");
        Object totalTransferBtcValue = getTotalTransferBtc();
        String totalTransferBtcValueAsString = "";
        totalTransferBtcValueAsString = totalTransferBtcValue.toString();
        sb.append("totalTransferBtc=").append(urlEncode(totalTransferBtcValueAsString)).append("");
        Object totalTransferBNBValue = getTotalTransferBNB();
        String totalTransferBNBValueAsString = "";
        totalTransferBNBValueAsString = totalTransferBNBValue.toString();
        sb.append("totalTransferBNB=").append(urlEncode(totalTransferBNBValueAsString)).append("");
        Object dribbletPercentageValue = getDribbletPercentage();
        String dribbletPercentageValueAsString = "";
        dribbletPercentageValueAsString = dribbletPercentageValue.toString();
        sb.append("dribbletPercentage=")
                .append(urlEncode(dribbletPercentageValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("details");
        openapiFields.add("totalTransferBtc");
        openapiFields.add("totalTransferBNB");
        openapiFields.add("dribbletPercentage");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetAssetsThatCanBeConvertedIntoBnbResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetAssetsThatCanBeConvertedIntoBnbResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetAssetsThatCanBeConvertedIntoBnbResponse is not found in"
                                    + " the empty JSON string",
                                GetAssetsThatCanBeConvertedIntoBnbResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetAssetsThatCanBeConvertedIntoBnbResponse.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetAssetsThatCanBeConvertedIntoBnbResponse` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
            JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
            if (jsonArraydetails != null) {
                // ensure the json data is an array
                if (!jsonObj.get("details").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `details` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("details").toString()));
                }

                // validate the optional field `details` (array)
                for (int i = 0; i < jsonArraydetails.size(); i++) {
                    GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.validateJsonElement(
                            jsonArraydetails.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("totalTransferBtc") != null
                        && !jsonObj.get("totalTransferBtc").isJsonNull())
                && !jsonObj.get("totalTransferBtc").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalTransferBtc` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalTransferBtc").toString()));
        }
        if ((jsonObj.get("totalTransferBNB") != null
                        && !jsonObj.get("totalTransferBNB").isJsonNull())
                && !jsonObj.get("totalTransferBNB").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalTransferBNB` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalTransferBNB").toString()));
        }
        if ((jsonObj.get("dribbletPercentage") != null
                        && !jsonObj.get("dribbletPercentage").isJsonNull())
                && !jsonObj.get("dribbletPercentage").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `dribbletPercentage` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("dribbletPercentage").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetAssetsThatCanBeConvertedIntoBnbResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetAssetsThatCanBeConvertedIntoBnbResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetAssetsThatCanBeConvertedIntoBnbResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetAssetsThatCanBeConvertedIntoBnbResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetAssetsThatCanBeConvertedIntoBnbResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, GetAssetsThatCanBeConvertedIntoBnbResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetAssetsThatCanBeConvertedIntoBnbResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetAssetsThatCanBeConvertedIntoBnbResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetAssetsThatCanBeConvertedIntoBnbResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     GetAssetsThatCanBeConvertedIntoBnbResponse
     */
    public static GetAssetsThatCanBeConvertedIntoBnbResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetAssetsThatCanBeConvertedIntoBnbResponse.class);
    }

    /**
     * Convert an instance of GetAssetsThatCanBeConvertedIntoBnbResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
