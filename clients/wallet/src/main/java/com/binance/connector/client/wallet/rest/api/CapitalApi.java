/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.wallet.rest.model.AllCoinsInformationResponse;
import com.binance.connector.client.wallet.rest.model.DepositAddressResponse;
import com.binance.connector.client.wallet.rest.model.DepositHistoryResponse;
import com.binance.connector.client.wallet.rest.model.FetchDepositAddressListWithNetworkResponse;
import com.binance.connector.client.wallet.rest.model.FetchWithdrawAddressListResponse;
import com.binance.connector.client.wallet.rest.model.OneClickArrivalDepositApplyRequest;
import com.binance.connector.client.wallet.rest.model.OneClickArrivalDepositApplyResponse;
import com.binance.connector.client.wallet.rest.model.WithdrawHistoryResponse;
import com.binance.connector.client.wallet.rest.model.WithdrawRequest;
import com.binance.connector.client.wallet.rest.model.WithdrawResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class CapitalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-wallet/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public CapitalApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public CapitalApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for allCoinsInformation
     *
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> All Coins&#39; Information </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/capital/all-coins-info">All
     *     Coins&#39; Information (USER_DATA) Documentation</a>
     */
    private okhttp3.Call allCoinsInformationCall(Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/config/getall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call allCoinsInformationValidateBeforeCall(Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method = this.getClass().getMethod("allCoinsInformation", Long.class);
            Set<ConstraintViolation<CapitalApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return allCoinsInformationCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * All Coins&#39; Information (USER_DATA) Get information of coins (available for deposit and
     * withdraw) for user. Weight: 10
     *
     * @param recvWindow (optional)
     * @return ApiResponse&lt;AllCoinsInformationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> All Coins&#39; Information </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/capital/all-coins-info">All
     *     Coins&#39; Information (USER_DATA) Documentation</a>
     */
    public ApiResponse<AllCoinsInformationResponse> allCoinsInformation(Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall = allCoinsInformationValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AllCoinsInformationResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for depositAddress
     *
     * @param coin &#x60;coin&#x60; refers to the parent network address format that the address is
     *     using (required)
     * @param network (optional)
     * @param amount (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Deposit Address </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/capital/deposite-address">Deposit
     *     Address(supporting network) (USER_DATA) Documentation</a>
     */
    private okhttp3.Call depositAddressCall(
            String coin, String network, Double amount, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/deposit/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (amount != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "amount", DecimalFormatter.getFormatter().format(amount)));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositAddressValidateBeforeCall(
            String coin, String network, Double amount, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {coin, network, amount, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "depositAddress",
                                    String.class,
                                    String.class,
                                    Double.class,
                                    Long.class);
            Set<ConstraintViolation<CapitalApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return depositAddressCall(coin, network, amount, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Deposit Address(supporting network) (USER_DATA) Fetch deposit address with network. * If
     * &#x60;network&#x60; is not send, return with default network of the coin. * You can get
     * &#x60;network&#x60; and &#x60;isDefault&#x60; in &#x60;networkList&#x60; in the response of
     * &#x60;Get /sapi/v1/capital/config/getall (HMAC SHA256)&#x60;. * &#x60;amount&#x60; needs to
     * be sent if using LIGHTNING network Weight: 10
     *
     * @param coin &#x60;coin&#x60; refers to the parent network address format that the address is
     *     using (required)
     * @param network (optional)
     * @param amount (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;DepositAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Deposit Address </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/capital/deposite-address">Deposit
     *     Address(supporting network) (USER_DATA) Documentation</a>
     */
    public ApiResponse<DepositAddressResponse> depositAddress(
            @NotNull String coin, String network, Double amount, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                depositAddressValidateBeforeCall(coin, network, amount, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<DepositAddressResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for depositHistory
     *
     * @param includeSource Default: &#x60;false&#x60;, return &#x60;sourceAddress&#x60;field when
     *     set to &#x60;true&#x60; (optional)
     * @param coin (optional)
     * @param status 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
     *     (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param offset Default: 0 (optional)
     * @param limit min 7, max 30, default 7 (optional)
     * @param recvWindow (optional)
     * @param txId (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Deposit History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/capital/deposite-history">Deposit
     *     History (supporting network) (USER_DATA) Documentation</a>
     */
    private okhttp3.Call depositHistoryCall(
            Boolean includeSource,
            String coin,
            Long status,
            Long startTime,
            Long endTime,
            Long offset,
            Long limit,
            Long recvWindow,
            String txId)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/deposit/hisrec";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeSource != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("includeSource", includeSource));
        }

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        if (txId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("txId", txId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositHistoryValidateBeforeCall(
            Boolean includeSource,
            String coin,
            Long status,
            Long startTime,
            Long endTime,
            Long offset,
            Long limit,
            Long recvWindow,
            String txId)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                includeSource, coin, status, startTime, endTime, offset, limit, recvWindow, txId
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "depositHistory",
                                    Boolean.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    String.class);
            Set<ConstraintViolation<CapitalApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return depositHistoryCall(
                        includeSource,
                        coin,
                        status,
                        startTime,
                        endTime,
                        offset,
                        limit,
                        recvWindow,
                        txId);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Deposit History (supporting network) (USER_DATA) Fetch deposit history. * Please notice the
     * default &#x60;startTime&#x60; and &#x60;endTime&#x60; to make sure that time interval is
     * within 0-90 days. * If both &#x60;&#x60;startTime&#x60;&#x60; and
     * &#x60;&#x60;endTime&#x60;&#x60; are sent, time between &#x60;&#x60;startTime&#x60;&#x60; and
     * &#x60;&#x60;endTime&#x60;&#x60; must be less than 90 days. Weight: 1
     *
     * @param includeSource Default: &#x60;false&#x60;, return &#x60;sourceAddress&#x60;field when
     *     set to &#x60;true&#x60; (optional)
     * @param coin (optional)
     * @param status 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
     *     (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param offset Default: 0 (optional)
     * @param limit min 7, max 30, default 7 (optional)
     * @param recvWindow (optional)
     * @param txId (optional)
     * @return ApiResponse&lt;DepositHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Deposit History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/capital/deposite-history">Deposit
     *     History (supporting network) (USER_DATA) Documentation</a>
     */
    public ApiResponse<DepositHistoryResponse> depositHistory(
            Boolean includeSource,
            String coin,
            Long status,
            Long startTime,
            Long endTime,
            Long offset,
            Long limit,
            Long recvWindow,
            String txId)
            throws ApiException {
        okhttp3.Call localVarCall =
                depositHistoryValidateBeforeCall(
                        includeSource,
                        coin,
                        status,
                        startTime,
                        endTime,
                        offset,
                        limit,
                        recvWindow,
                        txId);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<DepositHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for fetchDepositAddressListWithNetwork
     *
     * @param coin &#x60;coin&#x60; refers to the parent network address format that the address is
     *     using (required)
     * @param network (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Fetch deposit address list with network </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/capital/Fetch-deposit-address-list-with-network">Fetch
     *     deposit address list with network(USER_DATA) Documentation</a>
     */
    private okhttp3.Call fetchDepositAddressListWithNetworkCall(String coin, String network)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/deposit/address/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchDepositAddressListWithNetworkValidateBeforeCall(
            String coin, String network) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {coin, network};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "fetchDepositAddressListWithNetwork",
                                    String.class,
                                    String.class);
            Set<ConstraintViolation<CapitalApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return fetchDepositAddressListWithNetworkCall(coin, network);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Fetch deposit address list with network(USER_DATA) Fetch deposit address list with network. *
     * If network is not send, return with default network of the coin. * You can get network and
     * isDefault in networkList in the response of &#x60;Get /sapi/v1/capital/config/getall&#x60;.
     * Weight: 10
     *
     * @param coin &#x60;coin&#x60; refers to the parent network address format that the address is
     *     using (required)
     * @param network (optional)
     * @return ApiResponse&lt;FetchDepositAddressListWithNetworkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Fetch deposit address list with network </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/capital/Fetch-deposit-address-list-with-network">Fetch
     *     deposit address list with network(USER_DATA) Documentation</a>
     */
    public ApiResponse<FetchDepositAddressListWithNetworkResponse>
            fetchDepositAddressListWithNetwork(@NotNull String coin, String network)
                    throws ApiException {
        okhttp3.Call localVarCall =
                fetchDepositAddressListWithNetworkValidateBeforeCall(coin, network);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FetchDepositAddressListWithNetworkResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for fetchWithdrawAddressList
     *
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Fetch withdraw address list </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/capital/fetch-withdraw-address">Fetch
     *     withdraw address list (USER_DATA) Documentation</a>
     */
    private okhttp3.Call fetchWithdrawAddressListCall() throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/withdraw/address/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchWithdrawAddressListValidateBeforeCall() throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {};
            Method method = this.getClass().getMethod("fetchWithdrawAddressList");
            Set<ConstraintViolation<CapitalApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return fetchWithdrawAddressListCall();
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Fetch withdraw address list (USER_DATA) Fetch withdraw address list Weight: 10
     *
     * @return ApiResponse&lt;FetchWithdrawAddressListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Fetch withdraw address list </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/capital/fetch-withdraw-address">Fetch
     *     withdraw address list (USER_DATA) Documentation</a>
     */
    public ApiResponse<FetchWithdrawAddressListResponse> fetchWithdrawAddressList()
            throws ApiException {
        okhttp3.Call localVarCall = fetchWithdrawAddressListValidateBeforeCall();
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FetchWithdrawAddressListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for oneClickArrivalDepositApply
     *
     * @param oneClickArrivalDepositApplyRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> One click arrival deposit apply </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/capital/one-click-arrival-deposite-apply">One
     *     click arrival deposit apply (for expired address deposit) (USER_DATA) Documentation</a>
     */
    private okhttp3.Call oneClickArrivalDepositApplyCall(
            OneClickArrivalDepositApplyRequest oneClickArrivalDepositApplyRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/deposit/credit-apply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oneClickArrivalDepositApplyRequest.getDepositId() != null) {
            localVarFormParams.put("depositId", oneClickArrivalDepositApplyRequest.getDepositId());
        }

        if (oneClickArrivalDepositApplyRequest.getTxId() != null) {
            localVarFormParams.put("txId", oneClickArrivalDepositApplyRequest.getTxId());
        }

        if (oneClickArrivalDepositApplyRequest.getSubAccountId() != null) {
            localVarFormParams.put(
                    "subAccountId", oneClickArrivalDepositApplyRequest.getSubAccountId());
        }

        if (oneClickArrivalDepositApplyRequest.getSubUserId() != null) {
            localVarFormParams.put("subUserId", oneClickArrivalDepositApplyRequest.getSubUserId());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oneClickArrivalDepositApplyValidateBeforeCall(
            OneClickArrivalDepositApplyRequest oneClickArrivalDepositApplyRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {oneClickArrivalDepositApplyRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "oneClickArrivalDepositApply",
                                    OneClickArrivalDepositApplyRequest.class);
            Set<ConstraintViolation<CapitalApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return oneClickArrivalDepositApplyCall(oneClickArrivalDepositApplyRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * One click arrival deposit apply (for expired address deposit) (USER_DATA) Apply deposit
     * credit for expired address (One click arrival) * Params need to be in the POST body Weight: 1
     *
     * @param oneClickArrivalDepositApplyRequest (required)
     * @return ApiResponse&lt;OneClickArrivalDepositApplyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> One click arrival deposit apply </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/capital/one-click-arrival-deposite-apply">One
     *     click arrival deposit apply (for expired address deposit) (USER_DATA) Documentation</a>
     */
    public ApiResponse<OneClickArrivalDepositApplyResponse> oneClickArrivalDepositApply(
            @Valid @NotNull OneClickArrivalDepositApplyRequest oneClickArrivalDepositApplyRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                oneClickArrivalDepositApplyValidateBeforeCall(oneClickArrivalDepositApplyRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<OneClickArrivalDepositApplyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for withdraw
     *
     * @param withdrawRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Withdraw </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/capital/Withdraw">Withdraw(USER_DATA)
     *     Documentation</a>
     */
    private okhttp3.Call withdrawCall(WithdrawRequest withdrawRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/withdraw/apply";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withdrawRequest.getCoin() != null) {
            localVarFormParams.put("coin", withdrawRequest.getCoin());
        }

        if (withdrawRequest.getWithdrawOrderId() != null) {
            localVarFormParams.put("withdrawOrderId", withdrawRequest.getWithdrawOrderId());
        }

        if (withdrawRequest.getNetwork() != null) {
            localVarFormParams.put("network", withdrawRequest.getNetwork());
        }

        if (withdrawRequest.getAddress() != null) {
            localVarFormParams.put("address", withdrawRequest.getAddress());
        }

        if (withdrawRequest.getAddressTag() != null) {
            localVarFormParams.put("addressTag", withdrawRequest.getAddressTag());
        }

        if (withdrawRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount", DecimalFormatter.getFormatter().format(withdrawRequest.getAmount()));
        }

        if (withdrawRequest.getTransactionFeeFlag() != null) {
            localVarFormParams.put("transactionFeeFlag", withdrawRequest.getTransactionFeeFlag());
        }

        if (withdrawRequest.getName() != null) {
            localVarFormParams.put("name", withdrawRequest.getName());
        }

        if (withdrawRequest.getWalletType() != null) {
            localVarFormParams.put("walletType", withdrawRequest.getWalletType());
        }

        if (withdrawRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", withdrawRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawValidateBeforeCall(WithdrawRequest withdrawRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {withdrawRequest};
            Method method = this.getClass().getMethod("withdraw", WithdrawRequest.class);
            Set<ConstraintViolation<CapitalApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return withdrawCall(withdrawRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Withdraw(USER_DATA) Submit a withdraw request. * If &#x60;network&#x60; not send, return with
     * default network of the coin. * You can get &#x60;network&#x60; and &#x60;isDefault&#x60; in
     * &#x60;networkList&#x60; of a coin in the response of &#x60;Get /sapi/v1/capital/config/getall
     * (HMAC SHA256)&#x60;. Weight: 900
     *
     * @param withdrawRequest (required)
     * @return ApiResponse&lt;WithdrawResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Withdraw </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/wallet/capital/Withdraw">Withdraw(USER_DATA)
     *     Documentation</a>
     */
    public ApiResponse<WithdrawResponse> withdraw(@Valid @NotNull WithdrawRequest withdrawRequest)
            throws ApiException {
        okhttp3.Call localVarCall = withdrawValidateBeforeCall(withdrawRequest);
        java.lang.reflect.Type localVarReturnType = new TypeToken<WithdrawResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for withdrawHistory
     *
     * @param coin (optional)
     * @param withdrawOrderId (optional)
     * @param status 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
     *     (optional)
     * @param offset Default: 0 (optional)
     * @param limit min 7, max 30, default 7 (optional)
     * @param idList id list returned in the response of POST
     *     &#x60;/sapi/v1/capital/withdraw/apply&#x60;, separated by &#x60;,&#x60; (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Withdraw History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/capital/Withdraw-History">Withdraw
     *     History (supporting network) (USER_DATA) Documentation</a>
     */
    private okhttp3.Call withdrawHistoryCall(
            String coin,
            String withdrawOrderId,
            Long status,
            Long offset,
            Long limit,
            String idList,
            Long startTime,
            Long endTime,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/withdraw/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (withdrawOrderId != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("withdrawOrderId", withdrawOrderId));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (idList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idList", idList));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawHistoryValidateBeforeCall(
            String coin,
            String withdrawOrderId,
            Long status,
            Long offset,
            Long limit,
            String idList,
            Long startTime,
            Long endTime,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                coin, withdrawOrderId, status, offset, limit, idList, startTime, endTime, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "withdrawHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<CapitalApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return withdrawHistoryCall(
                        coin,
                        withdrawOrderId,
                        status,
                        offset,
                        limit,
                        idList,
                        startTime,
                        endTime,
                        recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Withdraw History (supporting network) (USER_DATA) Fetch withdraw history. *
     * &#x60;network&#x60; may not be in the response for old withdraw. * Please notice the default
     * &#x60;startTime&#x60; and &#x60;endTime&#x60; to make sure that time interval is within 0-90
     * days. * If both &#x60;startTime&#x60; and &#x60;endTime&#x60;are sent, time between
     * &#x60;startTime&#x60;and &#x60;endTime&#x60;must be less than 90 days. * If
     * &#x60;withdrawOrderId&#x60; is sent, time between &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; must be less than 7 days. * If &#x60;withdrawOrderId&#x60; is sent,
     * &#x60;startTime&#x60; and &#x60;endTime&#x60; are not sent, will return last 7 days records
     * by default. * Maximum support &#x60;idList&#x60; number is 45. Weight: 18000 Request limit:
     * 10 requests per second
     *
     * @param coin (optional)
     * @param withdrawOrderId (optional)
     * @param status 0(0:Email Sent, 2:Awaiting Approval 3:Rejected 4:Processing 6:Completed)
     *     (optional)
     * @param offset Default: 0 (optional)
     * @param limit min 7, max 30, default 7 (optional)
     * @param idList id list returned in the response of POST
     *     &#x60;/sapi/v1/capital/withdraw/apply&#x60;, separated by &#x60;,&#x60; (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;WithdrawHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Withdraw History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/wallet/capital/Withdraw-History">Withdraw
     *     History (supporting network) (USER_DATA) Documentation</a>
     */
    public ApiResponse<WithdrawHistoryResponse> withdrawHistory(
            String coin,
            String withdrawOrderId,
            Long status,
            Long offset,
            Long limit,
            String idList,
            Long startTime,
            Long endTime,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                withdrawHistoryValidateBeforeCall(
                        coin,
                        withdrawOrderId,
                        status,
                        offset,
                        limit,
                        idList,
                        startTime,
                        endTime,
                        recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<WithdrawHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
