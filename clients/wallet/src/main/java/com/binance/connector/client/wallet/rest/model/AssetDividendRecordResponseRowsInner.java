/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AssetDividendRecordResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AssetDividendRecordResponseRowsInner {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private Long id;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_DIV_TIME = "divTime";

    @SerializedName(SERIALIZED_NAME_DIV_TIME)
    @jakarta.annotation.Nullable
    private Long divTime;

    public static final String SERIALIZED_NAME_EN_INFO = "enInfo";

    @SerializedName(SERIALIZED_NAME_EN_INFO)
    @jakarta.annotation.Nullable
    private String enInfo;

    public static final String SERIALIZED_NAME_TRAN_ID = "tranId";

    @SerializedName(SERIALIZED_NAME_TRAN_ID)
    @jakarta.annotation.Nullable
    private Long tranId;

    public AssetDividendRecordResponseRowsInner() {}

    public AssetDividendRecordResponseRowsInner id(@jakarta.annotation.Nullable Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public Long getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable Long id) {
        this.id = id;
    }

    public AssetDividendRecordResponseRowsInner amount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public AssetDividendRecordResponseRowsInner asset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public AssetDividendRecordResponseRowsInner divTime(@jakarta.annotation.Nullable Long divTime) {
        this.divTime = divTime;
        return this;
    }

    /**
     * Get divTime
     *
     * @return divTime
     */
    @jakarta.annotation.Nullable
    public Long getDivTime() {
        return divTime;
    }

    public void setDivTime(@jakarta.annotation.Nullable Long divTime) {
        this.divTime = divTime;
    }

    public AssetDividendRecordResponseRowsInner enInfo(@jakarta.annotation.Nullable String enInfo) {
        this.enInfo = enInfo;
        return this;
    }

    /**
     * Get enInfo
     *
     * @return enInfo
     */
    @jakarta.annotation.Nullable
    public String getEnInfo() {
        return enInfo;
    }

    public void setEnInfo(@jakarta.annotation.Nullable String enInfo) {
        this.enInfo = enInfo;
    }

    public AssetDividendRecordResponseRowsInner tranId(@jakarta.annotation.Nullable Long tranId) {
        this.tranId = tranId;
        return this;
    }

    /**
     * Get tranId
     *
     * @return tranId
     */
    @jakarta.annotation.Nullable
    public Long getTranId() {
        return tranId;
    }

    public void setTranId(@jakarta.annotation.Nullable Long tranId) {
        this.tranId = tranId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AssetDividendRecordResponseRowsInner assetDividendRecordResponseRowsInner =
                (AssetDividendRecordResponseRowsInner) o;
        return Objects.equals(this.id, assetDividendRecordResponseRowsInner.id)
                && Objects.equals(this.amount, assetDividendRecordResponseRowsInner.amount)
                && Objects.equals(this.asset, assetDividendRecordResponseRowsInner.asset)
                && Objects.equals(this.divTime, assetDividendRecordResponseRowsInner.divTime)
                && Objects.equals(this.enInfo, assetDividendRecordResponseRowsInner.enInfo)
                && Objects.equals(this.tranId, assetDividendRecordResponseRowsInner.tranId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, amount, asset, divTime, enInfo, tranId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AssetDividendRecordResponseRowsInner {\n");
        sb.append("		id: ").append(toIndentedString(id)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		divTime: ").append(toIndentedString(divTime)).append("\n");
        sb.append("		enInfo: ").append(toIndentedString(enInfo)).append("\n");
        sb.append("		tranId: ").append(toIndentedString(tranId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object idValue = getId();
        String idValueAsString = "";
        idValueAsString = idValue.toString();
        sb.append("id=").append(urlEncode(idValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object divTimeValue = getDivTime();
        String divTimeValueAsString = "";
        divTimeValueAsString = divTimeValue.toString();
        sb.append("divTime=").append(urlEncode(divTimeValueAsString)).append("");
        Object enInfoValue = getEnInfo();
        String enInfoValueAsString = "";
        enInfoValueAsString = enInfoValue.toString();
        sb.append("enInfo=").append(urlEncode(enInfoValueAsString)).append("");
        Object tranIdValue = getTranId();
        String tranIdValueAsString = "";
        tranIdValueAsString = tranIdValue.toString();
        sb.append("tranId=").append(urlEncode(tranIdValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("amount");
        openapiFields.add("asset");
        openapiFields.add("divTime");
        openapiFields.add("enInfo");
        openapiFields.add("tranId");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AssetDividendRecordResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AssetDividendRecordResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AssetDividendRecordResponseRowsInner"
                                        + " is not found in the empty JSON string",
                                AssetDividendRecordResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AssetDividendRecordResponseRowsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AssetDividendRecordResponseRowsInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("enInfo") != null && !jsonObj.get("enInfo").isJsonNull())
                && !jsonObj.get("enInfo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `enInfo` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("enInfo").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AssetDividendRecordResponseRowsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AssetDividendRecordResponseRowsInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AssetDividendRecordResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AssetDividendRecordResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AssetDividendRecordResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, AssetDividendRecordResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AssetDividendRecordResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AssetDividendRecordResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AssetDividendRecordResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AssetDividendRecordResponseRowsInner
     */
    public static AssetDividendRecordResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, AssetDividendRecordResponseRowsInner.class);
    }

    /**
     * Convert an instance of AssetDividendRecordResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
