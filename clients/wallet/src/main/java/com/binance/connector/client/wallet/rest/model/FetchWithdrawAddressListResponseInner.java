/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** FetchWithdrawAddressListResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FetchWithdrawAddressListResponseInner {
    public static final String SERIALIZED_NAME_ADDRESS = "address";

    @SerializedName(SERIALIZED_NAME_ADDRESS)
    @jakarta.annotation.Nullable
    private String address;

    public static final String SERIALIZED_NAME_ADDRESS_TAG = "addressTag";

    @SerializedName(SERIALIZED_NAME_ADDRESS_TAG)
    @jakarta.annotation.Nullable
    private String addressTag;

    public static final String SERIALIZED_NAME_COIN = "coin";

    @SerializedName(SERIALIZED_NAME_COIN)
    @jakarta.annotation.Nullable
    private String coin;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    @jakarta.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_NETWORK = "network";

    @SerializedName(SERIALIZED_NAME_NETWORK)
    @jakarta.annotation.Nullable
    private String network;

    public static final String SERIALIZED_NAME_ORIGIN = "origin";

    @SerializedName(SERIALIZED_NAME_ORIGIN)
    @jakarta.annotation.Nullable
    private String origin;

    public static final String SERIALIZED_NAME_ORIGIN_TYPE = "originType";

    @SerializedName(SERIALIZED_NAME_ORIGIN_TYPE)
    @jakarta.annotation.Nullable
    private String originType;

    public static final String SERIALIZED_NAME_WHITE_STATUS = "whiteStatus";

    @SerializedName(SERIALIZED_NAME_WHITE_STATUS)
    @jakarta.annotation.Nullable
    private Boolean whiteStatus;

    public FetchWithdrawAddressListResponseInner() {}

    public FetchWithdrawAddressListResponseInner address(
            @jakarta.annotation.Nullable String address) {
        this.address = address;
        return this;
    }

    /**
     * Get address
     *
     * @return address
     */
    @jakarta.annotation.Nullable
    public String getAddress() {
        return address;
    }

    public void setAddress(@jakarta.annotation.Nullable String address) {
        this.address = address;
    }

    public FetchWithdrawAddressListResponseInner addressTag(
            @jakarta.annotation.Nullable String addressTag) {
        this.addressTag = addressTag;
        return this;
    }

    /**
     * Get addressTag
     *
     * @return addressTag
     */
    @jakarta.annotation.Nullable
    public String getAddressTag() {
        return addressTag;
    }

    public void setAddressTag(@jakarta.annotation.Nullable String addressTag) {
        this.addressTag = addressTag;
    }

    public FetchWithdrawAddressListResponseInner coin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
        return this;
    }

    /**
     * Get coin
     *
     * @return coin
     */
    @jakarta.annotation.Nullable
    public String getCoin() {
        return coin;
    }

    public void setCoin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
    }

    public FetchWithdrawAddressListResponseInner name(@jakarta.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @jakarta.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@jakarta.annotation.Nullable String name) {
        this.name = name;
    }

    public FetchWithdrawAddressListResponseInner network(
            @jakarta.annotation.Nullable String network) {
        this.network = network;
        return this;
    }

    /**
     * Get network
     *
     * @return network
     */
    @jakarta.annotation.Nullable
    public String getNetwork() {
        return network;
    }

    public void setNetwork(@jakarta.annotation.Nullable String network) {
        this.network = network;
    }

    public FetchWithdrawAddressListResponseInner origin(
            @jakarta.annotation.Nullable String origin) {
        this.origin = origin;
        return this;
    }

    /**
     * Get origin
     *
     * @return origin
     */
    @jakarta.annotation.Nullable
    public String getOrigin() {
        return origin;
    }

    public void setOrigin(@jakarta.annotation.Nullable String origin) {
        this.origin = origin;
    }

    public FetchWithdrawAddressListResponseInner originType(
            @jakarta.annotation.Nullable String originType) {
        this.originType = originType;
        return this;
    }

    /**
     * Get originType
     *
     * @return originType
     */
    @jakarta.annotation.Nullable
    public String getOriginType() {
        return originType;
    }

    public void setOriginType(@jakarta.annotation.Nullable String originType) {
        this.originType = originType;
    }

    public FetchWithdrawAddressListResponseInner whiteStatus(
            @jakarta.annotation.Nullable Boolean whiteStatus) {
        this.whiteStatus = whiteStatus;
        return this;
    }

    /**
     * Get whiteStatus
     *
     * @return whiteStatus
     */
    @jakarta.annotation.Nullable
    public Boolean getWhiteStatus() {
        return whiteStatus;
    }

    public void setWhiteStatus(@jakarta.annotation.Nullable Boolean whiteStatus) {
        this.whiteStatus = whiteStatus;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FetchWithdrawAddressListResponseInner fetchWithdrawAddressListResponseInner =
                (FetchWithdrawAddressListResponseInner) o;
        return Objects.equals(this.address, fetchWithdrawAddressListResponseInner.address)
                && Objects.equals(this.addressTag, fetchWithdrawAddressListResponseInner.addressTag)
                && Objects.equals(this.coin, fetchWithdrawAddressListResponseInner.coin)
                && Objects.equals(this.name, fetchWithdrawAddressListResponseInner.name)
                && Objects.equals(this.network, fetchWithdrawAddressListResponseInner.network)
                && Objects.equals(this.origin, fetchWithdrawAddressListResponseInner.origin)
                && Objects.equals(this.originType, fetchWithdrawAddressListResponseInner.originType)
                && Objects.equals(
                        this.whiteStatus, fetchWithdrawAddressListResponseInner.whiteStatus);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                address, addressTag, coin, name, network, origin, originType, whiteStatus);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FetchWithdrawAddressListResponseInner {\n");
        sb.append("		address: ").append(toIndentedString(address)).append("\n");
        sb.append("		addressTag: ").append(toIndentedString(addressTag)).append("\n");
        sb.append("		coin: ").append(toIndentedString(coin)).append("\n");
        sb.append("		name: ").append(toIndentedString(name)).append("\n");
        sb.append("		network: ").append(toIndentedString(network)).append("\n");
        sb.append("		origin: ").append(toIndentedString(origin)).append("\n");
        sb.append("		originType: ").append(toIndentedString(originType)).append("\n");
        sb.append("		whiteStatus: ").append(toIndentedString(whiteStatus)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object addressValue = getAddress();
        String addressValueAsString = "";
        addressValueAsString = addressValue.toString();
        sb.append("address=").append(urlEncode(addressValueAsString)).append("");
        Object addressTagValue = getAddressTag();
        String addressTagValueAsString = "";
        addressTagValueAsString = addressTagValue.toString();
        sb.append("addressTag=").append(urlEncode(addressTagValueAsString)).append("");
        Object coinValue = getCoin();
        String coinValueAsString = "";
        coinValueAsString = coinValue.toString();
        sb.append("coin=").append(urlEncode(coinValueAsString)).append("");
        Object nameValue = getName();
        String nameValueAsString = "";
        nameValueAsString = nameValue.toString();
        sb.append("name=").append(urlEncode(nameValueAsString)).append("");
        Object networkValue = getNetwork();
        String networkValueAsString = "";
        networkValueAsString = networkValue.toString();
        sb.append("network=").append(urlEncode(networkValueAsString)).append("");
        Object originValue = getOrigin();
        String originValueAsString = "";
        originValueAsString = originValue.toString();
        sb.append("origin=").append(urlEncode(originValueAsString)).append("");
        Object originTypeValue = getOriginType();
        String originTypeValueAsString = "";
        originTypeValueAsString = originTypeValue.toString();
        sb.append("originType=").append(urlEncode(originTypeValueAsString)).append("");
        Object whiteStatusValue = getWhiteStatus();
        String whiteStatusValueAsString = "";
        whiteStatusValueAsString = whiteStatusValue.toString();
        sb.append("whiteStatus=").append(urlEncode(whiteStatusValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("address");
        openapiFields.add("addressTag");
        openapiFields.add("coin");
        openapiFields.add("name");
        openapiFields.add("network");
        openapiFields.add("origin");
        openapiFields.add("originType");
        openapiFields.add("whiteStatus");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FetchWithdrawAddressListResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FetchWithdrawAddressListResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FetchWithdrawAddressListResponseInner"
                                        + " is not found in the empty JSON string",
                                FetchWithdrawAddressListResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FetchWithdrawAddressListResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `FetchWithdrawAddressListResponseInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull())
                && !jsonObj.get("address").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `address` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("address").toString()));
        }
        if ((jsonObj.get("addressTag") != null && !jsonObj.get("addressTag").isJsonNull())
                && !jsonObj.get("addressTag").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `addressTag` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("addressTag").toString()));
        }
        if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull())
                && !jsonObj.get("coin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("coin").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull())
                && !jsonObj.get("network").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `network` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("network").toString()));
        }
        if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull())
                && !jsonObj.get("origin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("origin").toString()));
        }
        if ((jsonObj.get("originType") != null && !jsonObj.get("originType").isJsonNull())
                && !jsonObj.get("originType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `originType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("originType").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FetchWithdrawAddressListResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FetchWithdrawAddressListResponseInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FetchWithdrawAddressListResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(FetchWithdrawAddressListResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FetchWithdrawAddressListResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, FetchWithdrawAddressListResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FetchWithdrawAddressListResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FetchWithdrawAddressListResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FetchWithdrawAddressListResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     FetchWithdrawAddressListResponseInner
     */
    public static FetchWithdrawAddressListResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, FetchWithdrawAddressListResponseInner.class);
    }

    /**
     * Convert an instance of FetchWithdrawAddressListResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
