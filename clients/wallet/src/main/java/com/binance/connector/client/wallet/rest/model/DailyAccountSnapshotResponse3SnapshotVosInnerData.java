/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** DailyAccountSnapshotResponse3SnapshotVosInnerData */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class DailyAccountSnapshotResponse3SnapshotVosInnerData {
    public static final String SERIALIZED_NAME_ASSETS = "assets";

    @SerializedName(SERIALIZED_NAME_ASSETS)
    @jakarta.annotation.Nullable
    private List<@Valid DailyAccountSnapshotResponse3SnapshotVosInnerDataAssetsInner> assets;

    public static final String SERIALIZED_NAME_POSITION = "position";

    @SerializedName(SERIALIZED_NAME_POSITION)
    @jakarta.annotation.Nullable
    private List<@Valid DailyAccountSnapshotResponse3SnapshotVosInnerDataPositionInner> position;

    public DailyAccountSnapshotResponse3SnapshotVosInnerData() {}

    public DailyAccountSnapshotResponse3SnapshotVosInnerData assets(
            @jakarta.annotation.Nullable
                    List<@Valid DailyAccountSnapshotResponse3SnapshotVosInnerDataAssetsInner>
                            assets) {
        this.assets = assets;
        return this;
    }

    public DailyAccountSnapshotResponse3SnapshotVosInnerData addAssetsItem(
            DailyAccountSnapshotResponse3SnapshotVosInnerDataAssetsInner assetsItem) {
        if (this.assets == null) {
            this.assets = new ArrayList<>();
        }
        this.assets.add(assetsItem);
        return this;
    }

    /**
     * Get assets
     *
     * @return assets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid DailyAccountSnapshotResponse3SnapshotVosInnerDataAssetsInner> getAssets() {
        return assets;
    }

    public void setAssets(
            @jakarta.annotation.Nullable
                    List<@Valid DailyAccountSnapshotResponse3SnapshotVosInnerDataAssetsInner>
                            assets) {
        this.assets = assets;
    }

    public DailyAccountSnapshotResponse3SnapshotVosInnerData position(
            @jakarta.annotation.Nullable
                    List<@Valid DailyAccountSnapshotResponse3SnapshotVosInnerDataPositionInner>
                            position) {
        this.position = position;
        return this;
    }

    public DailyAccountSnapshotResponse3SnapshotVosInnerData addPositionItem(
            DailyAccountSnapshotResponse3SnapshotVosInnerDataPositionInner positionItem) {
        if (this.position == null) {
            this.position = new ArrayList<>();
        }
        this.position.add(positionItem);
        return this;
    }

    /**
     * Get position
     *
     * @return position
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid DailyAccountSnapshotResponse3SnapshotVosInnerDataPositionInner>
            getPosition() {
        return position;
    }

    public void setPosition(
            @jakarta.annotation.Nullable
                    List<@Valid DailyAccountSnapshotResponse3SnapshotVosInnerDataPositionInner>
                            position) {
        this.position = position;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DailyAccountSnapshotResponse3SnapshotVosInnerData
                dailyAccountSnapshotResponse3SnapshotVosInnerData =
                        (DailyAccountSnapshotResponse3SnapshotVosInnerData) o;
        return Objects.equals(this.assets, dailyAccountSnapshotResponse3SnapshotVosInnerData.assets)
                && Objects.equals(
                        this.position, dailyAccountSnapshotResponse3SnapshotVosInnerData.position);
    }

    @Override
    public int hashCode() {
        return Objects.hash(assets, position);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DailyAccountSnapshotResponse3SnapshotVosInnerData {\n");
        sb.append("		assets: ").append(toIndentedString(assets)).append("\n");
        sb.append("		position: ").append(toIndentedString(position)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object assetsValue = getAssets();
        String assetsValueAsString = "";
        assetsValueAsString =
                (String)
                        ((Collection) assetsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("assets=").append(urlEncode(assetsValueAsString)).append("");
        Object positionValue = getPosition();
        String positionValueAsString = "";
        positionValueAsString =
                (String)
                        ((Collection) positionValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("position=").append(urlEncode(positionValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("assets");
        openapiFields.add("position");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     DailyAccountSnapshotResponse3SnapshotVosInnerData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DailyAccountSnapshotResponse3SnapshotVosInnerData.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " DailyAccountSnapshotResponse3SnapshotVosInnerData is not"
                                    + " found in the empty JSON string",
                                DailyAccountSnapshotResponse3SnapshotVosInnerData
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DailyAccountSnapshotResponse3SnapshotVosInnerData.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DailyAccountSnapshotResponse3SnapshotVosInnerData`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
            JsonArray jsonArrayassets = jsonObj.getAsJsonArray("assets");
            if (jsonArrayassets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("assets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `assets` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("assets").toString()));
                }

                // validate the optional field `assets` (array)
                for (int i = 0; i < jsonArrayassets.size(); i++) {
                    DailyAccountSnapshotResponse3SnapshotVosInnerDataAssetsInner
                            .validateJsonElement(jsonArrayassets.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
            JsonArray jsonArrayposition = jsonObj.getAsJsonArray("position");
            if (jsonArrayposition != null) {
                // ensure the json data is an array
                if (!jsonObj.get("position").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `position` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("position").toString()));
                }

                // validate the optional field `position` (array)
                for (int i = 0; i < jsonArrayposition.size(); i++) {
                    DailyAccountSnapshotResponse3SnapshotVosInnerDataPositionInner
                            .validateJsonElement(jsonArrayposition.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DailyAccountSnapshotResponse3SnapshotVosInnerData.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'DailyAccountSnapshotResponse3SnapshotVosInnerData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DailyAccountSnapshotResponse3SnapshotVosInnerData> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(DailyAccountSnapshotResponse3SnapshotVosInnerData.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DailyAccountSnapshotResponse3SnapshotVosInnerData>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                DailyAccountSnapshotResponse3SnapshotVosInnerData value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DailyAccountSnapshotResponse3SnapshotVosInnerData read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DailyAccountSnapshotResponse3SnapshotVosInnerData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DailyAccountSnapshotResponse3SnapshotVosInnerData
     * @throws IOException if the JSON string is invalid with respect to
     *     DailyAccountSnapshotResponse3SnapshotVosInnerData
     */
    public static DailyAccountSnapshotResponse3SnapshotVosInnerData fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, DailyAccountSnapshotResponse3SnapshotVosInnerData.class);
    }

    /**
     * Convert an instance of DailyAccountSnapshotResponse3SnapshotVosInnerData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
