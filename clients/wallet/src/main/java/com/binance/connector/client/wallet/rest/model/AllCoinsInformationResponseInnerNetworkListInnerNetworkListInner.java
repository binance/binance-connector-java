/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner {
    public static final String SERIALIZED_NAME_NETWORK = "network";

    @SerializedName(SERIALIZED_NAME_NETWORK)
    @jakarta.annotation.Nullable
    private String network;

    public static final String SERIALIZED_NAME_COIN = "coin";

    @SerializedName(SERIALIZED_NAME_COIN)
    @jakarta.annotation.Nullable
    private String coin;

    public static final String SERIALIZED_NAME_WITHDRAW_INTEGER_MULTIPLE =
            "withdrawIntegerMultiple";

    @SerializedName(SERIALIZED_NAME_WITHDRAW_INTEGER_MULTIPLE)
    @jakarta.annotation.Nullable
    private String withdrawIntegerMultiple;

    public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";

    @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
    @jakarta.annotation.Nullable
    private Boolean isDefault;

    public static final String SERIALIZED_NAME_DEPOSIT_ENABLE = "depositEnable";

    @SerializedName(SERIALIZED_NAME_DEPOSIT_ENABLE)
    @jakarta.annotation.Nullable
    private Boolean depositEnable;

    public static final String SERIALIZED_NAME_WITHDRAW_ENABLE = "withdrawEnable";

    @SerializedName(SERIALIZED_NAME_WITHDRAW_ENABLE)
    @jakarta.annotation.Nullable
    private Boolean withdrawEnable;

    public static final String SERIALIZED_NAME_DEPOSIT_DESC = "depositDesc";

    @SerializedName(SERIALIZED_NAME_DEPOSIT_DESC)
    @jakarta.annotation.Nullable
    private String depositDesc;

    public static final String SERIALIZED_NAME_WITHDRAW_DESC = "withdrawDesc";

    @SerializedName(SERIALIZED_NAME_WITHDRAW_DESC)
    @jakarta.annotation.Nullable
    private String withdrawDesc;

    public static final String SERIALIZED_NAME_SPECIAL_TIPS = "specialTips";

    @SerializedName(SERIALIZED_NAME_SPECIAL_TIPS)
    @jakarta.annotation.Nullable
    private String specialTips;

    public static final String SERIALIZED_NAME_SPECIAL_WITHDRAW_TIPS = "specialWithdrawTips";

    @SerializedName(SERIALIZED_NAME_SPECIAL_WITHDRAW_TIPS)
    @jakarta.annotation.Nullable
    private String specialWithdrawTips;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    @jakarta.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_RESET_ADDRESS_STATUS = "resetAddressStatus";

    @SerializedName(SERIALIZED_NAME_RESET_ADDRESS_STATUS)
    @jakarta.annotation.Nullable
    private Boolean resetAddressStatus;

    public static final String SERIALIZED_NAME_ADDRESS_REGEX = "addressRegex";

    @SerializedName(SERIALIZED_NAME_ADDRESS_REGEX)
    @jakarta.annotation.Nullable
    private String addressRegex;

    public static final String SERIALIZED_NAME_MEMO_REGEX = "memoRegex";

    @SerializedName(SERIALIZED_NAME_MEMO_REGEX)
    @jakarta.annotation.Nullable
    private String memoRegex;

    public static final String SERIALIZED_NAME_WITHDRAW_FEE = "withdrawFee";

    @SerializedName(SERIALIZED_NAME_WITHDRAW_FEE)
    @jakarta.annotation.Nullable
    private String withdrawFee;

    public static final String SERIALIZED_NAME_WITHDRAW_MIN = "withdrawMin";

    @SerializedName(SERIALIZED_NAME_WITHDRAW_MIN)
    @jakarta.annotation.Nullable
    private String withdrawMin;

    public static final String SERIALIZED_NAME_WITHDRAW_MAX = "withdrawMax";

    @SerializedName(SERIALIZED_NAME_WITHDRAW_MAX)
    @jakarta.annotation.Nullable
    private String withdrawMax;

    public static final String SERIALIZED_NAME_WITHDRAW_INTERNAL_MIN = "withdrawInternalMin";

    @SerializedName(SERIALIZED_NAME_WITHDRAW_INTERNAL_MIN)
    @jakarta.annotation.Nullable
    private String withdrawInternalMin;

    public static final String SERIALIZED_NAME_DEPOSIT_DUST = "depositDust";

    @SerializedName(SERIALIZED_NAME_DEPOSIT_DUST)
    @jakarta.annotation.Nullable
    private String depositDust;

    public static final String SERIALIZED_NAME_MIN_CONFIRM = "minConfirm";

    @SerializedName(SERIALIZED_NAME_MIN_CONFIRM)
    @jakarta.annotation.Nullable
    private Long minConfirm;

    public static final String SERIALIZED_NAME_UN_LOCK_CONFIRM = "unLockConfirm";

    @SerializedName(SERIALIZED_NAME_UN_LOCK_CONFIRM)
    @jakarta.annotation.Nullable
    private Long unLockConfirm;

    public static final String SERIALIZED_NAME_SAME_ADDRESS = "sameAddress";

    @SerializedName(SERIALIZED_NAME_SAME_ADDRESS)
    @jakarta.annotation.Nullable
    private Boolean sameAddress;

    public static final String SERIALIZED_NAME_ESTIMATED_ARRIVAL_TIME = "estimatedArrivalTime";

    @SerializedName(SERIALIZED_NAME_ESTIMATED_ARRIVAL_TIME)
    @jakarta.annotation.Nullable
    private Long estimatedArrivalTime;

    public static final String SERIALIZED_NAME_BUSY = "busy";

    @SerializedName(SERIALIZED_NAME_BUSY)
    @jakarta.annotation.Nullable
    private Boolean busy;

    public static final String SERIALIZED_NAME_CONTRACT_ADDRESS_URL = "contractAddressUrl";

    @SerializedName(SERIALIZED_NAME_CONTRACT_ADDRESS_URL)
    @jakarta.annotation.Nullable
    private String contractAddressUrl;

    public static final String SERIALIZED_NAME_CONTRACT_ADDRESS = "contractAddress";

    @SerializedName(SERIALIZED_NAME_CONTRACT_ADDRESS)
    @jakarta.annotation.Nullable
    private String contractAddress;

    public static final String SERIALIZED_NAME_DENOMINATION = "denomination";

    @SerializedName(SERIALIZED_NAME_DENOMINATION)
    @jakarta.annotation.Nullable
    private Long denomination;

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner() {}

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner network(
            @jakarta.annotation.Nullable String network) {
        this.network = network;
        return this;
    }

    /**
     * Get network
     *
     * @return network
     */
    @jakarta.annotation.Nullable
    public String getNetwork() {
        return network;
    }

    public void setNetwork(@jakarta.annotation.Nullable String network) {
        this.network = network;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner coin(
            @jakarta.annotation.Nullable String coin) {
        this.coin = coin;
        return this;
    }

    /**
     * Get coin
     *
     * @return coin
     */
    @jakarta.annotation.Nullable
    public String getCoin() {
        return coin;
    }

    public void setCoin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner withdrawIntegerMultiple(
            @jakarta.annotation.Nullable String withdrawIntegerMultiple) {
        this.withdrawIntegerMultiple = withdrawIntegerMultiple;
        return this;
    }

    /**
     * Get withdrawIntegerMultiple
     *
     * @return withdrawIntegerMultiple
     */
    @jakarta.annotation.Nullable
    public String getWithdrawIntegerMultiple() {
        return withdrawIntegerMultiple;
    }

    public void setWithdrawIntegerMultiple(
            @jakarta.annotation.Nullable String withdrawIntegerMultiple) {
        this.withdrawIntegerMultiple = withdrawIntegerMultiple;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner isDefault(
            @jakarta.annotation.Nullable Boolean isDefault) {
        this.isDefault = isDefault;
        return this;
    }

    /**
     * Get isDefault
     *
     * @return isDefault
     */
    @jakarta.annotation.Nullable
    public Boolean getIsDefault() {
        return isDefault;
    }

    public void setIsDefault(@jakarta.annotation.Nullable Boolean isDefault) {
        this.isDefault = isDefault;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner depositEnable(
            @jakarta.annotation.Nullable Boolean depositEnable) {
        this.depositEnable = depositEnable;
        return this;
    }

    /**
     * Get depositEnable
     *
     * @return depositEnable
     */
    @jakarta.annotation.Nullable
    public Boolean getDepositEnable() {
        return depositEnable;
    }

    public void setDepositEnable(@jakarta.annotation.Nullable Boolean depositEnable) {
        this.depositEnable = depositEnable;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner withdrawEnable(
            @jakarta.annotation.Nullable Boolean withdrawEnable) {
        this.withdrawEnable = withdrawEnable;
        return this;
    }

    /**
     * Get withdrawEnable
     *
     * @return withdrawEnable
     */
    @jakarta.annotation.Nullable
    public Boolean getWithdrawEnable() {
        return withdrawEnable;
    }

    public void setWithdrawEnable(@jakarta.annotation.Nullable Boolean withdrawEnable) {
        this.withdrawEnable = withdrawEnable;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner depositDesc(
            @jakarta.annotation.Nullable String depositDesc) {
        this.depositDesc = depositDesc;
        return this;
    }

    /**
     * Get depositDesc
     *
     * @return depositDesc
     */
    @jakarta.annotation.Nullable
    public String getDepositDesc() {
        return depositDesc;
    }

    public void setDepositDesc(@jakarta.annotation.Nullable String depositDesc) {
        this.depositDesc = depositDesc;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner withdrawDesc(
            @jakarta.annotation.Nullable String withdrawDesc) {
        this.withdrawDesc = withdrawDesc;
        return this;
    }

    /**
     * Get withdrawDesc
     *
     * @return withdrawDesc
     */
    @jakarta.annotation.Nullable
    public String getWithdrawDesc() {
        return withdrawDesc;
    }

    public void setWithdrawDesc(@jakarta.annotation.Nullable String withdrawDesc) {
        this.withdrawDesc = withdrawDesc;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner specialTips(
            @jakarta.annotation.Nullable String specialTips) {
        this.specialTips = specialTips;
        return this;
    }

    /**
     * Get specialTips
     *
     * @return specialTips
     */
    @jakarta.annotation.Nullable
    public String getSpecialTips() {
        return specialTips;
    }

    public void setSpecialTips(@jakarta.annotation.Nullable String specialTips) {
        this.specialTips = specialTips;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner specialWithdrawTips(
            @jakarta.annotation.Nullable String specialWithdrawTips) {
        this.specialWithdrawTips = specialWithdrawTips;
        return this;
    }

    /**
     * Get specialWithdrawTips
     *
     * @return specialWithdrawTips
     */
    @jakarta.annotation.Nullable
    public String getSpecialWithdrawTips() {
        return specialWithdrawTips;
    }

    public void setSpecialWithdrawTips(@jakarta.annotation.Nullable String specialWithdrawTips) {
        this.specialWithdrawTips = specialWithdrawTips;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner name(
            @jakarta.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @jakarta.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@jakarta.annotation.Nullable String name) {
        this.name = name;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner resetAddressStatus(
            @jakarta.annotation.Nullable Boolean resetAddressStatus) {
        this.resetAddressStatus = resetAddressStatus;
        return this;
    }

    /**
     * Get resetAddressStatus
     *
     * @return resetAddressStatus
     */
    @jakarta.annotation.Nullable
    public Boolean getResetAddressStatus() {
        return resetAddressStatus;
    }

    public void setResetAddressStatus(@jakarta.annotation.Nullable Boolean resetAddressStatus) {
        this.resetAddressStatus = resetAddressStatus;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner addressRegex(
            @jakarta.annotation.Nullable String addressRegex) {
        this.addressRegex = addressRegex;
        return this;
    }

    /**
     * Get addressRegex
     *
     * @return addressRegex
     */
    @jakarta.annotation.Nullable
    public String getAddressRegex() {
        return addressRegex;
    }

    public void setAddressRegex(@jakarta.annotation.Nullable String addressRegex) {
        this.addressRegex = addressRegex;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner memoRegex(
            @jakarta.annotation.Nullable String memoRegex) {
        this.memoRegex = memoRegex;
        return this;
    }

    /**
     * Get memoRegex
     *
     * @return memoRegex
     */
    @jakarta.annotation.Nullable
    public String getMemoRegex() {
        return memoRegex;
    }

    public void setMemoRegex(@jakarta.annotation.Nullable String memoRegex) {
        this.memoRegex = memoRegex;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner withdrawFee(
            @jakarta.annotation.Nullable String withdrawFee) {
        this.withdrawFee = withdrawFee;
        return this;
    }

    /**
     * Get withdrawFee
     *
     * @return withdrawFee
     */
    @jakarta.annotation.Nullable
    public String getWithdrawFee() {
        return withdrawFee;
    }

    public void setWithdrawFee(@jakarta.annotation.Nullable String withdrawFee) {
        this.withdrawFee = withdrawFee;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner withdrawMin(
            @jakarta.annotation.Nullable String withdrawMin) {
        this.withdrawMin = withdrawMin;
        return this;
    }

    /**
     * Get withdrawMin
     *
     * @return withdrawMin
     */
    @jakarta.annotation.Nullable
    public String getWithdrawMin() {
        return withdrawMin;
    }

    public void setWithdrawMin(@jakarta.annotation.Nullable String withdrawMin) {
        this.withdrawMin = withdrawMin;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner withdrawMax(
            @jakarta.annotation.Nullable String withdrawMax) {
        this.withdrawMax = withdrawMax;
        return this;
    }

    /**
     * Get withdrawMax
     *
     * @return withdrawMax
     */
    @jakarta.annotation.Nullable
    public String getWithdrawMax() {
        return withdrawMax;
    }

    public void setWithdrawMax(@jakarta.annotation.Nullable String withdrawMax) {
        this.withdrawMax = withdrawMax;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner withdrawInternalMin(
            @jakarta.annotation.Nullable String withdrawInternalMin) {
        this.withdrawInternalMin = withdrawInternalMin;
        return this;
    }

    /**
     * Get withdrawInternalMin
     *
     * @return withdrawInternalMin
     */
    @jakarta.annotation.Nullable
    public String getWithdrawInternalMin() {
        return withdrawInternalMin;
    }

    public void setWithdrawInternalMin(@jakarta.annotation.Nullable String withdrawInternalMin) {
        this.withdrawInternalMin = withdrawInternalMin;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner depositDust(
            @jakarta.annotation.Nullable String depositDust) {
        this.depositDust = depositDust;
        return this;
    }

    /**
     * Get depositDust
     *
     * @return depositDust
     */
    @jakarta.annotation.Nullable
    public String getDepositDust() {
        return depositDust;
    }

    public void setDepositDust(@jakarta.annotation.Nullable String depositDust) {
        this.depositDust = depositDust;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner minConfirm(
            @jakarta.annotation.Nullable Long minConfirm) {
        this.minConfirm = minConfirm;
        return this;
    }

    /**
     * Get minConfirm
     *
     * @return minConfirm
     */
    @jakarta.annotation.Nullable
    public Long getMinConfirm() {
        return minConfirm;
    }

    public void setMinConfirm(@jakarta.annotation.Nullable Long minConfirm) {
        this.minConfirm = minConfirm;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner unLockConfirm(
            @jakarta.annotation.Nullable Long unLockConfirm) {
        this.unLockConfirm = unLockConfirm;
        return this;
    }

    /**
     * Get unLockConfirm
     *
     * @return unLockConfirm
     */
    @jakarta.annotation.Nullable
    public Long getUnLockConfirm() {
        return unLockConfirm;
    }

    public void setUnLockConfirm(@jakarta.annotation.Nullable Long unLockConfirm) {
        this.unLockConfirm = unLockConfirm;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner sameAddress(
            @jakarta.annotation.Nullable Boolean sameAddress) {
        this.sameAddress = sameAddress;
        return this;
    }

    /**
     * Get sameAddress
     *
     * @return sameAddress
     */
    @jakarta.annotation.Nullable
    public Boolean getSameAddress() {
        return sameAddress;
    }

    public void setSameAddress(@jakarta.annotation.Nullable Boolean sameAddress) {
        this.sameAddress = sameAddress;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner estimatedArrivalTime(
            @jakarta.annotation.Nullable Long estimatedArrivalTime) {
        this.estimatedArrivalTime = estimatedArrivalTime;
        return this;
    }

    /**
     * Get estimatedArrivalTime
     *
     * @return estimatedArrivalTime
     */
    @jakarta.annotation.Nullable
    public Long getEstimatedArrivalTime() {
        return estimatedArrivalTime;
    }

    public void setEstimatedArrivalTime(@jakarta.annotation.Nullable Long estimatedArrivalTime) {
        this.estimatedArrivalTime = estimatedArrivalTime;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner busy(
            @jakarta.annotation.Nullable Boolean busy) {
        this.busy = busy;
        return this;
    }

    /**
     * Get busy
     *
     * @return busy
     */
    @jakarta.annotation.Nullable
    public Boolean getBusy() {
        return busy;
    }

    public void setBusy(@jakarta.annotation.Nullable Boolean busy) {
        this.busy = busy;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner contractAddressUrl(
            @jakarta.annotation.Nullable String contractAddressUrl) {
        this.contractAddressUrl = contractAddressUrl;
        return this;
    }

    /**
     * Get contractAddressUrl
     *
     * @return contractAddressUrl
     */
    @jakarta.annotation.Nullable
    public String getContractAddressUrl() {
        return contractAddressUrl;
    }

    public void setContractAddressUrl(@jakarta.annotation.Nullable String contractAddressUrl) {
        this.contractAddressUrl = contractAddressUrl;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner contractAddress(
            @jakarta.annotation.Nullable String contractAddress) {
        this.contractAddress = contractAddress;
        return this;
    }

    /**
     * Get contractAddress
     *
     * @return contractAddress
     */
    @jakarta.annotation.Nullable
    public String getContractAddress() {
        return contractAddress;
    }

    public void setContractAddress(@jakarta.annotation.Nullable String contractAddress) {
        this.contractAddress = contractAddress;
    }

    public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner denomination(
            @jakarta.annotation.Nullable Long denomination) {
        this.denomination = denomination;
        return this;
    }

    /**
     * Get denomination
     *
     * @return denomination
     */
    @jakarta.annotation.Nullable
    public Long getDenomination() {
        return denomination;
    }

    public void setDenomination(@jakarta.annotation.Nullable Long denomination) {
        this.denomination = denomination;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                allCoinsInformationResponseInnerNetworkListInnerNetworkListInner =
                        (AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner) o;
        return Objects.equals(
                        this.network,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner.network)
                && Objects.equals(
                        this.coin,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner.coin)
                && Objects.equals(
                        this.withdrawIntegerMultiple,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .withdrawIntegerMultiple)
                && Objects.equals(
                        this.isDefault,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner.isDefault)
                && Objects.equals(
                        this.depositEnable,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .depositEnable)
                && Objects.equals(
                        this.withdrawEnable,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .withdrawEnable)
                && Objects.equals(
                        this.depositDesc,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .depositDesc)
                && Objects.equals(
                        this.withdrawDesc,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .withdrawDesc)
                && Objects.equals(
                        this.specialTips,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .specialTips)
                && Objects.equals(
                        this.specialWithdrawTips,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .specialWithdrawTips)
                && Objects.equals(
                        this.name,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner.name)
                && Objects.equals(
                        this.resetAddressStatus,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .resetAddressStatus)
                && Objects.equals(
                        this.addressRegex,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .addressRegex)
                && Objects.equals(
                        this.memoRegex,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner.memoRegex)
                && Objects.equals(
                        this.withdrawFee,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .withdrawFee)
                && Objects.equals(
                        this.withdrawMin,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .withdrawMin)
                && Objects.equals(
                        this.withdrawMax,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .withdrawMax)
                && Objects.equals(
                        this.withdrawInternalMin,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .withdrawInternalMin)
                && Objects.equals(
                        this.depositDust,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .depositDust)
                && Objects.equals(
                        this.minConfirm,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner.minConfirm)
                && Objects.equals(
                        this.unLockConfirm,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .unLockConfirm)
                && Objects.equals(
                        this.sameAddress,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .sameAddress)
                && Objects.equals(
                        this.estimatedArrivalTime,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .estimatedArrivalTime)
                && Objects.equals(
                        this.busy,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner.busy)
                && Objects.equals(
                        this.contractAddressUrl,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .contractAddressUrl)
                && Objects.equals(
                        this.contractAddress,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .contractAddress)
                && Objects.equals(
                        this.denomination,
                        allCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                .denomination);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                network,
                coin,
                withdrawIntegerMultiple,
                isDefault,
                depositEnable,
                withdrawEnable,
                depositDesc,
                withdrawDesc,
                specialTips,
                specialWithdrawTips,
                name,
                resetAddressStatus,
                addressRegex,
                memoRegex,
                withdrawFee,
                withdrawMin,
                withdrawMax,
                withdrawInternalMin,
                depositDust,
                minConfirm,
                unLockConfirm,
                sameAddress,
                estimatedArrivalTime,
                busy,
                contractAddressUrl,
                contractAddress,
                denomination);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner {\n");
        sb.append("		network: ").append(toIndentedString(network)).append("\n");
        sb.append("		coin: ").append(toIndentedString(coin)).append("\n");
        sb.append("		withdrawIntegerMultiple: ")
                .append(toIndentedString(withdrawIntegerMultiple))
                .append("\n");
        sb.append("		isDefault: ").append(toIndentedString(isDefault)).append("\n");
        sb.append("		depositEnable: ").append(toIndentedString(depositEnable)).append("\n");
        sb.append("		withdrawEnable: ").append(toIndentedString(withdrawEnable)).append("\n");
        sb.append("		depositDesc: ").append(toIndentedString(depositDesc)).append("\n");
        sb.append("		withdrawDesc: ").append(toIndentedString(withdrawDesc)).append("\n");
        sb.append("		specialTips: ").append(toIndentedString(specialTips)).append("\n");
        sb.append("		specialWithdrawTips: ")
                .append(toIndentedString(specialWithdrawTips))
                .append("\n");
        sb.append("		name: ").append(toIndentedString(name)).append("\n");
        sb.append("		resetAddressStatus: ")
                .append(toIndentedString(resetAddressStatus))
                .append("\n");
        sb.append("		addressRegex: ").append(toIndentedString(addressRegex)).append("\n");
        sb.append("		memoRegex: ").append(toIndentedString(memoRegex)).append("\n");
        sb.append("		withdrawFee: ").append(toIndentedString(withdrawFee)).append("\n");
        sb.append("		withdrawMin: ").append(toIndentedString(withdrawMin)).append("\n");
        sb.append("		withdrawMax: ").append(toIndentedString(withdrawMax)).append("\n");
        sb.append("		withdrawInternalMin: ")
                .append(toIndentedString(withdrawInternalMin))
                .append("\n");
        sb.append("		depositDust: ").append(toIndentedString(depositDust)).append("\n");
        sb.append("		minConfirm: ").append(toIndentedString(minConfirm)).append("\n");
        sb.append("		unLockConfirm: ").append(toIndentedString(unLockConfirm)).append("\n");
        sb.append("		sameAddress: ").append(toIndentedString(sameAddress)).append("\n");
        sb.append("		estimatedArrivalTime: ")
                .append(toIndentedString(estimatedArrivalTime))
                .append("\n");
        sb.append("		busy: ").append(toIndentedString(busy)).append("\n");
        sb.append("		contractAddressUrl: ")
                .append(toIndentedString(contractAddressUrl))
                .append("\n");
        sb.append("		contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
        sb.append("		denomination: ").append(toIndentedString(denomination)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object networkValue = getNetwork();
        String networkValueAsString = "";
        networkValueAsString = networkValue.toString();
        sb.append("network=").append(urlEncode(networkValueAsString)).append("");
        Object coinValue = getCoin();
        String coinValueAsString = "";
        coinValueAsString = coinValue.toString();
        sb.append("coin=").append(urlEncode(coinValueAsString)).append("");
        Object withdrawIntegerMultipleValue = getWithdrawIntegerMultiple();
        String withdrawIntegerMultipleValueAsString = "";
        withdrawIntegerMultipleValueAsString = withdrawIntegerMultipleValue.toString();
        sb.append("withdrawIntegerMultiple=")
                .append(urlEncode(withdrawIntegerMultipleValueAsString))
                .append("");
        Object isDefaultValue = getIsDefault();
        String isDefaultValueAsString = "";
        isDefaultValueAsString = isDefaultValue.toString();
        sb.append("isDefault=").append(urlEncode(isDefaultValueAsString)).append("");
        Object depositEnableValue = getDepositEnable();
        String depositEnableValueAsString = "";
        depositEnableValueAsString = depositEnableValue.toString();
        sb.append("depositEnable=").append(urlEncode(depositEnableValueAsString)).append("");
        Object withdrawEnableValue = getWithdrawEnable();
        String withdrawEnableValueAsString = "";
        withdrawEnableValueAsString = withdrawEnableValue.toString();
        sb.append("withdrawEnable=").append(urlEncode(withdrawEnableValueAsString)).append("");
        Object depositDescValue = getDepositDesc();
        String depositDescValueAsString = "";
        depositDescValueAsString = depositDescValue.toString();
        sb.append("depositDesc=").append(urlEncode(depositDescValueAsString)).append("");
        Object withdrawDescValue = getWithdrawDesc();
        String withdrawDescValueAsString = "";
        withdrawDescValueAsString = withdrawDescValue.toString();
        sb.append("withdrawDesc=").append(urlEncode(withdrawDescValueAsString)).append("");
        Object specialTipsValue = getSpecialTips();
        String specialTipsValueAsString = "";
        specialTipsValueAsString = specialTipsValue.toString();
        sb.append("specialTips=").append(urlEncode(specialTipsValueAsString)).append("");
        Object specialWithdrawTipsValue = getSpecialWithdrawTips();
        String specialWithdrawTipsValueAsString = "";
        specialWithdrawTipsValueAsString = specialWithdrawTipsValue.toString();
        sb.append("specialWithdrawTips=")
                .append(urlEncode(specialWithdrawTipsValueAsString))
                .append("");
        Object nameValue = getName();
        String nameValueAsString = "";
        nameValueAsString = nameValue.toString();
        sb.append("name=").append(urlEncode(nameValueAsString)).append("");
        Object resetAddressStatusValue = getResetAddressStatus();
        String resetAddressStatusValueAsString = "";
        resetAddressStatusValueAsString = resetAddressStatusValue.toString();
        sb.append("resetAddressStatus=")
                .append(urlEncode(resetAddressStatusValueAsString))
                .append("");
        Object addressRegexValue = getAddressRegex();
        String addressRegexValueAsString = "";
        addressRegexValueAsString = addressRegexValue.toString();
        sb.append("addressRegex=").append(urlEncode(addressRegexValueAsString)).append("");
        Object memoRegexValue = getMemoRegex();
        String memoRegexValueAsString = "";
        memoRegexValueAsString = memoRegexValue.toString();
        sb.append("memoRegex=").append(urlEncode(memoRegexValueAsString)).append("");
        Object withdrawFeeValue = getWithdrawFee();
        String withdrawFeeValueAsString = "";
        withdrawFeeValueAsString = withdrawFeeValue.toString();
        sb.append("withdrawFee=").append(urlEncode(withdrawFeeValueAsString)).append("");
        Object withdrawMinValue = getWithdrawMin();
        String withdrawMinValueAsString = "";
        withdrawMinValueAsString = withdrawMinValue.toString();
        sb.append("withdrawMin=").append(urlEncode(withdrawMinValueAsString)).append("");
        Object withdrawMaxValue = getWithdrawMax();
        String withdrawMaxValueAsString = "";
        withdrawMaxValueAsString = withdrawMaxValue.toString();
        sb.append("withdrawMax=").append(urlEncode(withdrawMaxValueAsString)).append("");
        Object withdrawInternalMinValue = getWithdrawInternalMin();
        String withdrawInternalMinValueAsString = "";
        withdrawInternalMinValueAsString = withdrawInternalMinValue.toString();
        sb.append("withdrawInternalMin=")
                .append(urlEncode(withdrawInternalMinValueAsString))
                .append("");
        Object depositDustValue = getDepositDust();
        String depositDustValueAsString = "";
        depositDustValueAsString = depositDustValue.toString();
        sb.append("depositDust=").append(urlEncode(depositDustValueAsString)).append("");
        Object minConfirmValue = getMinConfirm();
        String minConfirmValueAsString = "";
        minConfirmValueAsString = minConfirmValue.toString();
        sb.append("minConfirm=").append(urlEncode(minConfirmValueAsString)).append("");
        Object unLockConfirmValue = getUnLockConfirm();
        String unLockConfirmValueAsString = "";
        unLockConfirmValueAsString = unLockConfirmValue.toString();
        sb.append("unLockConfirm=").append(urlEncode(unLockConfirmValueAsString)).append("");
        Object sameAddressValue = getSameAddress();
        String sameAddressValueAsString = "";
        sameAddressValueAsString = sameAddressValue.toString();
        sb.append("sameAddress=").append(urlEncode(sameAddressValueAsString)).append("");
        Object estimatedArrivalTimeValue = getEstimatedArrivalTime();
        String estimatedArrivalTimeValueAsString = "";
        estimatedArrivalTimeValueAsString = estimatedArrivalTimeValue.toString();
        sb.append("estimatedArrivalTime=")
                .append(urlEncode(estimatedArrivalTimeValueAsString))
                .append("");
        Object busyValue = getBusy();
        String busyValueAsString = "";
        busyValueAsString = busyValue.toString();
        sb.append("busy=").append(urlEncode(busyValueAsString)).append("");
        Object contractAddressUrlValue = getContractAddressUrl();
        String contractAddressUrlValueAsString = "";
        contractAddressUrlValueAsString = contractAddressUrlValue.toString();
        sb.append("contractAddressUrl=")
                .append(urlEncode(contractAddressUrlValueAsString))
                .append("");
        Object contractAddressValue = getContractAddress();
        String contractAddressValueAsString = "";
        contractAddressValueAsString = contractAddressValue.toString();
        sb.append("contractAddress=").append(urlEncode(contractAddressValueAsString)).append("");
        Object denominationValue = getDenomination();
        String denominationValueAsString = "";
        denominationValueAsString = denominationValue.toString();
        sb.append("denomination=").append(urlEncode(denominationValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("network");
        openapiFields.add("coin");
        openapiFields.add("withdrawIntegerMultiple");
        openapiFields.add("isDefault");
        openapiFields.add("depositEnable");
        openapiFields.add("withdrawEnable");
        openapiFields.add("depositDesc");
        openapiFields.add("withdrawDesc");
        openapiFields.add("specialTips");
        openapiFields.add("specialWithdrawTips");
        openapiFields.add("name");
        openapiFields.add("resetAddressStatus");
        openapiFields.add("addressRegex");
        openapiFields.add("memoRegex");
        openapiFields.add("withdrawFee");
        openapiFields.add("withdrawMin");
        openapiFields.add("withdrawMax");
        openapiFields.add("withdrawInternalMin");
        openapiFields.add("depositDust");
        openapiFields.add("minConfirm");
        openapiFields.add("unLockConfirm");
        openapiFields.add("sameAddress");
        openapiFields.add("estimatedArrivalTime");
        openapiFields.add("busy");
        openapiFields.add("contractAddressUrl");
        openapiFields.add("contractAddress");
        openapiFields.add("denomination");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner"
                                    + " is not found in the empty JSON string",
                                AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner.openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull())
                && !jsonObj.get("network").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `network` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("network").toString()));
        }
        if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull())
                && !jsonObj.get("coin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("coin").toString()));
        }
        if ((jsonObj.get("withdrawIntegerMultiple") != null
                        && !jsonObj.get("withdrawIntegerMultiple").isJsonNull())
                && !jsonObj.get("withdrawIntegerMultiple").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `withdrawIntegerMultiple` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("withdrawIntegerMultiple").toString()));
        }
        if ((jsonObj.get("depositDesc") != null && !jsonObj.get("depositDesc").isJsonNull())
                && !jsonObj.get("depositDesc").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `depositDesc` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("depositDesc").toString()));
        }
        if ((jsonObj.get("withdrawDesc") != null && !jsonObj.get("withdrawDesc").isJsonNull())
                && !jsonObj.get("withdrawDesc").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `withdrawDesc` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("withdrawDesc").toString()));
        }
        if ((jsonObj.get("specialTips") != null && !jsonObj.get("specialTips").isJsonNull())
                && !jsonObj.get("specialTips").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `specialTips` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("specialTips").toString()));
        }
        if ((jsonObj.get("specialWithdrawTips") != null
                        && !jsonObj.get("specialWithdrawTips").isJsonNull())
                && !jsonObj.get("specialWithdrawTips").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `specialWithdrawTips` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("specialWithdrawTips").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("addressRegex") != null && !jsonObj.get("addressRegex").isJsonNull())
                && !jsonObj.get("addressRegex").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `addressRegex` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("addressRegex").toString()));
        }
        if ((jsonObj.get("memoRegex") != null && !jsonObj.get("memoRegex").isJsonNull())
                && !jsonObj.get("memoRegex").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `memoRegex` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("memoRegex").toString()));
        }
        if ((jsonObj.get("withdrawFee") != null && !jsonObj.get("withdrawFee").isJsonNull())
                && !jsonObj.get("withdrawFee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `withdrawFee` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("withdrawFee").toString()));
        }
        if ((jsonObj.get("withdrawMin") != null && !jsonObj.get("withdrawMin").isJsonNull())
                && !jsonObj.get("withdrawMin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `withdrawMin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("withdrawMin").toString()));
        }
        if ((jsonObj.get("withdrawMax") != null && !jsonObj.get("withdrawMax").isJsonNull())
                && !jsonObj.get("withdrawMax").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `withdrawMax` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("withdrawMax").toString()));
        }
        if ((jsonObj.get("withdrawInternalMin") != null
                        && !jsonObj.get("withdrawInternalMin").isJsonNull())
                && !jsonObj.get("withdrawInternalMin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `withdrawInternalMin` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("withdrawInternalMin").toString()));
        }
        if ((jsonObj.get("depositDust") != null && !jsonObj.get("depositDust").isJsonNull())
                && !jsonObj.get("depositDust").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `depositDust` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("depositDust").toString()));
        }
        if ((jsonObj.get("contractAddressUrl") != null
                        && !jsonObj.get("contractAddressUrl").isJsonNull())
                && !jsonObj.get("contractAddressUrl").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `contractAddressUrl` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("contractAddressUrl").toString()));
        }
        if ((jsonObj.get("contractAddress") != null && !jsonObj.get("contractAddress").isJsonNull())
                && !jsonObj.get("contractAddress").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `contractAddress` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("contractAddress").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                        value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner
                                read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner given
     * an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner
     */
    public static AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner.class);
    }

    /**
     * Convert an instance of AllCoinsInformationResponseInnerNetworkListInnerNetworkListInner to an
     * JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
