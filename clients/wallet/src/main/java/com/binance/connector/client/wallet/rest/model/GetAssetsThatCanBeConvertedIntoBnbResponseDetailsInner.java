/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner {
    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_ASSET_FULL_NAME = "assetFullName";

    @SerializedName(SERIALIZED_NAME_ASSET_FULL_NAME)
    @jakarta.annotation.Nullable
    private String assetFullName;

    public static final String SERIALIZED_NAME_AMOUNT_FREE = "amountFree";

    @SerializedName(SERIALIZED_NAME_AMOUNT_FREE)
    @jakarta.annotation.Nullable
    private String amountFree;

    public static final String SERIALIZED_NAME_TO_B_T_C = "toBTC";

    @SerializedName(SERIALIZED_NAME_TO_B_T_C)
    @jakarta.annotation.Nullable
    private String toBTC;

    public static final String SERIALIZED_NAME_TO_B_N_B = "toBNB";

    @SerializedName(SERIALIZED_NAME_TO_B_N_B)
    @jakarta.annotation.Nullable
    private String toBNB;

    public static final String SERIALIZED_NAME_TO_B_N_B_OFF_EXCHANGE = "toBNBOffExchange";

    @SerializedName(SERIALIZED_NAME_TO_B_N_B_OFF_EXCHANGE)
    @jakarta.annotation.Nullable
    private String toBNBOffExchange;

    public static final String SERIALIZED_NAME_EXCHANGE = "exchange";

    @SerializedName(SERIALIZED_NAME_EXCHANGE)
    @jakarta.annotation.Nullable
    private String exchange;

    public GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner() {}

    public GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner assetFullName(
            @jakarta.annotation.Nullable String assetFullName) {
        this.assetFullName = assetFullName;
        return this;
    }

    /**
     * Get assetFullName
     *
     * @return assetFullName
     */
    @jakarta.annotation.Nullable
    public String getAssetFullName() {
        return assetFullName;
    }

    public void setAssetFullName(@jakarta.annotation.Nullable String assetFullName) {
        this.assetFullName = assetFullName;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner amountFree(
            @jakarta.annotation.Nullable String amountFree) {
        this.amountFree = amountFree;
        return this;
    }

    /**
     * Get amountFree
     *
     * @return amountFree
     */
    @jakarta.annotation.Nullable
    public String getAmountFree() {
        return amountFree;
    }

    public void setAmountFree(@jakarta.annotation.Nullable String amountFree) {
        this.amountFree = amountFree;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner toBTC(
            @jakarta.annotation.Nullable String toBTC) {
        this.toBTC = toBTC;
        return this;
    }

    /**
     * Get toBTC
     *
     * @return toBTC
     */
    @jakarta.annotation.Nullable
    public String getToBTC() {
        return toBTC;
    }

    public void setToBTC(@jakarta.annotation.Nullable String toBTC) {
        this.toBTC = toBTC;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner toBNB(
            @jakarta.annotation.Nullable String toBNB) {
        this.toBNB = toBNB;
        return this;
    }

    /**
     * Get toBNB
     *
     * @return toBNB
     */
    @jakarta.annotation.Nullable
    public String getToBNB() {
        return toBNB;
    }

    public void setToBNB(@jakarta.annotation.Nullable String toBNB) {
        this.toBNB = toBNB;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner toBNBOffExchange(
            @jakarta.annotation.Nullable String toBNBOffExchange) {
        this.toBNBOffExchange = toBNBOffExchange;
        return this;
    }

    /**
     * Get toBNBOffExchange
     *
     * @return toBNBOffExchange
     */
    @jakarta.annotation.Nullable
    public String getToBNBOffExchange() {
        return toBNBOffExchange;
    }

    public void setToBNBOffExchange(@jakarta.annotation.Nullable String toBNBOffExchange) {
        this.toBNBOffExchange = toBNBOffExchange;
    }

    public GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner exchange(
            @jakarta.annotation.Nullable String exchange) {
        this.exchange = exchange;
        return this;
    }

    /**
     * Get exchange
     *
     * @return exchange
     */
    @jakarta.annotation.Nullable
    public String getExchange() {
        return exchange;
    }

    public void setExchange(@jakarta.annotation.Nullable String exchange) {
        this.exchange = exchange;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner
                getAssetsThatCanBeConvertedIntoBnbResponseDetailsInner =
                        (GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner) o;
        return Objects.equals(
                        this.asset, getAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.asset)
                && Objects.equals(
                        this.assetFullName,
                        getAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.assetFullName)
                && Objects.equals(
                        this.amountFree,
                        getAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.amountFree)
                && Objects.equals(
                        this.toBTC, getAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.toBTC)
                && Objects.equals(
                        this.toBNB, getAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.toBNB)
                && Objects.equals(
                        this.toBNBOffExchange,
                        getAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.toBNBOffExchange)
                && Objects.equals(
                        this.exchange,
                        getAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.exchange);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                asset, assetFullName, amountFree, toBTC, toBNB, toBNBOffExchange, exchange);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner {\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		assetFullName: ").append(toIndentedString(assetFullName)).append("\n");
        sb.append("		amountFree: ").append(toIndentedString(amountFree)).append("\n");
        sb.append("		toBTC: ").append(toIndentedString(toBTC)).append("\n");
        sb.append("		toBNB: ").append(toIndentedString(toBNB)).append("\n");
        sb.append("		toBNBOffExchange: ").append(toIndentedString(toBNBOffExchange)).append("\n");
        sb.append("		exchange: ").append(toIndentedString(exchange)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object assetFullNameValue = getAssetFullName();
        String assetFullNameValueAsString = "";
        assetFullNameValueAsString = assetFullNameValue.toString();
        sb.append("assetFullName=").append(urlEncode(assetFullNameValueAsString)).append("");
        Object amountFreeValue = getAmountFree();
        String amountFreeValueAsString = "";
        amountFreeValueAsString = amountFreeValue.toString();
        sb.append("amountFree=").append(urlEncode(amountFreeValueAsString)).append("");
        Object toBTCValue = getToBTC();
        String toBTCValueAsString = "";
        toBTCValueAsString = toBTCValue.toString();
        sb.append("toBTC=").append(urlEncode(toBTCValueAsString)).append("");
        Object toBNBValue = getToBNB();
        String toBNBValueAsString = "";
        toBNBValueAsString = toBNBValue.toString();
        sb.append("toBNB=").append(urlEncode(toBNBValueAsString)).append("");
        Object toBNBOffExchangeValue = getToBNBOffExchange();
        String toBNBOffExchangeValueAsString = "";
        toBNBOffExchangeValueAsString = toBNBOffExchangeValue.toString();
        sb.append("toBNBOffExchange=").append(urlEncode(toBNBOffExchangeValueAsString)).append("");
        Object exchangeValue = getExchange();
        String exchangeValueAsString = "";
        exchangeValueAsString = exchangeValue.toString();
        sb.append("exchange=").append(urlEncode(exchangeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("asset");
        openapiFields.add("assetFullName");
        openapiFields.add("amountFree");
        openapiFields.add("toBTC");
        openapiFields.add("toBNB");
        openapiFields.add("toBNBOffExchange");
        openapiFields.add("exchange");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner is"
                                    + " not found in the empty JSON string",
                                GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("assetFullName") != null && !jsonObj.get("assetFullName").isJsonNull())
                && !jsonObj.get("assetFullName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetFullName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("assetFullName").toString()));
        }
        if ((jsonObj.get("amountFree") != null && !jsonObj.get("amountFree").isJsonNull())
                && !jsonObj.get("amountFree").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amountFree` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("amountFree").toString()));
        }
        if ((jsonObj.get("toBTC") != null && !jsonObj.get("toBTC").isJsonNull())
                && !jsonObj.get("toBTC").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toBTC` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("toBTC").toString()));
        }
        if ((jsonObj.get("toBNB") != null && !jsonObj.get("toBNB").isJsonNull())
                && !jsonObj.get("toBNB").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toBNB` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("toBNB").toString()));
        }
        if ((jsonObj.get("toBNBOffExchange") != null
                        && !jsonObj.get("toBNBOffExchange").isJsonNull())
                && !jsonObj.get("toBNBOffExchange").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toBNBOffExchange` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("toBNBOffExchange").toString()));
        }
        if ((jsonObj.get("exchange") != null && !jsonObj.get("exchange").isJsonNull())
                && !jsonObj.get("exchange").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `exchange` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("exchange").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner
     */
    public static GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner.class);
    }

    /**
     * Convert an instance of GetAssetsThatCanBeConvertedIntoBnbResponseDetailsInner to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
