/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AccountInfoResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountInfoResponse {
    public static final String SERIALIZED_NAME_VIP_LEVEL = "vipLevel";

    @SerializedName(SERIALIZED_NAME_VIP_LEVEL)
    @jakarta.annotation.Nullable
    private Long vipLevel;

    public static final String SERIALIZED_NAME_IS_MARGIN_ENABLED = "isMarginEnabled";

    @SerializedName(SERIALIZED_NAME_IS_MARGIN_ENABLED)
    @jakarta.annotation.Nullable
    private Boolean isMarginEnabled;

    public static final String SERIALIZED_NAME_IS_FUTURE_ENABLED = "isFutureEnabled";

    @SerializedName(SERIALIZED_NAME_IS_FUTURE_ENABLED)
    @jakarta.annotation.Nullable
    private Boolean isFutureEnabled;

    public static final String SERIALIZED_NAME_IS_OPTIONS_ENABLED = "isOptionsEnabled";

    @SerializedName(SERIALIZED_NAME_IS_OPTIONS_ENABLED)
    @jakarta.annotation.Nullable
    private Boolean isOptionsEnabled;

    public static final String SERIALIZED_NAME_IS_PORTFOLIO_MARGIN_RETAIL_ENABLED =
            "isPortfolioMarginRetailEnabled";

    @SerializedName(SERIALIZED_NAME_IS_PORTFOLIO_MARGIN_RETAIL_ENABLED)
    @jakarta.annotation.Nullable
    private Boolean isPortfolioMarginRetailEnabled;

    public AccountInfoResponse() {}

    public AccountInfoResponse vipLevel(@jakarta.annotation.Nullable Long vipLevel) {
        this.vipLevel = vipLevel;
        return this;
    }

    /**
     * Get vipLevel
     *
     * @return vipLevel
     */
    @jakarta.annotation.Nullable
    public Long getVipLevel() {
        return vipLevel;
    }

    public void setVipLevel(@jakarta.annotation.Nullable Long vipLevel) {
        this.vipLevel = vipLevel;
    }

    public AccountInfoResponse isMarginEnabled(
            @jakarta.annotation.Nullable Boolean isMarginEnabled) {
        this.isMarginEnabled = isMarginEnabled;
        return this;
    }

    /**
     * Get isMarginEnabled
     *
     * @return isMarginEnabled
     */
    @jakarta.annotation.Nullable
    public Boolean getIsMarginEnabled() {
        return isMarginEnabled;
    }

    public void setIsMarginEnabled(@jakarta.annotation.Nullable Boolean isMarginEnabled) {
        this.isMarginEnabled = isMarginEnabled;
    }

    public AccountInfoResponse isFutureEnabled(
            @jakarta.annotation.Nullable Boolean isFutureEnabled) {
        this.isFutureEnabled = isFutureEnabled;
        return this;
    }

    /**
     * Get isFutureEnabled
     *
     * @return isFutureEnabled
     */
    @jakarta.annotation.Nullable
    public Boolean getIsFutureEnabled() {
        return isFutureEnabled;
    }

    public void setIsFutureEnabled(@jakarta.annotation.Nullable Boolean isFutureEnabled) {
        this.isFutureEnabled = isFutureEnabled;
    }

    public AccountInfoResponse isOptionsEnabled(
            @jakarta.annotation.Nullable Boolean isOptionsEnabled) {
        this.isOptionsEnabled = isOptionsEnabled;
        return this;
    }

    /**
     * Get isOptionsEnabled
     *
     * @return isOptionsEnabled
     */
    @jakarta.annotation.Nullable
    public Boolean getIsOptionsEnabled() {
        return isOptionsEnabled;
    }

    public void setIsOptionsEnabled(@jakarta.annotation.Nullable Boolean isOptionsEnabled) {
        this.isOptionsEnabled = isOptionsEnabled;
    }

    public AccountInfoResponse isPortfolioMarginRetailEnabled(
            @jakarta.annotation.Nullable Boolean isPortfolioMarginRetailEnabled) {
        this.isPortfolioMarginRetailEnabled = isPortfolioMarginRetailEnabled;
        return this;
    }

    /**
     * Get isPortfolioMarginRetailEnabled
     *
     * @return isPortfolioMarginRetailEnabled
     */
    @jakarta.annotation.Nullable
    public Boolean getIsPortfolioMarginRetailEnabled() {
        return isPortfolioMarginRetailEnabled;
    }

    public void setIsPortfolioMarginRetailEnabled(
            @jakarta.annotation.Nullable Boolean isPortfolioMarginRetailEnabled) {
        this.isPortfolioMarginRetailEnabled = isPortfolioMarginRetailEnabled;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountInfoResponse accountInfoResponse = (AccountInfoResponse) o;
        return Objects.equals(this.vipLevel, accountInfoResponse.vipLevel)
                && Objects.equals(this.isMarginEnabled, accountInfoResponse.isMarginEnabled)
                && Objects.equals(this.isFutureEnabled, accountInfoResponse.isFutureEnabled)
                && Objects.equals(this.isOptionsEnabled, accountInfoResponse.isOptionsEnabled)
                && Objects.equals(
                        this.isPortfolioMarginRetailEnabled,
                        accountInfoResponse.isPortfolioMarginRetailEnabled);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                vipLevel,
                isMarginEnabled,
                isFutureEnabled,
                isOptionsEnabled,
                isPortfolioMarginRetailEnabled);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountInfoResponse {\n");
        sb.append("		vipLevel: ").append(toIndentedString(vipLevel)).append("\n");
        sb.append("		isMarginEnabled: ").append(toIndentedString(isMarginEnabled)).append("\n");
        sb.append("		isFutureEnabled: ").append(toIndentedString(isFutureEnabled)).append("\n");
        sb.append("		isOptionsEnabled: ").append(toIndentedString(isOptionsEnabled)).append("\n");
        sb.append("		isPortfolioMarginRetailEnabled: ")
                .append(toIndentedString(isPortfolioMarginRetailEnabled))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object vipLevelValue = getVipLevel();
        String vipLevelValueAsString = "";
        vipLevelValueAsString = vipLevelValue.toString();
        sb.append("vipLevel=").append(urlEncode(vipLevelValueAsString)).append("");
        Object isMarginEnabledValue = getIsMarginEnabled();
        String isMarginEnabledValueAsString = "";
        isMarginEnabledValueAsString = isMarginEnabledValue.toString();
        sb.append("isMarginEnabled=").append(urlEncode(isMarginEnabledValueAsString)).append("");
        Object isFutureEnabledValue = getIsFutureEnabled();
        String isFutureEnabledValueAsString = "";
        isFutureEnabledValueAsString = isFutureEnabledValue.toString();
        sb.append("isFutureEnabled=").append(urlEncode(isFutureEnabledValueAsString)).append("");
        Object isOptionsEnabledValue = getIsOptionsEnabled();
        String isOptionsEnabledValueAsString = "";
        isOptionsEnabledValueAsString = isOptionsEnabledValue.toString();
        sb.append("isOptionsEnabled=").append(urlEncode(isOptionsEnabledValueAsString)).append("");
        Object isPortfolioMarginRetailEnabledValue = getIsPortfolioMarginRetailEnabled();
        String isPortfolioMarginRetailEnabledValueAsString = "";
        isPortfolioMarginRetailEnabledValueAsString =
                isPortfolioMarginRetailEnabledValue.toString();
        sb.append("isPortfolioMarginRetailEnabled=")
                .append(urlEncode(isPortfolioMarginRetailEnabledValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("vipLevel");
        openapiFields.add("isMarginEnabled");
        openapiFields.add("isFutureEnabled");
        openapiFields.add("isOptionsEnabled");
        openapiFields.add("isPortfolioMarginRetailEnabled");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AccountInfoResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountInfoResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountInfoResponse is not found in"
                                        + " the empty JSON string",
                                AccountInfoResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountInfoResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AccountInfoResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountInfoResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountInfoResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountInfoResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(AccountInfoResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountInfoResponse>() {
                        @Override
                        public void write(JsonWriter out, AccountInfoResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountInfoResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountInfoResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountInfoResponse
     * @throws IOException if the JSON string is invalid with respect to AccountInfoResponse
     */
    public static AccountInfoResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountInfoResponse.class);
    }

    /**
     * Convert an instance of AccountInfoResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
