/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetApiKeyPermissionResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetApiKeyPermissionResponse {
    public static final String SERIALIZED_NAME_IP_RESTRICT = "ipRestrict";

    @SerializedName(SERIALIZED_NAME_IP_RESTRICT)
    @jakarta.annotation.Nullable
    private Boolean ipRestrict;

    public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";

    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    @jakarta.annotation.Nullable
    private Long createTime;

    public static final String SERIALIZED_NAME_ENABLE_READING = "enableReading";

    @SerializedName(SERIALIZED_NAME_ENABLE_READING)
    @jakarta.annotation.Nullable
    private Boolean enableReading;

    public static final String SERIALIZED_NAME_ENABLE_WITHDRAWALS = "enableWithdrawals";

    @SerializedName(SERIALIZED_NAME_ENABLE_WITHDRAWALS)
    @jakarta.annotation.Nullable
    private Boolean enableWithdrawals;

    public static final String SERIALIZED_NAME_ENABLE_INTERNAL_TRANSFER = "enableInternalTransfer";

    @SerializedName(SERIALIZED_NAME_ENABLE_INTERNAL_TRANSFER)
    @jakarta.annotation.Nullable
    private Boolean enableInternalTransfer;

    public static final String SERIALIZED_NAME_ENABLE_MARGIN = "enableMargin";

    @SerializedName(SERIALIZED_NAME_ENABLE_MARGIN)
    @jakarta.annotation.Nullable
    private Boolean enableMargin;

    public static final String SERIALIZED_NAME_ENABLE_FUTURES = "enableFutures";

    @SerializedName(SERIALIZED_NAME_ENABLE_FUTURES)
    @jakarta.annotation.Nullable
    private Boolean enableFutures;

    public static final String SERIALIZED_NAME_PERMITS_UNIVERSAL_TRANSFER =
            "permitsUniversalTransfer";

    @SerializedName(SERIALIZED_NAME_PERMITS_UNIVERSAL_TRANSFER)
    @jakarta.annotation.Nullable
    private Boolean permitsUniversalTransfer;

    public static final String SERIALIZED_NAME_ENABLE_VANILLA_OPTIONS = "enableVanillaOptions";

    @SerializedName(SERIALIZED_NAME_ENABLE_VANILLA_OPTIONS)
    @jakarta.annotation.Nullable
    private Boolean enableVanillaOptions;

    public static final String SERIALIZED_NAME_ENABLE_FIX_API_TRADE = "enableFixApiTrade";

    @SerializedName(SERIALIZED_NAME_ENABLE_FIX_API_TRADE)
    @jakarta.annotation.Nullable
    private Boolean enableFixApiTrade;

    public static final String SERIALIZED_NAME_ENABLE_FIX_READ_ONLY = "enableFixReadOnly";

    @SerializedName(SERIALIZED_NAME_ENABLE_FIX_READ_ONLY)
    @jakarta.annotation.Nullable
    private Boolean enableFixReadOnly;

    public static final String SERIALIZED_NAME_ENABLE_SPOT_AND_MARGIN_TRADING =
            "enableSpotAndMarginTrading";

    @SerializedName(SERIALIZED_NAME_ENABLE_SPOT_AND_MARGIN_TRADING)
    @jakarta.annotation.Nullable
    private Boolean enableSpotAndMarginTrading;

    public static final String SERIALIZED_NAME_ENABLE_PORTFOLIO_MARGIN_TRADING =
            "enablePortfolioMarginTrading";

    @SerializedName(SERIALIZED_NAME_ENABLE_PORTFOLIO_MARGIN_TRADING)
    @jakarta.annotation.Nullable
    private Boolean enablePortfolioMarginTrading;

    public GetApiKeyPermissionResponse() {}

    public GetApiKeyPermissionResponse ipRestrict(@jakarta.annotation.Nullable Boolean ipRestrict) {
        this.ipRestrict = ipRestrict;
        return this;
    }

    /**
     * Get ipRestrict
     *
     * @return ipRestrict
     */
    @jakarta.annotation.Nullable
    public Boolean getIpRestrict() {
        return ipRestrict;
    }

    public void setIpRestrict(@jakarta.annotation.Nullable Boolean ipRestrict) {
        this.ipRestrict = ipRestrict;
    }

    public GetApiKeyPermissionResponse createTime(@jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get createTime
     *
     * @return createTime
     */
    @jakarta.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(@jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
    }

    public GetApiKeyPermissionResponse enableReading(
            @jakarta.annotation.Nullable Boolean enableReading) {
        this.enableReading = enableReading;
        return this;
    }

    /**
     * Get enableReading
     *
     * @return enableReading
     */
    @jakarta.annotation.Nullable
    public Boolean getEnableReading() {
        return enableReading;
    }

    public void setEnableReading(@jakarta.annotation.Nullable Boolean enableReading) {
        this.enableReading = enableReading;
    }

    public GetApiKeyPermissionResponse enableWithdrawals(
            @jakarta.annotation.Nullable Boolean enableWithdrawals) {
        this.enableWithdrawals = enableWithdrawals;
        return this;
    }

    /**
     * Get enableWithdrawals
     *
     * @return enableWithdrawals
     */
    @jakarta.annotation.Nullable
    public Boolean getEnableWithdrawals() {
        return enableWithdrawals;
    }

    public void setEnableWithdrawals(@jakarta.annotation.Nullable Boolean enableWithdrawals) {
        this.enableWithdrawals = enableWithdrawals;
    }

    public GetApiKeyPermissionResponse enableInternalTransfer(
            @jakarta.annotation.Nullable Boolean enableInternalTransfer) {
        this.enableInternalTransfer = enableInternalTransfer;
        return this;
    }

    /**
     * Get enableInternalTransfer
     *
     * @return enableInternalTransfer
     */
    @jakarta.annotation.Nullable
    public Boolean getEnableInternalTransfer() {
        return enableInternalTransfer;
    }

    public void setEnableInternalTransfer(
            @jakarta.annotation.Nullable Boolean enableInternalTransfer) {
        this.enableInternalTransfer = enableInternalTransfer;
    }

    public GetApiKeyPermissionResponse enableMargin(
            @jakarta.annotation.Nullable Boolean enableMargin) {
        this.enableMargin = enableMargin;
        return this;
    }

    /**
     * Get enableMargin
     *
     * @return enableMargin
     */
    @jakarta.annotation.Nullable
    public Boolean getEnableMargin() {
        return enableMargin;
    }

    public void setEnableMargin(@jakarta.annotation.Nullable Boolean enableMargin) {
        this.enableMargin = enableMargin;
    }

    public GetApiKeyPermissionResponse enableFutures(
            @jakarta.annotation.Nullable Boolean enableFutures) {
        this.enableFutures = enableFutures;
        return this;
    }

    /**
     * Get enableFutures
     *
     * @return enableFutures
     */
    @jakarta.annotation.Nullable
    public Boolean getEnableFutures() {
        return enableFutures;
    }

    public void setEnableFutures(@jakarta.annotation.Nullable Boolean enableFutures) {
        this.enableFutures = enableFutures;
    }

    public GetApiKeyPermissionResponse permitsUniversalTransfer(
            @jakarta.annotation.Nullable Boolean permitsUniversalTransfer) {
        this.permitsUniversalTransfer = permitsUniversalTransfer;
        return this;
    }

    /**
     * Get permitsUniversalTransfer
     *
     * @return permitsUniversalTransfer
     */
    @jakarta.annotation.Nullable
    public Boolean getPermitsUniversalTransfer() {
        return permitsUniversalTransfer;
    }

    public void setPermitsUniversalTransfer(
            @jakarta.annotation.Nullable Boolean permitsUniversalTransfer) {
        this.permitsUniversalTransfer = permitsUniversalTransfer;
    }

    public GetApiKeyPermissionResponse enableVanillaOptions(
            @jakarta.annotation.Nullable Boolean enableVanillaOptions) {
        this.enableVanillaOptions = enableVanillaOptions;
        return this;
    }

    /**
     * Get enableVanillaOptions
     *
     * @return enableVanillaOptions
     */
    @jakarta.annotation.Nullable
    public Boolean getEnableVanillaOptions() {
        return enableVanillaOptions;
    }

    public void setEnableVanillaOptions(@jakarta.annotation.Nullable Boolean enableVanillaOptions) {
        this.enableVanillaOptions = enableVanillaOptions;
    }

    public GetApiKeyPermissionResponse enableFixApiTrade(
            @jakarta.annotation.Nullable Boolean enableFixApiTrade) {
        this.enableFixApiTrade = enableFixApiTrade;
        return this;
    }

    /**
     * Get enableFixApiTrade
     *
     * @return enableFixApiTrade
     */
    @jakarta.annotation.Nullable
    public Boolean getEnableFixApiTrade() {
        return enableFixApiTrade;
    }

    public void setEnableFixApiTrade(@jakarta.annotation.Nullable Boolean enableFixApiTrade) {
        this.enableFixApiTrade = enableFixApiTrade;
    }

    public GetApiKeyPermissionResponse enableFixReadOnly(
            @jakarta.annotation.Nullable Boolean enableFixReadOnly) {
        this.enableFixReadOnly = enableFixReadOnly;
        return this;
    }

    /**
     * Get enableFixReadOnly
     *
     * @return enableFixReadOnly
     */
    @jakarta.annotation.Nullable
    public Boolean getEnableFixReadOnly() {
        return enableFixReadOnly;
    }

    public void setEnableFixReadOnly(@jakarta.annotation.Nullable Boolean enableFixReadOnly) {
        this.enableFixReadOnly = enableFixReadOnly;
    }

    public GetApiKeyPermissionResponse enableSpotAndMarginTrading(
            @jakarta.annotation.Nullable Boolean enableSpotAndMarginTrading) {
        this.enableSpotAndMarginTrading = enableSpotAndMarginTrading;
        return this;
    }

    /**
     * Get enableSpotAndMarginTrading
     *
     * @return enableSpotAndMarginTrading
     */
    @jakarta.annotation.Nullable
    public Boolean getEnableSpotAndMarginTrading() {
        return enableSpotAndMarginTrading;
    }

    public void setEnableSpotAndMarginTrading(
            @jakarta.annotation.Nullable Boolean enableSpotAndMarginTrading) {
        this.enableSpotAndMarginTrading = enableSpotAndMarginTrading;
    }

    public GetApiKeyPermissionResponse enablePortfolioMarginTrading(
            @jakarta.annotation.Nullable Boolean enablePortfolioMarginTrading) {
        this.enablePortfolioMarginTrading = enablePortfolioMarginTrading;
        return this;
    }

    /**
     * Get enablePortfolioMarginTrading
     *
     * @return enablePortfolioMarginTrading
     */
    @jakarta.annotation.Nullable
    public Boolean getEnablePortfolioMarginTrading() {
        return enablePortfolioMarginTrading;
    }

    public void setEnablePortfolioMarginTrading(
            @jakarta.annotation.Nullable Boolean enablePortfolioMarginTrading) {
        this.enablePortfolioMarginTrading = enablePortfolioMarginTrading;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetApiKeyPermissionResponse getApiKeyPermissionResponse = (GetApiKeyPermissionResponse) o;
        return Objects.equals(this.ipRestrict, getApiKeyPermissionResponse.ipRestrict)
                && Objects.equals(this.createTime, getApiKeyPermissionResponse.createTime)
                && Objects.equals(this.enableReading, getApiKeyPermissionResponse.enableReading)
                && Objects.equals(
                        this.enableWithdrawals, getApiKeyPermissionResponse.enableWithdrawals)
                && Objects.equals(
                        this.enableInternalTransfer,
                        getApiKeyPermissionResponse.enableInternalTransfer)
                && Objects.equals(this.enableMargin, getApiKeyPermissionResponse.enableMargin)
                && Objects.equals(this.enableFutures, getApiKeyPermissionResponse.enableFutures)
                && Objects.equals(
                        this.permitsUniversalTransfer,
                        getApiKeyPermissionResponse.permitsUniversalTransfer)
                && Objects.equals(
                        this.enableVanillaOptions, getApiKeyPermissionResponse.enableVanillaOptions)
                && Objects.equals(
                        this.enableFixApiTrade, getApiKeyPermissionResponse.enableFixApiTrade)
                && Objects.equals(
                        this.enableFixReadOnly, getApiKeyPermissionResponse.enableFixReadOnly)
                && Objects.equals(
                        this.enableSpotAndMarginTrading,
                        getApiKeyPermissionResponse.enableSpotAndMarginTrading)
                && Objects.equals(
                        this.enablePortfolioMarginTrading,
                        getApiKeyPermissionResponse.enablePortfolioMarginTrading);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                ipRestrict,
                createTime,
                enableReading,
                enableWithdrawals,
                enableInternalTransfer,
                enableMargin,
                enableFutures,
                permitsUniversalTransfer,
                enableVanillaOptions,
                enableFixApiTrade,
                enableFixReadOnly,
                enableSpotAndMarginTrading,
                enablePortfolioMarginTrading);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetApiKeyPermissionResponse {\n");
        sb.append("		ipRestrict: ").append(toIndentedString(ipRestrict)).append("\n");
        sb.append("		createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("		enableReading: ").append(toIndentedString(enableReading)).append("\n");
        sb.append("		enableWithdrawals: ").append(toIndentedString(enableWithdrawals)).append("\n");
        sb.append("		enableInternalTransfer: ")
                .append(toIndentedString(enableInternalTransfer))
                .append("\n");
        sb.append("		enableMargin: ").append(toIndentedString(enableMargin)).append("\n");
        sb.append("		enableFutures: ").append(toIndentedString(enableFutures)).append("\n");
        sb.append("		permitsUniversalTransfer: ")
                .append(toIndentedString(permitsUniversalTransfer))
                .append("\n");
        sb.append("		enableVanillaOptions: ")
                .append(toIndentedString(enableVanillaOptions))
                .append("\n");
        sb.append("		enableFixApiTrade: ").append(toIndentedString(enableFixApiTrade)).append("\n");
        sb.append("		enableFixReadOnly: ").append(toIndentedString(enableFixReadOnly)).append("\n");
        sb.append("		enableSpotAndMarginTrading: ")
                .append(toIndentedString(enableSpotAndMarginTrading))
                .append("\n");
        sb.append("		enablePortfolioMarginTrading: ")
                .append(toIndentedString(enablePortfolioMarginTrading))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object ipRestrictValue = getIpRestrict();
        String ipRestrictValueAsString = "";
        ipRestrictValueAsString = ipRestrictValue.toString();
        sb.append("ipRestrict=").append(urlEncode(ipRestrictValueAsString)).append("");
        Object createTimeValue = getCreateTime();
        String createTimeValueAsString = "";
        createTimeValueAsString = createTimeValue.toString();
        sb.append("createTime=").append(urlEncode(createTimeValueAsString)).append("");
        Object enableReadingValue = getEnableReading();
        String enableReadingValueAsString = "";
        enableReadingValueAsString = enableReadingValue.toString();
        sb.append("enableReading=").append(urlEncode(enableReadingValueAsString)).append("");
        Object enableWithdrawalsValue = getEnableWithdrawals();
        String enableWithdrawalsValueAsString = "";
        enableWithdrawalsValueAsString = enableWithdrawalsValue.toString();
        sb.append("enableWithdrawals=")
                .append(urlEncode(enableWithdrawalsValueAsString))
                .append("");
        Object enableInternalTransferValue = getEnableInternalTransfer();
        String enableInternalTransferValueAsString = "";
        enableInternalTransferValueAsString = enableInternalTransferValue.toString();
        sb.append("enableInternalTransfer=")
                .append(urlEncode(enableInternalTransferValueAsString))
                .append("");
        Object enableMarginValue = getEnableMargin();
        String enableMarginValueAsString = "";
        enableMarginValueAsString = enableMarginValue.toString();
        sb.append("enableMargin=").append(urlEncode(enableMarginValueAsString)).append("");
        Object enableFuturesValue = getEnableFutures();
        String enableFuturesValueAsString = "";
        enableFuturesValueAsString = enableFuturesValue.toString();
        sb.append("enableFutures=").append(urlEncode(enableFuturesValueAsString)).append("");
        Object permitsUniversalTransferValue = getPermitsUniversalTransfer();
        String permitsUniversalTransferValueAsString = "";
        permitsUniversalTransferValueAsString = permitsUniversalTransferValue.toString();
        sb.append("permitsUniversalTransfer=")
                .append(urlEncode(permitsUniversalTransferValueAsString))
                .append("");
        Object enableVanillaOptionsValue = getEnableVanillaOptions();
        String enableVanillaOptionsValueAsString = "";
        enableVanillaOptionsValueAsString = enableVanillaOptionsValue.toString();
        sb.append("enableVanillaOptions=")
                .append(urlEncode(enableVanillaOptionsValueAsString))
                .append("");
        Object enableFixApiTradeValue = getEnableFixApiTrade();
        String enableFixApiTradeValueAsString = "";
        enableFixApiTradeValueAsString = enableFixApiTradeValue.toString();
        sb.append("enableFixApiTrade=")
                .append(urlEncode(enableFixApiTradeValueAsString))
                .append("");
        Object enableFixReadOnlyValue = getEnableFixReadOnly();
        String enableFixReadOnlyValueAsString = "";
        enableFixReadOnlyValueAsString = enableFixReadOnlyValue.toString();
        sb.append("enableFixReadOnly=")
                .append(urlEncode(enableFixReadOnlyValueAsString))
                .append("");
        Object enableSpotAndMarginTradingValue = getEnableSpotAndMarginTrading();
        String enableSpotAndMarginTradingValueAsString = "";
        enableSpotAndMarginTradingValueAsString = enableSpotAndMarginTradingValue.toString();
        sb.append("enableSpotAndMarginTrading=")
                .append(urlEncode(enableSpotAndMarginTradingValueAsString))
                .append("");
        Object enablePortfolioMarginTradingValue = getEnablePortfolioMarginTrading();
        String enablePortfolioMarginTradingValueAsString = "";
        enablePortfolioMarginTradingValueAsString = enablePortfolioMarginTradingValue.toString();
        sb.append("enablePortfolioMarginTrading=")
                .append(urlEncode(enablePortfolioMarginTradingValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("ipRestrict");
        openapiFields.add("createTime");
        openapiFields.add("enableReading");
        openapiFields.add("enableWithdrawals");
        openapiFields.add("enableInternalTransfer");
        openapiFields.add("enableMargin");
        openapiFields.add("enableFutures");
        openapiFields.add("permitsUniversalTransfer");
        openapiFields.add("enableVanillaOptions");
        openapiFields.add("enableFixApiTrade");
        openapiFields.add("enableFixReadOnly");
        openapiFields.add("enableSpotAndMarginTrading");
        openapiFields.add("enablePortfolioMarginTrading");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetApiKeyPermissionResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetApiKeyPermissionResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetApiKeyPermissionResponse is not"
                                        + " found in the empty JSON string",
                                GetApiKeyPermissionResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetApiKeyPermissionResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetApiKeyPermissionResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetApiKeyPermissionResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetApiKeyPermissionResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetApiKeyPermissionResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(GetApiKeyPermissionResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetApiKeyPermissionResponse>() {
                        @Override
                        public void write(JsonWriter out, GetApiKeyPermissionResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetApiKeyPermissionResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetApiKeyPermissionResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetApiKeyPermissionResponse
     * @throws IOException if the JSON string is invalid with respect to GetApiKeyPermissionResponse
     */
    public static GetApiKeyPermissionResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetApiKeyPermissionResponse.class);
    }

    /**
     * Convert an instance of GetApiKeyPermissionResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
