/*
 * Binance Wallet REST API
 * OpenAPI Specification for the Binance Wallet REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.wallet.rest.model;

import com.binance.connector.client.wallet.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner {
    public static final String SERIALIZED_NAME_TRANS_ID = "transId";

    @SerializedName(SERIALIZED_NAME_TRANS_ID)
    @jakarta.annotation.Nullable
    private Long transId;

    public static final String SERIALIZED_NAME_SERVICE_CHARGE_AMOUNT = "serviceChargeAmount";

    @SerializedName(SERIALIZED_NAME_SERVICE_CHARGE_AMOUNT)
    @jakarta.annotation.Nullable
    private String serviceChargeAmount;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_OPERATE_TIME = "operateTime";

    @SerializedName(SERIALIZED_NAME_OPERATE_TIME)
    @jakarta.annotation.Nullable
    private Long operateTime;

    public static final String SERIALIZED_NAME_TRANSFERED_AMOUNT = "transferedAmount";

    @SerializedName(SERIALIZED_NAME_TRANSFERED_AMOUNT)
    @jakarta.annotation.Nullable
    private String transferedAmount;

    public static final String SERIALIZED_NAME_FROM_ASSET = "fromAsset";

    @SerializedName(SERIALIZED_NAME_FROM_ASSET)
    @jakarta.annotation.Nullable
    private String fromAsset;

    public DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner() {}

    public DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner transId(
            @jakarta.annotation.Nullable Long transId) {
        this.transId = transId;
        return this;
    }

    /**
     * Get transId
     *
     * @return transId
     */
    @jakarta.annotation.Nullable
    public Long getTransId() {
        return transId;
    }

    public void setTransId(@jakarta.annotation.Nullable Long transId) {
        this.transId = transId;
    }

    public DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner serviceChargeAmount(
            @jakarta.annotation.Nullable String serviceChargeAmount) {
        this.serviceChargeAmount = serviceChargeAmount;
        return this;
    }

    /**
     * Get serviceChargeAmount
     *
     * @return serviceChargeAmount
     */
    @jakarta.annotation.Nullable
    public String getServiceChargeAmount() {
        return serviceChargeAmount;
    }

    public void setServiceChargeAmount(@jakarta.annotation.Nullable String serviceChargeAmount) {
        this.serviceChargeAmount = serviceChargeAmount;
    }

    public DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner operateTime(
            @jakarta.annotation.Nullable Long operateTime) {
        this.operateTime = operateTime;
        return this;
    }

    /**
     * Get operateTime
     *
     * @return operateTime
     */
    @jakarta.annotation.Nullable
    public Long getOperateTime() {
        return operateTime;
    }

    public void setOperateTime(@jakarta.annotation.Nullable Long operateTime) {
        this.operateTime = operateTime;
    }

    public DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner transferedAmount(
            @jakarta.annotation.Nullable String transferedAmount) {
        this.transferedAmount = transferedAmount;
        return this;
    }

    /**
     * Get transferedAmount
     *
     * @return transferedAmount
     */
    @jakarta.annotation.Nullable
    public String getTransferedAmount() {
        return transferedAmount;
    }

    public void setTransferedAmount(@jakarta.annotation.Nullable String transferedAmount) {
        this.transferedAmount = transferedAmount;
    }

    public DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner fromAsset(
            @jakarta.annotation.Nullable String fromAsset) {
        this.fromAsset = fromAsset;
        return this;
    }

    /**
     * Get fromAsset
     *
     * @return fromAsset
     */
    @jakarta.annotation.Nullable
    public String getFromAsset() {
        return fromAsset;
    }

    public void setFromAsset(@jakarta.annotation.Nullable String fromAsset) {
        this.fromAsset = fromAsset;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                dustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner =
                        (DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner) o;
        return Objects.equals(
                        this.transId,
                        dustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner.transId)
                && Objects.equals(
                        this.serviceChargeAmount,
                        dustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                                .serviceChargeAmount)
                && Objects.equals(
                        this.amount,
                        dustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner.amount)
                && Objects.equals(
                        this.operateTime,
                        dustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                                .operateTime)
                && Objects.equals(
                        this.transferedAmount,
                        dustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                                .transferedAmount)
                && Objects.equals(
                        this.fromAsset,
                        dustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                                .fromAsset);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                transId, serviceChargeAmount, amount, operateTime, transferedAmount, fromAsset);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner {\n");
        sb.append("		transId: ").append(toIndentedString(transId)).append("\n");
        sb.append("		serviceChargeAmount: ")
                .append(toIndentedString(serviceChargeAmount))
                .append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		operateTime: ").append(toIndentedString(operateTime)).append("\n");
        sb.append("		transferedAmount: ").append(toIndentedString(transferedAmount)).append("\n");
        sb.append("		fromAsset: ").append(toIndentedString(fromAsset)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object transIdValue = getTransId();
        String transIdValueAsString = "";
        transIdValueAsString = transIdValue.toString();
        sb.append("transId=").append(urlEncode(transIdValueAsString)).append("");
        Object serviceChargeAmountValue = getServiceChargeAmount();
        String serviceChargeAmountValueAsString = "";
        serviceChargeAmountValueAsString = serviceChargeAmountValue.toString();
        sb.append("serviceChargeAmount=")
                .append(urlEncode(serviceChargeAmountValueAsString))
                .append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object operateTimeValue = getOperateTime();
        String operateTimeValueAsString = "";
        operateTimeValueAsString = operateTimeValue.toString();
        sb.append("operateTime=").append(urlEncode(operateTimeValueAsString)).append("");
        Object transferedAmountValue = getTransferedAmount();
        String transferedAmountValueAsString = "";
        transferedAmountValueAsString = transferedAmountValue.toString();
        sb.append("transferedAmount=").append(urlEncode(transferedAmountValueAsString)).append("");
        Object fromAssetValue = getFromAsset();
        String fromAssetValueAsString = "";
        fromAssetValueAsString = fromAssetValue.toString();
        sb.append("fromAsset=").append(urlEncode(fromAssetValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("transId");
        openapiFields.add("serviceChargeAmount");
        openapiFields.add("amount");
        openapiFields.add("operateTime");
        openapiFields.add("transferedAmount");
        openapiFields.add("fromAsset");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner"
                                    + " is not found in the empty JSON string",
                                DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner.openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("serviceChargeAmount") != null
                        && !jsonObj.get("serviceChargeAmount").isJsonNull())
                && !jsonObj.get("serviceChargeAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `serviceChargeAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("serviceChargeAmount").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("transferedAmount") != null
                        && !jsonObj.get("transferedAmount").isJsonNull())
                && !jsonObj.get("transferedAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `transferedAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("transferedAmount").toString()));
        }
        if ((jsonObj.get("fromAsset") != null && !jsonObj.get("fromAsset").isJsonNull())
                && !jsonObj.get("fromAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fromAsset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                                        value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
                                read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
     * given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner
     */
    public static DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner.class);
    }

    /**
     * Convert an instance of DustlogResponseUserAssetDribbletsInnerUserAssetDribbletDetailsInner to
     * an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
