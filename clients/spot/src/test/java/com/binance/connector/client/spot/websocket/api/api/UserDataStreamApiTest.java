/*
 * Binance Public Spot WebSocket API
 * OpenAPI Specifications for the Binance Public Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.api;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.websocket.adapter.ConnectionWrapper;
import com.binance.connector.client.common.websocket.configuration.SessionMode;
import com.binance.connector.client.common.websocket.configuration.WebSocketClientConfiguration;
import com.binance.connector.client.common.websocket.dtos.BaseRequestDTO;
import com.binance.connector.client.common.websocket.dtos.RequestWrapperDTO;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamPingRequest;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamPingResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamStartResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamStopRequest;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamStopResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamSubscribeResponse;
import com.binance.connector.client.spot.websocket.api.model.UserDataStreamUnsubscribeResponse;
import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.concurrent.CompletableFuture;

import org.eclipse.jetty.websocket.api.RemoteEndpoint;
import org.eclipse.jetty.websocket.api.Session;
import org.eclipse.jetty.websocket.client.WebSocketClient;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import org.skyscreamer.jsonassert.JSONAssert;

/** API tests for UserDataStreamApi */
public class UserDataStreamApiTest {

    private UserDataStreamApi api;
    private ConnectionWrapper connectionSpy;
    private Session sessionMock;

    @BeforeEach
    public void initApiClient() throws Exception {
        URL resource = UserDataStreamApi.class.getResource("/test-ed25519-prv-key.pem");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        File file = new File(resource.toURI());
        signatureConfiguration.setPrivateKey(file.getAbsolutePath());
        WebSocketClientConfiguration clientConfiguration = new WebSocketClientConfiguration();
        // @TODO: run tests for LOGON as well
        clientConfiguration.setAutoLogon(false);
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);
        clientConfiguration.setUrl("wss://localhost:8080");

        WebSocketClient webSocketClient = Mockito.mock(WebSocketClient.class);
        CompletableFuture<Session> sessionCompletableFuture = new CompletableFuture<>();
        Mockito.doReturn(sessionCompletableFuture)
                .when(webSocketClient)
                .connect(Mockito.any(), Mockito.any(), Mockito.any());
        sessionMock = Mockito.mock(Session.class);

        RemoteEndpoint remoteEndpointMock = Mockito.mock(RemoteEndpoint.class);
        Mockito.doReturn(remoteEndpointMock).when(sessionMock).getRemote();

        sessionCompletableFuture.complete(sessionMock);
        ConnectionWrapper connectionWrapper =
                new ConnectionWrapper(clientConfiguration, webSocketClient);
        connectionSpy = Mockito.spy(connectionWrapper);
        Mockito.doReturn(1736393892000L).when(connectionSpy).getTimestamp();
        connectionSpy.connect();
        UserDataStreamApi accountApi = new UserDataStreamApi(connectionSpy);
        api = Mockito.spy(accountApi);
        Mockito.doReturn("eaf3292c-64b6-4c04-ad4f-4ca2608b42b4").when(api).getRequestID();
    }

    /**
     * WebSocket Ping user data stream
     *
     * <p>Ping a user data stream to keep it alive. User data streams close automatically after 60
     * minutes, even if you&#39;re listening to them on WebSocket Streams. In order to keep the
     * stream open, you have to regularly send pings using the &#x60;userDataStream.ping&#x60;
     * request. It is recommended to send a ping once every 30 minutes. Weight: 2
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDataStreamPingTest() throws ApiException, URISyntaxException, IOException {
        UserDataStreamPingRequest userDataStreamPingRequest = new UserDataStreamPingRequest();
        userDataStreamPingRequest.setListenKey("ABCDEF123456");
        CompletableFuture<UserDataStreamPingResponse> response =
                api.userDataStreamPing(userDataStreamPingRequest);
        ArgumentCaptor<RequestWrapperDTO<UserDataStreamPingRequest, UserDataStreamPingResponse>>
                callArgumentCaptor = ArgumentCaptor.forClass(RequestWrapperDTO.class);
        Mockito.verify(connectionSpy).innerSend(callArgumentCaptor.capture());
        ArgumentCaptor<String> sendArgumentCaptor = ArgumentCaptor.forClass(String.class);
        RemoteEndpoint remote = sessionMock.getRemote();
        Mockito.verify(remote).sendString(sendArgumentCaptor.capture(), Mockito.any());
        RequestWrapperDTO<UserDataStreamPingRequest, UserDataStreamPingResponse> requestWrapperDTO =
                callArgumentCaptor.getValue();
        UserDataStreamPingRequest params = requestWrapperDTO.getParams();
        String sentPayload = sendArgumentCaptor.getValue();

        URL resource =
                UserDataStreamApiTest.class.getResource(
                        "/expected/api/UserDataStreamApi/userDataStream.ping-test.json");
        String expectedJson = Files.readString(Paths.get(resource.toURI()));

        JSONAssert.assertEquals(expectedJson, sentPayload, true);
    }

    /**
     * WebSocket Start user data stream
     *
     * <p>Start a new user data stream. Weight: 2
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDataStreamStartTest() throws ApiException, URISyntaxException, IOException {
        CompletableFuture<UserDataStreamStartResponse> response = api.userDataStreamStart();
        ArgumentCaptor<RequestWrapperDTO<BaseRequestDTO, UserDataStreamStartResponse>>
                callArgumentCaptor = ArgumentCaptor.forClass(RequestWrapperDTO.class);
        Mockito.verify(connectionSpy).innerSend(callArgumentCaptor.capture());
        ArgumentCaptor<String> sendArgumentCaptor = ArgumentCaptor.forClass(String.class);
        RemoteEndpoint remote = sessionMock.getRemote();
        Mockito.verify(remote).sendString(sendArgumentCaptor.capture(), Mockito.any());
        RequestWrapperDTO<BaseRequestDTO, UserDataStreamStartResponse> requestWrapperDTO =
                callArgumentCaptor.getValue();
        BaseRequestDTO params = requestWrapperDTO.getParams();
        String sentPayload = sendArgumentCaptor.getValue();

        URL resource =
                UserDataStreamApiTest.class.getResource(
                        "/expected/api/UserDataStreamApi/userDataStream.start-test.json");
        String expectedJson = Files.readString(Paths.get(resource.toURI()));

        JSONAssert.assertEquals(expectedJson, sentPayload, true);
    }

    /**
     * WebSocket Stop user data stream
     *
     * <p>Explicitly stop and close the user data stream. Weight: 2
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDataStreamStopTest() throws ApiException, URISyntaxException, IOException {
        UserDataStreamStopRequest userDataStreamStopRequest = new UserDataStreamStopRequest();
        userDataStreamStopRequest.setListenKey("ABCDEF123456");
        CompletableFuture<UserDataStreamStopResponse> response =
                api.userDataStreamStop(userDataStreamStopRequest);
        ArgumentCaptor<RequestWrapperDTO<UserDataStreamStopRequest, UserDataStreamStopResponse>>
                callArgumentCaptor = ArgumentCaptor.forClass(RequestWrapperDTO.class);
        Mockito.verify(connectionSpy).innerSend(callArgumentCaptor.capture());
        ArgumentCaptor<String> sendArgumentCaptor = ArgumentCaptor.forClass(String.class);
        RemoteEndpoint remote = sessionMock.getRemote();
        Mockito.verify(remote).sendString(sendArgumentCaptor.capture(), Mockito.any());
        RequestWrapperDTO<UserDataStreamStopRequest, UserDataStreamStopResponse> requestWrapperDTO =
                callArgumentCaptor.getValue();
        UserDataStreamStopRequest params = requestWrapperDTO.getParams();
        String sentPayload = sendArgumentCaptor.getValue();

        URL resource =
                UserDataStreamApiTest.class.getResource(
                        "/expected/api/UserDataStreamApi/userDataStream.stop-test.json");
        String expectedJson = Files.readString(Paths.get(resource.toURI()));

        JSONAssert.assertEquals(expectedJson, sentPayload, true);
    }

    /**
     * WebSocket Subscribe to User Data Stream
     *
     * <p>Subscribe to the User Data Stream in the current WebSocket connection. Weight: 2
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDataStreamSubscribeTest() throws ApiException, URISyntaxException, IOException {
        CompletableFuture<UserDataStreamSubscribeResponse> response = api.userDataStreamSubscribe();
        ArgumentCaptor<RequestWrapperDTO<BaseRequestDTO, UserDataStreamSubscribeResponse>>
                callArgumentCaptor = ArgumentCaptor.forClass(RequestWrapperDTO.class);
        Mockito.verify(connectionSpy).innerSend(callArgumentCaptor.capture());
        ArgumentCaptor<String> sendArgumentCaptor = ArgumentCaptor.forClass(String.class);
        RemoteEndpoint remote = sessionMock.getRemote();
        Mockito.verify(remote).sendString(sendArgumentCaptor.capture(), Mockito.any());
        RequestWrapperDTO<BaseRequestDTO, UserDataStreamSubscribeResponse> requestWrapperDTO =
                callArgumentCaptor.getValue();
        BaseRequestDTO params = requestWrapperDTO.getParams();
        String sentPayload = sendArgumentCaptor.getValue();

        URL resource =
                UserDataStreamApiTest.class.getResource(
                        "/expected/api/UserDataStreamApi/userDataStream.subscribe-test.json");
        String expectedJson = Files.readString(Paths.get(resource.toURI()));

        JSONAssert.assertEquals(expectedJson, sentPayload, true);
    }

    /**
     * WebSocket Unsubscribe from User Data Stream
     *
     * <p>Stop listening to the User Data Stream in the current WebSocket connection. Weight: 2
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void userDataStreamUnsubscribeTest()
            throws ApiException, URISyntaxException, IOException {
        CompletableFuture<UserDataStreamUnsubscribeResponse> response =
                api.userDataStreamUnsubscribe();
        ArgumentCaptor<RequestWrapperDTO<BaseRequestDTO, UserDataStreamUnsubscribeResponse>>
                callArgumentCaptor = ArgumentCaptor.forClass(RequestWrapperDTO.class);
        Mockito.verify(connectionSpy).innerSend(callArgumentCaptor.capture());
        ArgumentCaptor<String> sendArgumentCaptor = ArgumentCaptor.forClass(String.class);
        RemoteEndpoint remote = sessionMock.getRemote();
        Mockito.verify(remote).sendString(sendArgumentCaptor.capture(), Mockito.any());
        RequestWrapperDTO<BaseRequestDTO, UserDataStreamUnsubscribeResponse> requestWrapperDTO =
                callArgumentCaptor.getValue();
        BaseRequestDTO params = requestWrapperDTO.getParams();
        String sentPayload = sendArgumentCaptor.getValue();

        URL resource =
                UserDataStreamApiTest.class.getResource(
                        "/expected/api/UserDataStreamApi/userDataStream.unsubscribe-test.json");
        String expectedJson = Files.readString(Paths.get(resource.toURI()));

        JSONAssert.assertEquals(expectedJson, sentPayload, true);
    }
}
