/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderTestResponse2ResultStandardCommissionForOrder */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderTestResponse2ResultStandardCommissionForOrder extends BaseDTO {
    public static final String SERIALIZED_NAME_MAKER = "maker";

    @SerializedName(SERIALIZED_NAME_MAKER)
    @jakarta.annotation.Nullable
    private String maker;

    public static final String SERIALIZED_NAME_TAKER = "taker";

    @SerializedName(SERIALIZED_NAME_TAKER)
    @jakarta.annotation.Nullable
    private String taker;

    public OrderTestResponse2ResultStandardCommissionForOrder() {}

    public OrderTestResponse2ResultStandardCommissionForOrder maker(
            @jakarta.annotation.Nullable String maker) {
        this.maker = maker;
        return this;
    }

    /**
     * Get maker
     *
     * @return maker
     */
    @jakarta.annotation.Nullable
    public String getMaker() {
        return maker;
    }

    public void setMaker(@jakarta.annotation.Nullable String maker) {
        this.maker = maker;
    }

    public OrderTestResponse2ResultStandardCommissionForOrder taker(
            @jakarta.annotation.Nullable String taker) {
        this.taker = taker;
        return this;
    }

    /**
     * Get taker
     *
     * @return taker
     */
    @jakarta.annotation.Nullable
    public String getTaker() {
        return taker;
    }

    public void setTaker(@jakarta.annotation.Nullable String taker) {
        this.taker = taker;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderTestResponse2ResultStandardCommissionForOrder
                orderTestResponse2ResultStandardCommissionForOrder =
                        (OrderTestResponse2ResultStandardCommissionForOrder) o;
        return Objects.equals(this.maker, orderTestResponse2ResultStandardCommissionForOrder.maker)
                && Objects.equals(
                        this.taker, orderTestResponse2ResultStandardCommissionForOrder.taker);
    }

    @Override
    public int hashCode() {
        return Objects.hash(maker, taker);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderTestResponse2ResultStandardCommissionForOrder {\n");
        sb.append("		maker: ").append(toIndentedString(maker)).append("\n");
        sb.append("		taker: ").append(toIndentedString(taker)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String makerValue = getMaker();
        if (makerValue != null) {
            String makerValueAsString = makerValue.toString();
            valMap.put("maker", makerValueAsString);
        }
        String takerValue = getTaker();
        if (takerValue != null) {
            String takerValueAsString = takerValue.toString();
            valMap.put("taker", takerValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object makerValue = getMaker();
        if (makerValue != null) {
            valMap.put("maker", makerValue);
        }
        Object takerValue = getTaker();
        if (takerValue != null) {
            valMap.put("taker", takerValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("maker");
        openapiFields.add("taker");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OrderTestResponse2ResultStandardCommissionForOrder
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderTestResponse2ResultStandardCommissionForOrder.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " OrderTestResponse2ResultStandardCommissionForOrder is not"
                                    + " found in the empty JSON string",
                                OrderTestResponse2ResultStandardCommissionForOrder
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderTestResponse2ResultStandardCommissionForOrder.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderTestResponse2ResultStandardCommissionForOrder`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("maker") != null && !jsonObj.get("maker").isJsonNull())
                && !jsonObj.get("maker").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maker` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("maker").toString()));
        }
        if ((jsonObj.get("taker") != null && !jsonObj.get("taker").isJsonNull())
                && !jsonObj.get("taker").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `taker` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("taker").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderTestResponse2ResultStandardCommissionForOrder.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'OrderTestResponse2ResultStandardCommissionForOrder' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderTestResponse2ResultStandardCommissionForOrder> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    OrderTestResponse2ResultStandardCommissionForOrder.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderTestResponse2ResultStandardCommissionForOrder>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                OrderTestResponse2ResultStandardCommissionForOrder value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderTestResponse2ResultStandardCommissionForOrder read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderTestResponse2ResultStandardCommissionForOrder given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderTestResponse2ResultStandardCommissionForOrder
     * @throws IOException if the JSON string is invalid with respect to
     *     OrderTestResponse2ResultStandardCommissionForOrder
     */
    public static OrderTestResponse2ResultStandardCommissionForOrder fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, OrderTestResponse2ResultStandardCommissionForOrder.class);
    }

    /**
     * Convert an instance of OrderTestResponse2ResultStandardCommissionForOrder to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
