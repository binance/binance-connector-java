/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetAccountResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetAccountResponse {
    public static final String SERIALIZED_NAME_MAKER_COMMISSION = "makerCommission";

    @SerializedName(SERIALIZED_NAME_MAKER_COMMISSION)
    @jakarta.annotation.Nullable
    private Long makerCommission;

    public static final String SERIALIZED_NAME_TAKER_COMMISSION = "takerCommission";

    @SerializedName(SERIALIZED_NAME_TAKER_COMMISSION)
    @jakarta.annotation.Nullable
    private Long takerCommission;

    public static final String SERIALIZED_NAME_BUYER_COMMISSION = "buyerCommission";

    @SerializedName(SERIALIZED_NAME_BUYER_COMMISSION)
    @jakarta.annotation.Nullable
    private Long buyerCommission;

    public static final String SERIALIZED_NAME_SELLER_COMMISSION = "sellerCommission";

    @SerializedName(SERIALIZED_NAME_SELLER_COMMISSION)
    @jakarta.annotation.Nullable
    private Long sellerCommission;

    public static final String SERIALIZED_NAME_COMMISSION_RATES = "commissionRates";

    @SerializedName(SERIALIZED_NAME_COMMISSION_RATES)
    @jakarta.annotation.Nullable
    private GetAccountResponseCommissionRates commissionRates;

    public static final String SERIALIZED_NAME_CAN_TRADE = "canTrade";

    @SerializedName(SERIALIZED_NAME_CAN_TRADE)
    @jakarta.annotation.Nullable
    private Boolean canTrade;

    public static final String SERIALIZED_NAME_CAN_WITHDRAW = "canWithdraw";

    @SerializedName(SERIALIZED_NAME_CAN_WITHDRAW)
    @jakarta.annotation.Nullable
    private Boolean canWithdraw;

    public static final String SERIALIZED_NAME_CAN_DEPOSIT = "canDeposit";

    @SerializedName(SERIALIZED_NAME_CAN_DEPOSIT)
    @jakarta.annotation.Nullable
    private Boolean canDeposit;

    public static final String SERIALIZED_NAME_BROKERED = "brokered";

    @SerializedName(SERIALIZED_NAME_BROKERED)
    @jakarta.annotation.Nullable
    private Boolean brokered;

    public static final String SERIALIZED_NAME_REQUIRE_SELF_TRADE_PREVENTION =
            "requireSelfTradePrevention";

    @SerializedName(SERIALIZED_NAME_REQUIRE_SELF_TRADE_PREVENTION)
    @jakarta.annotation.Nullable
    private Boolean requireSelfTradePrevention;

    public static final String SERIALIZED_NAME_PREVENT_SOR = "preventSor";

    @SerializedName(SERIALIZED_NAME_PREVENT_SOR)
    @jakarta.annotation.Nullable
    private Boolean preventSor;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
    @jakarta.annotation.Nullable
    private String accountType;

    public static final String SERIALIZED_NAME_BALANCES = "balances";

    @SerializedName(SERIALIZED_NAME_BALANCES)
    @jakarta.annotation.Nullable
    private List<@Valid GetAccountResponseBalancesInner> balances;

    public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";

    @SerializedName(SERIALIZED_NAME_PERMISSIONS)
    @jakarta.annotation.Nullable
    private List<String> permissions;

    public static final String SERIALIZED_NAME_UID = "uid";

    @SerializedName(SERIALIZED_NAME_UID)
    @jakarta.annotation.Nullable
    private Long uid;

    public GetAccountResponse() {}

    public GetAccountResponse makerCommission(@jakarta.annotation.Nullable Long makerCommission) {
        this.makerCommission = makerCommission;
        return this;
    }

    /**
     * Get makerCommission
     *
     * @return makerCommission
     */
    @jakarta.annotation.Nullable
    public Long getMakerCommission() {
        return makerCommission;
    }

    public void setMakerCommission(@jakarta.annotation.Nullable Long makerCommission) {
        this.makerCommission = makerCommission;
    }

    public GetAccountResponse takerCommission(@jakarta.annotation.Nullable Long takerCommission) {
        this.takerCommission = takerCommission;
        return this;
    }

    /**
     * Get takerCommission
     *
     * @return takerCommission
     */
    @jakarta.annotation.Nullable
    public Long getTakerCommission() {
        return takerCommission;
    }

    public void setTakerCommission(@jakarta.annotation.Nullable Long takerCommission) {
        this.takerCommission = takerCommission;
    }

    public GetAccountResponse buyerCommission(@jakarta.annotation.Nullable Long buyerCommission) {
        this.buyerCommission = buyerCommission;
        return this;
    }

    /**
     * Get buyerCommission
     *
     * @return buyerCommission
     */
    @jakarta.annotation.Nullable
    public Long getBuyerCommission() {
        return buyerCommission;
    }

    public void setBuyerCommission(@jakarta.annotation.Nullable Long buyerCommission) {
        this.buyerCommission = buyerCommission;
    }

    public GetAccountResponse sellerCommission(@jakarta.annotation.Nullable Long sellerCommission) {
        this.sellerCommission = sellerCommission;
        return this;
    }

    /**
     * Get sellerCommission
     *
     * @return sellerCommission
     */
    @jakarta.annotation.Nullable
    public Long getSellerCommission() {
        return sellerCommission;
    }

    public void setSellerCommission(@jakarta.annotation.Nullable Long sellerCommission) {
        this.sellerCommission = sellerCommission;
    }

    public GetAccountResponse commissionRates(
            @jakarta.annotation.Nullable GetAccountResponseCommissionRates commissionRates) {
        this.commissionRates = commissionRates;
        return this;
    }

    /**
     * Get commissionRates
     *
     * @return commissionRates
     */
    @jakarta.annotation.Nullable
    @Valid
    public GetAccountResponseCommissionRates getCommissionRates() {
        return commissionRates;
    }

    public void setCommissionRates(
            @jakarta.annotation.Nullable GetAccountResponseCommissionRates commissionRates) {
        this.commissionRates = commissionRates;
    }

    public GetAccountResponse canTrade(@jakarta.annotation.Nullable Boolean canTrade) {
        this.canTrade = canTrade;
        return this;
    }

    /**
     * Get canTrade
     *
     * @return canTrade
     */
    @jakarta.annotation.Nullable
    public Boolean getCanTrade() {
        return canTrade;
    }

    public void setCanTrade(@jakarta.annotation.Nullable Boolean canTrade) {
        this.canTrade = canTrade;
    }

    public GetAccountResponse canWithdraw(@jakarta.annotation.Nullable Boolean canWithdraw) {
        this.canWithdraw = canWithdraw;
        return this;
    }

    /**
     * Get canWithdraw
     *
     * @return canWithdraw
     */
    @jakarta.annotation.Nullable
    public Boolean getCanWithdraw() {
        return canWithdraw;
    }

    public void setCanWithdraw(@jakarta.annotation.Nullable Boolean canWithdraw) {
        this.canWithdraw = canWithdraw;
    }

    public GetAccountResponse canDeposit(@jakarta.annotation.Nullable Boolean canDeposit) {
        this.canDeposit = canDeposit;
        return this;
    }

    /**
     * Get canDeposit
     *
     * @return canDeposit
     */
    @jakarta.annotation.Nullable
    public Boolean getCanDeposit() {
        return canDeposit;
    }

    public void setCanDeposit(@jakarta.annotation.Nullable Boolean canDeposit) {
        this.canDeposit = canDeposit;
    }

    public GetAccountResponse brokered(@jakarta.annotation.Nullable Boolean brokered) {
        this.brokered = brokered;
        return this;
    }

    /**
     * Get brokered
     *
     * @return brokered
     */
    @jakarta.annotation.Nullable
    public Boolean getBrokered() {
        return brokered;
    }

    public void setBrokered(@jakarta.annotation.Nullable Boolean brokered) {
        this.brokered = brokered;
    }

    public GetAccountResponse requireSelfTradePrevention(
            @jakarta.annotation.Nullable Boolean requireSelfTradePrevention) {
        this.requireSelfTradePrevention = requireSelfTradePrevention;
        return this;
    }

    /**
     * Get requireSelfTradePrevention
     *
     * @return requireSelfTradePrevention
     */
    @jakarta.annotation.Nullable
    public Boolean getRequireSelfTradePrevention() {
        return requireSelfTradePrevention;
    }

    public void setRequireSelfTradePrevention(
            @jakarta.annotation.Nullable Boolean requireSelfTradePrevention) {
        this.requireSelfTradePrevention = requireSelfTradePrevention;
    }

    public GetAccountResponse preventSor(@jakarta.annotation.Nullable Boolean preventSor) {
        this.preventSor = preventSor;
        return this;
    }

    /**
     * Get preventSor
     *
     * @return preventSor
     */
    @jakarta.annotation.Nullable
    public Boolean getPreventSor() {
        return preventSor;
    }

    public void setPreventSor(@jakarta.annotation.Nullable Boolean preventSor) {
        this.preventSor = preventSor;
    }

    public GetAccountResponse updateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    public GetAccountResponse accountType(@jakarta.annotation.Nullable String accountType) {
        this.accountType = accountType;
        return this;
    }

    /**
     * Get accountType
     *
     * @return accountType
     */
    @jakarta.annotation.Nullable
    public String getAccountType() {
        return accountType;
    }

    public void setAccountType(@jakarta.annotation.Nullable String accountType) {
        this.accountType = accountType;
    }

    public GetAccountResponse balances(
            @jakarta.annotation.Nullable List<@Valid GetAccountResponseBalancesInner> balances) {
        this.balances = balances;
        return this;
    }

    public GetAccountResponse addBalancesItem(GetAccountResponseBalancesInner balancesItem) {
        if (this.balances == null) {
            this.balances = new ArrayList<>();
        }
        this.balances.add(balancesItem);
        return this;
    }

    /**
     * Get balances
     *
     * @return balances
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid GetAccountResponseBalancesInner> getBalances() {
        return balances;
    }

    public void setBalances(
            @jakarta.annotation.Nullable List<@Valid GetAccountResponseBalancesInner> balances) {
        this.balances = balances;
    }

    public GetAccountResponse permissions(@jakarta.annotation.Nullable List<String> permissions) {
        this.permissions = permissions;
        return this;
    }

    public GetAccountResponse addPermissionsItem(String permissionsItem) {
        if (this.permissions == null) {
            this.permissions = new ArrayList<>();
        }
        this.permissions.add(permissionsItem);
        return this;
    }

    /**
     * Get permissions
     *
     * @return permissions
     */
    @jakarta.annotation.Nullable
    public List<String> getPermissions() {
        return permissions;
    }

    public void setPermissions(@jakarta.annotation.Nullable List<String> permissions) {
        this.permissions = permissions;
    }

    public GetAccountResponse uid(@jakarta.annotation.Nullable Long uid) {
        this.uid = uid;
        return this;
    }

    /**
     * Get uid
     *
     * @return uid
     */
    @jakarta.annotation.Nullable
    public Long getUid() {
        return uid;
    }

    public void setUid(@jakarta.annotation.Nullable Long uid) {
        this.uid = uid;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAccountResponse getAccountResponse = (GetAccountResponse) o;
        return Objects.equals(this.makerCommission, getAccountResponse.makerCommission)
                && Objects.equals(this.takerCommission, getAccountResponse.takerCommission)
                && Objects.equals(this.buyerCommission, getAccountResponse.buyerCommission)
                && Objects.equals(this.sellerCommission, getAccountResponse.sellerCommission)
                && Objects.equals(this.commissionRates, getAccountResponse.commissionRates)
                && Objects.equals(this.canTrade, getAccountResponse.canTrade)
                && Objects.equals(this.canWithdraw, getAccountResponse.canWithdraw)
                && Objects.equals(this.canDeposit, getAccountResponse.canDeposit)
                && Objects.equals(this.brokered, getAccountResponse.brokered)
                && Objects.equals(
                        this.requireSelfTradePrevention,
                        getAccountResponse.requireSelfTradePrevention)
                && Objects.equals(this.preventSor, getAccountResponse.preventSor)
                && Objects.equals(this.updateTime, getAccountResponse.updateTime)
                && Objects.equals(this.accountType, getAccountResponse.accountType)
                && Objects.equals(this.balances, getAccountResponse.balances)
                && Objects.equals(this.permissions, getAccountResponse.permissions)
                && Objects.equals(this.uid, getAccountResponse.uid);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                makerCommission,
                takerCommission,
                buyerCommission,
                sellerCommission,
                commissionRates,
                canTrade,
                canWithdraw,
                canDeposit,
                brokered,
                requireSelfTradePrevention,
                preventSor,
                updateTime,
                accountType,
                balances,
                permissions,
                uid);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetAccountResponse {\n");
        sb.append("		makerCommission: ").append(toIndentedString(makerCommission)).append("\n");
        sb.append("		takerCommission: ").append(toIndentedString(takerCommission)).append("\n");
        sb.append("		buyerCommission: ").append(toIndentedString(buyerCommission)).append("\n");
        sb.append("		sellerCommission: ").append(toIndentedString(sellerCommission)).append("\n");
        sb.append("		commissionRates: ").append(toIndentedString(commissionRates)).append("\n");
        sb.append("		canTrade: ").append(toIndentedString(canTrade)).append("\n");
        sb.append("		canWithdraw: ").append(toIndentedString(canWithdraw)).append("\n");
        sb.append("		canDeposit: ").append(toIndentedString(canDeposit)).append("\n");
        sb.append("		brokered: ").append(toIndentedString(brokered)).append("\n");
        sb.append("		requireSelfTradePrevention: ")
                .append(toIndentedString(requireSelfTradePrevention))
                .append("\n");
        sb.append("		preventSor: ").append(toIndentedString(preventSor)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("		accountType: ").append(toIndentedString(accountType)).append("\n");
        sb.append("		balances: ").append(toIndentedString(balances)).append("\n");
        sb.append("		permissions: ").append(toIndentedString(permissions)).append("\n");
        sb.append("		uid: ").append(toIndentedString(uid)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object makerCommissionValue = getMakerCommission();
        String makerCommissionValueAsString = "";
        makerCommissionValueAsString = makerCommissionValue.toString();
        sb.append("makerCommission=").append(urlEncode(makerCommissionValueAsString)).append("");
        Object takerCommissionValue = getTakerCommission();
        String takerCommissionValueAsString = "";
        takerCommissionValueAsString = takerCommissionValue.toString();
        sb.append("takerCommission=").append(urlEncode(takerCommissionValueAsString)).append("");
        Object buyerCommissionValue = getBuyerCommission();
        String buyerCommissionValueAsString = "";
        buyerCommissionValueAsString = buyerCommissionValue.toString();
        sb.append("buyerCommission=").append(urlEncode(buyerCommissionValueAsString)).append("");
        Object sellerCommissionValue = getSellerCommission();
        String sellerCommissionValueAsString = "";
        sellerCommissionValueAsString = sellerCommissionValue.toString();
        sb.append("sellerCommission=").append(urlEncode(sellerCommissionValueAsString)).append("");
        Object commissionRatesValue = getCommissionRates();
        String commissionRatesValueAsString = "";
        commissionRatesValueAsString = commissionRatesValue.toString();
        sb.append("commissionRates=").append(urlEncode(commissionRatesValueAsString)).append("");
        Object canTradeValue = getCanTrade();
        String canTradeValueAsString = "";
        canTradeValueAsString = canTradeValue.toString();
        sb.append("canTrade=").append(urlEncode(canTradeValueAsString)).append("");
        Object canWithdrawValue = getCanWithdraw();
        String canWithdrawValueAsString = "";
        canWithdrawValueAsString = canWithdrawValue.toString();
        sb.append("canWithdraw=").append(urlEncode(canWithdrawValueAsString)).append("");
        Object canDepositValue = getCanDeposit();
        String canDepositValueAsString = "";
        canDepositValueAsString = canDepositValue.toString();
        sb.append("canDeposit=").append(urlEncode(canDepositValueAsString)).append("");
        Object brokeredValue = getBrokered();
        String brokeredValueAsString = "";
        brokeredValueAsString = brokeredValue.toString();
        sb.append("brokered=").append(urlEncode(brokeredValueAsString)).append("");
        Object requireSelfTradePreventionValue = getRequireSelfTradePrevention();
        String requireSelfTradePreventionValueAsString = "";
        requireSelfTradePreventionValueAsString = requireSelfTradePreventionValue.toString();
        sb.append("requireSelfTradePrevention=")
                .append(urlEncode(requireSelfTradePreventionValueAsString))
                .append("");
        Object preventSorValue = getPreventSor();
        String preventSorValueAsString = "";
        preventSorValueAsString = preventSorValue.toString();
        sb.append("preventSor=").append(urlEncode(preventSorValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        Object accountTypeValue = getAccountType();
        String accountTypeValueAsString = "";
        accountTypeValueAsString = accountTypeValue.toString();
        sb.append("accountType=").append(urlEncode(accountTypeValueAsString)).append("");
        Object balancesValue = getBalances();
        String balancesValueAsString = "";
        balancesValueAsString =
                (String)
                        ((Collection) balancesValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("balances=").append(urlEncode(balancesValueAsString)).append("");
        Object permissionsValue = getPermissions();
        String permissionsValueAsString = "";
        permissionsValueAsString =
                (String)
                        ((Collection) permissionsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("permissions=").append(urlEncode(permissionsValueAsString)).append("");
        Object uidValue = getUid();
        String uidValueAsString = "";
        uidValueAsString = uidValue.toString();
        sb.append("uid=").append(urlEncode(uidValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("makerCommission");
        openapiFields.add("takerCommission");
        openapiFields.add("buyerCommission");
        openapiFields.add("sellerCommission");
        openapiFields.add("commissionRates");
        openapiFields.add("canTrade");
        openapiFields.add("canWithdraw");
        openapiFields.add("canDeposit");
        openapiFields.add("brokered");
        openapiFields.add("requireSelfTradePrevention");
        openapiFields.add("preventSor");
        openapiFields.add("updateTime");
        openapiFields.add("accountType");
        openapiFields.add("balances");
        openapiFields.add("permissions");
        openapiFields.add("uid");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetAccountResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetAccountResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetAccountResponse is not found in the"
                                        + " empty JSON string",
                                GetAccountResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetAccountResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetAccountResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `commissionRates`
        if (jsonObj.get("commissionRates") != null
                && !jsonObj.get("commissionRates").isJsonNull()) {
            GetAccountResponseCommissionRates.validateJsonElement(jsonObj.get("commissionRates"));
        }
        if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull())
                && !jsonObj.get("accountType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `accountType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("accountType").toString()));
        }
        if (jsonObj.get("balances") != null && !jsonObj.get("balances").isJsonNull()) {
            JsonArray jsonArraybalances = jsonObj.getAsJsonArray("balances");
            if (jsonArraybalances != null) {
                // ensure the json data is an array
                if (!jsonObj.get("balances").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `balances` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("balances").toString()));
                }

                // validate the optional field `balances` (array)
                for (int i = 0; i < jsonArraybalances.size(); i++) {
                    GetAccountResponseBalancesInner.validateJsonElement(jsonArraybalances.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("permissions") != null
                && !jsonObj.get("permissions").isJsonNull()
                && !jsonObj.get("permissions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `permissions` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("permissions").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetAccountResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetAccountResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetAccountResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(GetAccountResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetAccountResponse>() {
                        @Override
                        public void write(JsonWriter out, GetAccountResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetAccountResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetAccountResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetAccountResponse
     * @throws IOException if the JSON string is invalid with respect to GetAccountResponse
     */
    public static GetAccountResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetAccountResponse.class);
    }

    /**
     * Convert an instance of GetAccountResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
