/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderListPlaceRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderListPlaceRequest extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nonnull
    private Side side;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nonnull
    private Double price;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double quantity;

    public static final String SERIALIZED_NAME_LIST_CLIENT_ORDER_ID = "listClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIST_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String listClientOrderId;

    public static final String SERIALIZED_NAME_LIMIT_CLIENT_ORDER_ID = "limitClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIMIT_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String limitClientOrderId;

    public static final String SERIALIZED_NAME_LIMIT_ICEBERG_QTY = "limitIcebergQty";

    @SerializedName(SERIALIZED_NAME_LIMIT_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double limitIcebergQty;

    public static final String SERIALIZED_NAME_LIMIT_STRATEGY_ID = "limitStrategyId";

    @SerializedName(SERIALIZED_NAME_LIMIT_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long limitStrategyId;

    public static final String SERIALIZED_NAME_LIMIT_STRATEGY_TYPE = "limitStrategyType";

    @SerializedName(SERIALIZED_NAME_LIMIT_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private Integer limitStrategyType;

    public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";

    @SerializedName(SERIALIZED_NAME_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double stopPrice;

    public static final String SERIALIZED_NAME_TRAILING_DELTA = "trailingDelta";

    @SerializedName(SERIALIZED_NAME_TRAILING_DELTA)
    @jakarta.annotation.Nullable
    private Integer trailingDelta;

    public static final String SERIALIZED_NAME_STOP_CLIENT_ORDER_ID = "stopClientOrderId";

    @SerializedName(SERIALIZED_NAME_STOP_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String stopClientOrderId;

    public static final String SERIALIZED_NAME_STOP_LIMIT_PRICE = "stopLimitPrice";

    @SerializedName(SERIALIZED_NAME_STOP_LIMIT_PRICE)
    @jakarta.annotation.Nullable
    private Double stopLimitPrice;

    public static final String SERIALIZED_NAME_STOP_LIMIT_TIME_IN_FORCE = "stopLimitTimeInForce";

    @SerializedName(SERIALIZED_NAME_STOP_LIMIT_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private StopLimitTimeInForce stopLimitTimeInForce;

    public static final String SERIALIZED_NAME_STOP_ICEBERG_QTY = "stopIcebergQty";

    @SerializedName(SERIALIZED_NAME_STOP_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double stopIcebergQty;

    public static final String SERIALIZED_NAME_STOP_STRATEGY_ID = "stopStrategyId";

    @SerializedName(SERIALIZED_NAME_STOP_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long stopStrategyId;

    public static final String SERIALIZED_NAME_STOP_STRATEGY_TYPE = "stopStrategyType";

    @SerializedName(SERIALIZED_NAME_STOP_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private Integer stopStrategyType;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespType newOrderRespType;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private SelfTradePreventionMode selfTradePreventionMode;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public OrderListPlaceRequest() {}

    public OrderListPlaceRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public OrderListPlaceRequest side(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Side getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
    }

    public OrderListPlaceRequest price(@jakarta.annotation.Nonnull Double price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nonnull Double price) {
        this.price = price;
    }

    public OrderListPlaceRequest quantity(@jakarta.annotation.Nonnull Double quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nonnull Double quantity) {
        this.quantity = quantity;
    }

    public OrderListPlaceRequest listClientOrderId(
            @jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
        return this;
    }

    /**
     * Get listClientOrderId
     *
     * @return listClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getListClientOrderId() {
        return listClientOrderId;
    }

    public void setListClientOrderId(@jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
    }

    public OrderListPlaceRequest limitClientOrderId(
            @jakarta.annotation.Nullable String limitClientOrderId) {
        this.limitClientOrderId = limitClientOrderId;
        return this;
    }

    /**
     * Get limitClientOrderId
     *
     * @return limitClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getLimitClientOrderId() {
        return limitClientOrderId;
    }

    public void setLimitClientOrderId(@jakarta.annotation.Nullable String limitClientOrderId) {
        this.limitClientOrderId = limitClientOrderId;
    }

    public OrderListPlaceRequest limitIcebergQty(
            @jakarta.annotation.Nullable Double limitIcebergQty) {
        this.limitIcebergQty = limitIcebergQty;
        return this;
    }

    /**
     * Get limitIcebergQty
     *
     * @return limitIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getLimitIcebergQty() {
        return limitIcebergQty;
    }

    public void setLimitIcebergQty(@jakarta.annotation.Nullable Double limitIcebergQty) {
        this.limitIcebergQty = limitIcebergQty;
    }

    public OrderListPlaceRequest limitStrategyId(
            @jakarta.annotation.Nullable Long limitStrategyId) {
        this.limitStrategyId = limitStrategyId;
        return this;
    }

    /**
     * Get limitStrategyId
     *
     * @return limitStrategyId
     */
    @jakarta.annotation.Nullable
    public Long getLimitStrategyId() {
        return limitStrategyId;
    }

    public void setLimitStrategyId(@jakarta.annotation.Nullable Long limitStrategyId) {
        this.limitStrategyId = limitStrategyId;
    }

    public OrderListPlaceRequest limitStrategyType(
            @jakarta.annotation.Nullable Integer limitStrategyType) {
        this.limitStrategyType = limitStrategyType;
        return this;
    }

    /**
     * Get limitStrategyType
     *
     * @return limitStrategyType
     */
    @jakarta.annotation.Nullable
    public Integer getLimitStrategyType() {
        return limitStrategyType;
    }

    public void setLimitStrategyType(@jakarta.annotation.Nullable Integer limitStrategyType) {
        this.limitStrategyType = limitStrategyType;
    }

    public OrderListPlaceRequest stopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
        return this;
    }

    /**
     * Get stopPrice
     *
     * @return stopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
    }

    public OrderListPlaceRequest trailingDelta(@jakarta.annotation.Nullable Integer trailingDelta) {
        this.trailingDelta = trailingDelta;
        return this;
    }

    /**
     * Get trailingDelta
     *
     * @return trailingDelta
     */
    @jakarta.annotation.Nullable
    public Integer getTrailingDelta() {
        return trailingDelta;
    }

    public void setTrailingDelta(@jakarta.annotation.Nullable Integer trailingDelta) {
        this.trailingDelta = trailingDelta;
    }

    public OrderListPlaceRequest stopClientOrderId(
            @jakarta.annotation.Nullable String stopClientOrderId) {
        this.stopClientOrderId = stopClientOrderId;
        return this;
    }

    /**
     * Get stopClientOrderId
     *
     * @return stopClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getStopClientOrderId() {
        return stopClientOrderId;
    }

    public void setStopClientOrderId(@jakarta.annotation.Nullable String stopClientOrderId) {
        this.stopClientOrderId = stopClientOrderId;
    }

    public OrderListPlaceRequest stopLimitPrice(
            @jakarta.annotation.Nullable Double stopLimitPrice) {
        this.stopLimitPrice = stopLimitPrice;
        return this;
    }

    /**
     * Get stopLimitPrice
     *
     * @return stopLimitPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getStopLimitPrice() {
        return stopLimitPrice;
    }

    public void setStopLimitPrice(@jakarta.annotation.Nullable Double stopLimitPrice) {
        this.stopLimitPrice = stopLimitPrice;
    }

    public OrderListPlaceRequest stopLimitTimeInForce(
            @jakarta.annotation.Nullable StopLimitTimeInForce stopLimitTimeInForce) {
        this.stopLimitTimeInForce = stopLimitTimeInForce;
        return this;
    }

    /**
     * Get stopLimitTimeInForce
     *
     * @return stopLimitTimeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public StopLimitTimeInForce getStopLimitTimeInForce() {
        return stopLimitTimeInForce;
    }

    public void setStopLimitTimeInForce(
            @jakarta.annotation.Nullable StopLimitTimeInForce stopLimitTimeInForce) {
        this.stopLimitTimeInForce = stopLimitTimeInForce;
    }

    public OrderListPlaceRequest stopIcebergQty(
            @jakarta.annotation.Nullable Double stopIcebergQty) {
        this.stopIcebergQty = stopIcebergQty;
        return this;
    }

    /**
     * Get stopIcebergQty
     *
     * @return stopIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getStopIcebergQty() {
        return stopIcebergQty;
    }

    public void setStopIcebergQty(@jakarta.annotation.Nullable Double stopIcebergQty) {
        this.stopIcebergQty = stopIcebergQty;
    }

    public OrderListPlaceRequest stopStrategyId(@jakarta.annotation.Nullable Long stopStrategyId) {
        this.stopStrategyId = stopStrategyId;
        return this;
    }

    /**
     * Get stopStrategyId
     *
     * @return stopStrategyId
     */
    @jakarta.annotation.Nullable
    public Long getStopStrategyId() {
        return stopStrategyId;
    }

    public void setStopStrategyId(@jakarta.annotation.Nullable Long stopStrategyId) {
        this.stopStrategyId = stopStrategyId;
    }

    public OrderListPlaceRequest stopStrategyType(
            @jakarta.annotation.Nullable Integer stopStrategyType) {
        this.stopStrategyType = stopStrategyType;
        return this;
    }

    /**
     * Get stopStrategyType
     *
     * @return stopStrategyType
     */
    @jakarta.annotation.Nullable
    public Integer getStopStrategyType() {
        return stopStrategyType;
    }

    public void setStopStrategyType(@jakarta.annotation.Nullable Integer stopStrategyType) {
        this.stopStrategyType = stopStrategyType;
    }

    public OrderListPlaceRequest newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    @Valid
    public NewOrderRespType getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public OrderListPlaceRequest selfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    @Valid
    public SelfTradePreventionMode getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public OrderListPlaceRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderListPlaceRequest orderListPlaceRequest = (OrderListPlaceRequest) o;
        return Objects.equals(this.symbol, orderListPlaceRequest.symbol)
                && Objects.equals(this.side, orderListPlaceRequest.side)
                && Objects.equals(this.price, orderListPlaceRequest.price)
                && Objects.equals(this.quantity, orderListPlaceRequest.quantity)
                && Objects.equals(this.listClientOrderId, orderListPlaceRequest.listClientOrderId)
                && Objects.equals(this.limitClientOrderId, orderListPlaceRequest.limitClientOrderId)
                && Objects.equals(this.limitIcebergQty, orderListPlaceRequest.limitIcebergQty)
                && Objects.equals(this.limitStrategyId, orderListPlaceRequest.limitStrategyId)
                && Objects.equals(this.limitStrategyType, orderListPlaceRequest.limitStrategyType)
                && Objects.equals(this.stopPrice, orderListPlaceRequest.stopPrice)
                && Objects.equals(this.trailingDelta, orderListPlaceRequest.trailingDelta)
                && Objects.equals(this.stopClientOrderId, orderListPlaceRequest.stopClientOrderId)
                && Objects.equals(this.stopLimitPrice, orderListPlaceRequest.stopLimitPrice)
                && Objects.equals(
                        this.stopLimitTimeInForce, orderListPlaceRequest.stopLimitTimeInForce)
                && Objects.equals(this.stopIcebergQty, orderListPlaceRequest.stopIcebergQty)
                && Objects.equals(this.stopStrategyId, orderListPlaceRequest.stopStrategyId)
                && Objects.equals(this.stopStrategyType, orderListPlaceRequest.stopStrategyType)
                && Objects.equals(this.newOrderRespType, orderListPlaceRequest.newOrderRespType)
                && Objects.equals(
                        this.selfTradePreventionMode, orderListPlaceRequest.selfTradePreventionMode)
                && Objects.equals(this.recvWindow, orderListPlaceRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                side,
                price,
                quantity,
                listClientOrderId,
                limitClientOrderId,
                limitIcebergQty,
                limitStrategyId,
                limitStrategyType,
                stopPrice,
                trailingDelta,
                stopClientOrderId,
                stopLimitPrice,
                stopLimitTimeInForce,
                stopIcebergQty,
                stopStrategyId,
                stopStrategyType,
                newOrderRespType,
                selfTradePreventionMode,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderListPlaceRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		listClientOrderId: ").append(toIndentedString(listClientOrderId)).append("\n");
        sb.append("		limitClientOrderId: ")
                .append(toIndentedString(limitClientOrderId))
                .append("\n");
        sb.append("		limitIcebergQty: ").append(toIndentedString(limitIcebergQty)).append("\n");
        sb.append("		limitStrategyId: ").append(toIndentedString(limitStrategyId)).append("\n");
        sb.append("		limitStrategyType: ").append(toIndentedString(limitStrategyType)).append("\n");
        sb.append("		stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
        sb.append("		trailingDelta: ").append(toIndentedString(trailingDelta)).append("\n");
        sb.append("		stopClientOrderId: ").append(toIndentedString(stopClientOrderId)).append("\n");
        sb.append("		stopLimitPrice: ").append(toIndentedString(stopLimitPrice)).append("\n");
        sb.append("		stopLimitTimeInForce: ")
                .append(toIndentedString(stopLimitTimeInForce))
                .append("\n");
        sb.append("		stopIcebergQty: ").append(toIndentedString(stopIcebergQty)).append("\n");
        sb.append("		stopStrategyId: ").append(toIndentedString(stopStrategyId)).append("\n");
        sb.append("		stopStrategyType: ").append(toIndentedString(stopStrategyType)).append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        Side sideValue = getSide();
        if (sideValue != null) {
            String sideValueAsString = sideValue.toString();
            valMap.put("side", sideValueAsString);
        }
        Double priceValue = getPrice();
        if (priceValue != null) {
            String priceValueAsString = DecimalFormatter.getFormatter().format(priceValue);
            valMap.put("price", priceValueAsString);
        }
        Double quantityValue = getQuantity();
        if (quantityValue != null) {
            String quantityValueAsString = DecimalFormatter.getFormatter().format(quantityValue);
            valMap.put("quantity", quantityValueAsString);
        }
        String listClientOrderIdValue = getListClientOrderId();
        if (listClientOrderIdValue != null) {
            String listClientOrderIdValueAsString = listClientOrderIdValue.toString();
            valMap.put("listClientOrderId", listClientOrderIdValueAsString);
        }
        String limitClientOrderIdValue = getLimitClientOrderId();
        if (limitClientOrderIdValue != null) {
            String limitClientOrderIdValueAsString = limitClientOrderIdValue.toString();
            valMap.put("limitClientOrderId", limitClientOrderIdValueAsString);
        }
        Double limitIcebergQtyValue = getLimitIcebergQty();
        if (limitIcebergQtyValue != null) {
            String limitIcebergQtyValueAsString =
                    DecimalFormatter.getFormatter().format(limitIcebergQtyValue);
            valMap.put("limitIcebergQty", limitIcebergQtyValueAsString);
        }
        Long limitStrategyIdValue = getLimitStrategyId();
        if (limitStrategyIdValue != null) {
            String limitStrategyIdValueAsString = limitStrategyIdValue.toString();
            valMap.put("limitStrategyId", limitStrategyIdValueAsString);
        }
        Integer limitStrategyTypeValue = getLimitStrategyType();
        if (limitStrategyTypeValue != null) {
            String limitStrategyTypeValueAsString = limitStrategyTypeValue.toString();
            valMap.put("limitStrategyType", limitStrategyTypeValueAsString);
        }
        Double stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            String stopPriceValueAsString = DecimalFormatter.getFormatter().format(stopPriceValue);
            valMap.put("stopPrice", stopPriceValueAsString);
        }
        Integer trailingDeltaValue = getTrailingDelta();
        if (trailingDeltaValue != null) {
            String trailingDeltaValueAsString = trailingDeltaValue.toString();
            valMap.put("trailingDelta", trailingDeltaValueAsString);
        }
        String stopClientOrderIdValue = getStopClientOrderId();
        if (stopClientOrderIdValue != null) {
            String stopClientOrderIdValueAsString = stopClientOrderIdValue.toString();
            valMap.put("stopClientOrderId", stopClientOrderIdValueAsString);
        }
        Double stopLimitPriceValue = getStopLimitPrice();
        if (stopLimitPriceValue != null) {
            String stopLimitPriceValueAsString =
                    DecimalFormatter.getFormatter().format(stopLimitPriceValue);
            valMap.put("stopLimitPrice", stopLimitPriceValueAsString);
        }
        StopLimitTimeInForce stopLimitTimeInForceValue = getStopLimitTimeInForce();
        if (stopLimitTimeInForceValue != null) {
            String stopLimitTimeInForceValueAsString = stopLimitTimeInForceValue.toString();
            valMap.put("stopLimitTimeInForce", stopLimitTimeInForceValueAsString);
        }
        Double stopIcebergQtyValue = getStopIcebergQty();
        if (stopIcebergQtyValue != null) {
            String stopIcebergQtyValueAsString =
                    DecimalFormatter.getFormatter().format(stopIcebergQtyValue);
            valMap.put("stopIcebergQty", stopIcebergQtyValueAsString);
        }
        Long stopStrategyIdValue = getStopStrategyId();
        if (stopStrategyIdValue != null) {
            String stopStrategyIdValueAsString = stopStrategyIdValue.toString();
            valMap.put("stopStrategyId", stopStrategyIdValueAsString);
        }
        Integer stopStrategyTypeValue = getStopStrategyType();
        if (stopStrategyTypeValue != null) {
            String stopStrategyTypeValueAsString = stopStrategyTypeValue.toString();
            valMap.put("stopStrategyType", stopStrategyTypeValueAsString);
        }
        NewOrderRespType newOrderRespTypeValue = getNewOrderRespType();
        if (newOrderRespTypeValue != null) {
            String newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
            valMap.put("newOrderRespType", newOrderRespTypeValueAsString);
        }
        SelfTradePreventionMode selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            String selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValueAsString);
        }
        Long recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            String recvWindowValueAsString = recvWindowValue.toString();
            valMap.put("recvWindow", recvWindowValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object sideValue = getSide();
        if (sideValue != null) {
            valMap.put("side", sideValue);
        }
        Object priceValue = getPrice();
        if (priceValue != null) {
            valMap.put("price", priceValue);
        }
        Object quantityValue = getQuantity();
        if (quantityValue != null) {
            valMap.put("quantity", quantityValue);
        }
        Object listClientOrderIdValue = getListClientOrderId();
        if (listClientOrderIdValue != null) {
            valMap.put("listClientOrderId", listClientOrderIdValue);
        }
        Object limitClientOrderIdValue = getLimitClientOrderId();
        if (limitClientOrderIdValue != null) {
            valMap.put("limitClientOrderId", limitClientOrderIdValue);
        }
        Object limitIcebergQtyValue = getLimitIcebergQty();
        if (limitIcebergQtyValue != null) {
            valMap.put("limitIcebergQty", limitIcebergQtyValue);
        }
        Object limitStrategyIdValue = getLimitStrategyId();
        if (limitStrategyIdValue != null) {
            valMap.put("limitStrategyId", limitStrategyIdValue);
        }
        Object limitStrategyTypeValue = getLimitStrategyType();
        if (limitStrategyTypeValue != null) {
            valMap.put("limitStrategyType", limitStrategyTypeValue);
        }
        Object stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            valMap.put("stopPrice", stopPriceValue);
        }
        Object trailingDeltaValue = getTrailingDelta();
        if (trailingDeltaValue != null) {
            valMap.put("trailingDelta", trailingDeltaValue);
        }
        Object stopClientOrderIdValue = getStopClientOrderId();
        if (stopClientOrderIdValue != null) {
            valMap.put("stopClientOrderId", stopClientOrderIdValue);
        }
        Object stopLimitPriceValue = getStopLimitPrice();
        if (stopLimitPriceValue != null) {
            valMap.put("stopLimitPrice", stopLimitPriceValue);
        }
        Object stopLimitTimeInForceValue = getStopLimitTimeInForce();
        if (stopLimitTimeInForceValue != null) {
            valMap.put("stopLimitTimeInForce", stopLimitTimeInForceValue);
        }
        Object stopIcebergQtyValue = getStopIcebergQty();
        if (stopIcebergQtyValue != null) {
            valMap.put("stopIcebergQty", stopIcebergQtyValue);
        }
        Object stopStrategyIdValue = getStopStrategyId();
        if (stopStrategyIdValue != null) {
            valMap.put("stopStrategyId", stopStrategyIdValue);
        }
        Object stopStrategyTypeValue = getStopStrategyType();
        if (stopStrategyTypeValue != null) {
            valMap.put("stopStrategyType", stopStrategyTypeValue);
        }
        Object newOrderRespTypeValue = getNewOrderRespType();
        if (newOrderRespTypeValue != null) {
            valMap.put("newOrderRespType", newOrderRespTypeValue);
        }
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValue);
        }
        Object recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            valMap.put("recvWindow", recvWindowValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("side");
        openapiFields.add("price");
        openapiFields.add("quantity");
        openapiFields.add("listClientOrderId");
        openapiFields.add("limitClientOrderId");
        openapiFields.add("limitIcebergQty");
        openapiFields.add("limitStrategyId");
        openapiFields.add("limitStrategyType");
        openapiFields.add("stopPrice");
        openapiFields.add("trailingDelta");
        openapiFields.add("stopClientOrderId");
        openapiFields.add("stopLimitPrice");
        openapiFields.add("stopLimitTimeInForce");
        openapiFields.add("stopIcebergQty");
        openapiFields.add("stopStrategyId");
        openapiFields.add("stopStrategyType");
        openapiFields.add("newOrderRespType");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("side");
        openapiRequiredFields.add("price");
        openapiRequiredFields.add("quantity");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderListPlaceRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderListPlaceRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderListPlaceRequest is not found in"
                                        + " the empty JSON string",
                                OrderListPlaceRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderListPlaceRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderListPlaceRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : OrderListPlaceRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        // validate the required field `side`
        Side.validateJsonElement(jsonObj.get("side"));
        if ((jsonObj.get("listClientOrderId") != null
                        && !jsonObj.get("listClientOrderId").isJsonNull())
                && !jsonObj.get("listClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listClientOrderId").toString()));
        }
        if ((jsonObj.get("limitClientOrderId") != null
                        && !jsonObj.get("limitClientOrderId").isJsonNull())
                && !jsonObj.get("limitClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `limitClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("limitClientOrderId").toString()));
        }
        if ((jsonObj.get("stopClientOrderId") != null
                        && !jsonObj.get("stopClientOrderId").isJsonNull())
                && !jsonObj.get("stopClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `stopClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("stopClientOrderId").toString()));
        }
        // validate the optional field `stopLimitTimeInForce`
        if (jsonObj.get("stopLimitTimeInForce") != null
                && !jsonObj.get("stopLimitTimeInForce").isJsonNull()) {
            StopLimitTimeInForce.validateJsonElement(jsonObj.get("stopLimitTimeInForce"));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespType.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        // validate the optional field `selfTradePreventionMode`
        if (jsonObj.get("selfTradePreventionMode") != null
                && !jsonObj.get("selfTradePreventionMode").isJsonNull()) {
            SelfTradePreventionMode.validateJsonElement(jsonObj.get("selfTradePreventionMode"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderListPlaceRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderListPlaceRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderListPlaceRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderListPlaceRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderListPlaceRequest>() {
                        @Override
                        public void write(JsonWriter out, OrderListPlaceRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderListPlaceRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderListPlaceRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderListPlaceRequest
     * @throws IOException if the JSON string is invalid with respect to OrderListPlaceRequest
     */
    public static OrderListPlaceRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderListPlaceRequest.class);
    }

    /**
     * Convert an instance of OrderListPlaceRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
