/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** MyPreventedMatchesResponseResultInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MyPreventedMatchesResponseResultInner extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_PREVENTED_MATCH_ID = "preventedMatchId";

    @SerializedName(SERIALIZED_NAME_PREVENTED_MATCH_ID)
    @jakarta.annotation.Nullable
    private Long preventedMatchId;

    public static final String SERIALIZED_NAME_TAKER_ORDER_ID = "takerOrderId";

    @SerializedName(SERIALIZED_NAME_TAKER_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long takerOrderId;

    public static final String SERIALIZED_NAME_MAKER_SYMBOL = "makerSymbol";

    @SerializedName(SERIALIZED_NAME_MAKER_SYMBOL)
    @jakarta.annotation.Nullable
    private String makerSymbol;

    public static final String SERIALIZED_NAME_MAKER_ORDER_ID = "makerOrderId";

    @SerializedName(SERIALIZED_NAME_MAKER_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long makerOrderId;

    public static final String SERIALIZED_NAME_TRADE_GROUP_ID = "tradeGroupId";

    @SerializedName(SERIALIZED_NAME_TRADE_GROUP_ID)
    @jakarta.annotation.Nullable
    private Long tradeGroupId;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private String selfTradePreventionMode;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_MAKER_PREVENTED_QUANTITY = "makerPreventedQuantity";

    @SerializedName(SERIALIZED_NAME_MAKER_PREVENTED_QUANTITY)
    @jakarta.annotation.Nullable
    private String makerPreventedQuantity;

    public static final String SERIALIZED_NAME_TRANSACT_TIME = "transactTime";

    @SerializedName(SERIALIZED_NAME_TRANSACT_TIME)
    @jakarta.annotation.Nullable
    private Long transactTime;

    public MyPreventedMatchesResponseResultInner() {}

    public MyPreventedMatchesResponseResultInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public MyPreventedMatchesResponseResultInner preventedMatchId(
            @jakarta.annotation.Nullable Long preventedMatchId) {
        this.preventedMatchId = preventedMatchId;
        return this;
    }

    /**
     * Get preventedMatchId
     *
     * @return preventedMatchId
     */
    @jakarta.annotation.Nullable
    public Long getPreventedMatchId() {
        return preventedMatchId;
    }

    public void setPreventedMatchId(@jakarta.annotation.Nullable Long preventedMatchId) {
        this.preventedMatchId = preventedMatchId;
    }

    public MyPreventedMatchesResponseResultInner takerOrderId(
            @jakarta.annotation.Nullable Long takerOrderId) {
        this.takerOrderId = takerOrderId;
        return this;
    }

    /**
     * Get takerOrderId
     *
     * @return takerOrderId
     */
    @jakarta.annotation.Nullable
    public Long getTakerOrderId() {
        return takerOrderId;
    }

    public void setTakerOrderId(@jakarta.annotation.Nullable Long takerOrderId) {
        this.takerOrderId = takerOrderId;
    }

    public MyPreventedMatchesResponseResultInner makerSymbol(
            @jakarta.annotation.Nullable String makerSymbol) {
        this.makerSymbol = makerSymbol;
        return this;
    }

    /**
     * Get makerSymbol
     *
     * @return makerSymbol
     */
    @jakarta.annotation.Nullable
    public String getMakerSymbol() {
        return makerSymbol;
    }

    public void setMakerSymbol(@jakarta.annotation.Nullable String makerSymbol) {
        this.makerSymbol = makerSymbol;
    }

    public MyPreventedMatchesResponseResultInner makerOrderId(
            @jakarta.annotation.Nullable Long makerOrderId) {
        this.makerOrderId = makerOrderId;
        return this;
    }

    /**
     * Get makerOrderId
     *
     * @return makerOrderId
     */
    @jakarta.annotation.Nullable
    public Long getMakerOrderId() {
        return makerOrderId;
    }

    public void setMakerOrderId(@jakarta.annotation.Nullable Long makerOrderId) {
        this.makerOrderId = makerOrderId;
    }

    public MyPreventedMatchesResponseResultInner tradeGroupId(
            @jakarta.annotation.Nullable Long tradeGroupId) {
        this.tradeGroupId = tradeGroupId;
        return this;
    }

    /**
     * Get tradeGroupId
     *
     * @return tradeGroupId
     */
    @jakarta.annotation.Nullable
    public Long getTradeGroupId() {
        return tradeGroupId;
    }

    public void setTradeGroupId(@jakarta.annotation.Nullable Long tradeGroupId) {
        this.tradeGroupId = tradeGroupId;
    }

    public MyPreventedMatchesResponseResultInner selfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    public String getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public MyPreventedMatchesResponseResultInner price(@jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public MyPreventedMatchesResponseResultInner makerPreventedQuantity(
            @jakarta.annotation.Nullable String makerPreventedQuantity) {
        this.makerPreventedQuantity = makerPreventedQuantity;
        return this;
    }

    /**
     * Get makerPreventedQuantity
     *
     * @return makerPreventedQuantity
     */
    @jakarta.annotation.Nullable
    public String getMakerPreventedQuantity() {
        return makerPreventedQuantity;
    }

    public void setMakerPreventedQuantity(
            @jakarta.annotation.Nullable String makerPreventedQuantity) {
        this.makerPreventedQuantity = makerPreventedQuantity;
    }

    public MyPreventedMatchesResponseResultInner transactTime(
            @jakarta.annotation.Nullable Long transactTime) {
        this.transactTime = transactTime;
        return this;
    }

    /**
     * Get transactTime
     *
     * @return transactTime
     */
    @jakarta.annotation.Nullable
    public Long getTransactTime() {
        return transactTime;
    }

    public void setTransactTime(@jakarta.annotation.Nullable Long transactTime) {
        this.transactTime = transactTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MyPreventedMatchesResponseResultInner myPreventedMatchesResponseResultInner =
                (MyPreventedMatchesResponseResultInner) o;
        return Objects.equals(this.symbol, myPreventedMatchesResponseResultInner.symbol)
                && Objects.equals(
                        this.preventedMatchId,
                        myPreventedMatchesResponseResultInner.preventedMatchId)
                && Objects.equals(
                        this.takerOrderId, myPreventedMatchesResponseResultInner.takerOrderId)
                && Objects.equals(
                        this.makerSymbol, myPreventedMatchesResponseResultInner.makerSymbol)
                && Objects.equals(
                        this.makerOrderId, myPreventedMatchesResponseResultInner.makerOrderId)
                && Objects.equals(
                        this.tradeGroupId, myPreventedMatchesResponseResultInner.tradeGroupId)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        myPreventedMatchesResponseResultInner.selfTradePreventionMode)
                && Objects.equals(this.price, myPreventedMatchesResponseResultInner.price)
                && Objects.equals(
                        this.makerPreventedQuantity,
                        myPreventedMatchesResponseResultInner.makerPreventedQuantity)
                && Objects.equals(
                        this.transactTime, myPreventedMatchesResponseResultInner.transactTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                preventedMatchId,
                takerOrderId,
                makerSymbol,
                makerOrderId,
                tradeGroupId,
                selfTradePreventionMode,
                price,
                makerPreventedQuantity,
                transactTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MyPreventedMatchesResponseResultInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		preventedMatchId: ").append(toIndentedString(preventedMatchId)).append("\n");
        sb.append("		takerOrderId: ").append(toIndentedString(takerOrderId)).append("\n");
        sb.append("		makerSymbol: ").append(toIndentedString(makerSymbol)).append("\n");
        sb.append("		makerOrderId: ").append(toIndentedString(makerOrderId)).append("\n");
        sb.append("		tradeGroupId: ").append(toIndentedString(tradeGroupId)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		makerPreventedQuantity: ")
                .append(toIndentedString(makerPreventedQuantity))
                .append("\n");
        sb.append("		transactTime: ").append(toIndentedString(transactTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        Long preventedMatchIdValue = getPreventedMatchId();
        if (preventedMatchIdValue != null) {
            String preventedMatchIdValueAsString = preventedMatchIdValue.toString();
            valMap.put("preventedMatchId", preventedMatchIdValueAsString);
        }
        Long takerOrderIdValue = getTakerOrderId();
        if (takerOrderIdValue != null) {
            String takerOrderIdValueAsString = takerOrderIdValue.toString();
            valMap.put("takerOrderId", takerOrderIdValueAsString);
        }
        String makerSymbolValue = getMakerSymbol();
        if (makerSymbolValue != null) {
            String makerSymbolValueAsString = makerSymbolValue.toString();
            valMap.put("makerSymbol", makerSymbolValueAsString);
        }
        Long makerOrderIdValue = getMakerOrderId();
        if (makerOrderIdValue != null) {
            String makerOrderIdValueAsString = makerOrderIdValue.toString();
            valMap.put("makerOrderId", makerOrderIdValueAsString);
        }
        Long tradeGroupIdValue = getTradeGroupId();
        if (tradeGroupIdValue != null) {
            String tradeGroupIdValueAsString = tradeGroupIdValue.toString();
            valMap.put("tradeGroupId", tradeGroupIdValueAsString);
        }
        String selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            String selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValueAsString);
        }
        String priceValue = getPrice();
        if (priceValue != null) {
            String priceValueAsString = priceValue.toString();
            valMap.put("price", priceValueAsString);
        }
        String makerPreventedQuantityValue = getMakerPreventedQuantity();
        if (makerPreventedQuantityValue != null) {
            String makerPreventedQuantityValueAsString = makerPreventedQuantityValue.toString();
            valMap.put("makerPreventedQuantity", makerPreventedQuantityValueAsString);
        }
        Long transactTimeValue = getTransactTime();
        if (transactTimeValue != null) {
            String transactTimeValueAsString = transactTimeValue.toString();
            valMap.put("transactTime", transactTimeValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object preventedMatchIdValue = getPreventedMatchId();
        if (preventedMatchIdValue != null) {
            valMap.put("preventedMatchId", preventedMatchIdValue);
        }
        Object takerOrderIdValue = getTakerOrderId();
        if (takerOrderIdValue != null) {
            valMap.put("takerOrderId", takerOrderIdValue);
        }
        Object makerSymbolValue = getMakerSymbol();
        if (makerSymbolValue != null) {
            valMap.put("makerSymbol", makerSymbolValue);
        }
        Object makerOrderIdValue = getMakerOrderId();
        if (makerOrderIdValue != null) {
            valMap.put("makerOrderId", makerOrderIdValue);
        }
        Object tradeGroupIdValue = getTradeGroupId();
        if (tradeGroupIdValue != null) {
            valMap.put("tradeGroupId", tradeGroupIdValue);
        }
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValue);
        }
        Object priceValue = getPrice();
        if (priceValue != null) {
            valMap.put("price", priceValue);
        }
        Object makerPreventedQuantityValue = getMakerPreventedQuantity();
        if (makerPreventedQuantityValue != null) {
            valMap.put("makerPreventedQuantity", makerPreventedQuantityValue);
        }
        Object transactTimeValue = getTransactTime();
        if (transactTimeValue != null) {
            valMap.put("transactTime", transactTimeValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("preventedMatchId");
        openapiFields.add("takerOrderId");
        openapiFields.add("makerSymbol");
        openapiFields.add("makerOrderId");
        openapiFields.add("tradeGroupId");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("price");
        openapiFields.add("makerPreventedQuantity");
        openapiFields.add("transactTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     MyPreventedMatchesResponseResultInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MyPreventedMatchesResponseResultInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MyPreventedMatchesResponseResultInner"
                                        + " is not found in the empty JSON string",
                                MyPreventedMatchesResponseResultInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MyPreventedMatchesResponseResultInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `MyPreventedMatchesResponseResultInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("makerSymbol") != null && !jsonObj.get("makerSymbol").isJsonNull())
                && !jsonObj.get("makerSymbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `makerSymbol` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("makerSymbol").toString()));
        }
        if ((jsonObj.get("selfTradePreventionMode") != null
                        && !jsonObj.get("selfTradePreventionMode").isJsonNull())
                && !jsonObj.get("selfTradePreventionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `selfTradePreventionMode` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("selfTradePreventionMode").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("makerPreventedQuantity") != null
                        && !jsonObj.get("makerPreventedQuantity").isJsonNull())
                && !jsonObj.get("makerPreventedQuantity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `makerPreventedQuantity` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("makerPreventedQuantity").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MyPreventedMatchesResponseResultInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MyPreventedMatchesResponseResultInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MyPreventedMatchesResponseResultInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(MyPreventedMatchesResponseResultInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MyPreventedMatchesResponseResultInner>() {
                        @Override
                        public void write(
                                JsonWriter out, MyPreventedMatchesResponseResultInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MyPreventedMatchesResponseResultInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MyPreventedMatchesResponseResultInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MyPreventedMatchesResponseResultInner
     * @throws IOException if the JSON string is invalid with respect to
     *     MyPreventedMatchesResponseResultInner
     */
    public static MyPreventedMatchesResponseResultInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, MyPreventedMatchesResponseResultInner.class);
    }

    /**
     * Convert an instance of MyPreventedMatchesResponseResultInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
