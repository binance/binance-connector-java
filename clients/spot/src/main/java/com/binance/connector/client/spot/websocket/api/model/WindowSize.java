/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import org.hibernate.validator.constraints.*;

/** Gets or Sets windowSize */
@JsonAdapter(WindowSize.Adapter.class)
public enum WindowSize {
    WINDOW_SIZE_1m("1m"),

    WINDOW_SIZE_2m("2m"),

    WINDOW_SIZE_3m("3m"),

    WINDOW_SIZE_4m("4m"),

    WINDOW_SIZE_5m("5m"),

    WINDOW_SIZE_6m("6m"),

    WINDOW_SIZE_7m("7m"),

    WINDOW_SIZE_8m("8m"),

    WINDOW_SIZE_9m("9m"),

    WINDOW_SIZE_10m("10m"),

    WINDOW_SIZE_11m("11m"),

    WINDOW_SIZE_12m("12m"),

    WINDOW_SIZE_13m("13m"),

    WINDOW_SIZE_14m("14m"),

    WINDOW_SIZE_15m("15m"),

    WINDOW_SIZE_16m("16m"),

    WINDOW_SIZE_17m("17m"),

    WINDOW_SIZE_18m("18m"),

    WINDOW_SIZE_19m("19m"),

    WINDOW_SIZE_20m("20m"),

    WINDOW_SIZE_21m("21m"),

    WINDOW_SIZE_22m("22m"),

    WINDOW_SIZE_23m("23m"),

    WINDOW_SIZE_24m("24m"),

    WINDOW_SIZE_25m("25m"),

    WINDOW_SIZE_26m("26m"),

    WINDOW_SIZE_27m("27m"),

    WINDOW_SIZE_28m("28m"),

    WINDOW_SIZE_29m("29m"),

    WINDOW_SIZE_30m("30m"),

    WINDOW_SIZE_31m("31m"),

    WINDOW_SIZE_32m("32m"),

    WINDOW_SIZE_33m("33m"),

    WINDOW_SIZE_34m("34m"),

    WINDOW_SIZE_35m("35m"),

    WINDOW_SIZE_36m("36m"),

    WINDOW_SIZE_37m("37m"),

    WINDOW_SIZE_38m("38m"),

    WINDOW_SIZE_39m("39m"),

    WINDOW_SIZE_40m("40m"),

    WINDOW_SIZE_41m("41m"),

    WINDOW_SIZE_42m("42m"),

    WINDOW_SIZE_43m("43m"),

    WINDOW_SIZE_44m("44m"),

    WINDOW_SIZE_45m("45m"),

    WINDOW_SIZE_46m("46m"),

    WINDOW_SIZE_47m("47m"),

    WINDOW_SIZE_48m("48m"),

    WINDOW_SIZE_49m("49m"),

    WINDOW_SIZE_50m("50m"),

    WINDOW_SIZE_51m("51m"),

    WINDOW_SIZE_52m("52m"),

    WINDOW_SIZE_53m("53m"),

    WINDOW_SIZE_54m("54m"),

    WINDOW_SIZE_55m("55m"),

    WINDOW_SIZE_56m("56m"),

    WINDOW_SIZE_57m("57m"),

    WINDOW_SIZE_58m("58m"),

    WINDOW_SIZE_59m("59m"),

    WINDOW_SIZE_1h("1h"),

    WINDOW_SIZE_2h("2h"),

    WINDOW_SIZE_3h("3h"),

    WINDOW_SIZE_4h("4h"),

    WINDOW_SIZE_5h("5h"),

    WINDOW_SIZE_6h("6h"),

    WINDOW_SIZE_7h("7h"),

    WINDOW_SIZE_8h("8h"),

    WINDOW_SIZE_9h("9h"),

    WINDOW_SIZE_10h("10h"),

    WINDOW_SIZE_11h("11h"),

    WINDOW_SIZE_12h("12h"),

    WINDOW_SIZE_13h("13h"),

    WINDOW_SIZE_14h("14h"),

    WINDOW_SIZE_15h("15h"),

    WINDOW_SIZE_16h("16h"),

    WINDOW_SIZE_17h("17h"),

    WINDOW_SIZE_18h("18h"),

    WINDOW_SIZE_19h("19h"),

    WINDOW_SIZE_20h("20h"),

    WINDOW_SIZE_21h("21h"),

    WINDOW_SIZE_22h("22h"),

    WINDOW_SIZE_23h("23h"),

    WINDOW_SIZE_1d("1d"),

    WINDOW_SIZE_2d("2d"),

    WINDOW_SIZE_3d("3d"),

    WINDOW_SIZE_4d("4d"),

    WINDOW_SIZE_5d("5d"),

    WINDOW_SIZE_6d("6d");

    private String value;

    WindowSize(String value) {
        this.value = value;
    }

    public String getValue() {
        return value;
    }

    @Override
    public String toString() {
        return String.valueOf(value);
    }

    public static WindowSize fromValue(String value) {
        for (WindowSize b : WindowSize.values()) {
            if (b.value.equals(value)) {
                return b;
            }
        }
        throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WindowSize> {
        @Override
        public void write(final JsonWriter jsonWriter, final WindowSize enumeration)
                throws IOException {
            jsonWriter.value(enumeration.getValue());
        }

        @Override
        public WindowSize read(final JsonReader jsonReader) throws IOException {
            String value = jsonReader.nextString();
            return WindowSize.fromValue(value);
        }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        String value = jsonElement.getAsString();
        WindowSize.fromValue(value);
    }
}
