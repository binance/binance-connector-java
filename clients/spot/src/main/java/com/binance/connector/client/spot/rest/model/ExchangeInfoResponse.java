/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** ExchangeInfoResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ExchangeInfoResponse {
    public static final String SERIALIZED_NAME_TIMEZONE = "timezone";

    @SerializedName(SERIALIZED_NAME_TIMEZONE)
    @jakarta.annotation.Nullable
    private String timezone;

    public static final String SERIALIZED_NAME_SERVER_TIME = "serverTime";

    @SerializedName(SERIALIZED_NAME_SERVER_TIME)
    @jakarta.annotation.Nullable
    private Long serverTime;

    public static final String SERIALIZED_NAME_RATE_LIMITS = "rateLimits";

    @SerializedName(SERIALIZED_NAME_RATE_LIMITS)
    @jakarta.annotation.Nullable
    private List<@Valid ExchangeInfoResponseRateLimitsInner> rateLimits;

    public static final String SERIALIZED_NAME_EXCHANGE_FILTERS = "exchangeFilters";

    @SerializedName(SERIALIZED_NAME_EXCHANGE_FILTERS)
    @jakarta.annotation.Nullable
    private List<String> exchangeFilters;

    public static final String SERIALIZED_NAME_SYMBOLS = "symbols";

    @SerializedName(SERIALIZED_NAME_SYMBOLS)
    @jakarta.annotation.Nullable
    private List<@Valid ExchangeInfoResponseSymbolsInner> symbols;

    public ExchangeInfoResponse() {}

    public ExchangeInfoResponse timezone(@jakarta.annotation.Nullable String timezone) {
        this.timezone = timezone;
        return this;
    }

    /**
     * Get timezone
     *
     * @return timezone
     */
    @jakarta.annotation.Nullable
    public String getTimezone() {
        return timezone;
    }

    public void setTimezone(@jakarta.annotation.Nullable String timezone) {
        this.timezone = timezone;
    }

    public ExchangeInfoResponse serverTime(@jakarta.annotation.Nullable Long serverTime) {
        this.serverTime = serverTime;
        return this;
    }

    /**
     * Get serverTime
     *
     * @return serverTime
     */
    @jakarta.annotation.Nullable
    public Long getServerTime() {
        return serverTime;
    }

    public void setServerTime(@jakarta.annotation.Nullable Long serverTime) {
        this.serverTime = serverTime;
    }

    public ExchangeInfoResponse rateLimits(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInfoResponseRateLimitsInner> rateLimits) {
        this.rateLimits = rateLimits;
        return this;
    }

    public ExchangeInfoResponse addRateLimitsItem(
            ExchangeInfoResponseRateLimitsInner rateLimitsItem) {
        if (this.rateLimits == null) {
            this.rateLimits = new ArrayList<>();
        }
        this.rateLimits.add(rateLimitsItem);
        return this;
    }

    /**
     * Get rateLimits
     *
     * @return rateLimits
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ExchangeInfoResponseRateLimitsInner> getRateLimits() {
        return rateLimits;
    }

    public void setRateLimits(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInfoResponseRateLimitsInner> rateLimits) {
        this.rateLimits = rateLimits;
    }

    public ExchangeInfoResponse exchangeFilters(
            @jakarta.annotation.Nullable List<String> exchangeFilters) {
        this.exchangeFilters = exchangeFilters;
        return this;
    }

    public ExchangeInfoResponse addExchangeFiltersItem(String exchangeFiltersItem) {
        if (this.exchangeFilters == null) {
            this.exchangeFilters = new ArrayList<>();
        }
        this.exchangeFilters.add(exchangeFiltersItem);
        return this;
    }

    /**
     * Get exchangeFilters
     *
     * @return exchangeFilters
     */
    @jakarta.annotation.Nullable
    public List<String> getExchangeFilters() {
        return exchangeFilters;
    }

    public void setExchangeFilters(@jakarta.annotation.Nullable List<String> exchangeFilters) {
        this.exchangeFilters = exchangeFilters;
    }

    public ExchangeInfoResponse symbols(
            @jakarta.annotation.Nullable List<@Valid ExchangeInfoResponseSymbolsInner> symbols) {
        this.symbols = symbols;
        return this;
    }

    public ExchangeInfoResponse addSymbolsItem(ExchangeInfoResponseSymbolsInner symbolsItem) {
        if (this.symbols == null) {
            this.symbols = new ArrayList<>();
        }
        this.symbols.add(symbolsItem);
        return this;
    }

    /**
     * Get symbols
     *
     * @return symbols
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ExchangeInfoResponseSymbolsInner> getSymbols() {
        return symbols;
    }

    public void setSymbols(
            @jakarta.annotation.Nullable List<@Valid ExchangeInfoResponseSymbolsInner> symbols) {
        this.symbols = symbols;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExchangeInfoResponse exchangeInfoResponse = (ExchangeInfoResponse) o;
        return Objects.equals(this.timezone, exchangeInfoResponse.timezone)
                && Objects.equals(this.serverTime, exchangeInfoResponse.serverTime)
                && Objects.equals(this.rateLimits, exchangeInfoResponse.rateLimits)
                && Objects.equals(this.exchangeFilters, exchangeInfoResponse.exchangeFilters)
                && Objects.equals(this.symbols, exchangeInfoResponse.symbols);
    }

    @Override
    public int hashCode() {
        return Objects.hash(timezone, serverTime, rateLimits, exchangeFilters, symbols);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExchangeInfoResponse {\n");
        sb.append("		timezone: ").append(toIndentedString(timezone)).append("\n");
        sb.append("		serverTime: ").append(toIndentedString(serverTime)).append("\n");
        sb.append("		rateLimits: ").append(toIndentedString(rateLimits)).append("\n");
        sb.append("		exchangeFilters: ").append(toIndentedString(exchangeFilters)).append("\n");
        sb.append("		symbols: ").append(toIndentedString(symbols)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object timezoneValue = getTimezone();
        String timezoneValueAsString = "";
        timezoneValueAsString = timezoneValue.toString();
        sb.append("timezone=").append(urlEncode(timezoneValueAsString)).append("");
        Object serverTimeValue = getServerTime();
        String serverTimeValueAsString = "";
        serverTimeValueAsString = serverTimeValue.toString();
        sb.append("serverTime=").append(urlEncode(serverTimeValueAsString)).append("");
        Object rateLimitsValue = getRateLimits();
        String rateLimitsValueAsString = "";
        rateLimitsValueAsString =
                (String)
                        ((Collection) rateLimitsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("rateLimits=").append(urlEncode(rateLimitsValueAsString)).append("");
        Object exchangeFiltersValue = getExchangeFilters();
        String exchangeFiltersValueAsString = "";
        exchangeFiltersValueAsString =
                (String)
                        ((Collection) exchangeFiltersValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("exchangeFilters=").append(urlEncode(exchangeFiltersValueAsString)).append("");
        Object symbolsValue = getSymbols();
        String symbolsValueAsString = "";
        symbolsValueAsString =
                (String)
                        ((Collection) symbolsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("symbols=").append(urlEncode(symbolsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("timezone");
        openapiFields.add("serverTime");
        openapiFields.add("rateLimits");
        openapiFields.add("exchangeFilters");
        openapiFields.add("symbols");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ExchangeInfoResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ExchangeInfoResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ExchangeInfoResponse is not found in"
                                        + " the empty JSON string",
                                ExchangeInfoResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ExchangeInfoResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ExchangeInfoResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull())
                && !jsonObj.get("timezone").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timezone` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timezone").toString()));
        }
        if (jsonObj.get("rateLimits") != null && !jsonObj.get("rateLimits").isJsonNull()) {
            JsonArray jsonArrayrateLimits = jsonObj.getAsJsonArray("rateLimits");
            if (jsonArrayrateLimits != null) {
                // ensure the json data is an array
                if (!jsonObj.get("rateLimits").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `rateLimits` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("rateLimits").toString()));
                }

                // validate the optional field `rateLimits` (array)
                for (int i = 0; i < jsonArrayrateLimits.size(); i++) {
                    ExchangeInfoResponseRateLimitsInner.validateJsonElement(
                            jsonArrayrateLimits.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("exchangeFilters") != null
                && !jsonObj.get("exchangeFilters").isJsonNull()
                && !jsonObj.get("exchangeFilters").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `exchangeFilters` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("exchangeFilters").toString()));
        }
        if (jsonObj.get("symbols") != null && !jsonObj.get("symbols").isJsonNull()) {
            JsonArray jsonArraysymbols = jsonObj.getAsJsonArray("symbols");
            if (jsonArraysymbols != null) {
                // ensure the json data is an array
                if (!jsonObj.get("symbols").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `symbols` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("symbols").toString()));
                }

                // validate the optional field `symbols` (array)
                for (int i = 0; i < jsonArraysymbols.size(); i++) {
                    ExchangeInfoResponseSymbolsInner.validateJsonElement(jsonArraysymbols.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ExchangeInfoResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ExchangeInfoResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeInfoResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ExchangeInfoResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ExchangeInfoResponse>() {
                        @Override
                        public void write(JsonWriter out, ExchangeInfoResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ExchangeInfoResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ExchangeInfoResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ExchangeInfoResponse
     * @throws IOException if the JSON string is invalid with respect to ExchangeInfoResponse
     */
    public static ExchangeInfoResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ExchangeInfoResponse.class);
    }

    /**
     * Convert an instance of ExchangeInfoResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
