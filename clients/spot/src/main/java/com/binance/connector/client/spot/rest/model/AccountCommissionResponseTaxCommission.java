/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AccountCommissionResponseTaxCommission */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountCommissionResponseTaxCommission {
    public static final String SERIALIZED_NAME_MAKER = "maker";

    @SerializedName(SERIALIZED_NAME_MAKER)
    @jakarta.annotation.Nullable
    private String maker;

    public static final String SERIALIZED_NAME_TAKER = "taker";

    @SerializedName(SERIALIZED_NAME_TAKER)
    @jakarta.annotation.Nullable
    private String taker;

    public static final String SERIALIZED_NAME_BUYER = "buyer";

    @SerializedName(SERIALIZED_NAME_BUYER)
    @jakarta.annotation.Nullable
    private String buyer;

    public static final String SERIALIZED_NAME_SELLER = "seller";

    @SerializedName(SERIALIZED_NAME_SELLER)
    @jakarta.annotation.Nullable
    private String seller;

    public AccountCommissionResponseTaxCommission() {}

    public AccountCommissionResponseTaxCommission maker(@jakarta.annotation.Nullable String maker) {
        this.maker = maker;
        return this;
    }

    /**
     * Get maker
     *
     * @return maker
     */
    @jakarta.annotation.Nullable
    public String getMaker() {
        return maker;
    }

    public void setMaker(@jakarta.annotation.Nullable String maker) {
        this.maker = maker;
    }

    public AccountCommissionResponseTaxCommission taker(@jakarta.annotation.Nullable String taker) {
        this.taker = taker;
        return this;
    }

    /**
     * Get taker
     *
     * @return taker
     */
    @jakarta.annotation.Nullable
    public String getTaker() {
        return taker;
    }

    public void setTaker(@jakarta.annotation.Nullable String taker) {
        this.taker = taker;
    }

    public AccountCommissionResponseTaxCommission buyer(@jakarta.annotation.Nullable String buyer) {
        this.buyer = buyer;
        return this;
    }

    /**
     * Get buyer
     *
     * @return buyer
     */
    @jakarta.annotation.Nullable
    public String getBuyer() {
        return buyer;
    }

    public void setBuyer(@jakarta.annotation.Nullable String buyer) {
        this.buyer = buyer;
    }

    public AccountCommissionResponseTaxCommission seller(
            @jakarta.annotation.Nullable String seller) {
        this.seller = seller;
        return this;
    }

    /**
     * Get seller
     *
     * @return seller
     */
    @jakarta.annotation.Nullable
    public String getSeller() {
        return seller;
    }

    public void setSeller(@jakarta.annotation.Nullable String seller) {
        this.seller = seller;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountCommissionResponseTaxCommission accountCommissionResponseTaxCommission =
                (AccountCommissionResponseTaxCommission) o;
        return Objects.equals(this.maker, accountCommissionResponseTaxCommission.maker)
                && Objects.equals(this.taker, accountCommissionResponseTaxCommission.taker)
                && Objects.equals(this.buyer, accountCommissionResponseTaxCommission.buyer)
                && Objects.equals(this.seller, accountCommissionResponseTaxCommission.seller);
    }

    @Override
    public int hashCode() {
        return Objects.hash(maker, taker, buyer, seller);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountCommissionResponseTaxCommission {\n");
        sb.append("		maker: ").append(toIndentedString(maker)).append("\n");
        sb.append("		taker: ").append(toIndentedString(taker)).append("\n");
        sb.append("		buyer: ").append(toIndentedString(buyer)).append("\n");
        sb.append("		seller: ").append(toIndentedString(seller)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object makerValue = getMaker();
        String makerValueAsString = "";
        makerValueAsString = makerValue.toString();
        sb.append("maker=").append(urlEncode(makerValueAsString)).append("");
        Object takerValue = getTaker();
        String takerValueAsString = "";
        takerValueAsString = takerValue.toString();
        sb.append("taker=").append(urlEncode(takerValueAsString)).append("");
        Object buyerValue = getBuyer();
        String buyerValueAsString = "";
        buyerValueAsString = buyerValue.toString();
        sb.append("buyer=").append(urlEncode(buyerValueAsString)).append("");
        Object sellerValue = getSeller();
        String sellerValueAsString = "";
        sellerValueAsString = sellerValue.toString();
        sb.append("seller=").append(urlEncode(sellerValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("maker");
        openapiFields.add("taker");
        openapiFields.add("buyer");
        openapiFields.add("seller");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AccountCommissionResponseTaxCommission
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountCommissionResponseTaxCommission.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountCommissionResponseTaxCommission"
                                        + " is not found in the empty JSON string",
                                AccountCommissionResponseTaxCommission.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountCommissionResponseTaxCommission.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AccountCommissionResponseTaxCommission` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("maker") != null && !jsonObj.get("maker").isJsonNull())
                && !jsonObj.get("maker").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maker` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("maker").toString()));
        }
        if ((jsonObj.get("taker") != null && !jsonObj.get("taker").isJsonNull())
                && !jsonObj.get("taker").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `taker` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("taker").toString()));
        }
        if ((jsonObj.get("buyer") != null && !jsonObj.get("buyer").isJsonNull())
                && !jsonObj.get("buyer").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `buyer` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("buyer").toString()));
        }
        if ((jsonObj.get("seller") != null && !jsonObj.get("seller").isJsonNull())
                && !jsonObj.get("seller").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `seller` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("seller").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountCommissionResponseTaxCommission.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountCommissionResponseTaxCommission'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountCommissionResponseTaxCommission> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AccountCommissionResponseTaxCommission.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountCommissionResponseTaxCommission>() {
                        @Override
                        public void write(
                                JsonWriter out, AccountCommissionResponseTaxCommission value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountCommissionResponseTaxCommission read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountCommissionResponseTaxCommission given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountCommissionResponseTaxCommission
     * @throws IOException if the JSON string is invalid with respect to
     *     AccountCommissionResponseTaxCommission
     */
    public static AccountCommissionResponseTaxCommission fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountCommissionResponseTaxCommission.class);
    }

    /**
     * Convert an instance of AccountCommissionResponseTaxCommission to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
