/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** TickerTradingDayResponseResultInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class TickerTradingDayResponseResultInner extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_PRICE_CHANGE = "priceChange";

    @SerializedName(SERIALIZED_NAME_PRICE_CHANGE)
    @jakarta.annotation.Nullable
    private String priceChange;

    public static final String SERIALIZED_NAME_PRICE_CHANGE_PERCENT = "priceChangePercent";

    @SerializedName(SERIALIZED_NAME_PRICE_CHANGE_PERCENT)
    @jakarta.annotation.Nullable
    private String priceChangePercent;

    public static final String SERIALIZED_NAME_WEIGHTED_AVG_PRICE = "weightedAvgPrice";

    @SerializedName(SERIALIZED_NAME_WEIGHTED_AVG_PRICE)
    @jakarta.annotation.Nullable
    private String weightedAvgPrice;

    public static final String SERIALIZED_NAME_OPEN_PRICE = "openPrice";

    @SerializedName(SERIALIZED_NAME_OPEN_PRICE)
    @jakarta.annotation.Nullable
    private String openPrice;

    public static final String SERIALIZED_NAME_HIGH_PRICE = "highPrice";

    @SerializedName(SERIALIZED_NAME_HIGH_PRICE)
    @jakarta.annotation.Nullable
    private String highPrice;

    public static final String SERIALIZED_NAME_LOW_PRICE = "lowPrice";

    @SerializedName(SERIALIZED_NAME_LOW_PRICE)
    @jakarta.annotation.Nullable
    private String lowPrice;

    public static final String SERIALIZED_NAME_LAST_PRICE = "lastPrice";

    @SerializedName(SERIALIZED_NAME_LAST_PRICE)
    @jakarta.annotation.Nullable
    private String lastPrice;

    public static final String SERIALIZED_NAME_VOLUME = "volume";

    @SerializedName(SERIALIZED_NAME_VOLUME)
    @jakarta.annotation.Nullable
    private String volume;

    public static final String SERIALIZED_NAME_QUOTE_VOLUME = "quoteVolume";

    @SerializedName(SERIALIZED_NAME_QUOTE_VOLUME)
    @jakarta.annotation.Nullable
    private String quoteVolume;

    public static final String SERIALIZED_NAME_OPEN_TIME = "openTime";

    @SerializedName(SERIALIZED_NAME_OPEN_TIME)
    @jakarta.annotation.Nullable
    private Long openTime;

    public static final String SERIALIZED_NAME_CLOSE_TIME = "closeTime";

    @SerializedName(SERIALIZED_NAME_CLOSE_TIME)
    @jakarta.annotation.Nullable
    private Long closeTime;

    public static final String SERIALIZED_NAME_FIRST_ID = "firstId";

    @SerializedName(SERIALIZED_NAME_FIRST_ID)
    @jakarta.annotation.Nullable
    private Long firstId;

    public static final String SERIALIZED_NAME_LAST_ID = "lastId";

    @SerializedName(SERIALIZED_NAME_LAST_ID)
    @jakarta.annotation.Nullable
    private Long lastId;

    public static final String SERIALIZED_NAME_COUNT = "count";

    @SerializedName(SERIALIZED_NAME_COUNT)
    @jakarta.annotation.Nullable
    private Long count;

    public TickerTradingDayResponseResultInner() {}

    public TickerTradingDayResponseResultInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public TickerTradingDayResponseResultInner priceChange(
            @jakarta.annotation.Nullable String priceChange) {
        this.priceChange = priceChange;
        return this;
    }

    /**
     * Get priceChange
     *
     * @return priceChange
     */
    @jakarta.annotation.Nullable
    public String getPriceChange() {
        return priceChange;
    }

    public void setPriceChange(@jakarta.annotation.Nullable String priceChange) {
        this.priceChange = priceChange;
    }

    public TickerTradingDayResponseResultInner priceChangePercent(
            @jakarta.annotation.Nullable String priceChangePercent) {
        this.priceChangePercent = priceChangePercent;
        return this;
    }

    /**
     * Get priceChangePercent
     *
     * @return priceChangePercent
     */
    @jakarta.annotation.Nullable
    public String getPriceChangePercent() {
        return priceChangePercent;
    }

    public void setPriceChangePercent(@jakarta.annotation.Nullable String priceChangePercent) {
        this.priceChangePercent = priceChangePercent;
    }

    public TickerTradingDayResponseResultInner weightedAvgPrice(
            @jakarta.annotation.Nullable String weightedAvgPrice) {
        this.weightedAvgPrice = weightedAvgPrice;
        return this;
    }

    /**
     * Get weightedAvgPrice
     *
     * @return weightedAvgPrice
     */
    @jakarta.annotation.Nullable
    public String getWeightedAvgPrice() {
        return weightedAvgPrice;
    }

    public void setWeightedAvgPrice(@jakarta.annotation.Nullable String weightedAvgPrice) {
        this.weightedAvgPrice = weightedAvgPrice;
    }

    public TickerTradingDayResponseResultInner openPrice(
            @jakarta.annotation.Nullable String openPrice) {
        this.openPrice = openPrice;
        return this;
    }

    /**
     * Get openPrice
     *
     * @return openPrice
     */
    @jakarta.annotation.Nullable
    public String getOpenPrice() {
        return openPrice;
    }

    public void setOpenPrice(@jakarta.annotation.Nullable String openPrice) {
        this.openPrice = openPrice;
    }

    public TickerTradingDayResponseResultInner highPrice(
            @jakarta.annotation.Nullable String highPrice) {
        this.highPrice = highPrice;
        return this;
    }

    /**
     * Get highPrice
     *
     * @return highPrice
     */
    @jakarta.annotation.Nullable
    public String getHighPrice() {
        return highPrice;
    }

    public void setHighPrice(@jakarta.annotation.Nullable String highPrice) {
        this.highPrice = highPrice;
    }

    public TickerTradingDayResponseResultInner lowPrice(
            @jakarta.annotation.Nullable String lowPrice) {
        this.lowPrice = lowPrice;
        return this;
    }

    /**
     * Get lowPrice
     *
     * @return lowPrice
     */
    @jakarta.annotation.Nullable
    public String getLowPrice() {
        return lowPrice;
    }

    public void setLowPrice(@jakarta.annotation.Nullable String lowPrice) {
        this.lowPrice = lowPrice;
    }

    public TickerTradingDayResponseResultInner lastPrice(
            @jakarta.annotation.Nullable String lastPrice) {
        this.lastPrice = lastPrice;
        return this;
    }

    /**
     * Get lastPrice
     *
     * @return lastPrice
     */
    @jakarta.annotation.Nullable
    public String getLastPrice() {
        return lastPrice;
    }

    public void setLastPrice(@jakarta.annotation.Nullable String lastPrice) {
        this.lastPrice = lastPrice;
    }

    public TickerTradingDayResponseResultInner volume(@jakarta.annotation.Nullable String volume) {
        this.volume = volume;
        return this;
    }

    /**
     * Get volume
     *
     * @return volume
     */
    @jakarta.annotation.Nullable
    public String getVolume() {
        return volume;
    }

    public void setVolume(@jakarta.annotation.Nullable String volume) {
        this.volume = volume;
    }

    public TickerTradingDayResponseResultInner quoteVolume(
            @jakarta.annotation.Nullable String quoteVolume) {
        this.quoteVolume = quoteVolume;
        return this;
    }

    /**
     * Get quoteVolume
     *
     * @return quoteVolume
     */
    @jakarta.annotation.Nullable
    public String getQuoteVolume() {
        return quoteVolume;
    }

    public void setQuoteVolume(@jakarta.annotation.Nullable String quoteVolume) {
        this.quoteVolume = quoteVolume;
    }

    public TickerTradingDayResponseResultInner openTime(
            @jakarta.annotation.Nullable Long openTime) {
        this.openTime = openTime;
        return this;
    }

    /**
     * Get openTime
     *
     * @return openTime
     */
    @jakarta.annotation.Nullable
    public Long getOpenTime() {
        return openTime;
    }

    public void setOpenTime(@jakarta.annotation.Nullable Long openTime) {
        this.openTime = openTime;
    }

    public TickerTradingDayResponseResultInner closeTime(
            @jakarta.annotation.Nullable Long closeTime) {
        this.closeTime = closeTime;
        return this;
    }

    /**
     * Get closeTime
     *
     * @return closeTime
     */
    @jakarta.annotation.Nullable
    public Long getCloseTime() {
        return closeTime;
    }

    public void setCloseTime(@jakarta.annotation.Nullable Long closeTime) {
        this.closeTime = closeTime;
    }

    public TickerTradingDayResponseResultInner firstId(@jakarta.annotation.Nullable Long firstId) {
        this.firstId = firstId;
        return this;
    }

    /**
     * Get firstId
     *
     * @return firstId
     */
    @jakarta.annotation.Nullable
    public Long getFirstId() {
        return firstId;
    }

    public void setFirstId(@jakarta.annotation.Nullable Long firstId) {
        this.firstId = firstId;
    }

    public TickerTradingDayResponseResultInner lastId(@jakarta.annotation.Nullable Long lastId) {
        this.lastId = lastId;
        return this;
    }

    /**
     * Get lastId
     *
     * @return lastId
     */
    @jakarta.annotation.Nullable
    public Long getLastId() {
        return lastId;
    }

    public void setLastId(@jakarta.annotation.Nullable Long lastId) {
        this.lastId = lastId;
    }

    public TickerTradingDayResponseResultInner count(@jakarta.annotation.Nullable Long count) {
        this.count = count;
        return this;
    }

    /**
     * Get count
     *
     * @return count
     */
    @jakarta.annotation.Nullable
    public Long getCount() {
        return count;
    }

    public void setCount(@jakarta.annotation.Nullable Long count) {
        this.count = count;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TickerTradingDayResponseResultInner tickerTradingDayResponseResultInner =
                (TickerTradingDayResponseResultInner) o;
        return Objects.equals(this.symbol, tickerTradingDayResponseResultInner.symbol)
                && Objects.equals(this.priceChange, tickerTradingDayResponseResultInner.priceChange)
                && Objects.equals(
                        this.priceChangePercent,
                        tickerTradingDayResponseResultInner.priceChangePercent)
                && Objects.equals(
                        this.weightedAvgPrice, tickerTradingDayResponseResultInner.weightedAvgPrice)
                && Objects.equals(this.openPrice, tickerTradingDayResponseResultInner.openPrice)
                && Objects.equals(this.highPrice, tickerTradingDayResponseResultInner.highPrice)
                && Objects.equals(this.lowPrice, tickerTradingDayResponseResultInner.lowPrice)
                && Objects.equals(this.lastPrice, tickerTradingDayResponseResultInner.lastPrice)
                && Objects.equals(this.volume, tickerTradingDayResponseResultInner.volume)
                && Objects.equals(this.quoteVolume, tickerTradingDayResponseResultInner.quoteVolume)
                && Objects.equals(this.openTime, tickerTradingDayResponseResultInner.openTime)
                && Objects.equals(this.closeTime, tickerTradingDayResponseResultInner.closeTime)
                && Objects.equals(this.firstId, tickerTradingDayResponseResultInner.firstId)
                && Objects.equals(this.lastId, tickerTradingDayResponseResultInner.lastId)
                && Objects.equals(this.count, tickerTradingDayResponseResultInner.count);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                priceChange,
                priceChangePercent,
                weightedAvgPrice,
                openPrice,
                highPrice,
                lowPrice,
                lastPrice,
                volume,
                quoteVolume,
                openTime,
                closeTime,
                firstId,
                lastId,
                count);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TickerTradingDayResponseResultInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		priceChange: ").append(toIndentedString(priceChange)).append("\n");
        sb.append("		priceChangePercent: ")
                .append(toIndentedString(priceChangePercent))
                .append("\n");
        sb.append("		weightedAvgPrice: ").append(toIndentedString(weightedAvgPrice)).append("\n");
        sb.append("		openPrice: ").append(toIndentedString(openPrice)).append("\n");
        sb.append("		highPrice: ").append(toIndentedString(highPrice)).append("\n");
        sb.append("		lowPrice: ").append(toIndentedString(lowPrice)).append("\n");
        sb.append("		lastPrice: ").append(toIndentedString(lastPrice)).append("\n");
        sb.append("		volume: ").append(toIndentedString(volume)).append("\n");
        sb.append("		quoteVolume: ").append(toIndentedString(quoteVolume)).append("\n");
        sb.append("		openTime: ").append(toIndentedString(openTime)).append("\n");
        sb.append("		closeTime: ").append(toIndentedString(closeTime)).append("\n");
        sb.append("		firstId: ").append(toIndentedString(firstId)).append("\n");
        sb.append("		lastId: ").append(toIndentedString(lastId)).append("\n");
        sb.append("		count: ").append(toIndentedString(count)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        String priceChangeValue = getPriceChange();
        if (priceChangeValue != null) {
            String priceChangeValueAsString = priceChangeValue.toString();
            valMap.put("priceChange", priceChangeValueAsString);
        }
        String priceChangePercentValue = getPriceChangePercent();
        if (priceChangePercentValue != null) {
            String priceChangePercentValueAsString = priceChangePercentValue.toString();
            valMap.put("priceChangePercent", priceChangePercentValueAsString);
        }
        String weightedAvgPriceValue = getWeightedAvgPrice();
        if (weightedAvgPriceValue != null) {
            String weightedAvgPriceValueAsString = weightedAvgPriceValue.toString();
            valMap.put("weightedAvgPrice", weightedAvgPriceValueAsString);
        }
        String openPriceValue = getOpenPrice();
        if (openPriceValue != null) {
            String openPriceValueAsString = openPriceValue.toString();
            valMap.put("openPrice", openPriceValueAsString);
        }
        String highPriceValue = getHighPrice();
        if (highPriceValue != null) {
            String highPriceValueAsString = highPriceValue.toString();
            valMap.put("highPrice", highPriceValueAsString);
        }
        String lowPriceValue = getLowPrice();
        if (lowPriceValue != null) {
            String lowPriceValueAsString = lowPriceValue.toString();
            valMap.put("lowPrice", lowPriceValueAsString);
        }
        String lastPriceValue = getLastPrice();
        if (lastPriceValue != null) {
            String lastPriceValueAsString = lastPriceValue.toString();
            valMap.put("lastPrice", lastPriceValueAsString);
        }
        String volumeValue = getVolume();
        if (volumeValue != null) {
            String volumeValueAsString = volumeValue.toString();
            valMap.put("volume", volumeValueAsString);
        }
        String quoteVolumeValue = getQuoteVolume();
        if (quoteVolumeValue != null) {
            String quoteVolumeValueAsString = quoteVolumeValue.toString();
            valMap.put("quoteVolume", quoteVolumeValueAsString);
        }
        Long openTimeValue = getOpenTime();
        if (openTimeValue != null) {
            String openTimeValueAsString = openTimeValue.toString();
            valMap.put("openTime", openTimeValueAsString);
        }
        Long closeTimeValue = getCloseTime();
        if (closeTimeValue != null) {
            String closeTimeValueAsString = closeTimeValue.toString();
            valMap.put("closeTime", closeTimeValueAsString);
        }
        Long firstIdValue = getFirstId();
        if (firstIdValue != null) {
            String firstIdValueAsString = firstIdValue.toString();
            valMap.put("firstId", firstIdValueAsString);
        }
        Long lastIdValue = getLastId();
        if (lastIdValue != null) {
            String lastIdValueAsString = lastIdValue.toString();
            valMap.put("lastId", lastIdValueAsString);
        }
        Long countValue = getCount();
        if (countValue != null) {
            String countValueAsString = countValue.toString();
            valMap.put("count", countValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object priceChangeValue = getPriceChange();
        if (priceChangeValue != null) {
            valMap.put("priceChange", priceChangeValue);
        }
        Object priceChangePercentValue = getPriceChangePercent();
        if (priceChangePercentValue != null) {
            valMap.put("priceChangePercent", priceChangePercentValue);
        }
        Object weightedAvgPriceValue = getWeightedAvgPrice();
        if (weightedAvgPriceValue != null) {
            valMap.put("weightedAvgPrice", weightedAvgPriceValue);
        }
        Object openPriceValue = getOpenPrice();
        if (openPriceValue != null) {
            valMap.put("openPrice", openPriceValue);
        }
        Object highPriceValue = getHighPrice();
        if (highPriceValue != null) {
            valMap.put("highPrice", highPriceValue);
        }
        Object lowPriceValue = getLowPrice();
        if (lowPriceValue != null) {
            valMap.put("lowPrice", lowPriceValue);
        }
        Object lastPriceValue = getLastPrice();
        if (lastPriceValue != null) {
            valMap.put("lastPrice", lastPriceValue);
        }
        Object volumeValue = getVolume();
        if (volumeValue != null) {
            valMap.put("volume", volumeValue);
        }
        Object quoteVolumeValue = getQuoteVolume();
        if (quoteVolumeValue != null) {
            valMap.put("quoteVolume", quoteVolumeValue);
        }
        Object openTimeValue = getOpenTime();
        if (openTimeValue != null) {
            valMap.put("openTime", openTimeValue);
        }
        Object closeTimeValue = getCloseTime();
        if (closeTimeValue != null) {
            valMap.put("closeTime", closeTimeValue);
        }
        Object firstIdValue = getFirstId();
        if (firstIdValue != null) {
            valMap.put("firstId", firstIdValue);
        }
        Object lastIdValue = getLastId();
        if (lastIdValue != null) {
            valMap.put("lastId", lastIdValue);
        }
        Object countValue = getCount();
        if (countValue != null) {
            valMap.put("count", countValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("priceChange");
        openapiFields.add("priceChangePercent");
        openapiFields.add("weightedAvgPrice");
        openapiFields.add("openPrice");
        openapiFields.add("highPrice");
        openapiFields.add("lowPrice");
        openapiFields.add("lastPrice");
        openapiFields.add("volume");
        openapiFields.add("quoteVolume");
        openapiFields.add("openTime");
        openapiFields.add("closeTime");
        openapiFields.add("firstId");
        openapiFields.add("lastId");
        openapiFields.add("count");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     TickerTradingDayResponseResultInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!TickerTradingDayResponseResultInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in TickerTradingDayResponseResultInner is"
                                        + " not found in the empty JSON string",
                                TickerTradingDayResponseResultInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!TickerTradingDayResponseResultInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `TickerTradingDayResponseResultInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("priceChange") != null && !jsonObj.get("priceChange").isJsonNull())
                && !jsonObj.get("priceChange").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceChange` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("priceChange").toString()));
        }
        if ((jsonObj.get("priceChangePercent") != null
                        && !jsonObj.get("priceChangePercent").isJsonNull())
                && !jsonObj.get("priceChangePercent").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceChangePercent` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("priceChangePercent").toString()));
        }
        if ((jsonObj.get("weightedAvgPrice") != null
                        && !jsonObj.get("weightedAvgPrice").isJsonNull())
                && !jsonObj.get("weightedAvgPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `weightedAvgPrice` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("weightedAvgPrice").toString()));
        }
        if ((jsonObj.get("openPrice") != null && !jsonObj.get("openPrice").isJsonNull())
                && !jsonObj.get("openPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `openPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("openPrice").toString()));
        }
        if ((jsonObj.get("highPrice") != null && !jsonObj.get("highPrice").isJsonNull())
                && !jsonObj.get("highPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `highPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("highPrice").toString()));
        }
        if ((jsonObj.get("lowPrice") != null && !jsonObj.get("lowPrice").isJsonNull())
                && !jsonObj.get("lowPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `lowPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("lowPrice").toString()));
        }
        if ((jsonObj.get("lastPrice") != null && !jsonObj.get("lastPrice").isJsonNull())
                && !jsonObj.get("lastPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `lastPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("lastPrice").toString()));
        }
        if ((jsonObj.get("volume") != null && !jsonObj.get("volume").isJsonNull())
                && !jsonObj.get("volume").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `volume` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("volume").toString()));
        }
        if ((jsonObj.get("quoteVolume") != null && !jsonObj.get("quoteVolume").isJsonNull())
                && !jsonObj.get("quoteVolume").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteVolume` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteVolume").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TickerTradingDayResponseResultInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TickerTradingDayResponseResultInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TickerTradingDayResponseResultInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(TickerTradingDayResponseResultInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<TickerTradingDayResponseResultInner>() {
                        @Override
                        public void write(JsonWriter out, TickerTradingDayResponseResultInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public TickerTradingDayResponseResultInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of TickerTradingDayResponseResultInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TickerTradingDayResponseResultInner
     * @throws IOException if the JSON string is invalid with respect to
     *     TickerTradingDayResponseResultInner
     */
    public static TickerTradingDayResponseResultInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, TickerTradingDayResponseResultInner.class);
    }

    /**
     * Convert an instance of TickerTradingDayResponseResultInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
