/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** SessionLogoutResponseResult */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SessionLogoutResponseResult extends BaseDTO {
    public static final String SERIALIZED_NAME_API_KEY = "apiKey";

    @SerializedName(SERIALIZED_NAME_API_KEY)
    @jakarta.annotation.Nullable
    private String apiKey;

    public static final String SERIALIZED_NAME_AUTHORIZED_SINCE = "authorizedSince";

    @SerializedName(SERIALIZED_NAME_AUTHORIZED_SINCE)
    @jakarta.annotation.Nullable
    private Long authorizedSince;

    public static final String SERIALIZED_NAME_CONNECTED_SINCE = "connectedSince";

    @SerializedName(SERIALIZED_NAME_CONNECTED_SINCE)
    @jakarta.annotation.Nullable
    private Long connectedSince;

    public static final String SERIALIZED_NAME_RETURN_RATE_LIMITS = "returnRateLimits";

    @SerializedName(SERIALIZED_NAME_RETURN_RATE_LIMITS)
    @jakarta.annotation.Nullable
    private Boolean returnRateLimits;

    public static final String SERIALIZED_NAME_SERVER_TIME = "serverTime";

    @SerializedName(SERIALIZED_NAME_SERVER_TIME)
    @jakarta.annotation.Nullable
    private Long serverTime;

    public static final String SERIALIZED_NAME_USER_DATA_STREAM = "userDataStream";

    @SerializedName(SERIALIZED_NAME_USER_DATA_STREAM)
    @jakarta.annotation.Nullable
    private Boolean userDataStream;

    public SessionLogoutResponseResult() {}

    public SessionLogoutResponseResult apiKey(@jakarta.annotation.Nullable String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Get apiKey
     *
     * @return apiKey
     */
    @jakarta.annotation.Nullable
    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(@jakarta.annotation.Nullable String apiKey) {
        this.apiKey = apiKey;
    }

    public SessionLogoutResponseResult authorizedSince(
            @jakarta.annotation.Nullable Long authorizedSince) {
        this.authorizedSince = authorizedSince;
        return this;
    }

    /**
     * Get authorizedSince
     *
     * @return authorizedSince
     */
    @jakarta.annotation.Nullable
    public Long getAuthorizedSince() {
        return authorizedSince;
    }

    public void setAuthorizedSince(@jakarta.annotation.Nullable Long authorizedSince) {
        this.authorizedSince = authorizedSince;
    }

    public SessionLogoutResponseResult connectedSince(
            @jakarta.annotation.Nullable Long connectedSince) {
        this.connectedSince = connectedSince;
        return this;
    }

    /**
     * Get connectedSince
     *
     * @return connectedSince
     */
    @jakarta.annotation.Nullable
    public Long getConnectedSince() {
        return connectedSince;
    }

    public void setConnectedSince(@jakarta.annotation.Nullable Long connectedSince) {
        this.connectedSince = connectedSince;
    }

    public SessionLogoutResponseResult returnRateLimits(
            @jakarta.annotation.Nullable Boolean returnRateLimits) {
        this.returnRateLimits = returnRateLimits;
        return this;
    }

    /**
     * Get returnRateLimits
     *
     * @return returnRateLimits
     */
    @jakarta.annotation.Nullable
    public Boolean getReturnRateLimits() {
        return returnRateLimits;
    }

    public void setReturnRateLimits(@jakarta.annotation.Nullable Boolean returnRateLimits) {
        this.returnRateLimits = returnRateLimits;
    }

    public SessionLogoutResponseResult serverTime(@jakarta.annotation.Nullable Long serverTime) {
        this.serverTime = serverTime;
        return this;
    }

    /**
     * Get serverTime
     *
     * @return serverTime
     */
    @jakarta.annotation.Nullable
    public Long getServerTime() {
        return serverTime;
    }

    public void setServerTime(@jakarta.annotation.Nullable Long serverTime) {
        this.serverTime = serverTime;
    }

    public SessionLogoutResponseResult userDataStream(
            @jakarta.annotation.Nullable Boolean userDataStream) {
        this.userDataStream = userDataStream;
        return this;
    }

    /**
     * Get userDataStream
     *
     * @return userDataStream
     */
    @jakarta.annotation.Nullable
    public Boolean getUserDataStream() {
        return userDataStream;
    }

    public void setUserDataStream(@jakarta.annotation.Nullable Boolean userDataStream) {
        this.userDataStream = userDataStream;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SessionLogoutResponseResult sessionLogoutResponseResult = (SessionLogoutResponseResult) o;
        return Objects.equals(this.apiKey, sessionLogoutResponseResult.apiKey)
                && Objects.equals(this.authorizedSince, sessionLogoutResponseResult.authorizedSince)
                && Objects.equals(this.connectedSince, sessionLogoutResponseResult.connectedSince)
                && Objects.equals(
                        this.returnRateLimits, sessionLogoutResponseResult.returnRateLimits)
                && Objects.equals(this.serverTime, sessionLogoutResponseResult.serverTime)
                && Objects.equals(this.userDataStream, sessionLogoutResponseResult.userDataStream);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                apiKey,
                authorizedSince,
                connectedSince,
                returnRateLimits,
                serverTime,
                userDataStream);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SessionLogoutResponseResult {\n");
        sb.append("		apiKey: ").append(toIndentedString(apiKey)).append("\n");
        sb.append("		authorizedSince: ").append(toIndentedString(authorizedSince)).append("\n");
        sb.append("		connectedSince: ").append(toIndentedString(connectedSince)).append("\n");
        sb.append("		returnRateLimits: ").append(toIndentedString(returnRateLimits)).append("\n");
        sb.append("		serverTime: ").append(toIndentedString(serverTime)).append("\n");
        sb.append("		userDataStream: ").append(toIndentedString(userDataStream)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String apiKeyValue = getApiKey();
        if (apiKeyValue != null) {
            String apiKeyValueAsString = apiKeyValue.toString();
            valMap.put("apiKey", apiKeyValueAsString);
        }
        Long authorizedSinceValue = getAuthorizedSince();
        if (authorizedSinceValue != null) {
            String authorizedSinceValueAsString = authorizedSinceValue.toString();
            valMap.put("authorizedSince", authorizedSinceValueAsString);
        }
        Long connectedSinceValue = getConnectedSince();
        if (connectedSinceValue != null) {
            String connectedSinceValueAsString = connectedSinceValue.toString();
            valMap.put("connectedSince", connectedSinceValueAsString);
        }
        Boolean returnRateLimitsValue = getReturnRateLimits();
        if (returnRateLimitsValue != null) {
            String returnRateLimitsValueAsString = returnRateLimitsValue.toString();
            valMap.put("returnRateLimits", returnRateLimitsValueAsString);
        }
        Long serverTimeValue = getServerTime();
        if (serverTimeValue != null) {
            String serverTimeValueAsString = serverTimeValue.toString();
            valMap.put("serverTime", serverTimeValueAsString);
        }
        Boolean userDataStreamValue = getUserDataStream();
        if (userDataStreamValue != null) {
            String userDataStreamValueAsString = userDataStreamValue.toString();
            valMap.put("userDataStream", userDataStreamValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object apiKeyValue = getApiKey();
        if (apiKeyValue != null) {
            valMap.put("apiKey", apiKeyValue);
        }
        Object authorizedSinceValue = getAuthorizedSince();
        if (authorizedSinceValue != null) {
            valMap.put("authorizedSince", authorizedSinceValue);
        }
        Object connectedSinceValue = getConnectedSince();
        if (connectedSinceValue != null) {
            valMap.put("connectedSince", connectedSinceValue);
        }
        Object returnRateLimitsValue = getReturnRateLimits();
        if (returnRateLimitsValue != null) {
            valMap.put("returnRateLimits", returnRateLimitsValue);
        }
        Object serverTimeValue = getServerTime();
        if (serverTimeValue != null) {
            valMap.put("serverTime", serverTimeValue);
        }
        Object userDataStreamValue = getUserDataStream();
        if (userDataStreamValue != null) {
            valMap.put("userDataStream", userDataStreamValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("apiKey");
        openapiFields.add("authorizedSince");
        openapiFields.add("connectedSince");
        openapiFields.add("returnRateLimits");
        openapiFields.add("serverTime");
        openapiFields.add("userDataStream");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     SessionLogoutResponseResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SessionLogoutResponseResult.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SessionLogoutResponseResult is not"
                                        + " found in the empty JSON string",
                                SessionLogoutResponseResult.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SessionLogoutResponseResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SessionLogoutResponseResult` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull())
                && !jsonObj.get("apiKey").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `apiKey` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("apiKey").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SessionLogoutResponseResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SessionLogoutResponseResult' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SessionLogoutResponseResult> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SessionLogoutResponseResult.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SessionLogoutResponseResult>() {
                        @Override
                        public void write(JsonWriter out, SessionLogoutResponseResult value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SessionLogoutResponseResult read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SessionLogoutResponseResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SessionLogoutResponseResult
     * @throws IOException if the JSON string is invalid with respect to SessionLogoutResponseResult
     */
    public static SessionLogoutResponseResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SessionLogoutResponseResult.class);
    }

    /**
     * Convert an instance of SessionLogoutResponseResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
