/*
 * Binance Spot WebSocket Streams
 * OpenAPI Specifications for the Binance Spot WebSocket Streams  API documents:   - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)   - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** PartialBookDepthResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class PartialBookDepthResponse extends BaseDTO {
    public static final String SERIALIZED_NAME_LAST_UPDATE_ID = "lastUpdateId";

    @SerializedName(SERIALIZED_NAME_LAST_UPDATE_ID)
    @jakarta.annotation.Nullable
    private Long lastUpdateId;

    public static final String SERIALIZED_NAME_BIDS = "bids";

    @SerializedName(SERIALIZED_NAME_BIDS)
    @jakarta.annotation.Nullable
    private List<List<String>> bids;

    public static final String SERIALIZED_NAME_ASKS = "asks";

    @SerializedName(SERIALIZED_NAME_ASKS)
    @jakarta.annotation.Nullable
    private List<List<String>> asks;

    public PartialBookDepthResponse() {}

    public PartialBookDepthResponse lastUpdateId(@jakarta.annotation.Nullable Long lastUpdateId) {
        this.lastUpdateId = lastUpdateId;
        return this;
    }

    /**
     * Get lastUpdateId
     *
     * @return lastUpdateId
     */
    @jakarta.annotation.Nullable
    public Long getLastUpdateId() {
        return lastUpdateId;
    }

    public void setLastUpdateId(@jakarta.annotation.Nullable Long lastUpdateId) {
        this.lastUpdateId = lastUpdateId;
    }

    public PartialBookDepthResponse bids(@jakarta.annotation.Nullable List<List<String>> bids) {
        this.bids = bids;
        return this;
    }

    public PartialBookDepthResponse addBidsItem(List<String> bidsItem) {
        if (this.bids == null) {
            this.bids = new ArrayList<>();
        }
        this.bids.add(bidsItem);
        return this;
    }

    /**
     * Get bids
     *
     * @return bids
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<List<String>> getBids() {
        return bids;
    }

    public void setBids(@jakarta.annotation.Nullable List<List<String>> bids) {
        this.bids = bids;
    }

    public PartialBookDepthResponse asks(@jakarta.annotation.Nullable List<List<String>> asks) {
        this.asks = asks;
        return this;
    }

    public PartialBookDepthResponse addAsksItem(List<String> asksItem) {
        if (this.asks == null) {
            this.asks = new ArrayList<>();
        }
        this.asks.add(asksItem);
        return this;
    }

    /**
     * Get asks
     *
     * @return asks
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<List<String>> getAsks() {
        return asks;
    }

    public void setAsks(@jakarta.annotation.Nullable List<List<String>> asks) {
        this.asks = asks;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PartialBookDepthResponse partialBookDepthResponse = (PartialBookDepthResponse) o;
        return Objects.equals(this.lastUpdateId, partialBookDepthResponse.lastUpdateId)
                && Objects.equals(this.bids, partialBookDepthResponse.bids)
                && Objects.equals(this.asks, partialBookDepthResponse.asks);
    }

    @Override
    public int hashCode() {
        return Objects.hash(lastUpdateId, bids, asks);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PartialBookDepthResponse {\n");
        sb.append("		lastUpdateId: ").append(toIndentedString(lastUpdateId)).append("\n");
        sb.append("		bids: ").append(toIndentedString(bids)).append("\n");
        sb.append("		asks: ").append(toIndentedString(asks)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long lastUpdateIdValue = getLastUpdateId();
        if (lastUpdateIdValue != null) {
            String lastUpdateIdValueAsString = lastUpdateIdValue.toString();
            valMap.put("lastUpdateId", lastUpdateIdValueAsString);
        }
        List<List<String>> bidsValue = getBids();
        if (bidsValue != null) {
            String bidsValueAsString = JSON.getGson().toJson(bidsValue);
            valMap.put("bids", bidsValueAsString);
        }
        List<List<String>> asksValue = getAsks();
        if (asksValue != null) {
            String asksValueAsString = JSON.getGson().toJson(asksValue);
            valMap.put("asks", asksValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object lastUpdateIdValue = getLastUpdateId();
        if (lastUpdateIdValue != null) {
            valMap.put("lastUpdateId", lastUpdateIdValue);
        }
        Object bidsValue = getBids();
        if (bidsValue != null) {
            valMap.put("bids", bidsValue);
        }
        Object asksValue = getAsks();
        if (asksValue != null) {
            valMap.put("asks", asksValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("lastUpdateId");
        openapiFields.add("bids");
        openapiFields.add("asks");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PartialBookDepthResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PartialBookDepthResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PartialBookDepthResponse is not found"
                                        + " in the empty JSON string",
                                PartialBookDepthResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!PartialBookDepthResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PartialBookDepthResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("bids") != null
                && !jsonObj.get("bids").isJsonNull()
                && !jsonObj.get("bids").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bids` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("bids").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("asks") != null
                && !jsonObj.get("asks").isJsonNull()
                && !jsonObj.get("asks").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asks` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("asks").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PartialBookDepthResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PartialBookDepthResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PartialBookDepthResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PartialBookDepthResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PartialBookDepthResponse>() {
                        @Override
                        public void write(JsonWriter out, PartialBookDepthResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PartialBookDepthResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PartialBookDepthResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PartialBookDepthResponse
     * @throws IOException if the JSON string is invalid with respect to PartialBookDepthResponse
     */
    public static PartialBookDepthResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PartialBookDepthResponse.class);
    }

    /**
     * Convert an instance of PartialBookDepthResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
