/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderListPlaceOtocoRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderListPlaceOtocoRequest extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_LIST_CLIENT_ORDER_ID = "listClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIST_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String listClientOrderId;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespType newOrderRespType;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private SelfTradePreventionMode selfTradePreventionMode;

    public static final String SERIALIZED_NAME_WORKING_TYPE = "workingType";

    @SerializedName(SERIALIZED_NAME_WORKING_TYPE)
    @jakarta.annotation.Nonnull
    private WorkingType workingType;

    public static final String SERIALIZED_NAME_WORKING_SIDE = "workingSide";

    @SerializedName(SERIALIZED_NAME_WORKING_SIDE)
    @jakarta.annotation.Nonnull
    private WorkingSide workingSide;

    public static final String SERIALIZED_NAME_WORKING_CLIENT_ORDER_ID = "workingClientOrderId";

    @SerializedName(SERIALIZED_NAME_WORKING_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String workingClientOrderId;

    public static final String SERIALIZED_NAME_WORKING_PRICE = "workingPrice";

    @SerializedName(SERIALIZED_NAME_WORKING_PRICE)
    @jakarta.annotation.Nonnull
    private Double workingPrice;

    public static final String SERIALIZED_NAME_WORKING_QUANTITY = "workingQuantity";

    @SerializedName(SERIALIZED_NAME_WORKING_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double workingQuantity;

    public static final String SERIALIZED_NAME_WORKING_ICEBERG_QTY = "workingIcebergQty";

    @SerializedName(SERIALIZED_NAME_WORKING_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double workingIcebergQty;

    public static final String SERIALIZED_NAME_WORKING_TIME_IN_FORCE = "workingTimeInForce";

    @SerializedName(SERIALIZED_NAME_WORKING_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private WorkingTimeInForce workingTimeInForce;

    public static final String SERIALIZED_NAME_WORKING_STRATEGY_ID = "workingStrategyId";

    @SerializedName(SERIALIZED_NAME_WORKING_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long workingStrategyId;

    public static final String SERIALIZED_NAME_WORKING_STRATEGY_TYPE = "workingStrategyType";

    @SerializedName(SERIALIZED_NAME_WORKING_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private Integer workingStrategyType;

    public static final String SERIALIZED_NAME_PENDING_SIDE = "pendingSide";

    @SerializedName(SERIALIZED_NAME_PENDING_SIDE)
    @jakarta.annotation.Nonnull
    private PendingSide pendingSide;

    public static final String SERIALIZED_NAME_PENDING_QUANTITY = "pendingQuantity";

    @SerializedName(SERIALIZED_NAME_PENDING_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double pendingQuantity;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_TYPE = "pendingAboveType";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_TYPE)
    @jakarta.annotation.Nonnull
    private PendingAboveType pendingAboveType;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_CLIENT_ORDER_ID =
            "pendingAboveClientOrderId";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String pendingAboveClientOrderId;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_PRICE = "pendingAbovePrice";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingAbovePrice;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_STOP_PRICE = "pendingAboveStopPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingAboveStopPrice;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_TRAILING_DELTA =
            "pendingAboveTrailingDelta";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_TRAILING_DELTA)
    @jakarta.annotation.Nullable
    private Double pendingAboveTrailingDelta;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_ICEBERG_QTY = "pendingAboveIcebergQty";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double pendingAboveIcebergQty;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_TIME_IN_FORCE =
            "pendingAboveTimeInForce";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private PendingAboveTimeInForce pendingAboveTimeInForce;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_STRATEGY_ID = "pendingAboveStrategyId";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long pendingAboveStrategyId;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_STRATEGY_TYPE =
            "pendingAboveStrategyType";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private Integer pendingAboveStrategyType;

    public static final String SERIALIZED_NAME_PENDING_BELOW_TYPE = "pendingBelowType";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_TYPE)
    @jakarta.annotation.Nullable
    private PendingBelowType pendingBelowType;

    public static final String SERIALIZED_NAME_PENDING_BELOW_CLIENT_ORDER_ID =
            "pendingBelowClientOrderId";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String pendingBelowClientOrderId;

    public static final String SERIALIZED_NAME_PENDING_BELOW_PRICE = "pendingBelowPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingBelowPrice;

    public static final String SERIALIZED_NAME_PENDING_BELOW_STOP_PRICE = "pendingBelowStopPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingBelowStopPrice;

    public static final String SERIALIZED_NAME_PENDING_BELOW_TRAILING_DELTA =
            "pendingBelowTrailingDelta";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_TRAILING_DELTA)
    @jakarta.annotation.Nullable
    private Double pendingBelowTrailingDelta;

    public static final String SERIALIZED_NAME_PENDING_BELOW_ICEBERG_QTY = "pendingBelowIcebergQty";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double pendingBelowIcebergQty;

    public static final String SERIALIZED_NAME_PENDING_BELOW_TIME_IN_FORCE =
            "pendingBelowTimeInForce";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private PendingBelowTimeInForce pendingBelowTimeInForce;

    public static final String SERIALIZED_NAME_PENDING_BELOW_STRATEGY_ID = "pendingBelowStrategyId";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long pendingBelowStrategyId;

    public static final String SERIALIZED_NAME_PENDING_BELOW_STRATEGY_TYPE =
            "pendingBelowStrategyType";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private Integer pendingBelowStrategyType;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public OrderListPlaceOtocoRequest() {}

    public OrderListPlaceOtocoRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public OrderListPlaceOtocoRequest listClientOrderId(
            @jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
        return this;
    }

    /**
     * Get listClientOrderId
     *
     * @return listClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getListClientOrderId() {
        return listClientOrderId;
    }

    public void setListClientOrderId(@jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
    }

    public OrderListPlaceOtocoRequest newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    @Valid
    public NewOrderRespType getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public OrderListPlaceOtocoRequest selfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    @Valid
    public SelfTradePreventionMode getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public OrderListPlaceOtocoRequest workingType(
            @jakarta.annotation.Nonnull WorkingType workingType) {
        this.workingType = workingType;
        return this;
    }

    /**
     * Get workingType
     *
     * @return workingType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public WorkingType getWorkingType() {
        return workingType;
    }

    public void setWorkingType(@jakarta.annotation.Nonnull WorkingType workingType) {
        this.workingType = workingType;
    }

    public OrderListPlaceOtocoRequest workingSide(
            @jakarta.annotation.Nonnull WorkingSide workingSide) {
        this.workingSide = workingSide;
        return this;
    }

    /**
     * Get workingSide
     *
     * @return workingSide
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public WorkingSide getWorkingSide() {
        return workingSide;
    }

    public void setWorkingSide(@jakarta.annotation.Nonnull WorkingSide workingSide) {
        this.workingSide = workingSide;
    }

    public OrderListPlaceOtocoRequest workingClientOrderId(
            @jakarta.annotation.Nullable String workingClientOrderId) {
        this.workingClientOrderId = workingClientOrderId;
        return this;
    }

    /**
     * Get workingClientOrderId
     *
     * @return workingClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getWorkingClientOrderId() {
        return workingClientOrderId;
    }

    public void setWorkingClientOrderId(@jakarta.annotation.Nullable String workingClientOrderId) {
        this.workingClientOrderId = workingClientOrderId;
    }

    public OrderListPlaceOtocoRequest workingPrice(
            @jakarta.annotation.Nonnull Double workingPrice) {
        this.workingPrice = workingPrice;
        return this;
    }

    /**
     * Get workingPrice
     *
     * @return workingPrice
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getWorkingPrice() {
        return workingPrice;
    }

    public void setWorkingPrice(@jakarta.annotation.Nonnull Double workingPrice) {
        this.workingPrice = workingPrice;
    }

    public OrderListPlaceOtocoRequest workingQuantity(
            @jakarta.annotation.Nonnull Double workingQuantity) {
        this.workingQuantity = workingQuantity;
        return this;
    }

    /**
     * Get workingQuantity
     *
     * @return workingQuantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getWorkingQuantity() {
        return workingQuantity;
    }

    public void setWorkingQuantity(@jakarta.annotation.Nonnull Double workingQuantity) {
        this.workingQuantity = workingQuantity;
    }

    public OrderListPlaceOtocoRequest workingIcebergQty(
            @jakarta.annotation.Nullable Double workingIcebergQty) {
        this.workingIcebergQty = workingIcebergQty;
        return this;
    }

    /**
     * Get workingIcebergQty
     *
     * @return workingIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getWorkingIcebergQty() {
        return workingIcebergQty;
    }

    public void setWorkingIcebergQty(@jakarta.annotation.Nullable Double workingIcebergQty) {
        this.workingIcebergQty = workingIcebergQty;
    }

    public OrderListPlaceOtocoRequest workingTimeInForce(
            @jakarta.annotation.Nullable WorkingTimeInForce workingTimeInForce) {
        this.workingTimeInForce = workingTimeInForce;
        return this;
    }

    /**
     * Get workingTimeInForce
     *
     * @return workingTimeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public WorkingTimeInForce getWorkingTimeInForce() {
        return workingTimeInForce;
    }

    public void setWorkingTimeInForce(
            @jakarta.annotation.Nullable WorkingTimeInForce workingTimeInForce) {
        this.workingTimeInForce = workingTimeInForce;
    }

    public OrderListPlaceOtocoRequest workingStrategyId(
            @jakarta.annotation.Nullable Long workingStrategyId) {
        this.workingStrategyId = workingStrategyId;
        return this;
    }

    /**
     * Get workingStrategyId
     *
     * @return workingStrategyId
     */
    @jakarta.annotation.Nullable
    public Long getWorkingStrategyId() {
        return workingStrategyId;
    }

    public void setWorkingStrategyId(@jakarta.annotation.Nullable Long workingStrategyId) {
        this.workingStrategyId = workingStrategyId;
    }

    public OrderListPlaceOtocoRequest workingStrategyType(
            @jakarta.annotation.Nullable Integer workingStrategyType) {
        this.workingStrategyType = workingStrategyType;
        return this;
    }

    /**
     * Get workingStrategyType
     *
     * @return workingStrategyType
     */
    @jakarta.annotation.Nullable
    public Integer getWorkingStrategyType() {
        return workingStrategyType;
    }

    public void setWorkingStrategyType(@jakarta.annotation.Nullable Integer workingStrategyType) {
        this.workingStrategyType = workingStrategyType;
    }

    public OrderListPlaceOtocoRequest pendingSide(
            @jakarta.annotation.Nonnull PendingSide pendingSide) {
        this.pendingSide = pendingSide;
        return this;
    }

    /**
     * Get pendingSide
     *
     * @return pendingSide
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public PendingSide getPendingSide() {
        return pendingSide;
    }

    public void setPendingSide(@jakarta.annotation.Nonnull PendingSide pendingSide) {
        this.pendingSide = pendingSide;
    }

    public OrderListPlaceOtocoRequest pendingQuantity(
            @jakarta.annotation.Nonnull Double pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
        return this;
    }

    /**
     * Get pendingQuantity
     *
     * @return pendingQuantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getPendingQuantity() {
        return pendingQuantity;
    }

    public void setPendingQuantity(@jakarta.annotation.Nonnull Double pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
    }

    public OrderListPlaceOtocoRequest pendingAboveType(
            @jakarta.annotation.Nonnull PendingAboveType pendingAboveType) {
        this.pendingAboveType = pendingAboveType;
        return this;
    }

    /**
     * Get pendingAboveType
     *
     * @return pendingAboveType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public PendingAboveType getPendingAboveType() {
        return pendingAboveType;
    }

    public void setPendingAboveType(@jakarta.annotation.Nonnull PendingAboveType pendingAboveType) {
        this.pendingAboveType = pendingAboveType;
    }

    public OrderListPlaceOtocoRequest pendingAboveClientOrderId(
            @jakarta.annotation.Nullable String pendingAboveClientOrderId) {
        this.pendingAboveClientOrderId = pendingAboveClientOrderId;
        return this;
    }

    /**
     * Get pendingAboveClientOrderId
     *
     * @return pendingAboveClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getPendingAboveClientOrderId() {
        return pendingAboveClientOrderId;
    }

    public void setPendingAboveClientOrderId(
            @jakarta.annotation.Nullable String pendingAboveClientOrderId) {
        this.pendingAboveClientOrderId = pendingAboveClientOrderId;
    }

    public OrderListPlaceOtocoRequest pendingAbovePrice(
            @jakarta.annotation.Nullable Double pendingAbovePrice) {
        this.pendingAbovePrice = pendingAbovePrice;
        return this;
    }

    /**
     * Get pendingAbovePrice
     *
     * @return pendingAbovePrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingAbovePrice() {
        return pendingAbovePrice;
    }

    public void setPendingAbovePrice(@jakarta.annotation.Nullable Double pendingAbovePrice) {
        this.pendingAbovePrice = pendingAbovePrice;
    }

    public OrderListPlaceOtocoRequest pendingAboveStopPrice(
            @jakarta.annotation.Nullable Double pendingAboveStopPrice) {
        this.pendingAboveStopPrice = pendingAboveStopPrice;
        return this;
    }

    /**
     * Get pendingAboveStopPrice
     *
     * @return pendingAboveStopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingAboveStopPrice() {
        return pendingAboveStopPrice;
    }

    public void setPendingAboveStopPrice(
            @jakarta.annotation.Nullable Double pendingAboveStopPrice) {
        this.pendingAboveStopPrice = pendingAboveStopPrice;
    }

    public OrderListPlaceOtocoRequest pendingAboveTrailingDelta(
            @jakarta.annotation.Nullable Double pendingAboveTrailingDelta) {
        this.pendingAboveTrailingDelta = pendingAboveTrailingDelta;
        return this;
    }

    /**
     * Get pendingAboveTrailingDelta
     *
     * @return pendingAboveTrailingDelta
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingAboveTrailingDelta() {
        return pendingAboveTrailingDelta;
    }

    public void setPendingAboveTrailingDelta(
            @jakarta.annotation.Nullable Double pendingAboveTrailingDelta) {
        this.pendingAboveTrailingDelta = pendingAboveTrailingDelta;
    }

    public OrderListPlaceOtocoRequest pendingAboveIcebergQty(
            @jakarta.annotation.Nullable Double pendingAboveIcebergQty) {
        this.pendingAboveIcebergQty = pendingAboveIcebergQty;
        return this;
    }

    /**
     * Get pendingAboveIcebergQty
     *
     * @return pendingAboveIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingAboveIcebergQty() {
        return pendingAboveIcebergQty;
    }

    public void setPendingAboveIcebergQty(
            @jakarta.annotation.Nullable Double pendingAboveIcebergQty) {
        this.pendingAboveIcebergQty = pendingAboveIcebergQty;
    }

    public OrderListPlaceOtocoRequest pendingAboveTimeInForce(
            @jakarta.annotation.Nullable PendingAboveTimeInForce pendingAboveTimeInForce) {
        this.pendingAboveTimeInForce = pendingAboveTimeInForce;
        return this;
    }

    /**
     * Get pendingAboveTimeInForce
     *
     * @return pendingAboveTimeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public PendingAboveTimeInForce getPendingAboveTimeInForce() {
        return pendingAboveTimeInForce;
    }

    public void setPendingAboveTimeInForce(
            @jakarta.annotation.Nullable PendingAboveTimeInForce pendingAboveTimeInForce) {
        this.pendingAboveTimeInForce = pendingAboveTimeInForce;
    }

    public OrderListPlaceOtocoRequest pendingAboveStrategyId(
            @jakarta.annotation.Nullable Long pendingAboveStrategyId) {
        this.pendingAboveStrategyId = pendingAboveStrategyId;
        return this;
    }

    /**
     * Get pendingAboveStrategyId
     *
     * @return pendingAboveStrategyId
     */
    @jakarta.annotation.Nullable
    public Long getPendingAboveStrategyId() {
        return pendingAboveStrategyId;
    }

    public void setPendingAboveStrategyId(
            @jakarta.annotation.Nullable Long pendingAboveStrategyId) {
        this.pendingAboveStrategyId = pendingAboveStrategyId;
    }

    public OrderListPlaceOtocoRequest pendingAboveStrategyType(
            @jakarta.annotation.Nullable Integer pendingAboveStrategyType) {
        this.pendingAboveStrategyType = pendingAboveStrategyType;
        return this;
    }

    /**
     * Get pendingAboveStrategyType
     *
     * @return pendingAboveStrategyType
     */
    @jakarta.annotation.Nullable
    public Integer getPendingAboveStrategyType() {
        return pendingAboveStrategyType;
    }

    public void setPendingAboveStrategyType(
            @jakarta.annotation.Nullable Integer pendingAboveStrategyType) {
        this.pendingAboveStrategyType = pendingAboveStrategyType;
    }

    public OrderListPlaceOtocoRequest pendingBelowType(
            @jakarta.annotation.Nullable PendingBelowType pendingBelowType) {
        this.pendingBelowType = pendingBelowType;
        return this;
    }

    /**
     * Get pendingBelowType
     *
     * @return pendingBelowType
     */
    @jakarta.annotation.Nullable
    @Valid
    public PendingBelowType getPendingBelowType() {
        return pendingBelowType;
    }

    public void setPendingBelowType(
            @jakarta.annotation.Nullable PendingBelowType pendingBelowType) {
        this.pendingBelowType = pendingBelowType;
    }

    public OrderListPlaceOtocoRequest pendingBelowClientOrderId(
            @jakarta.annotation.Nullable String pendingBelowClientOrderId) {
        this.pendingBelowClientOrderId = pendingBelowClientOrderId;
        return this;
    }

    /**
     * Get pendingBelowClientOrderId
     *
     * @return pendingBelowClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getPendingBelowClientOrderId() {
        return pendingBelowClientOrderId;
    }

    public void setPendingBelowClientOrderId(
            @jakarta.annotation.Nullable String pendingBelowClientOrderId) {
        this.pendingBelowClientOrderId = pendingBelowClientOrderId;
    }

    public OrderListPlaceOtocoRequest pendingBelowPrice(
            @jakarta.annotation.Nullable Double pendingBelowPrice) {
        this.pendingBelowPrice = pendingBelowPrice;
        return this;
    }

    /**
     * Get pendingBelowPrice
     *
     * @return pendingBelowPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingBelowPrice() {
        return pendingBelowPrice;
    }

    public void setPendingBelowPrice(@jakarta.annotation.Nullable Double pendingBelowPrice) {
        this.pendingBelowPrice = pendingBelowPrice;
    }

    public OrderListPlaceOtocoRequest pendingBelowStopPrice(
            @jakarta.annotation.Nullable Double pendingBelowStopPrice) {
        this.pendingBelowStopPrice = pendingBelowStopPrice;
        return this;
    }

    /**
     * Get pendingBelowStopPrice
     *
     * @return pendingBelowStopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingBelowStopPrice() {
        return pendingBelowStopPrice;
    }

    public void setPendingBelowStopPrice(
            @jakarta.annotation.Nullable Double pendingBelowStopPrice) {
        this.pendingBelowStopPrice = pendingBelowStopPrice;
    }

    public OrderListPlaceOtocoRequest pendingBelowTrailingDelta(
            @jakarta.annotation.Nullable Double pendingBelowTrailingDelta) {
        this.pendingBelowTrailingDelta = pendingBelowTrailingDelta;
        return this;
    }

    /**
     * Get pendingBelowTrailingDelta
     *
     * @return pendingBelowTrailingDelta
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingBelowTrailingDelta() {
        return pendingBelowTrailingDelta;
    }

    public void setPendingBelowTrailingDelta(
            @jakarta.annotation.Nullable Double pendingBelowTrailingDelta) {
        this.pendingBelowTrailingDelta = pendingBelowTrailingDelta;
    }

    public OrderListPlaceOtocoRequest pendingBelowIcebergQty(
            @jakarta.annotation.Nullable Double pendingBelowIcebergQty) {
        this.pendingBelowIcebergQty = pendingBelowIcebergQty;
        return this;
    }

    /**
     * Get pendingBelowIcebergQty
     *
     * @return pendingBelowIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingBelowIcebergQty() {
        return pendingBelowIcebergQty;
    }

    public void setPendingBelowIcebergQty(
            @jakarta.annotation.Nullable Double pendingBelowIcebergQty) {
        this.pendingBelowIcebergQty = pendingBelowIcebergQty;
    }

    public OrderListPlaceOtocoRequest pendingBelowTimeInForce(
            @jakarta.annotation.Nullable PendingBelowTimeInForce pendingBelowTimeInForce) {
        this.pendingBelowTimeInForce = pendingBelowTimeInForce;
        return this;
    }

    /**
     * Get pendingBelowTimeInForce
     *
     * @return pendingBelowTimeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public PendingBelowTimeInForce getPendingBelowTimeInForce() {
        return pendingBelowTimeInForce;
    }

    public void setPendingBelowTimeInForce(
            @jakarta.annotation.Nullable PendingBelowTimeInForce pendingBelowTimeInForce) {
        this.pendingBelowTimeInForce = pendingBelowTimeInForce;
    }

    public OrderListPlaceOtocoRequest pendingBelowStrategyId(
            @jakarta.annotation.Nullable Long pendingBelowStrategyId) {
        this.pendingBelowStrategyId = pendingBelowStrategyId;
        return this;
    }

    /**
     * Get pendingBelowStrategyId
     *
     * @return pendingBelowStrategyId
     */
    @jakarta.annotation.Nullable
    public Long getPendingBelowStrategyId() {
        return pendingBelowStrategyId;
    }

    public void setPendingBelowStrategyId(
            @jakarta.annotation.Nullable Long pendingBelowStrategyId) {
        this.pendingBelowStrategyId = pendingBelowStrategyId;
    }

    public OrderListPlaceOtocoRequest pendingBelowStrategyType(
            @jakarta.annotation.Nullable Integer pendingBelowStrategyType) {
        this.pendingBelowStrategyType = pendingBelowStrategyType;
        return this;
    }

    /**
     * Get pendingBelowStrategyType
     *
     * @return pendingBelowStrategyType
     */
    @jakarta.annotation.Nullable
    public Integer getPendingBelowStrategyType() {
        return pendingBelowStrategyType;
    }

    public void setPendingBelowStrategyType(
            @jakarta.annotation.Nullable Integer pendingBelowStrategyType) {
        this.pendingBelowStrategyType = pendingBelowStrategyType;
    }

    public OrderListPlaceOtocoRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderListPlaceOtocoRequest orderListPlaceOtocoRequest = (OrderListPlaceOtocoRequest) o;
        return Objects.equals(this.symbol, orderListPlaceOtocoRequest.symbol)
                && Objects.equals(
                        this.listClientOrderId, orderListPlaceOtocoRequest.listClientOrderId)
                && Objects.equals(
                        this.newOrderRespType, orderListPlaceOtocoRequest.newOrderRespType)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        orderListPlaceOtocoRequest.selfTradePreventionMode)
                && Objects.equals(this.workingType, orderListPlaceOtocoRequest.workingType)
                && Objects.equals(this.workingSide, orderListPlaceOtocoRequest.workingSide)
                && Objects.equals(
                        this.workingClientOrderId, orderListPlaceOtocoRequest.workingClientOrderId)
                && Objects.equals(this.workingPrice, orderListPlaceOtocoRequest.workingPrice)
                && Objects.equals(this.workingQuantity, orderListPlaceOtocoRequest.workingQuantity)
                && Objects.equals(
                        this.workingIcebergQty, orderListPlaceOtocoRequest.workingIcebergQty)
                && Objects.equals(
                        this.workingTimeInForce, orderListPlaceOtocoRequest.workingTimeInForce)
                && Objects.equals(
                        this.workingStrategyId, orderListPlaceOtocoRequest.workingStrategyId)
                && Objects.equals(
                        this.workingStrategyType, orderListPlaceOtocoRequest.workingStrategyType)
                && Objects.equals(this.pendingSide, orderListPlaceOtocoRequest.pendingSide)
                && Objects.equals(this.pendingQuantity, orderListPlaceOtocoRequest.pendingQuantity)
                && Objects.equals(
                        this.pendingAboveType, orderListPlaceOtocoRequest.pendingAboveType)
                && Objects.equals(
                        this.pendingAboveClientOrderId,
                        orderListPlaceOtocoRequest.pendingAboveClientOrderId)
                && Objects.equals(
                        this.pendingAbovePrice, orderListPlaceOtocoRequest.pendingAbovePrice)
                && Objects.equals(
                        this.pendingAboveStopPrice,
                        orderListPlaceOtocoRequest.pendingAboveStopPrice)
                && Objects.equals(
                        this.pendingAboveTrailingDelta,
                        orderListPlaceOtocoRequest.pendingAboveTrailingDelta)
                && Objects.equals(
                        this.pendingAboveIcebergQty,
                        orderListPlaceOtocoRequest.pendingAboveIcebergQty)
                && Objects.equals(
                        this.pendingAboveTimeInForce,
                        orderListPlaceOtocoRequest.pendingAboveTimeInForce)
                && Objects.equals(
                        this.pendingAboveStrategyId,
                        orderListPlaceOtocoRequest.pendingAboveStrategyId)
                && Objects.equals(
                        this.pendingAboveStrategyType,
                        orderListPlaceOtocoRequest.pendingAboveStrategyType)
                && Objects.equals(
                        this.pendingBelowType, orderListPlaceOtocoRequest.pendingBelowType)
                && Objects.equals(
                        this.pendingBelowClientOrderId,
                        orderListPlaceOtocoRequest.pendingBelowClientOrderId)
                && Objects.equals(
                        this.pendingBelowPrice, orderListPlaceOtocoRequest.pendingBelowPrice)
                && Objects.equals(
                        this.pendingBelowStopPrice,
                        orderListPlaceOtocoRequest.pendingBelowStopPrice)
                && Objects.equals(
                        this.pendingBelowTrailingDelta,
                        orderListPlaceOtocoRequest.pendingBelowTrailingDelta)
                && Objects.equals(
                        this.pendingBelowIcebergQty,
                        orderListPlaceOtocoRequest.pendingBelowIcebergQty)
                && Objects.equals(
                        this.pendingBelowTimeInForce,
                        orderListPlaceOtocoRequest.pendingBelowTimeInForce)
                && Objects.equals(
                        this.pendingBelowStrategyId,
                        orderListPlaceOtocoRequest.pendingBelowStrategyId)
                && Objects.equals(
                        this.pendingBelowStrategyType,
                        orderListPlaceOtocoRequest.pendingBelowStrategyType)
                && Objects.equals(this.recvWindow, orderListPlaceOtocoRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                listClientOrderId,
                newOrderRespType,
                selfTradePreventionMode,
                workingType,
                workingSide,
                workingClientOrderId,
                workingPrice,
                workingQuantity,
                workingIcebergQty,
                workingTimeInForce,
                workingStrategyId,
                workingStrategyType,
                pendingSide,
                pendingQuantity,
                pendingAboveType,
                pendingAboveClientOrderId,
                pendingAbovePrice,
                pendingAboveStopPrice,
                pendingAboveTrailingDelta,
                pendingAboveIcebergQty,
                pendingAboveTimeInForce,
                pendingAboveStrategyId,
                pendingAboveStrategyType,
                pendingBelowType,
                pendingBelowClientOrderId,
                pendingBelowPrice,
                pendingBelowStopPrice,
                pendingBelowTrailingDelta,
                pendingBelowIcebergQty,
                pendingBelowTimeInForce,
                pendingBelowStrategyId,
                pendingBelowStrategyType,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderListPlaceOtocoRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		listClientOrderId: ").append(toIndentedString(listClientOrderId)).append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		workingType: ").append(toIndentedString(workingType)).append("\n");
        sb.append("		workingSide: ").append(toIndentedString(workingSide)).append("\n");
        sb.append("		workingClientOrderId: ")
                .append(toIndentedString(workingClientOrderId))
                .append("\n");
        sb.append("		workingPrice: ").append(toIndentedString(workingPrice)).append("\n");
        sb.append("		workingQuantity: ").append(toIndentedString(workingQuantity)).append("\n");
        sb.append("		workingIcebergQty: ").append(toIndentedString(workingIcebergQty)).append("\n");
        sb.append("		workingTimeInForce: ")
                .append(toIndentedString(workingTimeInForce))
                .append("\n");
        sb.append("		workingStrategyId: ").append(toIndentedString(workingStrategyId)).append("\n");
        sb.append("		workingStrategyType: ")
                .append(toIndentedString(workingStrategyType))
                .append("\n");
        sb.append("		pendingSide: ").append(toIndentedString(pendingSide)).append("\n");
        sb.append("		pendingQuantity: ").append(toIndentedString(pendingQuantity)).append("\n");
        sb.append("		pendingAboveType: ").append(toIndentedString(pendingAboveType)).append("\n");
        sb.append("		pendingAboveClientOrderId: ")
                .append(toIndentedString(pendingAboveClientOrderId))
                .append("\n");
        sb.append("		pendingAbovePrice: ").append(toIndentedString(pendingAbovePrice)).append("\n");
        sb.append("		pendingAboveStopPrice: ")
                .append(toIndentedString(pendingAboveStopPrice))
                .append("\n");
        sb.append("		pendingAboveTrailingDelta: ")
                .append(toIndentedString(pendingAboveTrailingDelta))
                .append("\n");
        sb.append("		pendingAboveIcebergQty: ")
                .append(toIndentedString(pendingAboveIcebergQty))
                .append("\n");
        sb.append("		pendingAboveTimeInForce: ")
                .append(toIndentedString(pendingAboveTimeInForce))
                .append("\n");
        sb.append("		pendingAboveStrategyId: ")
                .append(toIndentedString(pendingAboveStrategyId))
                .append("\n");
        sb.append("		pendingAboveStrategyType: ")
                .append(toIndentedString(pendingAboveStrategyType))
                .append("\n");
        sb.append("		pendingBelowType: ").append(toIndentedString(pendingBelowType)).append("\n");
        sb.append("		pendingBelowClientOrderId: ")
                .append(toIndentedString(pendingBelowClientOrderId))
                .append("\n");
        sb.append("		pendingBelowPrice: ").append(toIndentedString(pendingBelowPrice)).append("\n");
        sb.append("		pendingBelowStopPrice: ")
                .append(toIndentedString(pendingBelowStopPrice))
                .append("\n");
        sb.append("		pendingBelowTrailingDelta: ")
                .append(toIndentedString(pendingBelowTrailingDelta))
                .append("\n");
        sb.append("		pendingBelowIcebergQty: ")
                .append(toIndentedString(pendingBelowIcebergQty))
                .append("\n");
        sb.append("		pendingBelowTimeInForce: ")
                .append(toIndentedString(pendingBelowTimeInForce))
                .append("\n");
        sb.append("		pendingBelowStrategyId: ")
                .append(toIndentedString(pendingBelowStrategyId))
                .append("\n");
        sb.append("		pendingBelowStrategyType: ")
                .append(toIndentedString(pendingBelowStrategyType))
                .append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        String listClientOrderIdValue = getListClientOrderId();
        if (listClientOrderIdValue != null) {
            String listClientOrderIdValueAsString = listClientOrderIdValue.toString();
            valMap.put("listClientOrderId", listClientOrderIdValueAsString);
        }
        NewOrderRespType newOrderRespTypeValue = getNewOrderRespType();
        if (newOrderRespTypeValue != null) {
            String newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
            valMap.put("newOrderRespType", newOrderRespTypeValueAsString);
        }
        SelfTradePreventionMode selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            String selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValueAsString);
        }
        WorkingType workingTypeValue = getWorkingType();
        if (workingTypeValue != null) {
            String workingTypeValueAsString = workingTypeValue.toString();
            valMap.put("workingType", workingTypeValueAsString);
        }
        WorkingSide workingSideValue = getWorkingSide();
        if (workingSideValue != null) {
            String workingSideValueAsString = workingSideValue.toString();
            valMap.put("workingSide", workingSideValueAsString);
        }
        String workingClientOrderIdValue = getWorkingClientOrderId();
        if (workingClientOrderIdValue != null) {
            String workingClientOrderIdValueAsString = workingClientOrderIdValue.toString();
            valMap.put("workingClientOrderId", workingClientOrderIdValueAsString);
        }
        Double workingPriceValue = getWorkingPrice();
        if (workingPriceValue != null) {
            String workingPriceValueAsString =
                    DecimalFormatter.getFormatter().format(workingPriceValue);
            valMap.put("workingPrice", workingPriceValueAsString);
        }
        Double workingQuantityValue = getWorkingQuantity();
        if (workingQuantityValue != null) {
            String workingQuantityValueAsString =
                    DecimalFormatter.getFormatter().format(workingQuantityValue);
            valMap.put("workingQuantity", workingQuantityValueAsString);
        }
        Double workingIcebergQtyValue = getWorkingIcebergQty();
        if (workingIcebergQtyValue != null) {
            String workingIcebergQtyValueAsString =
                    DecimalFormatter.getFormatter().format(workingIcebergQtyValue);
            valMap.put("workingIcebergQty", workingIcebergQtyValueAsString);
        }
        WorkingTimeInForce workingTimeInForceValue = getWorkingTimeInForce();
        if (workingTimeInForceValue != null) {
            String workingTimeInForceValueAsString = workingTimeInForceValue.toString();
            valMap.put("workingTimeInForce", workingTimeInForceValueAsString);
        }
        Long workingStrategyIdValue = getWorkingStrategyId();
        if (workingStrategyIdValue != null) {
            String workingStrategyIdValueAsString = workingStrategyIdValue.toString();
            valMap.put("workingStrategyId", workingStrategyIdValueAsString);
        }
        Integer workingStrategyTypeValue = getWorkingStrategyType();
        if (workingStrategyTypeValue != null) {
            String workingStrategyTypeValueAsString = workingStrategyTypeValue.toString();
            valMap.put("workingStrategyType", workingStrategyTypeValueAsString);
        }
        PendingSide pendingSideValue = getPendingSide();
        if (pendingSideValue != null) {
            String pendingSideValueAsString = pendingSideValue.toString();
            valMap.put("pendingSide", pendingSideValueAsString);
        }
        Double pendingQuantityValue = getPendingQuantity();
        if (pendingQuantityValue != null) {
            String pendingQuantityValueAsString =
                    DecimalFormatter.getFormatter().format(pendingQuantityValue);
            valMap.put("pendingQuantity", pendingQuantityValueAsString);
        }
        PendingAboveType pendingAboveTypeValue = getPendingAboveType();
        if (pendingAboveTypeValue != null) {
            String pendingAboveTypeValueAsString = pendingAboveTypeValue.toString();
            valMap.put("pendingAboveType", pendingAboveTypeValueAsString);
        }
        String pendingAboveClientOrderIdValue = getPendingAboveClientOrderId();
        if (pendingAboveClientOrderIdValue != null) {
            String pendingAboveClientOrderIdValueAsString =
                    pendingAboveClientOrderIdValue.toString();
            valMap.put("pendingAboveClientOrderId", pendingAboveClientOrderIdValueAsString);
        }
        Double pendingAbovePriceValue = getPendingAbovePrice();
        if (pendingAbovePriceValue != null) {
            String pendingAbovePriceValueAsString =
                    DecimalFormatter.getFormatter().format(pendingAbovePriceValue);
            valMap.put("pendingAbovePrice", pendingAbovePriceValueAsString);
        }
        Double pendingAboveStopPriceValue = getPendingAboveStopPrice();
        if (pendingAboveStopPriceValue != null) {
            String pendingAboveStopPriceValueAsString =
                    DecimalFormatter.getFormatter().format(pendingAboveStopPriceValue);
            valMap.put("pendingAboveStopPrice", pendingAboveStopPriceValueAsString);
        }
        Double pendingAboveTrailingDeltaValue = getPendingAboveTrailingDelta();
        if (pendingAboveTrailingDeltaValue != null) {
            String pendingAboveTrailingDeltaValueAsString =
                    DecimalFormatter.getFormatter().format(pendingAboveTrailingDeltaValue);
            valMap.put("pendingAboveTrailingDelta", pendingAboveTrailingDeltaValueAsString);
        }
        Double pendingAboveIcebergQtyValue = getPendingAboveIcebergQty();
        if (pendingAboveIcebergQtyValue != null) {
            String pendingAboveIcebergQtyValueAsString =
                    DecimalFormatter.getFormatter().format(pendingAboveIcebergQtyValue);
            valMap.put("pendingAboveIcebergQty", pendingAboveIcebergQtyValueAsString);
        }
        PendingAboveTimeInForce pendingAboveTimeInForceValue = getPendingAboveTimeInForce();
        if (pendingAboveTimeInForceValue != null) {
            String pendingAboveTimeInForceValueAsString = pendingAboveTimeInForceValue.toString();
            valMap.put("pendingAboveTimeInForce", pendingAboveTimeInForceValueAsString);
        }
        Long pendingAboveStrategyIdValue = getPendingAboveStrategyId();
        if (pendingAboveStrategyIdValue != null) {
            String pendingAboveStrategyIdValueAsString = pendingAboveStrategyIdValue.toString();
            valMap.put("pendingAboveStrategyId", pendingAboveStrategyIdValueAsString);
        }
        Integer pendingAboveStrategyTypeValue = getPendingAboveStrategyType();
        if (pendingAboveStrategyTypeValue != null) {
            String pendingAboveStrategyTypeValueAsString = pendingAboveStrategyTypeValue.toString();
            valMap.put("pendingAboveStrategyType", pendingAboveStrategyTypeValueAsString);
        }
        PendingBelowType pendingBelowTypeValue = getPendingBelowType();
        if (pendingBelowTypeValue != null) {
            String pendingBelowTypeValueAsString = pendingBelowTypeValue.toString();
            valMap.put("pendingBelowType", pendingBelowTypeValueAsString);
        }
        String pendingBelowClientOrderIdValue = getPendingBelowClientOrderId();
        if (pendingBelowClientOrderIdValue != null) {
            String pendingBelowClientOrderIdValueAsString =
                    pendingBelowClientOrderIdValue.toString();
            valMap.put("pendingBelowClientOrderId", pendingBelowClientOrderIdValueAsString);
        }
        Double pendingBelowPriceValue = getPendingBelowPrice();
        if (pendingBelowPriceValue != null) {
            String pendingBelowPriceValueAsString =
                    DecimalFormatter.getFormatter().format(pendingBelowPriceValue);
            valMap.put("pendingBelowPrice", pendingBelowPriceValueAsString);
        }
        Double pendingBelowStopPriceValue = getPendingBelowStopPrice();
        if (pendingBelowStopPriceValue != null) {
            String pendingBelowStopPriceValueAsString =
                    DecimalFormatter.getFormatter().format(pendingBelowStopPriceValue);
            valMap.put("pendingBelowStopPrice", pendingBelowStopPriceValueAsString);
        }
        Double pendingBelowTrailingDeltaValue = getPendingBelowTrailingDelta();
        if (pendingBelowTrailingDeltaValue != null) {
            String pendingBelowTrailingDeltaValueAsString =
                    DecimalFormatter.getFormatter().format(pendingBelowTrailingDeltaValue);
            valMap.put("pendingBelowTrailingDelta", pendingBelowTrailingDeltaValueAsString);
        }
        Double pendingBelowIcebergQtyValue = getPendingBelowIcebergQty();
        if (pendingBelowIcebergQtyValue != null) {
            String pendingBelowIcebergQtyValueAsString =
                    DecimalFormatter.getFormatter().format(pendingBelowIcebergQtyValue);
            valMap.put("pendingBelowIcebergQty", pendingBelowIcebergQtyValueAsString);
        }
        PendingBelowTimeInForce pendingBelowTimeInForceValue = getPendingBelowTimeInForce();
        if (pendingBelowTimeInForceValue != null) {
            String pendingBelowTimeInForceValueAsString = pendingBelowTimeInForceValue.toString();
            valMap.put("pendingBelowTimeInForce", pendingBelowTimeInForceValueAsString);
        }
        Long pendingBelowStrategyIdValue = getPendingBelowStrategyId();
        if (pendingBelowStrategyIdValue != null) {
            String pendingBelowStrategyIdValueAsString = pendingBelowStrategyIdValue.toString();
            valMap.put("pendingBelowStrategyId", pendingBelowStrategyIdValueAsString);
        }
        Integer pendingBelowStrategyTypeValue = getPendingBelowStrategyType();
        if (pendingBelowStrategyTypeValue != null) {
            String pendingBelowStrategyTypeValueAsString = pendingBelowStrategyTypeValue.toString();
            valMap.put("pendingBelowStrategyType", pendingBelowStrategyTypeValueAsString);
        }
        Long recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            String recvWindowValueAsString = recvWindowValue.toString();
            valMap.put("recvWindow", recvWindowValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object listClientOrderIdValue = getListClientOrderId();
        if (listClientOrderIdValue != null) {
            valMap.put("listClientOrderId", listClientOrderIdValue);
        }
        Object newOrderRespTypeValue = getNewOrderRespType();
        if (newOrderRespTypeValue != null) {
            valMap.put("newOrderRespType", newOrderRespTypeValue);
        }
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValue);
        }
        Object workingTypeValue = getWorkingType();
        if (workingTypeValue != null) {
            valMap.put("workingType", workingTypeValue);
        }
        Object workingSideValue = getWorkingSide();
        if (workingSideValue != null) {
            valMap.put("workingSide", workingSideValue);
        }
        Object workingClientOrderIdValue = getWorkingClientOrderId();
        if (workingClientOrderIdValue != null) {
            valMap.put("workingClientOrderId", workingClientOrderIdValue);
        }
        Object workingPriceValue = getWorkingPrice();
        if (workingPriceValue != null) {
            valMap.put("workingPrice", workingPriceValue);
        }
        Object workingQuantityValue = getWorkingQuantity();
        if (workingQuantityValue != null) {
            valMap.put("workingQuantity", workingQuantityValue);
        }
        Object workingIcebergQtyValue = getWorkingIcebergQty();
        if (workingIcebergQtyValue != null) {
            valMap.put("workingIcebergQty", workingIcebergQtyValue);
        }
        Object workingTimeInForceValue = getWorkingTimeInForce();
        if (workingTimeInForceValue != null) {
            valMap.put("workingTimeInForce", workingTimeInForceValue);
        }
        Object workingStrategyIdValue = getWorkingStrategyId();
        if (workingStrategyIdValue != null) {
            valMap.put("workingStrategyId", workingStrategyIdValue);
        }
        Object workingStrategyTypeValue = getWorkingStrategyType();
        if (workingStrategyTypeValue != null) {
            valMap.put("workingStrategyType", workingStrategyTypeValue);
        }
        Object pendingSideValue = getPendingSide();
        if (pendingSideValue != null) {
            valMap.put("pendingSide", pendingSideValue);
        }
        Object pendingQuantityValue = getPendingQuantity();
        if (pendingQuantityValue != null) {
            valMap.put("pendingQuantity", pendingQuantityValue);
        }
        Object pendingAboveTypeValue = getPendingAboveType();
        if (pendingAboveTypeValue != null) {
            valMap.put("pendingAboveType", pendingAboveTypeValue);
        }
        Object pendingAboveClientOrderIdValue = getPendingAboveClientOrderId();
        if (pendingAboveClientOrderIdValue != null) {
            valMap.put("pendingAboveClientOrderId", pendingAboveClientOrderIdValue);
        }
        Object pendingAbovePriceValue = getPendingAbovePrice();
        if (pendingAbovePriceValue != null) {
            valMap.put("pendingAbovePrice", pendingAbovePriceValue);
        }
        Object pendingAboveStopPriceValue = getPendingAboveStopPrice();
        if (pendingAboveStopPriceValue != null) {
            valMap.put("pendingAboveStopPrice", pendingAboveStopPriceValue);
        }
        Object pendingAboveTrailingDeltaValue = getPendingAboveTrailingDelta();
        if (pendingAboveTrailingDeltaValue != null) {
            valMap.put("pendingAboveTrailingDelta", pendingAboveTrailingDeltaValue);
        }
        Object pendingAboveIcebergQtyValue = getPendingAboveIcebergQty();
        if (pendingAboveIcebergQtyValue != null) {
            valMap.put("pendingAboveIcebergQty", pendingAboveIcebergQtyValue);
        }
        Object pendingAboveTimeInForceValue = getPendingAboveTimeInForce();
        if (pendingAboveTimeInForceValue != null) {
            valMap.put("pendingAboveTimeInForce", pendingAboveTimeInForceValue);
        }
        Object pendingAboveStrategyIdValue = getPendingAboveStrategyId();
        if (pendingAboveStrategyIdValue != null) {
            valMap.put("pendingAboveStrategyId", pendingAboveStrategyIdValue);
        }
        Object pendingAboveStrategyTypeValue = getPendingAboveStrategyType();
        if (pendingAboveStrategyTypeValue != null) {
            valMap.put("pendingAboveStrategyType", pendingAboveStrategyTypeValue);
        }
        Object pendingBelowTypeValue = getPendingBelowType();
        if (pendingBelowTypeValue != null) {
            valMap.put("pendingBelowType", pendingBelowTypeValue);
        }
        Object pendingBelowClientOrderIdValue = getPendingBelowClientOrderId();
        if (pendingBelowClientOrderIdValue != null) {
            valMap.put("pendingBelowClientOrderId", pendingBelowClientOrderIdValue);
        }
        Object pendingBelowPriceValue = getPendingBelowPrice();
        if (pendingBelowPriceValue != null) {
            valMap.put("pendingBelowPrice", pendingBelowPriceValue);
        }
        Object pendingBelowStopPriceValue = getPendingBelowStopPrice();
        if (pendingBelowStopPriceValue != null) {
            valMap.put("pendingBelowStopPrice", pendingBelowStopPriceValue);
        }
        Object pendingBelowTrailingDeltaValue = getPendingBelowTrailingDelta();
        if (pendingBelowTrailingDeltaValue != null) {
            valMap.put("pendingBelowTrailingDelta", pendingBelowTrailingDeltaValue);
        }
        Object pendingBelowIcebergQtyValue = getPendingBelowIcebergQty();
        if (pendingBelowIcebergQtyValue != null) {
            valMap.put("pendingBelowIcebergQty", pendingBelowIcebergQtyValue);
        }
        Object pendingBelowTimeInForceValue = getPendingBelowTimeInForce();
        if (pendingBelowTimeInForceValue != null) {
            valMap.put("pendingBelowTimeInForce", pendingBelowTimeInForceValue);
        }
        Object pendingBelowStrategyIdValue = getPendingBelowStrategyId();
        if (pendingBelowStrategyIdValue != null) {
            valMap.put("pendingBelowStrategyId", pendingBelowStrategyIdValue);
        }
        Object pendingBelowStrategyTypeValue = getPendingBelowStrategyType();
        if (pendingBelowStrategyTypeValue != null) {
            valMap.put("pendingBelowStrategyType", pendingBelowStrategyTypeValue);
        }
        Object recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            valMap.put("recvWindow", recvWindowValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("listClientOrderId");
        openapiFields.add("newOrderRespType");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("workingType");
        openapiFields.add("workingSide");
        openapiFields.add("workingClientOrderId");
        openapiFields.add("workingPrice");
        openapiFields.add("workingQuantity");
        openapiFields.add("workingIcebergQty");
        openapiFields.add("workingTimeInForce");
        openapiFields.add("workingStrategyId");
        openapiFields.add("workingStrategyType");
        openapiFields.add("pendingSide");
        openapiFields.add("pendingQuantity");
        openapiFields.add("pendingAboveType");
        openapiFields.add("pendingAboveClientOrderId");
        openapiFields.add("pendingAbovePrice");
        openapiFields.add("pendingAboveStopPrice");
        openapiFields.add("pendingAboveTrailingDelta");
        openapiFields.add("pendingAboveIcebergQty");
        openapiFields.add("pendingAboveTimeInForce");
        openapiFields.add("pendingAboveStrategyId");
        openapiFields.add("pendingAboveStrategyType");
        openapiFields.add("pendingBelowType");
        openapiFields.add("pendingBelowClientOrderId");
        openapiFields.add("pendingBelowPrice");
        openapiFields.add("pendingBelowStopPrice");
        openapiFields.add("pendingBelowTrailingDelta");
        openapiFields.add("pendingBelowIcebergQty");
        openapiFields.add("pendingBelowTimeInForce");
        openapiFields.add("pendingBelowStrategyId");
        openapiFields.add("pendingBelowStrategyType");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("workingType");
        openapiRequiredFields.add("workingSide");
        openapiRequiredFields.add("workingPrice");
        openapiRequiredFields.add("workingQuantity");
        openapiRequiredFields.add("pendingSide");
        openapiRequiredFields.add("pendingQuantity");
        openapiRequiredFields.add("pendingAboveType");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderListPlaceOtocoRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderListPlaceOtocoRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderListPlaceOtocoRequest is not"
                                        + " found in the empty JSON string",
                                OrderListPlaceOtocoRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderListPlaceOtocoRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderListPlaceOtocoRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : OrderListPlaceOtocoRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("listClientOrderId") != null
                        && !jsonObj.get("listClientOrderId").isJsonNull())
                && !jsonObj.get("listClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listClientOrderId").toString()));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespType.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        // validate the optional field `selfTradePreventionMode`
        if (jsonObj.get("selfTradePreventionMode") != null
                && !jsonObj.get("selfTradePreventionMode").isJsonNull()) {
            SelfTradePreventionMode.validateJsonElement(jsonObj.get("selfTradePreventionMode"));
        }
        // validate the required field `workingType`
        WorkingType.validateJsonElement(jsonObj.get("workingType"));
        // validate the required field `workingSide`
        WorkingSide.validateJsonElement(jsonObj.get("workingSide"));
        if ((jsonObj.get("workingClientOrderId") != null
                        && !jsonObj.get("workingClientOrderId").isJsonNull())
                && !jsonObj.get("workingClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingClientOrderId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("workingClientOrderId").toString()));
        }
        // validate the optional field `workingTimeInForce`
        if (jsonObj.get("workingTimeInForce") != null
                && !jsonObj.get("workingTimeInForce").isJsonNull()) {
            WorkingTimeInForce.validateJsonElement(jsonObj.get("workingTimeInForce"));
        }
        // validate the required field `pendingSide`
        PendingSide.validateJsonElement(jsonObj.get("pendingSide"));
        // validate the required field `pendingAboveType`
        PendingAboveType.validateJsonElement(jsonObj.get("pendingAboveType"));
        if ((jsonObj.get("pendingAboveClientOrderId") != null
                        && !jsonObj.get("pendingAboveClientOrderId").isJsonNull())
                && !jsonObj.get("pendingAboveClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingAboveClientOrderId` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("pendingAboveClientOrderId").toString()));
        }
        // validate the optional field `pendingAboveTimeInForce`
        if (jsonObj.get("pendingAboveTimeInForce") != null
                && !jsonObj.get("pendingAboveTimeInForce").isJsonNull()) {
            PendingAboveTimeInForce.validateJsonElement(jsonObj.get("pendingAboveTimeInForce"));
        }
        // validate the optional field `pendingBelowType`
        if (jsonObj.get("pendingBelowType") != null
                && !jsonObj.get("pendingBelowType").isJsonNull()) {
            PendingBelowType.validateJsonElement(jsonObj.get("pendingBelowType"));
        }
        if ((jsonObj.get("pendingBelowClientOrderId") != null
                        && !jsonObj.get("pendingBelowClientOrderId").isJsonNull())
                && !jsonObj.get("pendingBelowClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingBelowClientOrderId` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("pendingBelowClientOrderId").toString()));
        }
        // validate the optional field `pendingBelowTimeInForce`
        if (jsonObj.get("pendingBelowTimeInForce") != null
                && !jsonObj.get("pendingBelowTimeInForce").isJsonNull()) {
            PendingBelowTimeInForce.validateJsonElement(jsonObj.get("pendingBelowTimeInForce"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderListPlaceOtocoRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderListPlaceOtocoRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderListPlaceOtocoRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderListPlaceOtocoRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderListPlaceOtocoRequest>() {
                        @Override
                        public void write(JsonWriter out, OrderListPlaceOtocoRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderListPlaceOtocoRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderListPlaceOtocoRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderListPlaceOtocoRequest
     * @throws IOException if the JSON string is invalid with respect to OrderListPlaceOtocoRequest
     */
    public static OrderListPlaceOtocoRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderListPlaceOtocoRequest.class);
    }

    /**
     * Convert an instance of OrderListPlaceOtocoRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
