/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.api;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.common.websocket.adapter.ConnectionInterface;
import com.binance.connector.client.common.websocket.dtos.ApiRequestWrapperDTO;
import com.binance.connector.client.common.websocket.dtos.BaseRequestDTO;
import com.binance.connector.client.spot.websocket.api.model.SessionLogonRequest;
import com.binance.connector.client.spot.websocket.api.model.SessionLogonResponse;
import com.binance.connector.client.spot.websocket.api.model.SessionLogoutResponse;
import com.binance.connector.client.spot.websocket.api.model.SessionStatusResponse;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class AuthApi {
    private ConnectionInterface connection;

    public AuthApi() {}

    public AuthApi(ConnectionInterface connection) {
        this.connection = connection;
    }

    /**
     * WebSocket Log in with API key Authenticate WebSocket connection using the provided API key.
     * After calling &#x60;session.logon&#x60;, you can omit &#x60;apiKey&#x60; and
     * &#x60;signature&#x60; parameters for future requests that require them. Note that only one
     * API key can be authenticated. Calling &#x60;session.logon&#x60; multiple times changes the
     * current authenticated API key. Weight: 2
     *
     * @param sessionLogonRequest (required)
     * @return SessionLogonResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Log in with API key </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/authentication-requests#log-in-with-api-key-signed">WebSocket
     *     Log in with API key Documentation</a>
     */
    public CompletableFuture<SessionLogonResponse> sessionLogon(
            SessionLogonRequest sessionLogonRequest) throws ApiException {
        sessionLogonValidateBeforeCall(sessionLogonRequest);
        String methodName = "/session.logon".substring(1);
        ApiRequestWrapperDTO<SessionLogonRequest, SessionLogonResponse> build =
                new ApiRequestWrapperDTO.Builder<SessionLogonRequest, SessionLogonResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(sessionLogonRequest)
                        .responseType(SessionLogonResponse.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void sessionLogonValidateBeforeCall(SessionLogonRequest sessionLogonRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<SessionLogonRequest>> violations =
                    validator.validate(sessionLogonRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Log out of the session Forget the API key previously authenticated. If the
     * connection is not authenticated, this request does nothing. Note that the WebSocket
     * connection stays open after &#x60;session.logout&#x60; request. You can continue using the
     * connection, but now you will have to explicitly provide the &#x60;apiKey&#x60; and
     * &#x60;signature&#x60; parameters where needed. Weight: 2
     *
     * @return SessionLogoutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Log out of the session </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/authentication-requests#log-out-of-the-session">WebSocket
     *     Log out of the session Documentation</a>
     */
    public CompletableFuture<SessionLogoutResponse> sessionLogout() throws ApiException {
        sessionLogoutValidateBeforeCall();
        String methodName = "/session.logout".substring(1);
        ApiRequestWrapperDTO<BaseRequestDTO, SessionLogoutResponse> build =
                new ApiRequestWrapperDTO.Builder<BaseRequestDTO, SessionLogoutResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(new BaseRequestDTO())
                        .responseType(SessionLogoutResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void sessionLogoutValidateBeforeCall() throws ApiException {}

    /**
     * WebSocket Query session status Query the status of the WebSocket connection, inspecting which
     * API key (if any) is used to authorize requests. Weight: 2
     *
     * @return SessionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Query session status </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/authentication-requests#query-session-status">WebSocket
     *     Query session status Documentation</a>
     */
    public CompletableFuture<SessionStatusResponse> sessionStatus() throws ApiException {
        sessionStatusValidateBeforeCall();
        String methodName = "/session.status".substring(1);
        ApiRequestWrapperDTO<BaseRequestDTO, SessionStatusResponse> build =
                new ApiRequestWrapperDTO.Builder<BaseRequestDTO, SessionStatusResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(new BaseRequestDTO())
                        .responseType(SessionStatusResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void sessionStatusValidateBeforeCall() throws ApiException {}

    public String getRequestID() {
        return UUID.randomUUID().toString();
    }
}
