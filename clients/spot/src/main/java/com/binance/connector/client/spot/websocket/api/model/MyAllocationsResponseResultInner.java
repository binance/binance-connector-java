/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** MyAllocationsResponseResultInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MyAllocationsResponseResultInner extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_ALLOCATION_ID = "allocationId";

    @SerializedName(SERIALIZED_NAME_ALLOCATION_ID)
    @jakarta.annotation.Nullable
    private Long allocationId;

    public static final String SERIALIZED_NAME_ALLOCATION_TYPE = "allocationType";

    @SerializedName(SERIALIZED_NAME_ALLOCATION_TYPE)
    @jakarta.annotation.Nullable
    private String allocationType;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_ORDER_LIST_ID = "orderListId";

    @SerializedName(SERIALIZED_NAME_ORDER_LIST_ID)
    @jakarta.annotation.Nullable
    private Long orderListId;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_QTY = "qty";

    @SerializedName(SERIALIZED_NAME_QTY)
    @jakarta.annotation.Nullable
    private String qty;

    public static final String SERIALIZED_NAME_QUOTE_QTY = "quoteQty";

    @SerializedName(SERIALIZED_NAME_QUOTE_QTY)
    @jakarta.annotation.Nullable
    private String quoteQty;

    public static final String SERIALIZED_NAME_COMMISSION = "commission";

    @SerializedName(SERIALIZED_NAME_COMMISSION)
    @jakarta.annotation.Nullable
    private String commission;

    public static final String SERIALIZED_NAME_COMMISSION_ASSET = "commissionAsset";

    @SerializedName(SERIALIZED_NAME_COMMISSION_ASSET)
    @jakarta.annotation.Nullable
    private String commissionAsset;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_IS_BUYER = "isBuyer";

    @SerializedName(SERIALIZED_NAME_IS_BUYER)
    @jakarta.annotation.Nullable
    private Boolean isBuyer;

    public static final String SERIALIZED_NAME_IS_MAKER = "isMaker";

    @SerializedName(SERIALIZED_NAME_IS_MAKER)
    @jakarta.annotation.Nullable
    private Boolean isMaker;

    public static final String SERIALIZED_NAME_IS_ALLOCATOR = "isAllocator";

    @SerializedName(SERIALIZED_NAME_IS_ALLOCATOR)
    @jakarta.annotation.Nullable
    private Boolean isAllocator;

    public MyAllocationsResponseResultInner() {}

    public MyAllocationsResponseResultInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public MyAllocationsResponseResultInner allocationId(
            @jakarta.annotation.Nullable Long allocationId) {
        this.allocationId = allocationId;
        return this;
    }

    /**
     * Get allocationId
     *
     * @return allocationId
     */
    @jakarta.annotation.Nullable
    public Long getAllocationId() {
        return allocationId;
    }

    public void setAllocationId(@jakarta.annotation.Nullable Long allocationId) {
        this.allocationId = allocationId;
    }

    public MyAllocationsResponseResultInner allocationType(
            @jakarta.annotation.Nullable String allocationType) {
        this.allocationType = allocationType;
        return this;
    }

    /**
     * Get allocationType
     *
     * @return allocationType
     */
    @jakarta.annotation.Nullable
    public String getAllocationType() {
        return allocationType;
    }

    public void setAllocationType(@jakarta.annotation.Nullable String allocationType) {
        this.allocationType = allocationType;
    }

    public MyAllocationsResponseResultInner orderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public MyAllocationsResponseResultInner orderListId(
            @jakarta.annotation.Nullable Long orderListId) {
        this.orderListId = orderListId;
        return this;
    }

    /**
     * Get orderListId
     *
     * @return orderListId
     */
    @jakarta.annotation.Nullable
    public Long getOrderListId() {
        return orderListId;
    }

    public void setOrderListId(@jakarta.annotation.Nullable Long orderListId) {
        this.orderListId = orderListId;
    }

    public MyAllocationsResponseResultInner price(@jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public MyAllocationsResponseResultInner qty(@jakarta.annotation.Nullable String qty) {
        this.qty = qty;
        return this;
    }

    /**
     * Get qty
     *
     * @return qty
     */
    @jakarta.annotation.Nullable
    public String getQty() {
        return qty;
    }

    public void setQty(@jakarta.annotation.Nullable String qty) {
        this.qty = qty;
    }

    public MyAllocationsResponseResultInner quoteQty(@jakarta.annotation.Nullable String quoteQty) {
        this.quoteQty = quoteQty;
        return this;
    }

    /**
     * Get quoteQty
     *
     * @return quoteQty
     */
    @jakarta.annotation.Nullable
    public String getQuoteQty() {
        return quoteQty;
    }

    public void setQuoteQty(@jakarta.annotation.Nullable String quoteQty) {
        this.quoteQty = quoteQty;
    }

    public MyAllocationsResponseResultInner commission(
            @jakarta.annotation.Nullable String commission) {
        this.commission = commission;
        return this;
    }

    /**
     * Get commission
     *
     * @return commission
     */
    @jakarta.annotation.Nullable
    public String getCommission() {
        return commission;
    }

    public void setCommission(@jakarta.annotation.Nullable String commission) {
        this.commission = commission;
    }

    public MyAllocationsResponseResultInner commissionAsset(
            @jakarta.annotation.Nullable String commissionAsset) {
        this.commissionAsset = commissionAsset;
        return this;
    }

    /**
     * Get commissionAsset
     *
     * @return commissionAsset
     */
    @jakarta.annotation.Nullable
    public String getCommissionAsset() {
        return commissionAsset;
    }

    public void setCommissionAsset(@jakarta.annotation.Nullable String commissionAsset) {
        this.commissionAsset = commissionAsset;
    }

    public MyAllocationsResponseResultInner time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public MyAllocationsResponseResultInner isBuyer(@jakarta.annotation.Nullable Boolean isBuyer) {
        this.isBuyer = isBuyer;
        return this;
    }

    /**
     * Get isBuyer
     *
     * @return isBuyer
     */
    @jakarta.annotation.Nullable
    public Boolean getIsBuyer() {
        return isBuyer;
    }

    public void setIsBuyer(@jakarta.annotation.Nullable Boolean isBuyer) {
        this.isBuyer = isBuyer;
    }

    public MyAllocationsResponseResultInner isMaker(@jakarta.annotation.Nullable Boolean isMaker) {
        this.isMaker = isMaker;
        return this;
    }

    /**
     * Get isMaker
     *
     * @return isMaker
     */
    @jakarta.annotation.Nullable
    public Boolean getIsMaker() {
        return isMaker;
    }

    public void setIsMaker(@jakarta.annotation.Nullable Boolean isMaker) {
        this.isMaker = isMaker;
    }

    public MyAllocationsResponseResultInner isAllocator(
            @jakarta.annotation.Nullable Boolean isAllocator) {
        this.isAllocator = isAllocator;
        return this;
    }

    /**
     * Get isAllocator
     *
     * @return isAllocator
     */
    @jakarta.annotation.Nullable
    public Boolean getIsAllocator() {
        return isAllocator;
    }

    public void setIsAllocator(@jakarta.annotation.Nullable Boolean isAllocator) {
        this.isAllocator = isAllocator;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MyAllocationsResponseResultInner myAllocationsResponseResultInner =
                (MyAllocationsResponseResultInner) o;
        return Objects.equals(this.symbol, myAllocationsResponseResultInner.symbol)
                && Objects.equals(this.allocationId, myAllocationsResponseResultInner.allocationId)
                && Objects.equals(
                        this.allocationType, myAllocationsResponseResultInner.allocationType)
                && Objects.equals(this.orderId, myAllocationsResponseResultInner.orderId)
                && Objects.equals(this.orderListId, myAllocationsResponseResultInner.orderListId)
                && Objects.equals(this.price, myAllocationsResponseResultInner.price)
                && Objects.equals(this.qty, myAllocationsResponseResultInner.qty)
                && Objects.equals(this.quoteQty, myAllocationsResponseResultInner.quoteQty)
                && Objects.equals(this.commission, myAllocationsResponseResultInner.commission)
                && Objects.equals(
                        this.commissionAsset, myAllocationsResponseResultInner.commissionAsset)
                && Objects.equals(this.time, myAllocationsResponseResultInner.time)
                && Objects.equals(this.isBuyer, myAllocationsResponseResultInner.isBuyer)
                && Objects.equals(this.isMaker, myAllocationsResponseResultInner.isMaker)
                && Objects.equals(this.isAllocator, myAllocationsResponseResultInner.isAllocator);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                allocationId,
                allocationType,
                orderId,
                orderListId,
                price,
                qty,
                quoteQty,
                commission,
                commissionAsset,
                time,
                isBuyer,
                isMaker,
                isAllocator);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MyAllocationsResponseResultInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		allocationId: ").append(toIndentedString(allocationId)).append("\n");
        sb.append("		allocationType: ").append(toIndentedString(allocationType)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		orderListId: ").append(toIndentedString(orderListId)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		qty: ").append(toIndentedString(qty)).append("\n");
        sb.append("		quoteQty: ").append(toIndentedString(quoteQty)).append("\n");
        sb.append("		commission: ").append(toIndentedString(commission)).append("\n");
        sb.append("		commissionAsset: ").append(toIndentedString(commissionAsset)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		isBuyer: ").append(toIndentedString(isBuyer)).append("\n");
        sb.append("		isMaker: ").append(toIndentedString(isMaker)).append("\n");
        sb.append("		isAllocator: ").append(toIndentedString(isAllocator)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        Long allocationIdValue = getAllocationId();
        if (allocationIdValue != null) {
            String allocationIdValueAsString = allocationIdValue.toString();
            valMap.put("allocationId", allocationIdValueAsString);
        }
        String allocationTypeValue = getAllocationType();
        if (allocationTypeValue != null) {
            String allocationTypeValueAsString = allocationTypeValue.toString();
            valMap.put("allocationType", allocationTypeValueAsString);
        }
        Long orderIdValue = getOrderId();
        if (orderIdValue != null) {
            String orderIdValueAsString = orderIdValue.toString();
            valMap.put("orderId", orderIdValueAsString);
        }
        Long orderListIdValue = getOrderListId();
        if (orderListIdValue != null) {
            String orderListIdValueAsString = orderListIdValue.toString();
            valMap.put("orderListId", orderListIdValueAsString);
        }
        String priceValue = getPrice();
        if (priceValue != null) {
            String priceValueAsString = priceValue.toString();
            valMap.put("price", priceValueAsString);
        }
        String qtyValue = getQty();
        if (qtyValue != null) {
            String qtyValueAsString = qtyValue.toString();
            valMap.put("qty", qtyValueAsString);
        }
        String quoteQtyValue = getQuoteQty();
        if (quoteQtyValue != null) {
            String quoteQtyValueAsString = quoteQtyValue.toString();
            valMap.put("quoteQty", quoteQtyValueAsString);
        }
        String commissionValue = getCommission();
        if (commissionValue != null) {
            String commissionValueAsString = commissionValue.toString();
            valMap.put("commission", commissionValueAsString);
        }
        String commissionAssetValue = getCommissionAsset();
        if (commissionAssetValue != null) {
            String commissionAssetValueAsString = commissionAssetValue.toString();
            valMap.put("commissionAsset", commissionAssetValueAsString);
        }
        Long timeValue = getTime();
        if (timeValue != null) {
            String timeValueAsString = timeValue.toString();
            valMap.put("time", timeValueAsString);
        }
        Boolean isBuyerValue = getIsBuyer();
        if (isBuyerValue != null) {
            String isBuyerValueAsString = isBuyerValue.toString();
            valMap.put("isBuyer", isBuyerValueAsString);
        }
        Boolean isMakerValue = getIsMaker();
        if (isMakerValue != null) {
            String isMakerValueAsString = isMakerValue.toString();
            valMap.put("isMaker", isMakerValueAsString);
        }
        Boolean isAllocatorValue = getIsAllocator();
        if (isAllocatorValue != null) {
            String isAllocatorValueAsString = isAllocatorValue.toString();
            valMap.put("isAllocator", isAllocatorValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object allocationIdValue = getAllocationId();
        if (allocationIdValue != null) {
            valMap.put("allocationId", allocationIdValue);
        }
        Object allocationTypeValue = getAllocationType();
        if (allocationTypeValue != null) {
            valMap.put("allocationType", allocationTypeValue);
        }
        Object orderIdValue = getOrderId();
        if (orderIdValue != null) {
            valMap.put("orderId", orderIdValue);
        }
        Object orderListIdValue = getOrderListId();
        if (orderListIdValue != null) {
            valMap.put("orderListId", orderListIdValue);
        }
        Object priceValue = getPrice();
        if (priceValue != null) {
            valMap.put("price", priceValue);
        }
        Object qtyValue = getQty();
        if (qtyValue != null) {
            valMap.put("qty", qtyValue);
        }
        Object quoteQtyValue = getQuoteQty();
        if (quoteQtyValue != null) {
            valMap.put("quoteQty", quoteQtyValue);
        }
        Object commissionValue = getCommission();
        if (commissionValue != null) {
            valMap.put("commission", commissionValue);
        }
        Object commissionAssetValue = getCommissionAsset();
        if (commissionAssetValue != null) {
            valMap.put("commissionAsset", commissionAssetValue);
        }
        Object timeValue = getTime();
        if (timeValue != null) {
            valMap.put("time", timeValue);
        }
        Object isBuyerValue = getIsBuyer();
        if (isBuyerValue != null) {
            valMap.put("isBuyer", isBuyerValue);
        }
        Object isMakerValue = getIsMaker();
        if (isMakerValue != null) {
            valMap.put("isMaker", isMakerValue);
        }
        Object isAllocatorValue = getIsAllocator();
        if (isAllocatorValue != null) {
            valMap.put("isAllocator", isAllocatorValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("allocationId");
        openapiFields.add("allocationType");
        openapiFields.add("orderId");
        openapiFields.add("orderListId");
        openapiFields.add("price");
        openapiFields.add("qty");
        openapiFields.add("quoteQty");
        openapiFields.add("commission");
        openapiFields.add("commissionAsset");
        openapiFields.add("time");
        openapiFields.add("isBuyer");
        openapiFields.add("isMaker");
        openapiFields.add("isAllocator");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     MyAllocationsResponseResultInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MyAllocationsResponseResultInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MyAllocationsResponseResultInner is"
                                        + " not found in the empty JSON string",
                                MyAllocationsResponseResultInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MyAllocationsResponseResultInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `MyAllocationsResponseResultInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("allocationType") != null && !jsonObj.get("allocationType").isJsonNull())
                && !jsonObj.get("allocationType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `allocationType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("allocationType").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("qty") != null && !jsonObj.get("qty").isJsonNull())
                && !jsonObj.get("qty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `qty` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("qty").toString()));
        }
        if ((jsonObj.get("quoteQty") != null && !jsonObj.get("quoteQty").isJsonNull())
                && !jsonObj.get("quoteQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteQty").toString()));
        }
        if ((jsonObj.get("commission") != null && !jsonObj.get("commission").isJsonNull())
                && !jsonObj.get("commission").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `commission` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("commission").toString()));
        }
        if ((jsonObj.get("commissionAsset") != null && !jsonObj.get("commissionAsset").isJsonNull())
                && !jsonObj.get("commissionAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `commissionAsset` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("commissionAsset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MyAllocationsResponseResultInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MyAllocationsResponseResultInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MyAllocationsResponseResultInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(MyAllocationsResponseResultInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MyAllocationsResponseResultInner>() {
                        @Override
                        public void write(JsonWriter out, MyAllocationsResponseResultInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MyAllocationsResponseResultInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MyAllocationsResponseResultInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MyAllocationsResponseResultInner
     * @throws IOException if the JSON string is invalid with respect to
     *     MyAllocationsResponseResultInner
     */
    public static MyAllocationsResponseResultInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MyAllocationsResponseResultInner.class);
    }

    /**
     * Convert an instance of MyAllocationsResponseResultInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
