/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderAmendmentsResponseResultInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderAmendmentsResponseResultInner extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_EXECUTION_ID = "executionId";

    @SerializedName(SERIALIZED_NAME_EXECUTION_ID)
    @jakarta.annotation.Nullable
    private Long executionId;

    public static final String SERIALIZED_NAME_ORIG_CLIENT_ORDER_ID = "origClientOrderId";

    @SerializedName(SERIALIZED_NAME_ORIG_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String origClientOrderId;

    public static final String SERIALIZED_NAME_NEW_CLIENT_ORDER_ID = "newClientOrderId";

    @SerializedName(SERIALIZED_NAME_NEW_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String newClientOrderId;

    public static final String SERIALIZED_NAME_ORIG_QTY = "origQty";

    @SerializedName(SERIALIZED_NAME_ORIG_QTY)
    @jakarta.annotation.Nullable
    private String origQty;

    public static final String SERIALIZED_NAME_NEW_QTY = "newQty";

    @SerializedName(SERIALIZED_NAME_NEW_QTY)
    @jakarta.annotation.Nullable
    private String newQty;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public OrderAmendmentsResponseResultInner() {}

    public OrderAmendmentsResponseResultInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public OrderAmendmentsResponseResultInner orderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public OrderAmendmentsResponseResultInner executionId(
            @jakarta.annotation.Nullable Long executionId) {
        this.executionId = executionId;
        return this;
    }

    /**
     * Get executionId
     *
     * @return executionId
     */
    @jakarta.annotation.Nullable
    public Long getExecutionId() {
        return executionId;
    }

    public void setExecutionId(@jakarta.annotation.Nullable Long executionId) {
        this.executionId = executionId;
    }

    public OrderAmendmentsResponseResultInner origClientOrderId(
            @jakarta.annotation.Nullable String origClientOrderId) {
        this.origClientOrderId = origClientOrderId;
        return this;
    }

    /**
     * Get origClientOrderId
     *
     * @return origClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getOrigClientOrderId() {
        return origClientOrderId;
    }

    public void setOrigClientOrderId(@jakarta.annotation.Nullable String origClientOrderId) {
        this.origClientOrderId = origClientOrderId;
    }

    public OrderAmendmentsResponseResultInner newClientOrderId(
            @jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
        return this;
    }

    /**
     * Get newClientOrderId
     *
     * @return newClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getNewClientOrderId() {
        return newClientOrderId;
    }

    public void setNewClientOrderId(@jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
    }

    public OrderAmendmentsResponseResultInner origQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
        return this;
    }

    /**
     * Get origQty
     *
     * @return origQty
     */
    @jakarta.annotation.Nullable
    public String getOrigQty() {
        return origQty;
    }

    public void setOrigQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
    }

    public OrderAmendmentsResponseResultInner newQty(@jakarta.annotation.Nullable String newQty) {
        this.newQty = newQty;
        return this;
    }

    /**
     * Get newQty
     *
     * @return newQty
     */
    @jakarta.annotation.Nullable
    public String getNewQty() {
        return newQty;
    }

    public void setNewQty(@jakarta.annotation.Nullable String newQty) {
        this.newQty = newQty;
    }

    public OrderAmendmentsResponseResultInner time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderAmendmentsResponseResultInner orderAmendmentsResponseResultInner =
                (OrderAmendmentsResponseResultInner) o;
        return Objects.equals(this.symbol, orderAmendmentsResponseResultInner.symbol)
                && Objects.equals(this.orderId, orderAmendmentsResponseResultInner.orderId)
                && Objects.equals(this.executionId, orderAmendmentsResponseResultInner.executionId)
                && Objects.equals(
                        this.origClientOrderId,
                        orderAmendmentsResponseResultInner.origClientOrderId)
                && Objects.equals(
                        this.newClientOrderId, orderAmendmentsResponseResultInner.newClientOrderId)
                && Objects.equals(this.origQty, orderAmendmentsResponseResultInner.origQty)
                && Objects.equals(this.newQty, orderAmendmentsResponseResultInner.newQty)
                && Objects.equals(this.time, orderAmendmentsResponseResultInner.time);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                orderId,
                executionId,
                origClientOrderId,
                newClientOrderId,
                origQty,
                newQty,
                time);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderAmendmentsResponseResultInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		executionId: ").append(toIndentedString(executionId)).append("\n");
        sb.append("		origClientOrderId: ").append(toIndentedString(origClientOrderId)).append("\n");
        sb.append("		newClientOrderId: ").append(toIndentedString(newClientOrderId)).append("\n");
        sb.append("		origQty: ").append(toIndentedString(origQty)).append("\n");
        sb.append("		newQty: ").append(toIndentedString(newQty)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        Long orderIdValue = getOrderId();
        if (orderIdValue != null) {
            String orderIdValueAsString = orderIdValue.toString();
            valMap.put("orderId", orderIdValueAsString);
        }
        Long executionIdValue = getExecutionId();
        if (executionIdValue != null) {
            String executionIdValueAsString = executionIdValue.toString();
            valMap.put("executionId", executionIdValueAsString);
        }
        String origClientOrderIdValue = getOrigClientOrderId();
        if (origClientOrderIdValue != null) {
            String origClientOrderIdValueAsString = origClientOrderIdValue.toString();
            valMap.put("origClientOrderId", origClientOrderIdValueAsString);
        }
        String newClientOrderIdValue = getNewClientOrderId();
        if (newClientOrderIdValue != null) {
            String newClientOrderIdValueAsString = newClientOrderIdValue.toString();
            valMap.put("newClientOrderId", newClientOrderIdValueAsString);
        }
        String origQtyValue = getOrigQty();
        if (origQtyValue != null) {
            String origQtyValueAsString = origQtyValue.toString();
            valMap.put("origQty", origQtyValueAsString);
        }
        String newQtyValue = getNewQty();
        if (newQtyValue != null) {
            String newQtyValueAsString = newQtyValue.toString();
            valMap.put("newQty", newQtyValueAsString);
        }
        Long timeValue = getTime();
        if (timeValue != null) {
            String timeValueAsString = timeValue.toString();
            valMap.put("time", timeValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object orderIdValue = getOrderId();
        if (orderIdValue != null) {
            valMap.put("orderId", orderIdValue);
        }
        Object executionIdValue = getExecutionId();
        if (executionIdValue != null) {
            valMap.put("executionId", executionIdValue);
        }
        Object origClientOrderIdValue = getOrigClientOrderId();
        if (origClientOrderIdValue != null) {
            valMap.put("origClientOrderId", origClientOrderIdValue);
        }
        Object newClientOrderIdValue = getNewClientOrderId();
        if (newClientOrderIdValue != null) {
            valMap.put("newClientOrderId", newClientOrderIdValue);
        }
        Object origQtyValue = getOrigQty();
        if (origQtyValue != null) {
            valMap.put("origQty", origQtyValue);
        }
        Object newQtyValue = getNewQty();
        if (newQtyValue != null) {
            valMap.put("newQty", newQtyValue);
        }
        Object timeValue = getTime();
        if (timeValue != null) {
            valMap.put("time", timeValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("orderId");
        openapiFields.add("executionId");
        openapiFields.add("origClientOrderId");
        openapiFields.add("newClientOrderId");
        openapiFields.add("origQty");
        openapiFields.add("newQty");
        openapiFields.add("time");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OrderAmendmentsResponseResultInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderAmendmentsResponseResultInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderAmendmentsResponseResultInner is"
                                        + " not found in the empty JSON string",
                                OrderAmendmentsResponseResultInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderAmendmentsResponseResultInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `OrderAmendmentsResponseResultInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("origClientOrderId") != null
                        && !jsonObj.get("origClientOrderId").isJsonNull())
                && !jsonObj.get("origClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("origClientOrderId").toString()));
        }
        if ((jsonObj.get("newClientOrderId") != null
                        && !jsonObj.get("newClientOrderId").isJsonNull())
                && !jsonObj.get("newClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("newClientOrderId").toString()));
        }
        if ((jsonObj.get("origQty") != null && !jsonObj.get("origQty").isJsonNull())
                && !jsonObj.get("origQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("origQty").toString()));
        }
        if ((jsonObj.get("newQty") != null && !jsonObj.get("newQty").isJsonNull())
                && !jsonObj.get("newQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("newQty").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderAmendmentsResponseResultInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderAmendmentsResponseResultInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderAmendmentsResponseResultInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(OrderAmendmentsResponseResultInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderAmendmentsResponseResultInner>() {
                        @Override
                        public void write(JsonWriter out, OrderAmendmentsResponseResultInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderAmendmentsResponseResultInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderAmendmentsResponseResultInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderAmendmentsResponseResultInner
     * @throws IOException if the JSON string is invalid with respect to
     *     OrderAmendmentsResponseResultInner
     */
    public static OrderAmendmentsResponseResultInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderAmendmentsResponseResultInner.class);
    }

    /**
     * Convert an instance of OrderAmendmentsResponseResultInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
