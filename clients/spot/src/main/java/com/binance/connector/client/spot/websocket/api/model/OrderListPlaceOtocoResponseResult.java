/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderListPlaceOtocoResponseResult */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderListPlaceOtocoResponseResult extends BaseDTO {
    public static final String SERIALIZED_NAME_ORDER_LIST_ID = "orderListId";

    @SerializedName(SERIALIZED_NAME_ORDER_LIST_ID)
    @jakarta.annotation.Nullable
    private Long orderListId;

    public static final String SERIALIZED_NAME_CONTINGENCY_TYPE = "contingencyType";

    @SerializedName(SERIALIZED_NAME_CONTINGENCY_TYPE)
    @jakarta.annotation.Nullable
    private String contingencyType;

    public static final String SERIALIZED_NAME_LIST_STATUS_TYPE = "listStatusType";

    @SerializedName(SERIALIZED_NAME_LIST_STATUS_TYPE)
    @jakarta.annotation.Nullable
    private String listStatusType;

    public static final String SERIALIZED_NAME_LIST_ORDER_STATUS = "listOrderStatus";

    @SerializedName(SERIALIZED_NAME_LIST_ORDER_STATUS)
    @jakarta.annotation.Nullable
    private String listOrderStatus;

    public static final String SERIALIZED_NAME_LIST_CLIENT_ORDER_ID = "listClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIST_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String listClientOrderId;

    public static final String SERIALIZED_NAME_TRANSACTION_TIME = "transactionTime";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_TIME)
    @jakarta.annotation.Nullable
    private Long transactionTime;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_ORDERS = "orders";

    @SerializedName(SERIALIZED_NAME_ORDERS)
    @jakarta.annotation.Nullable
    private List<@Valid OrderListPlaceOtocoResponseResultOrdersInner> orders;

    public static final String SERIALIZED_NAME_ORDER_REPORTS = "orderReports";

    @SerializedName(SERIALIZED_NAME_ORDER_REPORTS)
    @jakarta.annotation.Nullable
    private List<@Valid OrderListPlaceOtocoResponseResultOrderReportsInner> orderReports;

    public OrderListPlaceOtocoResponseResult() {}

    public OrderListPlaceOtocoResponseResult orderListId(
            @jakarta.annotation.Nullable Long orderListId) {
        this.orderListId = orderListId;
        return this;
    }

    /**
     * Get orderListId
     *
     * @return orderListId
     */
    @jakarta.annotation.Nullable
    public Long getOrderListId() {
        return orderListId;
    }

    public void setOrderListId(@jakarta.annotation.Nullable Long orderListId) {
        this.orderListId = orderListId;
    }

    public OrderListPlaceOtocoResponseResult contingencyType(
            @jakarta.annotation.Nullable String contingencyType) {
        this.contingencyType = contingencyType;
        return this;
    }

    /**
     * Get contingencyType
     *
     * @return contingencyType
     */
    @jakarta.annotation.Nullable
    public String getContingencyType() {
        return contingencyType;
    }

    public void setContingencyType(@jakarta.annotation.Nullable String contingencyType) {
        this.contingencyType = contingencyType;
    }

    public OrderListPlaceOtocoResponseResult listStatusType(
            @jakarta.annotation.Nullable String listStatusType) {
        this.listStatusType = listStatusType;
        return this;
    }

    /**
     * Get listStatusType
     *
     * @return listStatusType
     */
    @jakarta.annotation.Nullable
    public String getListStatusType() {
        return listStatusType;
    }

    public void setListStatusType(@jakarta.annotation.Nullable String listStatusType) {
        this.listStatusType = listStatusType;
    }

    public OrderListPlaceOtocoResponseResult listOrderStatus(
            @jakarta.annotation.Nullable String listOrderStatus) {
        this.listOrderStatus = listOrderStatus;
        return this;
    }

    /**
     * Get listOrderStatus
     *
     * @return listOrderStatus
     */
    @jakarta.annotation.Nullable
    public String getListOrderStatus() {
        return listOrderStatus;
    }

    public void setListOrderStatus(@jakarta.annotation.Nullable String listOrderStatus) {
        this.listOrderStatus = listOrderStatus;
    }

    public OrderListPlaceOtocoResponseResult listClientOrderId(
            @jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
        return this;
    }

    /**
     * Get listClientOrderId
     *
     * @return listClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getListClientOrderId() {
        return listClientOrderId;
    }

    public void setListClientOrderId(@jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
    }

    public OrderListPlaceOtocoResponseResult transactionTime(
            @jakarta.annotation.Nullable Long transactionTime) {
        this.transactionTime = transactionTime;
        return this;
    }

    /**
     * Get transactionTime
     *
     * @return transactionTime
     */
    @jakarta.annotation.Nullable
    public Long getTransactionTime() {
        return transactionTime;
    }

    public void setTransactionTime(@jakarta.annotation.Nullable Long transactionTime) {
        this.transactionTime = transactionTime;
    }

    public OrderListPlaceOtocoResponseResult symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public OrderListPlaceOtocoResponseResult orders(
            @jakarta.annotation.Nullable
                    List<@Valid OrderListPlaceOtocoResponseResultOrdersInner> orders) {
        this.orders = orders;
        return this;
    }

    public OrderListPlaceOtocoResponseResult addOrdersItem(
            OrderListPlaceOtocoResponseResultOrdersInner ordersItem) {
        if (this.orders == null) {
            this.orders = new ArrayList<>();
        }
        this.orders.add(ordersItem);
        return this;
    }

    /**
     * Get orders
     *
     * @return orders
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid OrderListPlaceOtocoResponseResultOrdersInner> getOrders() {
        return orders;
    }

    public void setOrders(
            @jakarta.annotation.Nullable
                    List<@Valid OrderListPlaceOtocoResponseResultOrdersInner> orders) {
        this.orders = orders;
    }

    public OrderListPlaceOtocoResponseResult orderReports(
            @jakarta.annotation.Nullable
                    List<@Valid OrderListPlaceOtocoResponseResultOrderReportsInner> orderReports) {
        this.orderReports = orderReports;
        return this;
    }

    public OrderListPlaceOtocoResponseResult addOrderReportsItem(
            OrderListPlaceOtocoResponseResultOrderReportsInner orderReportsItem) {
        if (this.orderReports == null) {
            this.orderReports = new ArrayList<>();
        }
        this.orderReports.add(orderReportsItem);
        return this;
    }

    /**
     * Get orderReports
     *
     * @return orderReports
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid OrderListPlaceOtocoResponseResultOrderReportsInner> getOrderReports() {
        return orderReports;
    }

    public void setOrderReports(
            @jakarta.annotation.Nullable
                    List<@Valid OrderListPlaceOtocoResponseResultOrderReportsInner> orderReports) {
        this.orderReports = orderReports;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderListPlaceOtocoResponseResult orderListPlaceOtocoResponseResult =
                (OrderListPlaceOtocoResponseResult) o;
        return Objects.equals(this.orderListId, orderListPlaceOtocoResponseResult.orderListId)
                && Objects.equals(
                        this.contingencyType, orderListPlaceOtocoResponseResult.contingencyType)
                && Objects.equals(
                        this.listStatusType, orderListPlaceOtocoResponseResult.listStatusType)
                && Objects.equals(
                        this.listOrderStatus, orderListPlaceOtocoResponseResult.listOrderStatus)
                && Objects.equals(
                        this.listClientOrderId, orderListPlaceOtocoResponseResult.listClientOrderId)
                && Objects.equals(
                        this.transactionTime, orderListPlaceOtocoResponseResult.transactionTime)
                && Objects.equals(this.symbol, orderListPlaceOtocoResponseResult.symbol)
                && Objects.equals(this.orders, orderListPlaceOtocoResponseResult.orders)
                && Objects.equals(
                        this.orderReports, orderListPlaceOtocoResponseResult.orderReports);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                orderListId,
                contingencyType,
                listStatusType,
                listOrderStatus,
                listClientOrderId,
                transactionTime,
                symbol,
                orders,
                orderReports);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderListPlaceOtocoResponseResult {\n");
        sb.append("		orderListId: ").append(toIndentedString(orderListId)).append("\n");
        sb.append("		contingencyType: ").append(toIndentedString(contingencyType)).append("\n");
        sb.append("		listStatusType: ").append(toIndentedString(listStatusType)).append("\n");
        sb.append("		listOrderStatus: ").append(toIndentedString(listOrderStatus)).append("\n");
        sb.append("		listClientOrderId: ").append(toIndentedString(listClientOrderId)).append("\n");
        sb.append("		transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		orders: ").append(toIndentedString(orders)).append("\n");
        sb.append("		orderReports: ").append(toIndentedString(orderReports)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long orderListIdValue = getOrderListId();
        if (orderListIdValue != null) {
            String orderListIdValueAsString = orderListIdValue.toString();
            valMap.put("orderListId", orderListIdValueAsString);
        }
        String contingencyTypeValue = getContingencyType();
        if (contingencyTypeValue != null) {
            String contingencyTypeValueAsString = contingencyTypeValue.toString();
            valMap.put("contingencyType", contingencyTypeValueAsString);
        }
        String listStatusTypeValue = getListStatusType();
        if (listStatusTypeValue != null) {
            String listStatusTypeValueAsString = listStatusTypeValue.toString();
            valMap.put("listStatusType", listStatusTypeValueAsString);
        }
        String listOrderStatusValue = getListOrderStatus();
        if (listOrderStatusValue != null) {
            String listOrderStatusValueAsString = listOrderStatusValue.toString();
            valMap.put("listOrderStatus", listOrderStatusValueAsString);
        }
        String listClientOrderIdValue = getListClientOrderId();
        if (listClientOrderIdValue != null) {
            String listClientOrderIdValueAsString = listClientOrderIdValue.toString();
            valMap.put("listClientOrderId", listClientOrderIdValueAsString);
        }
        Long transactionTimeValue = getTransactionTime();
        if (transactionTimeValue != null) {
            String transactionTimeValueAsString = transactionTimeValue.toString();
            valMap.put("transactionTime", transactionTimeValueAsString);
        }
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        List<@Valid OrderListPlaceOtocoResponseResultOrdersInner> ordersValue = getOrders();
        if (ordersValue != null) {
            String ordersValueAsString = JSON.getGson().toJson(ordersValue);
            valMap.put("orders", ordersValueAsString);
        }
        List<@Valid OrderListPlaceOtocoResponseResultOrderReportsInner> orderReportsValue =
                getOrderReports();
        if (orderReportsValue != null) {
            String orderReportsValueAsString = JSON.getGson().toJson(orderReportsValue);
            valMap.put("orderReports", orderReportsValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object orderListIdValue = getOrderListId();
        if (orderListIdValue != null) {
            valMap.put("orderListId", orderListIdValue);
        }
        Object contingencyTypeValue = getContingencyType();
        if (contingencyTypeValue != null) {
            valMap.put("contingencyType", contingencyTypeValue);
        }
        Object listStatusTypeValue = getListStatusType();
        if (listStatusTypeValue != null) {
            valMap.put("listStatusType", listStatusTypeValue);
        }
        Object listOrderStatusValue = getListOrderStatus();
        if (listOrderStatusValue != null) {
            valMap.put("listOrderStatus", listOrderStatusValue);
        }
        Object listClientOrderIdValue = getListClientOrderId();
        if (listClientOrderIdValue != null) {
            valMap.put("listClientOrderId", listClientOrderIdValue);
        }
        Object transactionTimeValue = getTransactionTime();
        if (transactionTimeValue != null) {
            valMap.put("transactionTime", transactionTimeValue);
        }
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object ordersValue = getOrders();
        if (ordersValue != null) {
            valMap.put("orders", ordersValue);
        }
        Object orderReportsValue = getOrderReports();
        if (orderReportsValue != null) {
            valMap.put("orderReports", orderReportsValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderListId");
        openapiFields.add("contingencyType");
        openapiFields.add("listStatusType");
        openapiFields.add("listOrderStatus");
        openapiFields.add("listClientOrderId");
        openapiFields.add("transactionTime");
        openapiFields.add("symbol");
        openapiFields.add("orders");
        openapiFields.add("orderReports");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OrderListPlaceOtocoResponseResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderListPlaceOtocoResponseResult.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderListPlaceOtocoResponseResult is"
                                        + " not found in the empty JSON string",
                                OrderListPlaceOtocoResponseResult.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderListPlaceOtocoResponseResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `OrderListPlaceOtocoResponseResult` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("contingencyType") != null && !jsonObj.get("contingencyType").isJsonNull())
                && !jsonObj.get("contingencyType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `contingencyType` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("contingencyType").toString()));
        }
        if ((jsonObj.get("listStatusType") != null && !jsonObj.get("listStatusType").isJsonNull())
                && !jsonObj.get("listStatusType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listStatusType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("listStatusType").toString()));
        }
        if ((jsonObj.get("listOrderStatus") != null && !jsonObj.get("listOrderStatus").isJsonNull())
                && !jsonObj.get("listOrderStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listOrderStatus` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listOrderStatus").toString()));
        }
        if ((jsonObj.get("listClientOrderId") != null
                        && !jsonObj.get("listClientOrderId").isJsonNull())
                && !jsonObj.get("listClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listClientOrderId").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if (jsonObj.get("orders") != null && !jsonObj.get("orders").isJsonNull()) {
            JsonArray jsonArrayorders = jsonObj.getAsJsonArray("orders");
            if (jsonArrayorders != null) {
                // ensure the json data is an array
                if (!jsonObj.get("orders").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `orders` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("orders").toString()));
                }

                // validate the optional field `orders` (array)
                for (int i = 0; i < jsonArrayorders.size(); i++) {
                    OrderListPlaceOtocoResponseResultOrdersInner.validateJsonElement(
                            jsonArrayorders.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("orderReports") != null && !jsonObj.get("orderReports").isJsonNull()) {
            JsonArray jsonArrayorderReports = jsonObj.getAsJsonArray("orderReports");
            if (jsonArrayorderReports != null) {
                // ensure the json data is an array
                if (!jsonObj.get("orderReports").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `orderReports` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("orderReports").toString()));
                }

                // validate the optional field `orderReports` (array)
                for (int i = 0; i < jsonArrayorderReports.size(); i++) {
                    OrderListPlaceOtocoResponseResultOrderReportsInner.validateJsonElement(
                            jsonArrayorderReports.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderListPlaceOtocoResponseResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderListPlaceOtocoResponseResult' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderListPlaceOtocoResponseResult> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(OrderListPlaceOtocoResponseResult.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderListPlaceOtocoResponseResult>() {
                        @Override
                        public void write(JsonWriter out, OrderListPlaceOtocoResponseResult value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderListPlaceOtocoResponseResult read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderListPlaceOtocoResponseResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderListPlaceOtocoResponseResult
     * @throws IOException if the JSON string is invalid with respect to
     *     OrderListPlaceOtocoResponseResult
     */
    public static OrderListPlaceOtocoResponseResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderListPlaceOtocoResponseResult.class);
    }

    /**
     * Convert an instance of OrderListPlaceOtocoResponseResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
