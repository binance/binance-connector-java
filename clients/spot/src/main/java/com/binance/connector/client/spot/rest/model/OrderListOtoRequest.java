/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** OrderListOtoRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderListOtoRequest {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_LIST_CLIENT_ORDER_ID = "listClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIST_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String listClientOrderId;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespType newOrderRespType;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private SelfTradePreventionMode selfTradePreventionMode;

    public static final String SERIALIZED_NAME_WORKING_TYPE = "workingType";

    @SerializedName(SERIALIZED_NAME_WORKING_TYPE)
    @jakarta.annotation.Nonnull
    private WorkingType workingType;

    public static final String SERIALIZED_NAME_WORKING_SIDE = "workingSide";

    @SerializedName(SERIALIZED_NAME_WORKING_SIDE)
    @jakarta.annotation.Nonnull
    private WorkingSide workingSide;

    public static final String SERIALIZED_NAME_WORKING_CLIENT_ORDER_ID = "workingClientOrderId";

    @SerializedName(SERIALIZED_NAME_WORKING_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String workingClientOrderId;

    public static final String SERIALIZED_NAME_WORKING_PRICE = "workingPrice";

    @SerializedName(SERIALIZED_NAME_WORKING_PRICE)
    @jakarta.annotation.Nonnull
    private Double workingPrice;

    public static final String SERIALIZED_NAME_WORKING_QUANTITY = "workingQuantity";

    @SerializedName(SERIALIZED_NAME_WORKING_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double workingQuantity;

    public static final String SERIALIZED_NAME_WORKING_ICEBERG_QTY = "workingIcebergQty";

    @SerializedName(SERIALIZED_NAME_WORKING_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double workingIcebergQty;

    public static final String SERIALIZED_NAME_WORKING_TIME_IN_FORCE = "workingTimeInForce";

    @SerializedName(SERIALIZED_NAME_WORKING_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private WorkingTimeInForce workingTimeInForce;

    public static final String SERIALIZED_NAME_WORKING_STRATEGY_ID = "workingStrategyId";

    @SerializedName(SERIALIZED_NAME_WORKING_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long workingStrategyId;

    public static final String SERIALIZED_NAME_WORKING_STRATEGY_TYPE = "workingStrategyType";

    @SerializedName(SERIALIZED_NAME_WORKING_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private Integer workingStrategyType;

    public static final String SERIALIZED_NAME_PENDING_TYPE = "pendingType";

    @SerializedName(SERIALIZED_NAME_PENDING_TYPE)
    @jakarta.annotation.Nonnull
    private PendingType pendingType;

    public static final String SERIALIZED_NAME_PENDING_SIDE = "pendingSide";

    @SerializedName(SERIALIZED_NAME_PENDING_SIDE)
    @jakarta.annotation.Nonnull
    private PendingSide pendingSide;

    public static final String SERIALIZED_NAME_PENDING_CLIENT_ORDER_ID = "pendingClientOrderId";

    @SerializedName(SERIALIZED_NAME_PENDING_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String pendingClientOrderId;

    public static final String SERIALIZED_NAME_PENDING_PRICE = "pendingPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingPrice;

    public static final String SERIALIZED_NAME_PENDING_STOP_PRICE = "pendingStopPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingStopPrice;

    public static final String SERIALIZED_NAME_PENDING_TRAILING_DELTA = "pendingTrailingDelta";

    @SerializedName(SERIALIZED_NAME_PENDING_TRAILING_DELTA)
    @jakarta.annotation.Nullable
    private Double pendingTrailingDelta;

    public static final String SERIALIZED_NAME_PENDING_QUANTITY = "pendingQuantity";

    @SerializedName(SERIALIZED_NAME_PENDING_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double pendingQuantity;

    public static final String SERIALIZED_NAME_PENDING_ICEBERG_QTY = "pendingIcebergQty";

    @SerializedName(SERIALIZED_NAME_PENDING_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double pendingIcebergQty;

    public static final String SERIALIZED_NAME_PENDING_TIME_IN_FORCE = "pendingTimeInForce";

    @SerializedName(SERIALIZED_NAME_PENDING_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private PendingTimeInForce pendingTimeInForce;

    public static final String SERIALIZED_NAME_PENDING_STRATEGY_ID = "pendingStrategyId";

    @SerializedName(SERIALIZED_NAME_PENDING_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long pendingStrategyId;

    public static final String SERIALIZED_NAME_PENDING_STRATEGY_TYPE = "pendingStrategyType";

    @SerializedName(SERIALIZED_NAME_PENDING_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private Integer pendingStrategyType;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public OrderListOtoRequest() {}

    public OrderListOtoRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public OrderListOtoRequest listClientOrderId(
            @jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
        return this;
    }

    /**
     * Get listClientOrderId
     *
     * @return listClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getListClientOrderId() {
        return listClientOrderId;
    }

    public void setListClientOrderId(@jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
    }

    public OrderListOtoRequest newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    @Valid
    public NewOrderRespType getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public OrderListOtoRequest selfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    @Valid
    public SelfTradePreventionMode getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public OrderListOtoRequest workingType(@jakarta.annotation.Nonnull WorkingType workingType) {
        this.workingType = workingType;
        return this;
    }

    /**
     * Get workingType
     *
     * @return workingType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public WorkingType getWorkingType() {
        return workingType;
    }

    public void setWorkingType(@jakarta.annotation.Nonnull WorkingType workingType) {
        this.workingType = workingType;
    }

    public OrderListOtoRequest workingSide(@jakarta.annotation.Nonnull WorkingSide workingSide) {
        this.workingSide = workingSide;
        return this;
    }

    /**
     * Get workingSide
     *
     * @return workingSide
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public WorkingSide getWorkingSide() {
        return workingSide;
    }

    public void setWorkingSide(@jakarta.annotation.Nonnull WorkingSide workingSide) {
        this.workingSide = workingSide;
    }

    public OrderListOtoRequest workingClientOrderId(
            @jakarta.annotation.Nullable String workingClientOrderId) {
        this.workingClientOrderId = workingClientOrderId;
        return this;
    }

    /**
     * Get workingClientOrderId
     *
     * @return workingClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getWorkingClientOrderId() {
        return workingClientOrderId;
    }

    public void setWorkingClientOrderId(@jakarta.annotation.Nullable String workingClientOrderId) {
        this.workingClientOrderId = workingClientOrderId;
    }

    public OrderListOtoRequest workingPrice(@jakarta.annotation.Nonnull Double workingPrice) {
        this.workingPrice = workingPrice;
        return this;
    }

    /**
     * Get workingPrice
     *
     * @return workingPrice
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getWorkingPrice() {
        return workingPrice;
    }

    public void setWorkingPrice(@jakarta.annotation.Nonnull Double workingPrice) {
        this.workingPrice = workingPrice;
    }

    public OrderListOtoRequest workingQuantity(@jakarta.annotation.Nonnull Double workingQuantity) {
        this.workingQuantity = workingQuantity;
        return this;
    }

    /**
     * Get workingQuantity
     *
     * @return workingQuantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getWorkingQuantity() {
        return workingQuantity;
    }

    public void setWorkingQuantity(@jakarta.annotation.Nonnull Double workingQuantity) {
        this.workingQuantity = workingQuantity;
    }

    public OrderListOtoRequest workingIcebergQty(
            @jakarta.annotation.Nullable Double workingIcebergQty) {
        this.workingIcebergQty = workingIcebergQty;
        return this;
    }

    /**
     * Get workingIcebergQty
     *
     * @return workingIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getWorkingIcebergQty() {
        return workingIcebergQty;
    }

    public void setWorkingIcebergQty(@jakarta.annotation.Nullable Double workingIcebergQty) {
        this.workingIcebergQty = workingIcebergQty;
    }

    public OrderListOtoRequest workingTimeInForce(
            @jakarta.annotation.Nullable WorkingTimeInForce workingTimeInForce) {
        this.workingTimeInForce = workingTimeInForce;
        return this;
    }

    /**
     * Get workingTimeInForce
     *
     * @return workingTimeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public WorkingTimeInForce getWorkingTimeInForce() {
        return workingTimeInForce;
    }

    public void setWorkingTimeInForce(
            @jakarta.annotation.Nullable WorkingTimeInForce workingTimeInForce) {
        this.workingTimeInForce = workingTimeInForce;
    }

    public OrderListOtoRequest workingStrategyId(
            @jakarta.annotation.Nullable Long workingStrategyId) {
        this.workingStrategyId = workingStrategyId;
        return this;
    }

    /**
     * Get workingStrategyId
     *
     * @return workingStrategyId
     */
    @jakarta.annotation.Nullable
    public Long getWorkingStrategyId() {
        return workingStrategyId;
    }

    public void setWorkingStrategyId(@jakarta.annotation.Nullable Long workingStrategyId) {
        this.workingStrategyId = workingStrategyId;
    }

    public OrderListOtoRequest workingStrategyType(
            @jakarta.annotation.Nullable Integer workingStrategyType) {
        this.workingStrategyType = workingStrategyType;
        return this;
    }

    /**
     * Get workingStrategyType
     *
     * @return workingStrategyType
     */
    @jakarta.annotation.Nullable
    public Integer getWorkingStrategyType() {
        return workingStrategyType;
    }

    public void setWorkingStrategyType(@jakarta.annotation.Nullable Integer workingStrategyType) {
        this.workingStrategyType = workingStrategyType;
    }

    public OrderListOtoRequest pendingType(@jakarta.annotation.Nonnull PendingType pendingType) {
        this.pendingType = pendingType;
        return this;
    }

    /**
     * Get pendingType
     *
     * @return pendingType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public PendingType getPendingType() {
        return pendingType;
    }

    public void setPendingType(@jakarta.annotation.Nonnull PendingType pendingType) {
        this.pendingType = pendingType;
    }

    public OrderListOtoRequest pendingSide(@jakarta.annotation.Nonnull PendingSide pendingSide) {
        this.pendingSide = pendingSide;
        return this;
    }

    /**
     * Get pendingSide
     *
     * @return pendingSide
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public PendingSide getPendingSide() {
        return pendingSide;
    }

    public void setPendingSide(@jakarta.annotation.Nonnull PendingSide pendingSide) {
        this.pendingSide = pendingSide;
    }

    public OrderListOtoRequest pendingClientOrderId(
            @jakarta.annotation.Nullable String pendingClientOrderId) {
        this.pendingClientOrderId = pendingClientOrderId;
        return this;
    }

    /**
     * Get pendingClientOrderId
     *
     * @return pendingClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getPendingClientOrderId() {
        return pendingClientOrderId;
    }

    public void setPendingClientOrderId(@jakarta.annotation.Nullable String pendingClientOrderId) {
        this.pendingClientOrderId = pendingClientOrderId;
    }

    public OrderListOtoRequest pendingPrice(@jakarta.annotation.Nullable Double pendingPrice) {
        this.pendingPrice = pendingPrice;
        return this;
    }

    /**
     * Get pendingPrice
     *
     * @return pendingPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingPrice() {
        return pendingPrice;
    }

    public void setPendingPrice(@jakarta.annotation.Nullable Double pendingPrice) {
        this.pendingPrice = pendingPrice;
    }

    public OrderListOtoRequest pendingStopPrice(
            @jakarta.annotation.Nullable Double pendingStopPrice) {
        this.pendingStopPrice = pendingStopPrice;
        return this;
    }

    /**
     * Get pendingStopPrice
     *
     * @return pendingStopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingStopPrice() {
        return pendingStopPrice;
    }

    public void setPendingStopPrice(@jakarta.annotation.Nullable Double pendingStopPrice) {
        this.pendingStopPrice = pendingStopPrice;
    }

    public OrderListOtoRequest pendingTrailingDelta(
            @jakarta.annotation.Nullable Double pendingTrailingDelta) {
        this.pendingTrailingDelta = pendingTrailingDelta;
        return this;
    }

    /**
     * Get pendingTrailingDelta
     *
     * @return pendingTrailingDelta
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingTrailingDelta() {
        return pendingTrailingDelta;
    }

    public void setPendingTrailingDelta(@jakarta.annotation.Nullable Double pendingTrailingDelta) {
        this.pendingTrailingDelta = pendingTrailingDelta;
    }

    public OrderListOtoRequest pendingQuantity(@jakarta.annotation.Nonnull Double pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
        return this;
    }

    /**
     * Get pendingQuantity
     *
     * @return pendingQuantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getPendingQuantity() {
        return pendingQuantity;
    }

    public void setPendingQuantity(@jakarta.annotation.Nonnull Double pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
    }

    public OrderListOtoRequest pendingIcebergQty(
            @jakarta.annotation.Nullable Double pendingIcebergQty) {
        this.pendingIcebergQty = pendingIcebergQty;
        return this;
    }

    /**
     * Get pendingIcebergQty
     *
     * @return pendingIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingIcebergQty() {
        return pendingIcebergQty;
    }

    public void setPendingIcebergQty(@jakarta.annotation.Nullable Double pendingIcebergQty) {
        this.pendingIcebergQty = pendingIcebergQty;
    }

    public OrderListOtoRequest pendingTimeInForce(
            @jakarta.annotation.Nullable PendingTimeInForce pendingTimeInForce) {
        this.pendingTimeInForce = pendingTimeInForce;
        return this;
    }

    /**
     * Get pendingTimeInForce
     *
     * @return pendingTimeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public PendingTimeInForce getPendingTimeInForce() {
        return pendingTimeInForce;
    }

    public void setPendingTimeInForce(
            @jakarta.annotation.Nullable PendingTimeInForce pendingTimeInForce) {
        this.pendingTimeInForce = pendingTimeInForce;
    }

    public OrderListOtoRequest pendingStrategyId(
            @jakarta.annotation.Nullable Long pendingStrategyId) {
        this.pendingStrategyId = pendingStrategyId;
        return this;
    }

    /**
     * Get pendingStrategyId
     *
     * @return pendingStrategyId
     */
    @jakarta.annotation.Nullable
    public Long getPendingStrategyId() {
        return pendingStrategyId;
    }

    public void setPendingStrategyId(@jakarta.annotation.Nullable Long pendingStrategyId) {
        this.pendingStrategyId = pendingStrategyId;
    }

    public OrderListOtoRequest pendingStrategyType(
            @jakarta.annotation.Nullable Integer pendingStrategyType) {
        this.pendingStrategyType = pendingStrategyType;
        return this;
    }

    /**
     * Get pendingStrategyType
     *
     * @return pendingStrategyType
     */
    @jakarta.annotation.Nullable
    public Integer getPendingStrategyType() {
        return pendingStrategyType;
    }

    public void setPendingStrategyType(@jakarta.annotation.Nullable Integer pendingStrategyType) {
        this.pendingStrategyType = pendingStrategyType;
    }

    public OrderListOtoRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderListOtoRequest orderListOtoRequest = (OrderListOtoRequest) o;
        return Objects.equals(this.symbol, orderListOtoRequest.symbol)
                && Objects.equals(this.listClientOrderId, orderListOtoRequest.listClientOrderId)
                && Objects.equals(this.newOrderRespType, orderListOtoRequest.newOrderRespType)
                && Objects.equals(
                        this.selfTradePreventionMode, orderListOtoRequest.selfTradePreventionMode)
                && Objects.equals(this.workingType, orderListOtoRequest.workingType)
                && Objects.equals(this.workingSide, orderListOtoRequest.workingSide)
                && Objects.equals(
                        this.workingClientOrderId, orderListOtoRequest.workingClientOrderId)
                && Objects.equals(this.workingPrice, orderListOtoRequest.workingPrice)
                && Objects.equals(this.workingQuantity, orderListOtoRequest.workingQuantity)
                && Objects.equals(this.workingIcebergQty, orderListOtoRequest.workingIcebergQty)
                && Objects.equals(this.workingTimeInForce, orderListOtoRequest.workingTimeInForce)
                && Objects.equals(this.workingStrategyId, orderListOtoRequest.workingStrategyId)
                && Objects.equals(this.workingStrategyType, orderListOtoRequest.workingStrategyType)
                && Objects.equals(this.pendingType, orderListOtoRequest.pendingType)
                && Objects.equals(this.pendingSide, orderListOtoRequest.pendingSide)
                && Objects.equals(
                        this.pendingClientOrderId, orderListOtoRequest.pendingClientOrderId)
                && Objects.equals(this.pendingPrice, orderListOtoRequest.pendingPrice)
                && Objects.equals(this.pendingStopPrice, orderListOtoRequest.pendingStopPrice)
                && Objects.equals(
                        this.pendingTrailingDelta, orderListOtoRequest.pendingTrailingDelta)
                && Objects.equals(this.pendingQuantity, orderListOtoRequest.pendingQuantity)
                && Objects.equals(this.pendingIcebergQty, orderListOtoRequest.pendingIcebergQty)
                && Objects.equals(this.pendingTimeInForce, orderListOtoRequest.pendingTimeInForce)
                && Objects.equals(this.pendingStrategyId, orderListOtoRequest.pendingStrategyId)
                && Objects.equals(this.pendingStrategyType, orderListOtoRequest.pendingStrategyType)
                && Objects.equals(this.recvWindow, orderListOtoRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                listClientOrderId,
                newOrderRespType,
                selfTradePreventionMode,
                workingType,
                workingSide,
                workingClientOrderId,
                workingPrice,
                workingQuantity,
                workingIcebergQty,
                workingTimeInForce,
                workingStrategyId,
                workingStrategyType,
                pendingType,
                pendingSide,
                pendingClientOrderId,
                pendingPrice,
                pendingStopPrice,
                pendingTrailingDelta,
                pendingQuantity,
                pendingIcebergQty,
                pendingTimeInForce,
                pendingStrategyId,
                pendingStrategyType,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderListOtoRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		listClientOrderId: ").append(toIndentedString(listClientOrderId)).append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		workingType: ").append(toIndentedString(workingType)).append("\n");
        sb.append("		workingSide: ").append(toIndentedString(workingSide)).append("\n");
        sb.append("		workingClientOrderId: ")
                .append(toIndentedString(workingClientOrderId))
                .append("\n");
        sb.append("		workingPrice: ").append(toIndentedString(workingPrice)).append("\n");
        sb.append("		workingQuantity: ").append(toIndentedString(workingQuantity)).append("\n");
        sb.append("		workingIcebergQty: ").append(toIndentedString(workingIcebergQty)).append("\n");
        sb.append("		workingTimeInForce: ")
                .append(toIndentedString(workingTimeInForce))
                .append("\n");
        sb.append("		workingStrategyId: ").append(toIndentedString(workingStrategyId)).append("\n");
        sb.append("		workingStrategyType: ")
                .append(toIndentedString(workingStrategyType))
                .append("\n");
        sb.append("		pendingType: ").append(toIndentedString(pendingType)).append("\n");
        sb.append("		pendingSide: ").append(toIndentedString(pendingSide)).append("\n");
        sb.append("		pendingClientOrderId: ")
                .append(toIndentedString(pendingClientOrderId))
                .append("\n");
        sb.append("		pendingPrice: ").append(toIndentedString(pendingPrice)).append("\n");
        sb.append("		pendingStopPrice: ").append(toIndentedString(pendingStopPrice)).append("\n");
        sb.append("		pendingTrailingDelta: ")
                .append(toIndentedString(pendingTrailingDelta))
                .append("\n");
        sb.append("		pendingQuantity: ").append(toIndentedString(pendingQuantity)).append("\n");
        sb.append("		pendingIcebergQty: ").append(toIndentedString(pendingIcebergQty)).append("\n");
        sb.append("		pendingTimeInForce: ")
                .append(toIndentedString(pendingTimeInForce))
                .append("\n");
        sb.append("		pendingStrategyId: ").append(toIndentedString(pendingStrategyId)).append("\n");
        sb.append("		pendingStrategyType: ")
                .append(toIndentedString(pendingStrategyType))
                .append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object listClientOrderIdValue = getListClientOrderId();
        String listClientOrderIdValueAsString = "";
        listClientOrderIdValueAsString = listClientOrderIdValue.toString();
        sb.append("listClientOrderId=")
                .append(urlEncode(listClientOrderIdValueAsString))
                .append("");
        Object newOrderRespTypeValue = getNewOrderRespType();
        String newOrderRespTypeValueAsString = "";
        newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
        sb.append("newOrderRespType=").append(urlEncode(newOrderRespTypeValueAsString)).append("");
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        String selfTradePreventionModeValueAsString = "";
        selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
        sb.append("selfTradePreventionMode=")
                .append(urlEncode(selfTradePreventionModeValueAsString))
                .append("");
        Object workingTypeValue = getWorkingType();
        String workingTypeValueAsString = "";
        workingTypeValueAsString = workingTypeValue.toString();
        sb.append("workingType=").append(urlEncode(workingTypeValueAsString)).append("");
        Object workingSideValue = getWorkingSide();
        String workingSideValueAsString = "";
        workingSideValueAsString = workingSideValue.toString();
        sb.append("workingSide=").append(urlEncode(workingSideValueAsString)).append("");
        Object workingClientOrderIdValue = getWorkingClientOrderId();
        String workingClientOrderIdValueAsString = "";
        workingClientOrderIdValueAsString = workingClientOrderIdValue.toString();
        sb.append("workingClientOrderId=")
                .append(urlEncode(workingClientOrderIdValueAsString))
                .append("");
        Object workingPriceValue = getWorkingPrice();
        String workingPriceValueAsString = "";
        workingPriceValueAsString = workingPriceValue.toString();
        sb.append("workingPrice=").append(urlEncode(workingPriceValueAsString)).append("");
        Object workingQuantityValue = getWorkingQuantity();
        String workingQuantityValueAsString = "";
        workingQuantityValueAsString = workingQuantityValue.toString();
        sb.append("workingQuantity=").append(urlEncode(workingQuantityValueAsString)).append("");
        Object workingIcebergQtyValue = getWorkingIcebergQty();
        String workingIcebergQtyValueAsString = "";
        workingIcebergQtyValueAsString = workingIcebergQtyValue.toString();
        sb.append("workingIcebergQty=")
                .append(urlEncode(workingIcebergQtyValueAsString))
                .append("");
        Object workingTimeInForceValue = getWorkingTimeInForce();
        String workingTimeInForceValueAsString = "";
        workingTimeInForceValueAsString = workingTimeInForceValue.toString();
        sb.append("workingTimeInForce=")
                .append(urlEncode(workingTimeInForceValueAsString))
                .append("");
        Object workingStrategyIdValue = getWorkingStrategyId();
        String workingStrategyIdValueAsString = "";
        workingStrategyIdValueAsString = workingStrategyIdValue.toString();
        sb.append("workingStrategyId=")
                .append(urlEncode(workingStrategyIdValueAsString))
                .append("");
        Object workingStrategyTypeValue = getWorkingStrategyType();
        String workingStrategyTypeValueAsString = "";
        workingStrategyTypeValueAsString = workingStrategyTypeValue.toString();
        sb.append("workingStrategyType=")
                .append(urlEncode(workingStrategyTypeValueAsString))
                .append("");
        Object pendingTypeValue = getPendingType();
        String pendingTypeValueAsString = "";
        pendingTypeValueAsString = pendingTypeValue.toString();
        sb.append("pendingType=").append(urlEncode(pendingTypeValueAsString)).append("");
        Object pendingSideValue = getPendingSide();
        String pendingSideValueAsString = "";
        pendingSideValueAsString = pendingSideValue.toString();
        sb.append("pendingSide=").append(urlEncode(pendingSideValueAsString)).append("");
        Object pendingClientOrderIdValue = getPendingClientOrderId();
        String pendingClientOrderIdValueAsString = "";
        pendingClientOrderIdValueAsString = pendingClientOrderIdValue.toString();
        sb.append("pendingClientOrderId=")
                .append(urlEncode(pendingClientOrderIdValueAsString))
                .append("");
        Object pendingPriceValue = getPendingPrice();
        String pendingPriceValueAsString = "";
        pendingPriceValueAsString = pendingPriceValue.toString();
        sb.append("pendingPrice=").append(urlEncode(pendingPriceValueAsString)).append("");
        Object pendingStopPriceValue = getPendingStopPrice();
        String pendingStopPriceValueAsString = "";
        pendingStopPriceValueAsString = pendingStopPriceValue.toString();
        sb.append("pendingStopPrice=").append(urlEncode(pendingStopPriceValueAsString)).append("");
        Object pendingTrailingDeltaValue = getPendingTrailingDelta();
        String pendingTrailingDeltaValueAsString = "";
        pendingTrailingDeltaValueAsString = pendingTrailingDeltaValue.toString();
        sb.append("pendingTrailingDelta=")
                .append(urlEncode(pendingTrailingDeltaValueAsString))
                .append("");
        Object pendingQuantityValue = getPendingQuantity();
        String pendingQuantityValueAsString = "";
        pendingQuantityValueAsString = pendingQuantityValue.toString();
        sb.append("pendingQuantity=").append(urlEncode(pendingQuantityValueAsString)).append("");
        Object pendingIcebergQtyValue = getPendingIcebergQty();
        String pendingIcebergQtyValueAsString = "";
        pendingIcebergQtyValueAsString = pendingIcebergQtyValue.toString();
        sb.append("pendingIcebergQty=")
                .append(urlEncode(pendingIcebergQtyValueAsString))
                .append("");
        Object pendingTimeInForceValue = getPendingTimeInForce();
        String pendingTimeInForceValueAsString = "";
        pendingTimeInForceValueAsString = pendingTimeInForceValue.toString();
        sb.append("pendingTimeInForce=")
                .append(urlEncode(pendingTimeInForceValueAsString))
                .append("");
        Object pendingStrategyIdValue = getPendingStrategyId();
        String pendingStrategyIdValueAsString = "";
        pendingStrategyIdValueAsString = pendingStrategyIdValue.toString();
        sb.append("pendingStrategyId=")
                .append(urlEncode(pendingStrategyIdValueAsString))
                .append("");
        Object pendingStrategyTypeValue = getPendingStrategyType();
        String pendingStrategyTypeValueAsString = "";
        pendingStrategyTypeValueAsString = pendingStrategyTypeValue.toString();
        sb.append("pendingStrategyType=")
                .append(urlEncode(pendingStrategyTypeValueAsString))
                .append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("listClientOrderId");
        openapiFields.add("newOrderRespType");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("workingType");
        openapiFields.add("workingSide");
        openapiFields.add("workingClientOrderId");
        openapiFields.add("workingPrice");
        openapiFields.add("workingQuantity");
        openapiFields.add("workingIcebergQty");
        openapiFields.add("workingTimeInForce");
        openapiFields.add("workingStrategyId");
        openapiFields.add("workingStrategyType");
        openapiFields.add("pendingType");
        openapiFields.add("pendingSide");
        openapiFields.add("pendingClientOrderId");
        openapiFields.add("pendingPrice");
        openapiFields.add("pendingStopPrice");
        openapiFields.add("pendingTrailingDelta");
        openapiFields.add("pendingQuantity");
        openapiFields.add("pendingIcebergQty");
        openapiFields.add("pendingTimeInForce");
        openapiFields.add("pendingStrategyId");
        openapiFields.add("pendingStrategyType");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("workingType");
        openapiRequiredFields.add("workingSide");
        openapiRequiredFields.add("workingPrice");
        openapiRequiredFields.add("workingQuantity");
        openapiRequiredFields.add("pendingType");
        openapiRequiredFields.add("pendingSide");
        openapiRequiredFields.add("pendingQuantity");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderListOtoRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderListOtoRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderListOtoRequest is not found in"
                                        + " the empty JSON string",
                                OrderListOtoRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderListOtoRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderListOtoRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : OrderListOtoRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("listClientOrderId") != null
                        && !jsonObj.get("listClientOrderId").isJsonNull())
                && !jsonObj.get("listClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listClientOrderId").toString()));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespType.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        // validate the optional field `selfTradePreventionMode`
        if (jsonObj.get("selfTradePreventionMode") != null
                && !jsonObj.get("selfTradePreventionMode").isJsonNull()) {
            SelfTradePreventionMode.validateJsonElement(jsonObj.get("selfTradePreventionMode"));
        }
        // validate the required field `workingType`
        WorkingType.validateJsonElement(jsonObj.get("workingType"));
        // validate the required field `workingSide`
        WorkingSide.validateJsonElement(jsonObj.get("workingSide"));
        if ((jsonObj.get("workingClientOrderId") != null
                        && !jsonObj.get("workingClientOrderId").isJsonNull())
                && !jsonObj.get("workingClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingClientOrderId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("workingClientOrderId").toString()));
        }
        // validate the optional field `workingTimeInForce`
        if (jsonObj.get("workingTimeInForce") != null
                && !jsonObj.get("workingTimeInForce").isJsonNull()) {
            WorkingTimeInForce.validateJsonElement(jsonObj.get("workingTimeInForce"));
        }
        // validate the required field `pendingType`
        PendingType.validateJsonElement(jsonObj.get("pendingType"));
        // validate the required field `pendingSide`
        PendingSide.validateJsonElement(jsonObj.get("pendingSide"));
        if ((jsonObj.get("pendingClientOrderId") != null
                        && !jsonObj.get("pendingClientOrderId").isJsonNull())
                && !jsonObj.get("pendingClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingClientOrderId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("pendingClientOrderId").toString()));
        }
        // validate the optional field `pendingTimeInForce`
        if (jsonObj.get("pendingTimeInForce") != null
                && !jsonObj.get("pendingTimeInForce").isJsonNull()) {
            PendingTimeInForce.validateJsonElement(jsonObj.get("pendingTimeInForce"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderListOtoRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderListOtoRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderListOtoRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderListOtoRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderListOtoRequest>() {
                        @Override
                        public void write(JsonWriter out, OrderListOtoRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderListOtoRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderListOtoRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderListOtoRequest
     * @throws IOException if the JSON string is invalid with respect to OrderListOtoRequest
     */
    public static OrderListOtoRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderListOtoRequest.class);
    }

    /**
     * Convert an instance of OrderListOtoRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
