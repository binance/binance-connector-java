/*
 * Binance Spot WebSocket Streams
 * OpenAPI Specifications for the Binance Spot WebSocket Streams  API documents:   - [Github web-socket-streams documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-streams.md)   - [General API information for web-socket-streams on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-streams)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** DiffBookDepthResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class DiffBookDepthResponse extends BaseDTO {
    public static final String SERIALIZED_NAME_E_LOWER_CASE = "e";

    @SerializedName(SERIALIZED_NAME_E_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String eLowerCase;

    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_U = "U";

    @SerializedName(SERIALIZED_NAME_U)
    @jakarta.annotation.Nullable
    private Long U;

    public static final String SERIALIZED_NAME_U_LOWER_CASE = "u";

    @SerializedName(SERIALIZED_NAME_U_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long uLowerCase;

    public static final String SERIALIZED_NAME_B_LOWER_CASE = "b";

    @SerializedName(SERIALIZED_NAME_B_LOWER_CASE)
    @jakarta.annotation.Nullable
    private List<List<String>> bLowerCase;

    public static final String SERIALIZED_NAME_A_LOWER_CASE = "a";

    @SerializedName(SERIALIZED_NAME_A_LOWER_CASE)
    @jakarta.annotation.Nullable
    private List<List<String>> aLowerCase;

    public DiffBookDepthResponse() {}

    public DiffBookDepthResponse eLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
        return this;
    }

    /**
     * Get eLowerCase
     *
     * @return eLowerCase
     */
    @jakarta.annotation.Nullable
    public String geteLowerCase() {
        return eLowerCase;
    }

    public void seteLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
    }

    public DiffBookDepthResponse E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public DiffBookDepthResponse sLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public DiffBookDepthResponse U(@jakarta.annotation.Nullable Long U) {
        this.U = U;
        return this;
    }

    /**
     * Get U
     *
     * @return U
     */
    @jakarta.annotation.Nullable
    public Long getU() {
        return U;
    }

    public void setU(@jakarta.annotation.Nullable Long U) {
        this.U = U;
    }

    public DiffBookDepthResponse uLowerCase(@jakarta.annotation.Nullable Long uLowerCase) {
        this.uLowerCase = uLowerCase;
        return this;
    }

    /**
     * Get uLowerCase
     *
     * @return uLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getuLowerCase() {
        return uLowerCase;
    }

    public void setuLowerCase(@jakarta.annotation.Nullable Long uLowerCase) {
        this.uLowerCase = uLowerCase;
    }

    public DiffBookDepthResponse bLowerCase(
            @jakarta.annotation.Nullable List<List<String>> bLowerCase) {
        this.bLowerCase = bLowerCase;
        return this;
    }

    public DiffBookDepthResponse addBLowerCaseItem(List<String> bLowerCaseItem) {
        if (this.bLowerCase == null) {
            this.bLowerCase = new ArrayList<>();
        }
        this.bLowerCase.add(bLowerCaseItem);
        return this;
    }

    /**
     * Get bLowerCase
     *
     * @return bLowerCase
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<List<String>> getbLowerCase() {
        return bLowerCase;
    }

    public void setbLowerCase(@jakarta.annotation.Nullable List<List<String>> bLowerCase) {
        this.bLowerCase = bLowerCase;
    }

    public DiffBookDepthResponse aLowerCase(
            @jakarta.annotation.Nullable List<List<String>> aLowerCase) {
        this.aLowerCase = aLowerCase;
        return this;
    }

    public DiffBookDepthResponse addALowerCaseItem(List<String> aLowerCaseItem) {
        if (this.aLowerCase == null) {
            this.aLowerCase = new ArrayList<>();
        }
        this.aLowerCase.add(aLowerCaseItem);
        return this;
    }

    /**
     * Get aLowerCase
     *
     * @return aLowerCase
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<List<String>> getaLowerCase() {
        return aLowerCase;
    }

    public void setaLowerCase(@jakarta.annotation.Nullable List<List<String>> aLowerCase) {
        this.aLowerCase = aLowerCase;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DiffBookDepthResponse diffBookDepthResponse = (DiffBookDepthResponse) o;
        return Objects.equals(this.eLowerCase, diffBookDepthResponse.eLowerCase)
                && Objects.equals(this.E, diffBookDepthResponse.E)
                && Objects.equals(this.sLowerCase, diffBookDepthResponse.sLowerCase)
                && Objects.equals(this.U, diffBookDepthResponse.U)
                && Objects.equals(this.uLowerCase, diffBookDepthResponse.uLowerCase)
                && Objects.equals(this.bLowerCase, diffBookDepthResponse.bLowerCase)
                && Objects.equals(this.aLowerCase, diffBookDepthResponse.aLowerCase);
    }

    @Override
    public int hashCode() {
        return Objects.hash(eLowerCase, E, sLowerCase, U, uLowerCase, bLowerCase, aLowerCase);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class DiffBookDepthResponse {\n");
        sb.append("		eLowerCase: ").append(toIndentedString(eLowerCase)).append("\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		U: ").append(toIndentedString(U)).append("\n");
        sb.append("		uLowerCase: ").append(toIndentedString(uLowerCase)).append("\n");
        sb.append("		bLowerCase: ").append(toIndentedString(bLowerCase)).append("\n");
        sb.append("		aLowerCase: ").append(toIndentedString(aLowerCase)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            String eLowerCaseValueAsString = eLowerCaseValue.toString();
            valMap.put("eLowerCase", eLowerCaseValueAsString);
        }
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        Long UValue = getU();
        if (UValue != null) {
            String UValueAsString = UValue.toString();
            valMap.put("U", UValueAsString);
        }
        Long uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            String uLowerCaseValueAsString = uLowerCaseValue.toString();
            valMap.put("uLowerCase", uLowerCaseValueAsString);
        }
        List<List<String>> bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            String bLowerCaseValueAsString = JSON.getGson().toJson(bLowerCaseValue);
            valMap.put("bLowerCase", bLowerCaseValueAsString);
        }
        List<List<String>> aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            String aLowerCaseValueAsString = JSON.getGson().toJson(aLowerCaseValue);
            valMap.put("aLowerCase", aLowerCaseValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            valMap.put("eLowerCase", eLowerCaseValue);
        }
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object UValue = getU();
        if (UValue != null) {
            valMap.put("U", UValue);
        }
        Object uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            valMap.put("uLowerCase", uLowerCaseValue);
        }
        Object bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            valMap.put("bLowerCase", bLowerCaseValue);
        }
        Object aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            valMap.put("aLowerCase", aLowerCaseValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("e");
        openapiFields.add("E");
        openapiFields.add("s");
        openapiFields.add("U");
        openapiFields.add("u");
        openapiFields.add("b");
        openapiFields.add("a");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DiffBookDepthResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!DiffBookDepthResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in DiffBookDepthResponse is not found in"
                                        + " the empty JSON string",
                                DiffBookDepthResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!DiffBookDepthResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `DiffBookDepthResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull())
                && !jsonObj.get("e").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `e` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("e").toString()));
        }
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("b") != null
                && !jsonObj.get("b").isJsonNull()
                && !jsonObj.get("b").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `b` to be an array in the JSON string but got `%s`",
                            jsonObj.get("b").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("a") != null
                && !jsonObj.get("a").isJsonNull()
                && !jsonObj.get("a").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `a` to be an array in the JSON string but got `%s`",
                            jsonObj.get("a").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DiffBookDepthResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DiffBookDepthResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<DiffBookDepthResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(DiffBookDepthResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<DiffBookDepthResponse>() {
                        @Override
                        public void write(JsonWriter out, DiffBookDepthResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public DiffBookDepthResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of DiffBookDepthResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DiffBookDepthResponse
     * @throws IOException if the JSON string is invalid with respect to DiffBookDepthResponse
     */
    public static DiffBookDepthResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DiffBookDepthResponse.class);
    }

    /**
     * Convert an instance of DiffBookDepthResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
