/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderListCancelRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderListCancelRequest extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_ORDER_LIST_ID = "orderListId";

    @SerializedName(SERIALIZED_NAME_ORDER_LIST_ID)
    @jakarta.annotation.Nullable
    private Integer orderListId;

    public static final String SERIALIZED_NAME_LIST_CLIENT_ORDER_ID = "listClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIST_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String listClientOrderId;

    public static final String SERIALIZED_NAME_NEW_CLIENT_ORDER_ID = "newClientOrderId";

    @SerializedName(SERIALIZED_NAME_NEW_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String newClientOrderId;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public OrderListCancelRequest() {}

    public OrderListCancelRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public OrderListCancelRequest orderListId(@jakarta.annotation.Nullable Integer orderListId) {
        this.orderListId = orderListId;
        return this;
    }

    /**
     * Get orderListId
     *
     * @return orderListId
     */
    @jakarta.annotation.Nullable
    public Integer getOrderListId() {
        return orderListId;
    }

    public void setOrderListId(@jakarta.annotation.Nullable Integer orderListId) {
        this.orderListId = orderListId;
    }

    public OrderListCancelRequest listClientOrderId(
            @jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
        return this;
    }

    /**
     * Get listClientOrderId
     *
     * @return listClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getListClientOrderId() {
        return listClientOrderId;
    }

    public void setListClientOrderId(@jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
    }

    public OrderListCancelRequest newClientOrderId(
            @jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
        return this;
    }

    /**
     * Get newClientOrderId
     *
     * @return newClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getNewClientOrderId() {
        return newClientOrderId;
    }

    public void setNewClientOrderId(@jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
    }

    public OrderListCancelRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderListCancelRequest orderListCancelRequest = (OrderListCancelRequest) o;
        return Objects.equals(this.symbol, orderListCancelRequest.symbol)
                && Objects.equals(this.orderListId, orderListCancelRequest.orderListId)
                && Objects.equals(this.listClientOrderId, orderListCancelRequest.listClientOrderId)
                && Objects.equals(this.newClientOrderId, orderListCancelRequest.newClientOrderId)
                && Objects.equals(this.recvWindow, orderListCancelRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbol, orderListId, listClientOrderId, newClientOrderId, recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderListCancelRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		orderListId: ").append(toIndentedString(orderListId)).append("\n");
        sb.append("		listClientOrderId: ").append(toIndentedString(listClientOrderId)).append("\n");
        sb.append("		newClientOrderId: ").append(toIndentedString(newClientOrderId)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        Integer orderListIdValue = getOrderListId();
        if (orderListIdValue != null) {
            String orderListIdValueAsString = orderListIdValue.toString();
            valMap.put("orderListId", orderListIdValueAsString);
        }
        String listClientOrderIdValue = getListClientOrderId();
        if (listClientOrderIdValue != null) {
            String listClientOrderIdValueAsString = listClientOrderIdValue.toString();
            valMap.put("listClientOrderId", listClientOrderIdValueAsString);
        }
        String newClientOrderIdValue = getNewClientOrderId();
        if (newClientOrderIdValue != null) {
            String newClientOrderIdValueAsString = newClientOrderIdValue.toString();
            valMap.put("newClientOrderId", newClientOrderIdValueAsString);
        }
        Long recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            String recvWindowValueAsString = recvWindowValue.toString();
            valMap.put("recvWindow", recvWindowValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object orderListIdValue = getOrderListId();
        if (orderListIdValue != null) {
            valMap.put("orderListId", orderListIdValue);
        }
        Object listClientOrderIdValue = getListClientOrderId();
        if (listClientOrderIdValue != null) {
            valMap.put("listClientOrderId", listClientOrderIdValue);
        }
        Object newClientOrderIdValue = getNewClientOrderId();
        if (newClientOrderIdValue != null) {
            valMap.put("newClientOrderId", newClientOrderIdValue);
        }
        Object recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            valMap.put("recvWindow", recvWindowValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("orderListId");
        openapiFields.add("listClientOrderId");
        openapiFields.add("newClientOrderId");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderListCancelRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderListCancelRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderListCancelRequest is not found in"
                                        + " the empty JSON string",
                                OrderListCancelRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderListCancelRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderListCancelRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : OrderListCancelRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("listClientOrderId") != null
                        && !jsonObj.get("listClientOrderId").isJsonNull())
                && !jsonObj.get("listClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listClientOrderId").toString()));
        }
        if ((jsonObj.get("newClientOrderId") != null
                        && !jsonObj.get("newClientOrderId").isJsonNull())
                && !jsonObj.get("newClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("newClientOrderId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderListCancelRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderListCancelRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderListCancelRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderListCancelRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderListCancelRequest>() {
                        @Override
                        public void write(JsonWriter out, OrderListCancelRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderListCancelRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderListCancelRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderListCancelRequest
     * @throws IOException if the JSON string is invalid with respect to OrderListCancelRequest
     */
    public static OrderListCancelRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderListCancelRequest.class);
    }

    /**
     * Convert an instance of OrderListCancelRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
