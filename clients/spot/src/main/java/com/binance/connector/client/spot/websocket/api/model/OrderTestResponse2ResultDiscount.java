/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderTestResponse2ResultDiscount */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderTestResponse2ResultDiscount extends BaseDTO {
    public static final String SERIALIZED_NAME_ENABLED_FOR_ACCOUNT = "enabledForAccount";

    @SerializedName(SERIALIZED_NAME_ENABLED_FOR_ACCOUNT)
    @jakarta.annotation.Nullable
    private Boolean enabledForAccount;

    public static final String SERIALIZED_NAME_ENABLED_FOR_SYMBOL = "enabledForSymbol";

    @SerializedName(SERIALIZED_NAME_ENABLED_FOR_SYMBOL)
    @jakarta.annotation.Nullable
    private Boolean enabledForSymbol;

    public static final String SERIALIZED_NAME_DISCOUNT_ASSET = "discountAsset";

    @SerializedName(SERIALIZED_NAME_DISCOUNT_ASSET)
    @jakarta.annotation.Nullable
    private String discountAsset;

    public static final String SERIALIZED_NAME_DISCOUNT = "discount";

    @SerializedName(SERIALIZED_NAME_DISCOUNT)
    @jakarta.annotation.Nullable
    private String discount;

    public OrderTestResponse2ResultDiscount() {}

    public OrderTestResponse2ResultDiscount enabledForAccount(
            @jakarta.annotation.Nullable Boolean enabledForAccount) {
        this.enabledForAccount = enabledForAccount;
        return this;
    }

    /**
     * Get enabledForAccount
     *
     * @return enabledForAccount
     */
    @jakarta.annotation.Nullable
    public Boolean getEnabledForAccount() {
        return enabledForAccount;
    }

    public void setEnabledForAccount(@jakarta.annotation.Nullable Boolean enabledForAccount) {
        this.enabledForAccount = enabledForAccount;
    }

    public OrderTestResponse2ResultDiscount enabledForSymbol(
            @jakarta.annotation.Nullable Boolean enabledForSymbol) {
        this.enabledForSymbol = enabledForSymbol;
        return this;
    }

    /**
     * Get enabledForSymbol
     *
     * @return enabledForSymbol
     */
    @jakarta.annotation.Nullable
    public Boolean getEnabledForSymbol() {
        return enabledForSymbol;
    }

    public void setEnabledForSymbol(@jakarta.annotation.Nullable Boolean enabledForSymbol) {
        this.enabledForSymbol = enabledForSymbol;
    }

    public OrderTestResponse2ResultDiscount discountAsset(
            @jakarta.annotation.Nullable String discountAsset) {
        this.discountAsset = discountAsset;
        return this;
    }

    /**
     * Get discountAsset
     *
     * @return discountAsset
     */
    @jakarta.annotation.Nullable
    public String getDiscountAsset() {
        return discountAsset;
    }

    public void setDiscountAsset(@jakarta.annotation.Nullable String discountAsset) {
        this.discountAsset = discountAsset;
    }

    public OrderTestResponse2ResultDiscount discount(@jakarta.annotation.Nullable String discount) {
        this.discount = discount;
        return this;
    }

    /**
     * Get discount
     *
     * @return discount
     */
    @jakarta.annotation.Nullable
    public String getDiscount() {
        return discount;
    }

    public void setDiscount(@jakarta.annotation.Nullable String discount) {
        this.discount = discount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderTestResponse2ResultDiscount orderTestResponse2ResultDiscount =
                (OrderTestResponse2ResultDiscount) o;
        return Objects.equals(
                        this.enabledForAccount, orderTestResponse2ResultDiscount.enabledForAccount)
                && Objects.equals(
                        this.enabledForSymbol, orderTestResponse2ResultDiscount.enabledForSymbol)
                && Objects.equals(
                        this.discountAsset, orderTestResponse2ResultDiscount.discountAsset)
                && Objects.equals(this.discount, orderTestResponse2ResultDiscount.discount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(enabledForAccount, enabledForSymbol, discountAsset, discount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderTestResponse2ResultDiscount {\n");
        sb.append("		enabledForAccount: ").append(toIndentedString(enabledForAccount)).append("\n");
        sb.append("		enabledForSymbol: ").append(toIndentedString(enabledForSymbol)).append("\n");
        sb.append("		discountAsset: ").append(toIndentedString(discountAsset)).append("\n");
        sb.append("		discount: ").append(toIndentedString(discount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Boolean enabledForAccountValue = getEnabledForAccount();
        if (enabledForAccountValue != null) {
            String enabledForAccountValueAsString = enabledForAccountValue.toString();
            valMap.put("enabledForAccount", enabledForAccountValueAsString);
        }
        Boolean enabledForSymbolValue = getEnabledForSymbol();
        if (enabledForSymbolValue != null) {
            String enabledForSymbolValueAsString = enabledForSymbolValue.toString();
            valMap.put("enabledForSymbol", enabledForSymbolValueAsString);
        }
        String discountAssetValue = getDiscountAsset();
        if (discountAssetValue != null) {
            String discountAssetValueAsString = discountAssetValue.toString();
            valMap.put("discountAsset", discountAssetValueAsString);
        }
        String discountValue = getDiscount();
        if (discountValue != null) {
            String discountValueAsString = discountValue.toString();
            valMap.put("discount", discountValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object enabledForAccountValue = getEnabledForAccount();
        if (enabledForAccountValue != null) {
            valMap.put("enabledForAccount", enabledForAccountValue);
        }
        Object enabledForSymbolValue = getEnabledForSymbol();
        if (enabledForSymbolValue != null) {
            valMap.put("enabledForSymbol", enabledForSymbolValue);
        }
        Object discountAssetValue = getDiscountAsset();
        if (discountAssetValue != null) {
            valMap.put("discountAsset", discountAssetValue);
        }
        Object discountValue = getDiscount();
        if (discountValue != null) {
            valMap.put("discount", discountValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("enabledForAccount");
        openapiFields.add("enabledForSymbol");
        openapiFields.add("discountAsset");
        openapiFields.add("discount");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OrderTestResponse2ResultDiscount
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderTestResponse2ResultDiscount.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderTestResponse2ResultDiscount is"
                                        + " not found in the empty JSON string",
                                OrderTestResponse2ResultDiscount.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderTestResponse2ResultDiscount.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `OrderTestResponse2ResultDiscount` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("discountAsset") != null && !jsonObj.get("discountAsset").isJsonNull())
                && !jsonObj.get("discountAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `discountAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("discountAsset").toString()));
        }
        if ((jsonObj.get("discount") != null && !jsonObj.get("discount").isJsonNull())
                && !jsonObj.get("discount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `discount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("discount").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderTestResponse2ResultDiscount.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderTestResponse2ResultDiscount' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderTestResponse2ResultDiscount> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(OrderTestResponse2ResultDiscount.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderTestResponse2ResultDiscount>() {
                        @Override
                        public void write(JsonWriter out, OrderTestResponse2ResultDiscount value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderTestResponse2ResultDiscount read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderTestResponse2ResultDiscount given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderTestResponse2ResultDiscount
     * @throws IOException if the JSON string is invalid with respect to
     *     OrderTestResponse2ResultDiscount
     */
    public static OrderTestResponse2ResultDiscount fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderTestResponse2ResultDiscount.class);
    }

    /**
     * Convert an instance of OrderTestResponse2ResultDiscount to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
