/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderStatusResponseResult */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderStatusResponseResult extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_ORDER_LIST_ID = "orderListId";

    @SerializedName(SERIALIZED_NAME_ORDER_LIST_ID)
    @jakarta.annotation.Nullable
    private Long orderListId;

    public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "clientOrderId";

    @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String clientOrderId;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_ORIG_QTY = "origQty";

    @SerializedName(SERIALIZED_NAME_ORIG_QTY)
    @jakarta.annotation.Nullable
    private String origQty;

    public static final String SERIALIZED_NAME_EXECUTED_QTY = "executedQty";

    @SerializedName(SERIALIZED_NAME_EXECUTED_QTY)
    @jakarta.annotation.Nullable
    private String executedQty;

    public static final String SERIALIZED_NAME_CUMMULATIVE_QUOTE_QTY = "cummulativeQuoteQty";

    @SerializedName(SERIALIZED_NAME_CUMMULATIVE_QUOTE_QTY)
    @jakarta.annotation.Nullable
    private String cummulativeQuoteQty;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String timeInForce;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";

    @SerializedName(SERIALIZED_NAME_STOP_PRICE)
    @jakarta.annotation.Nullable
    private String stopPrice;

    public static final String SERIALIZED_NAME_TRAILING_DELTA = "trailingDelta";

    @SerializedName(SERIALIZED_NAME_TRAILING_DELTA)
    @jakarta.annotation.Nullable
    private Long trailingDelta;

    public static final String SERIALIZED_NAME_TRAILING_TIME = "trailingTime";

    @SerializedName(SERIALIZED_NAME_TRAILING_TIME)
    @jakarta.annotation.Nullable
    private Long trailingTime;

    public static final String SERIALIZED_NAME_ICEBERG_QTY = "icebergQty";

    @SerializedName(SERIALIZED_NAME_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private String icebergQty;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public static final String SERIALIZED_NAME_IS_WORKING = "isWorking";

    @SerializedName(SERIALIZED_NAME_IS_WORKING)
    @jakarta.annotation.Nullable
    private Boolean isWorking;

    public static final String SERIALIZED_NAME_WORKING_TIME = "workingTime";

    @SerializedName(SERIALIZED_NAME_WORKING_TIME)
    @jakarta.annotation.Nullable
    private Long workingTime;

    public static final String SERIALIZED_NAME_ORIG_QUOTE_ORDER_QTY = "origQuoteOrderQty";

    @SerializedName(SERIALIZED_NAME_ORIG_QUOTE_ORDER_QTY)
    @jakarta.annotation.Nullable
    private String origQuoteOrderQty;

    public static final String SERIALIZED_NAME_STRATEGY_ID = "strategyId";

    @SerializedName(SERIALIZED_NAME_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long strategyId;

    public static final String SERIALIZED_NAME_STRATEGY_TYPE = "strategyType";

    @SerializedName(SERIALIZED_NAME_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private Long strategyType;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private String selfTradePreventionMode;

    public static final String SERIALIZED_NAME_PREVENTED_MATCH_ID = "preventedMatchId";

    @SerializedName(SERIALIZED_NAME_PREVENTED_MATCH_ID)
    @jakarta.annotation.Nullable
    private Long preventedMatchId;

    public static final String SERIALIZED_NAME_PREVENTED_QUANTITY = "preventedQuantity";

    @SerializedName(SERIALIZED_NAME_PREVENTED_QUANTITY)
    @jakarta.annotation.Nullable
    private String preventedQuantity;

    public OrderStatusResponseResult() {}

    public OrderStatusResponseResult symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public OrderStatusResponseResult orderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public OrderStatusResponseResult orderListId(@jakarta.annotation.Nullable Long orderListId) {
        this.orderListId = orderListId;
        return this;
    }

    /**
     * Get orderListId
     *
     * @return orderListId
     */
    @jakarta.annotation.Nullable
    public Long getOrderListId() {
        return orderListId;
    }

    public void setOrderListId(@jakarta.annotation.Nullable Long orderListId) {
        this.orderListId = orderListId;
    }

    public OrderStatusResponseResult clientOrderId(
            @jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
        return this;
    }

    /**
     * Get clientOrderId
     *
     * @return clientOrderId
     */
    @jakarta.annotation.Nullable
    public String getClientOrderId() {
        return clientOrderId;
    }

    public void setClientOrderId(@jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }

    public OrderStatusResponseResult price(@jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public OrderStatusResponseResult origQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
        return this;
    }

    /**
     * Get origQty
     *
     * @return origQty
     */
    @jakarta.annotation.Nullable
    public String getOrigQty() {
        return origQty;
    }

    public void setOrigQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
    }

    public OrderStatusResponseResult executedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
        return this;
    }

    /**
     * Get executedQty
     *
     * @return executedQty
     */
    @jakarta.annotation.Nullable
    public String getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
    }

    public OrderStatusResponseResult cummulativeQuoteQty(
            @jakarta.annotation.Nullable String cummulativeQuoteQty) {
        this.cummulativeQuoteQty = cummulativeQuoteQty;
        return this;
    }

    /**
     * Get cummulativeQuoteQty
     *
     * @return cummulativeQuoteQty
     */
    @jakarta.annotation.Nullable
    public String getCummulativeQuoteQty() {
        return cummulativeQuoteQty;
    }

    public void setCummulativeQuoteQty(@jakarta.annotation.Nullable String cummulativeQuoteQty) {
        this.cummulativeQuoteQty = cummulativeQuoteQty;
    }

    public OrderStatusResponseResult status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public OrderStatusResponseResult timeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public String getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
    }

    public OrderStatusResponseResult type(@jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public OrderStatusResponseResult side(@jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public OrderStatusResponseResult stopPrice(@jakarta.annotation.Nullable String stopPrice) {
        this.stopPrice = stopPrice;
        return this;
    }

    /**
     * Get stopPrice
     *
     * @return stopPrice
     */
    @jakarta.annotation.Nullable
    public String getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(@jakarta.annotation.Nullable String stopPrice) {
        this.stopPrice = stopPrice;
    }

    public OrderStatusResponseResult trailingDelta(
            @jakarta.annotation.Nullable Long trailingDelta) {
        this.trailingDelta = trailingDelta;
        return this;
    }

    /**
     * Get trailingDelta
     *
     * @return trailingDelta
     */
    @jakarta.annotation.Nullable
    public Long getTrailingDelta() {
        return trailingDelta;
    }

    public void setTrailingDelta(@jakarta.annotation.Nullable Long trailingDelta) {
        this.trailingDelta = trailingDelta;
    }

    public OrderStatusResponseResult trailingTime(@jakarta.annotation.Nullable Long trailingTime) {
        this.trailingTime = trailingTime;
        return this;
    }

    /**
     * Get trailingTime
     *
     * @return trailingTime
     */
    @jakarta.annotation.Nullable
    public Long getTrailingTime() {
        return trailingTime;
    }

    public void setTrailingTime(@jakarta.annotation.Nullable Long trailingTime) {
        this.trailingTime = trailingTime;
    }

    public OrderStatusResponseResult icebergQty(@jakarta.annotation.Nullable String icebergQty) {
        this.icebergQty = icebergQty;
        return this;
    }

    /**
     * Get icebergQty
     *
     * @return icebergQty
     */
    @jakarta.annotation.Nullable
    public String getIcebergQty() {
        return icebergQty;
    }

    public void setIcebergQty(@jakarta.annotation.Nullable String icebergQty) {
        this.icebergQty = icebergQty;
    }

    public OrderStatusResponseResult time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public OrderStatusResponseResult updateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    public OrderStatusResponseResult isWorking(@jakarta.annotation.Nullable Boolean isWorking) {
        this.isWorking = isWorking;
        return this;
    }

    /**
     * Get isWorking
     *
     * @return isWorking
     */
    @jakarta.annotation.Nullable
    public Boolean getIsWorking() {
        return isWorking;
    }

    public void setIsWorking(@jakarta.annotation.Nullable Boolean isWorking) {
        this.isWorking = isWorking;
    }

    public OrderStatusResponseResult workingTime(@jakarta.annotation.Nullable Long workingTime) {
        this.workingTime = workingTime;
        return this;
    }

    /**
     * Get workingTime
     *
     * @return workingTime
     */
    @jakarta.annotation.Nullable
    public Long getWorkingTime() {
        return workingTime;
    }

    public void setWorkingTime(@jakarta.annotation.Nullable Long workingTime) {
        this.workingTime = workingTime;
    }

    public OrderStatusResponseResult origQuoteOrderQty(
            @jakarta.annotation.Nullable String origQuoteOrderQty) {
        this.origQuoteOrderQty = origQuoteOrderQty;
        return this;
    }

    /**
     * Get origQuoteOrderQty
     *
     * @return origQuoteOrderQty
     */
    @jakarta.annotation.Nullable
    public String getOrigQuoteOrderQty() {
        return origQuoteOrderQty;
    }

    public void setOrigQuoteOrderQty(@jakarta.annotation.Nullable String origQuoteOrderQty) {
        this.origQuoteOrderQty = origQuoteOrderQty;
    }

    public OrderStatusResponseResult strategyId(@jakarta.annotation.Nullable Long strategyId) {
        this.strategyId = strategyId;
        return this;
    }

    /**
     * Get strategyId
     *
     * @return strategyId
     */
    @jakarta.annotation.Nullable
    public Long getStrategyId() {
        return strategyId;
    }

    public void setStrategyId(@jakarta.annotation.Nullable Long strategyId) {
        this.strategyId = strategyId;
    }

    public OrderStatusResponseResult strategyType(@jakarta.annotation.Nullable Long strategyType) {
        this.strategyType = strategyType;
        return this;
    }

    /**
     * Get strategyType
     *
     * @return strategyType
     */
    @jakarta.annotation.Nullable
    public Long getStrategyType() {
        return strategyType;
    }

    public void setStrategyType(@jakarta.annotation.Nullable Long strategyType) {
        this.strategyType = strategyType;
    }

    public OrderStatusResponseResult selfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    public String getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public OrderStatusResponseResult preventedMatchId(
            @jakarta.annotation.Nullable Long preventedMatchId) {
        this.preventedMatchId = preventedMatchId;
        return this;
    }

    /**
     * Get preventedMatchId
     *
     * @return preventedMatchId
     */
    @jakarta.annotation.Nullable
    public Long getPreventedMatchId() {
        return preventedMatchId;
    }

    public void setPreventedMatchId(@jakarta.annotation.Nullable Long preventedMatchId) {
        this.preventedMatchId = preventedMatchId;
    }

    public OrderStatusResponseResult preventedQuantity(
            @jakarta.annotation.Nullable String preventedQuantity) {
        this.preventedQuantity = preventedQuantity;
        return this;
    }

    /**
     * Get preventedQuantity
     *
     * @return preventedQuantity
     */
    @jakarta.annotation.Nullable
    public String getPreventedQuantity() {
        return preventedQuantity;
    }

    public void setPreventedQuantity(@jakarta.annotation.Nullable String preventedQuantity) {
        this.preventedQuantity = preventedQuantity;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderStatusResponseResult orderStatusResponseResult = (OrderStatusResponseResult) o;
        return Objects.equals(this.symbol, orderStatusResponseResult.symbol)
                && Objects.equals(this.orderId, orderStatusResponseResult.orderId)
                && Objects.equals(this.orderListId, orderStatusResponseResult.orderListId)
                && Objects.equals(this.clientOrderId, orderStatusResponseResult.clientOrderId)
                && Objects.equals(this.price, orderStatusResponseResult.price)
                && Objects.equals(this.origQty, orderStatusResponseResult.origQty)
                && Objects.equals(this.executedQty, orderStatusResponseResult.executedQty)
                && Objects.equals(
                        this.cummulativeQuoteQty, orderStatusResponseResult.cummulativeQuoteQty)
                && Objects.equals(this.status, orderStatusResponseResult.status)
                && Objects.equals(this.timeInForce, orderStatusResponseResult.timeInForce)
                && Objects.equals(this.type, orderStatusResponseResult.type)
                && Objects.equals(this.side, orderStatusResponseResult.side)
                && Objects.equals(this.stopPrice, orderStatusResponseResult.stopPrice)
                && Objects.equals(this.trailingDelta, orderStatusResponseResult.trailingDelta)
                && Objects.equals(this.trailingTime, orderStatusResponseResult.trailingTime)
                && Objects.equals(this.icebergQty, orderStatusResponseResult.icebergQty)
                && Objects.equals(this.time, orderStatusResponseResult.time)
                && Objects.equals(this.updateTime, orderStatusResponseResult.updateTime)
                && Objects.equals(this.isWorking, orderStatusResponseResult.isWorking)
                && Objects.equals(this.workingTime, orderStatusResponseResult.workingTime)
                && Objects.equals(
                        this.origQuoteOrderQty, orderStatusResponseResult.origQuoteOrderQty)
                && Objects.equals(this.strategyId, orderStatusResponseResult.strategyId)
                && Objects.equals(this.strategyType, orderStatusResponseResult.strategyType)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        orderStatusResponseResult.selfTradePreventionMode)
                && Objects.equals(this.preventedMatchId, orderStatusResponseResult.preventedMatchId)
                && Objects.equals(
                        this.preventedQuantity, orderStatusResponseResult.preventedQuantity);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                orderId,
                orderListId,
                clientOrderId,
                price,
                origQty,
                executedQty,
                cummulativeQuoteQty,
                status,
                timeInForce,
                type,
                side,
                stopPrice,
                trailingDelta,
                trailingTime,
                icebergQty,
                time,
                updateTime,
                isWorking,
                workingTime,
                origQuoteOrderQty,
                strategyId,
                strategyType,
                selfTradePreventionMode,
                preventedMatchId,
                preventedQuantity);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderStatusResponseResult {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		orderListId: ").append(toIndentedString(orderListId)).append("\n");
        sb.append("		clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		origQty: ").append(toIndentedString(origQty)).append("\n");
        sb.append("		executedQty: ").append(toIndentedString(executedQty)).append("\n");
        sb.append("		cummulativeQuoteQty: ")
                .append(toIndentedString(cummulativeQuoteQty))
                .append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
        sb.append("		trailingDelta: ").append(toIndentedString(trailingDelta)).append("\n");
        sb.append("		trailingTime: ").append(toIndentedString(trailingTime)).append("\n");
        sb.append("		icebergQty: ").append(toIndentedString(icebergQty)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("		isWorking: ").append(toIndentedString(isWorking)).append("\n");
        sb.append("		workingTime: ").append(toIndentedString(workingTime)).append("\n");
        sb.append("		origQuoteOrderQty: ").append(toIndentedString(origQuoteOrderQty)).append("\n");
        sb.append("		strategyId: ").append(toIndentedString(strategyId)).append("\n");
        sb.append("		strategyType: ").append(toIndentedString(strategyType)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		preventedMatchId: ").append(toIndentedString(preventedMatchId)).append("\n");
        sb.append("		preventedQuantity: ").append(toIndentedString(preventedQuantity)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        Long orderIdValue = getOrderId();
        if (orderIdValue != null) {
            String orderIdValueAsString = orderIdValue.toString();
            valMap.put("orderId", orderIdValueAsString);
        }
        Long orderListIdValue = getOrderListId();
        if (orderListIdValue != null) {
            String orderListIdValueAsString = orderListIdValue.toString();
            valMap.put("orderListId", orderListIdValueAsString);
        }
        String clientOrderIdValue = getClientOrderId();
        if (clientOrderIdValue != null) {
            String clientOrderIdValueAsString = clientOrderIdValue.toString();
            valMap.put("clientOrderId", clientOrderIdValueAsString);
        }
        String priceValue = getPrice();
        if (priceValue != null) {
            String priceValueAsString = priceValue.toString();
            valMap.put("price", priceValueAsString);
        }
        String origQtyValue = getOrigQty();
        if (origQtyValue != null) {
            String origQtyValueAsString = origQtyValue.toString();
            valMap.put("origQty", origQtyValueAsString);
        }
        String executedQtyValue = getExecutedQty();
        if (executedQtyValue != null) {
            String executedQtyValueAsString = executedQtyValue.toString();
            valMap.put("executedQty", executedQtyValueAsString);
        }
        String cummulativeQuoteQtyValue = getCummulativeQuoteQty();
        if (cummulativeQuoteQtyValue != null) {
            String cummulativeQuoteQtyValueAsString = cummulativeQuoteQtyValue.toString();
            valMap.put("cummulativeQuoteQty", cummulativeQuoteQtyValueAsString);
        }
        String statusValue = getStatus();
        if (statusValue != null) {
            String statusValueAsString = statusValue.toString();
            valMap.put("status", statusValueAsString);
        }
        String timeInForceValue = getTimeInForce();
        if (timeInForceValue != null) {
            String timeInForceValueAsString = timeInForceValue.toString();
            valMap.put("timeInForce", timeInForceValueAsString);
        }
        String typeValue = getType();
        if (typeValue != null) {
            String typeValueAsString = typeValue.toString();
            valMap.put("type", typeValueAsString);
        }
        String sideValue = getSide();
        if (sideValue != null) {
            String sideValueAsString = sideValue.toString();
            valMap.put("side", sideValueAsString);
        }
        String stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            String stopPriceValueAsString = stopPriceValue.toString();
            valMap.put("stopPrice", stopPriceValueAsString);
        }
        Long trailingDeltaValue = getTrailingDelta();
        if (trailingDeltaValue != null) {
            String trailingDeltaValueAsString = trailingDeltaValue.toString();
            valMap.put("trailingDelta", trailingDeltaValueAsString);
        }
        Long trailingTimeValue = getTrailingTime();
        if (trailingTimeValue != null) {
            String trailingTimeValueAsString = trailingTimeValue.toString();
            valMap.put("trailingTime", trailingTimeValueAsString);
        }
        String icebergQtyValue = getIcebergQty();
        if (icebergQtyValue != null) {
            String icebergQtyValueAsString = icebergQtyValue.toString();
            valMap.put("icebergQty", icebergQtyValueAsString);
        }
        Long timeValue = getTime();
        if (timeValue != null) {
            String timeValueAsString = timeValue.toString();
            valMap.put("time", timeValueAsString);
        }
        Long updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            String updateTimeValueAsString = updateTimeValue.toString();
            valMap.put("updateTime", updateTimeValueAsString);
        }
        Boolean isWorkingValue = getIsWorking();
        if (isWorkingValue != null) {
            String isWorkingValueAsString = isWorkingValue.toString();
            valMap.put("isWorking", isWorkingValueAsString);
        }
        Long workingTimeValue = getWorkingTime();
        if (workingTimeValue != null) {
            String workingTimeValueAsString = workingTimeValue.toString();
            valMap.put("workingTime", workingTimeValueAsString);
        }
        String origQuoteOrderQtyValue = getOrigQuoteOrderQty();
        if (origQuoteOrderQtyValue != null) {
            String origQuoteOrderQtyValueAsString = origQuoteOrderQtyValue.toString();
            valMap.put("origQuoteOrderQty", origQuoteOrderQtyValueAsString);
        }
        Long strategyIdValue = getStrategyId();
        if (strategyIdValue != null) {
            String strategyIdValueAsString = strategyIdValue.toString();
            valMap.put("strategyId", strategyIdValueAsString);
        }
        Long strategyTypeValue = getStrategyType();
        if (strategyTypeValue != null) {
            String strategyTypeValueAsString = strategyTypeValue.toString();
            valMap.put("strategyType", strategyTypeValueAsString);
        }
        String selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            String selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValueAsString);
        }
        Long preventedMatchIdValue = getPreventedMatchId();
        if (preventedMatchIdValue != null) {
            String preventedMatchIdValueAsString = preventedMatchIdValue.toString();
            valMap.put("preventedMatchId", preventedMatchIdValueAsString);
        }
        String preventedQuantityValue = getPreventedQuantity();
        if (preventedQuantityValue != null) {
            String preventedQuantityValueAsString = preventedQuantityValue.toString();
            valMap.put("preventedQuantity", preventedQuantityValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object orderIdValue = getOrderId();
        if (orderIdValue != null) {
            valMap.put("orderId", orderIdValue);
        }
        Object orderListIdValue = getOrderListId();
        if (orderListIdValue != null) {
            valMap.put("orderListId", orderListIdValue);
        }
        Object clientOrderIdValue = getClientOrderId();
        if (clientOrderIdValue != null) {
            valMap.put("clientOrderId", clientOrderIdValue);
        }
        Object priceValue = getPrice();
        if (priceValue != null) {
            valMap.put("price", priceValue);
        }
        Object origQtyValue = getOrigQty();
        if (origQtyValue != null) {
            valMap.put("origQty", origQtyValue);
        }
        Object executedQtyValue = getExecutedQty();
        if (executedQtyValue != null) {
            valMap.put("executedQty", executedQtyValue);
        }
        Object cummulativeQuoteQtyValue = getCummulativeQuoteQty();
        if (cummulativeQuoteQtyValue != null) {
            valMap.put("cummulativeQuoteQty", cummulativeQuoteQtyValue);
        }
        Object statusValue = getStatus();
        if (statusValue != null) {
            valMap.put("status", statusValue);
        }
        Object timeInForceValue = getTimeInForce();
        if (timeInForceValue != null) {
            valMap.put("timeInForce", timeInForceValue);
        }
        Object typeValue = getType();
        if (typeValue != null) {
            valMap.put("type", typeValue);
        }
        Object sideValue = getSide();
        if (sideValue != null) {
            valMap.put("side", sideValue);
        }
        Object stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            valMap.put("stopPrice", stopPriceValue);
        }
        Object trailingDeltaValue = getTrailingDelta();
        if (trailingDeltaValue != null) {
            valMap.put("trailingDelta", trailingDeltaValue);
        }
        Object trailingTimeValue = getTrailingTime();
        if (trailingTimeValue != null) {
            valMap.put("trailingTime", trailingTimeValue);
        }
        Object icebergQtyValue = getIcebergQty();
        if (icebergQtyValue != null) {
            valMap.put("icebergQty", icebergQtyValue);
        }
        Object timeValue = getTime();
        if (timeValue != null) {
            valMap.put("time", timeValue);
        }
        Object updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            valMap.put("updateTime", updateTimeValue);
        }
        Object isWorkingValue = getIsWorking();
        if (isWorkingValue != null) {
            valMap.put("isWorking", isWorkingValue);
        }
        Object workingTimeValue = getWorkingTime();
        if (workingTimeValue != null) {
            valMap.put("workingTime", workingTimeValue);
        }
        Object origQuoteOrderQtyValue = getOrigQuoteOrderQty();
        if (origQuoteOrderQtyValue != null) {
            valMap.put("origQuoteOrderQty", origQuoteOrderQtyValue);
        }
        Object strategyIdValue = getStrategyId();
        if (strategyIdValue != null) {
            valMap.put("strategyId", strategyIdValue);
        }
        Object strategyTypeValue = getStrategyType();
        if (strategyTypeValue != null) {
            valMap.put("strategyType", strategyTypeValue);
        }
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValue);
        }
        Object preventedMatchIdValue = getPreventedMatchId();
        if (preventedMatchIdValue != null) {
            valMap.put("preventedMatchId", preventedMatchIdValue);
        }
        Object preventedQuantityValue = getPreventedQuantity();
        if (preventedQuantityValue != null) {
            valMap.put("preventedQuantity", preventedQuantityValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("orderId");
        openapiFields.add("orderListId");
        openapiFields.add("clientOrderId");
        openapiFields.add("price");
        openapiFields.add("origQty");
        openapiFields.add("executedQty");
        openapiFields.add("cummulativeQuoteQty");
        openapiFields.add("status");
        openapiFields.add("timeInForce");
        openapiFields.add("type");
        openapiFields.add("side");
        openapiFields.add("stopPrice");
        openapiFields.add("trailingDelta");
        openapiFields.add("trailingTime");
        openapiFields.add("icebergQty");
        openapiFields.add("time");
        openapiFields.add("updateTime");
        openapiFields.add("isWorking");
        openapiFields.add("workingTime");
        openapiFields.add("origQuoteOrderQty");
        openapiFields.add("strategyId");
        openapiFields.add("strategyType");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("preventedMatchId");
        openapiFields.add("preventedQuantity");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderStatusResponseResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderStatusResponseResult.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderStatusResponseResult is not found"
                                        + " in the empty JSON string",
                                OrderStatusResponseResult.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderStatusResponseResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderStatusResponseResult` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("clientOrderId") != null && !jsonObj.get("clientOrderId").isJsonNull())
                && !jsonObj.get("clientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `clientOrderId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("clientOrderId").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("origQty") != null && !jsonObj.get("origQty").isJsonNull())
                && !jsonObj.get("origQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("origQty").toString()));
        }
        if ((jsonObj.get("executedQty") != null && !jsonObj.get("executedQty").isJsonNull())
                && !jsonObj.get("executedQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedQty").toString()));
        }
        if ((jsonObj.get("cummulativeQuoteQty") != null
                        && !jsonObj.get("cummulativeQuoteQty").isJsonNull())
                && !jsonObj.get("cummulativeQuoteQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cummulativeQuoteQty` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("cummulativeQuoteQty").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull())
                && !jsonObj.get("timeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("stopPrice") != null && !jsonObj.get("stopPrice").isJsonNull())
                && !jsonObj.get("stopPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `stopPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("stopPrice").toString()));
        }
        if ((jsonObj.get("icebergQty") != null && !jsonObj.get("icebergQty").isJsonNull())
                && !jsonObj.get("icebergQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `icebergQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("icebergQty").toString()));
        }
        if ((jsonObj.get("origQuoteOrderQty") != null
                        && !jsonObj.get("origQuoteOrderQty").isJsonNull())
                && !jsonObj.get("origQuoteOrderQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origQuoteOrderQty` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("origQuoteOrderQty").toString()));
        }
        if ((jsonObj.get("selfTradePreventionMode") != null
                        && !jsonObj.get("selfTradePreventionMode").isJsonNull())
                && !jsonObj.get("selfTradePreventionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `selfTradePreventionMode` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("selfTradePreventionMode").toString()));
        }
        if ((jsonObj.get("preventedQuantity") != null
                        && !jsonObj.get("preventedQuantity").isJsonNull())
                && !jsonObj.get("preventedQuantity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `preventedQuantity` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("preventedQuantity").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderStatusResponseResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderStatusResponseResult' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderStatusResponseResult> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderStatusResponseResult.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderStatusResponseResult>() {
                        @Override
                        public void write(JsonWriter out, OrderStatusResponseResult value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderStatusResponseResult read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderStatusResponseResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderStatusResponseResult
     * @throws IOException if the JSON string is invalid with respect to OrderStatusResponseResult
     */
    public static OrderStatusResponseResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderStatusResponseResult.class);
    }

    /**
     * Convert an instance of OrderStatusResponseResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
