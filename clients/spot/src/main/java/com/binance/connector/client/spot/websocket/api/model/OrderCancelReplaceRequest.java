/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderCancelReplaceRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderCancelReplaceRequest extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_CANCEL_REPLACE_MODE = "cancelReplaceMode";

    @SerializedName(SERIALIZED_NAME_CANCEL_REPLACE_MODE)
    @jakarta.annotation.Nonnull
    private CancelReplaceMode cancelReplaceMode;

    public static final String SERIALIZED_NAME_CANCEL_ORDER_ID = "cancelOrderId";

    @SerializedName(SERIALIZED_NAME_CANCEL_ORDER_ID)
    @jakarta.annotation.Nullable
    private Integer cancelOrderId;

    public static final String SERIALIZED_NAME_CANCEL_ORIG_CLIENT_ORDER_ID =
            "cancelOrigClientOrderId";

    @SerializedName(SERIALIZED_NAME_CANCEL_ORIG_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String cancelOrigClientOrderId;

    public static final String SERIALIZED_NAME_CANCEL_NEW_CLIENT_ORDER_ID =
            "cancelNewClientOrderId";

    @SerializedName(SERIALIZED_NAME_CANCEL_NEW_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String cancelNewClientOrderId;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nonnull
    private Side side;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nonnull
    private OrderType type;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private TimeInForce timeInForce;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private Double price;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private Double quantity;

    public static final String SERIALIZED_NAME_QUOTE_ORDER_QTY = "quoteOrderQty";

    @SerializedName(SERIALIZED_NAME_QUOTE_ORDER_QTY)
    @jakarta.annotation.Nullable
    private Double quoteOrderQty;

    public static final String SERIALIZED_NAME_NEW_CLIENT_ORDER_ID = "newClientOrderId";

    @SerializedName(SERIALIZED_NAME_NEW_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String newClientOrderId;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespType newOrderRespType;

    public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";

    @SerializedName(SERIALIZED_NAME_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double stopPrice;

    public static final String SERIALIZED_NAME_TRAILING_DELTA = "trailingDelta";

    @SerializedName(SERIALIZED_NAME_TRAILING_DELTA)
    @jakarta.annotation.Nullable
    private Double trailingDelta;

    public static final String SERIALIZED_NAME_ICEBERG_QTY = "icebergQty";

    @SerializedName(SERIALIZED_NAME_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double icebergQty;

    public static final String SERIALIZED_NAME_STRATEGY_ID = "strategyId";

    @SerializedName(SERIALIZED_NAME_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long strategyId;

    public static final String SERIALIZED_NAME_STRATEGY_TYPE = "strategyType";

    @SerializedName(SERIALIZED_NAME_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private Integer strategyType;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private SelfTradePreventionMode selfTradePreventionMode;

    public static final String SERIALIZED_NAME_CANCEL_RESTRICTIONS = "cancelRestrictions";

    @SerializedName(SERIALIZED_NAME_CANCEL_RESTRICTIONS)
    @jakarta.annotation.Nullable
    private CancelRestrictions cancelRestrictions;

    public static final String SERIALIZED_NAME_ORDER_RATE_LIMIT_EXCEEDED_MODE =
            "orderRateLimitExceededMode";

    @SerializedName(SERIALIZED_NAME_ORDER_RATE_LIMIT_EXCEEDED_MODE)
    @jakarta.annotation.Nullable
    private OrderRateLimitExceededMode orderRateLimitExceededMode;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public OrderCancelReplaceRequest() {}

    public OrderCancelReplaceRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public OrderCancelReplaceRequest cancelReplaceMode(
            @jakarta.annotation.Nonnull CancelReplaceMode cancelReplaceMode) {
        this.cancelReplaceMode = cancelReplaceMode;
        return this;
    }

    /**
     * Get cancelReplaceMode
     *
     * @return cancelReplaceMode
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public CancelReplaceMode getCancelReplaceMode() {
        return cancelReplaceMode;
    }

    public void setCancelReplaceMode(
            @jakarta.annotation.Nonnull CancelReplaceMode cancelReplaceMode) {
        this.cancelReplaceMode = cancelReplaceMode;
    }

    public OrderCancelReplaceRequest cancelOrderId(
            @jakarta.annotation.Nullable Integer cancelOrderId) {
        this.cancelOrderId = cancelOrderId;
        return this;
    }

    /**
     * Get cancelOrderId
     *
     * @return cancelOrderId
     */
    @jakarta.annotation.Nullable
    public Integer getCancelOrderId() {
        return cancelOrderId;
    }

    public void setCancelOrderId(@jakarta.annotation.Nullable Integer cancelOrderId) {
        this.cancelOrderId = cancelOrderId;
    }

    public OrderCancelReplaceRequest cancelOrigClientOrderId(
            @jakarta.annotation.Nullable String cancelOrigClientOrderId) {
        this.cancelOrigClientOrderId = cancelOrigClientOrderId;
        return this;
    }

    /**
     * Get cancelOrigClientOrderId
     *
     * @return cancelOrigClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getCancelOrigClientOrderId() {
        return cancelOrigClientOrderId;
    }

    public void setCancelOrigClientOrderId(
            @jakarta.annotation.Nullable String cancelOrigClientOrderId) {
        this.cancelOrigClientOrderId = cancelOrigClientOrderId;
    }

    public OrderCancelReplaceRequest cancelNewClientOrderId(
            @jakarta.annotation.Nullable String cancelNewClientOrderId) {
        this.cancelNewClientOrderId = cancelNewClientOrderId;
        return this;
    }

    /**
     * Get cancelNewClientOrderId
     *
     * @return cancelNewClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getCancelNewClientOrderId() {
        return cancelNewClientOrderId;
    }

    public void setCancelNewClientOrderId(
            @jakarta.annotation.Nullable String cancelNewClientOrderId) {
        this.cancelNewClientOrderId = cancelNewClientOrderId;
    }

    public OrderCancelReplaceRequest side(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Side getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
    }

    public OrderCancelReplaceRequest type(@jakarta.annotation.Nonnull OrderType type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public OrderType getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nonnull OrderType type) {
        this.type = type;
    }

    public OrderCancelReplaceRequest timeInForce(
            @jakarta.annotation.Nullable TimeInForce timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public TimeInForce getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable TimeInForce timeInForce) {
        this.timeInForce = timeInForce;
    }

    public OrderCancelReplaceRequest price(@jakarta.annotation.Nullable Double price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable Double price) {
        this.price = price;
    }

    public OrderCancelReplaceRequest quantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
    }

    public OrderCancelReplaceRequest quoteOrderQty(
            @jakarta.annotation.Nullable Double quoteOrderQty) {
        this.quoteOrderQty = quoteOrderQty;
        return this;
    }

    /**
     * Get quoteOrderQty
     *
     * @return quoteOrderQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getQuoteOrderQty() {
        return quoteOrderQty;
    }

    public void setQuoteOrderQty(@jakarta.annotation.Nullable Double quoteOrderQty) {
        this.quoteOrderQty = quoteOrderQty;
    }

    public OrderCancelReplaceRequest newClientOrderId(
            @jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
        return this;
    }

    /**
     * Get newClientOrderId
     *
     * @return newClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getNewClientOrderId() {
        return newClientOrderId;
    }

    public void setNewClientOrderId(@jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
    }

    public OrderCancelReplaceRequest newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    @Valid
    public NewOrderRespType getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public OrderCancelReplaceRequest stopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
        return this;
    }

    /**
     * Get stopPrice
     *
     * @return stopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
    }

    public OrderCancelReplaceRequest trailingDelta(
            @jakarta.annotation.Nullable Double trailingDelta) {
        this.trailingDelta = trailingDelta;
        return this;
    }

    /**
     * Get trailingDelta
     *
     * @return trailingDelta
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getTrailingDelta() {
        return trailingDelta;
    }

    public void setTrailingDelta(@jakarta.annotation.Nullable Double trailingDelta) {
        this.trailingDelta = trailingDelta;
    }

    public OrderCancelReplaceRequest icebergQty(@jakarta.annotation.Nullable Double icebergQty) {
        this.icebergQty = icebergQty;
        return this;
    }

    /**
     * Get icebergQty
     *
     * @return icebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getIcebergQty() {
        return icebergQty;
    }

    public void setIcebergQty(@jakarta.annotation.Nullable Double icebergQty) {
        this.icebergQty = icebergQty;
    }

    public OrderCancelReplaceRequest strategyId(@jakarta.annotation.Nullable Long strategyId) {
        this.strategyId = strategyId;
        return this;
    }

    /**
     * Get strategyId
     *
     * @return strategyId
     */
    @jakarta.annotation.Nullable
    public Long getStrategyId() {
        return strategyId;
    }

    public void setStrategyId(@jakarta.annotation.Nullable Long strategyId) {
        this.strategyId = strategyId;
    }

    public OrderCancelReplaceRequest strategyType(
            @jakarta.annotation.Nullable Integer strategyType) {
        this.strategyType = strategyType;
        return this;
    }

    /**
     * Get strategyType
     *
     * @return strategyType
     */
    @jakarta.annotation.Nullable
    public Integer getStrategyType() {
        return strategyType;
    }

    public void setStrategyType(@jakarta.annotation.Nullable Integer strategyType) {
        this.strategyType = strategyType;
    }

    public OrderCancelReplaceRequest selfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    @Valid
    public SelfTradePreventionMode getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public OrderCancelReplaceRequest cancelRestrictions(
            @jakarta.annotation.Nullable CancelRestrictions cancelRestrictions) {
        this.cancelRestrictions = cancelRestrictions;
        return this;
    }

    /**
     * Get cancelRestrictions
     *
     * @return cancelRestrictions
     */
    @jakarta.annotation.Nullable
    @Valid
    public CancelRestrictions getCancelRestrictions() {
        return cancelRestrictions;
    }

    public void setCancelRestrictions(
            @jakarta.annotation.Nullable CancelRestrictions cancelRestrictions) {
        this.cancelRestrictions = cancelRestrictions;
    }

    public OrderCancelReplaceRequest orderRateLimitExceededMode(
            @jakarta.annotation.Nullable OrderRateLimitExceededMode orderRateLimitExceededMode) {
        this.orderRateLimitExceededMode = orderRateLimitExceededMode;
        return this;
    }

    /**
     * Get orderRateLimitExceededMode
     *
     * @return orderRateLimitExceededMode
     */
    @jakarta.annotation.Nullable
    @Valid
    public OrderRateLimitExceededMode getOrderRateLimitExceededMode() {
        return orderRateLimitExceededMode;
    }

    public void setOrderRateLimitExceededMode(
            @jakarta.annotation.Nullable OrderRateLimitExceededMode orderRateLimitExceededMode) {
        this.orderRateLimitExceededMode = orderRateLimitExceededMode;
    }

    public OrderCancelReplaceRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderCancelReplaceRequest orderCancelReplaceRequest = (OrderCancelReplaceRequest) o;
        return Objects.equals(this.symbol, orderCancelReplaceRequest.symbol)
                && Objects.equals(
                        this.cancelReplaceMode, orderCancelReplaceRequest.cancelReplaceMode)
                && Objects.equals(this.cancelOrderId, orderCancelReplaceRequest.cancelOrderId)
                && Objects.equals(
                        this.cancelOrigClientOrderId,
                        orderCancelReplaceRequest.cancelOrigClientOrderId)
                && Objects.equals(
                        this.cancelNewClientOrderId,
                        orderCancelReplaceRequest.cancelNewClientOrderId)
                && Objects.equals(this.side, orderCancelReplaceRequest.side)
                && Objects.equals(this.type, orderCancelReplaceRequest.type)
                && Objects.equals(this.timeInForce, orderCancelReplaceRequest.timeInForce)
                && Objects.equals(this.price, orderCancelReplaceRequest.price)
                && Objects.equals(this.quantity, orderCancelReplaceRequest.quantity)
                && Objects.equals(this.quoteOrderQty, orderCancelReplaceRequest.quoteOrderQty)
                && Objects.equals(this.newClientOrderId, orderCancelReplaceRequest.newClientOrderId)
                && Objects.equals(this.newOrderRespType, orderCancelReplaceRequest.newOrderRespType)
                && Objects.equals(this.stopPrice, orderCancelReplaceRequest.stopPrice)
                && Objects.equals(this.trailingDelta, orderCancelReplaceRequest.trailingDelta)
                && Objects.equals(this.icebergQty, orderCancelReplaceRequest.icebergQty)
                && Objects.equals(this.strategyId, orderCancelReplaceRequest.strategyId)
                && Objects.equals(this.strategyType, orderCancelReplaceRequest.strategyType)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        orderCancelReplaceRequest.selfTradePreventionMode)
                && Objects.equals(
                        this.cancelRestrictions, orderCancelReplaceRequest.cancelRestrictions)
                && Objects.equals(
                        this.orderRateLimitExceededMode,
                        orderCancelReplaceRequest.orderRateLimitExceededMode)
                && Objects.equals(this.recvWindow, orderCancelReplaceRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                cancelReplaceMode,
                cancelOrderId,
                cancelOrigClientOrderId,
                cancelNewClientOrderId,
                side,
                type,
                timeInForce,
                price,
                quantity,
                quoteOrderQty,
                newClientOrderId,
                newOrderRespType,
                stopPrice,
                trailingDelta,
                icebergQty,
                strategyId,
                strategyType,
                selfTradePreventionMode,
                cancelRestrictions,
                orderRateLimitExceededMode,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderCancelReplaceRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		cancelReplaceMode: ").append(toIndentedString(cancelReplaceMode)).append("\n");
        sb.append("		cancelOrderId: ").append(toIndentedString(cancelOrderId)).append("\n");
        sb.append("		cancelOrigClientOrderId: ")
                .append(toIndentedString(cancelOrigClientOrderId))
                .append("\n");
        sb.append("		cancelNewClientOrderId: ")
                .append(toIndentedString(cancelNewClientOrderId))
                .append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		quoteOrderQty: ").append(toIndentedString(quoteOrderQty)).append("\n");
        sb.append("		newClientOrderId: ").append(toIndentedString(newClientOrderId)).append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
        sb.append("		trailingDelta: ").append(toIndentedString(trailingDelta)).append("\n");
        sb.append("		icebergQty: ").append(toIndentedString(icebergQty)).append("\n");
        sb.append("		strategyId: ").append(toIndentedString(strategyId)).append("\n");
        sb.append("		strategyType: ").append(toIndentedString(strategyType)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		cancelRestrictions: ")
                .append(toIndentedString(cancelRestrictions))
                .append("\n");
        sb.append("		orderRateLimitExceededMode: ")
                .append(toIndentedString(orderRateLimitExceededMode))
                .append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        CancelReplaceMode cancelReplaceModeValue = getCancelReplaceMode();
        if (cancelReplaceModeValue != null) {
            String cancelReplaceModeValueAsString = cancelReplaceModeValue.toString();
            valMap.put("cancelReplaceMode", cancelReplaceModeValueAsString);
        }
        Integer cancelOrderIdValue = getCancelOrderId();
        if (cancelOrderIdValue != null) {
            String cancelOrderIdValueAsString = cancelOrderIdValue.toString();
            valMap.put("cancelOrderId", cancelOrderIdValueAsString);
        }
        String cancelOrigClientOrderIdValue = getCancelOrigClientOrderId();
        if (cancelOrigClientOrderIdValue != null) {
            String cancelOrigClientOrderIdValueAsString = cancelOrigClientOrderIdValue.toString();
            valMap.put("cancelOrigClientOrderId", cancelOrigClientOrderIdValueAsString);
        }
        String cancelNewClientOrderIdValue = getCancelNewClientOrderId();
        if (cancelNewClientOrderIdValue != null) {
            String cancelNewClientOrderIdValueAsString = cancelNewClientOrderIdValue.toString();
            valMap.put("cancelNewClientOrderId", cancelNewClientOrderIdValueAsString);
        }
        Side sideValue = getSide();
        if (sideValue != null) {
            String sideValueAsString = sideValue.toString();
            valMap.put("side", sideValueAsString);
        }
        OrderType typeValue = getType();
        if (typeValue != null) {
            String typeValueAsString = typeValue.toString();
            valMap.put("type", typeValueAsString);
        }
        TimeInForce timeInForceValue = getTimeInForce();
        if (timeInForceValue != null) {
            String timeInForceValueAsString = timeInForceValue.toString();
            valMap.put("timeInForce", timeInForceValueAsString);
        }
        Double priceValue = getPrice();
        if (priceValue != null) {
            String priceValueAsString = DecimalFormatter.getFormatter().format(priceValue);
            valMap.put("price", priceValueAsString);
        }
        Double quantityValue = getQuantity();
        if (quantityValue != null) {
            String quantityValueAsString = DecimalFormatter.getFormatter().format(quantityValue);
            valMap.put("quantity", quantityValueAsString);
        }
        Double quoteOrderQtyValue = getQuoteOrderQty();
        if (quoteOrderQtyValue != null) {
            String quoteOrderQtyValueAsString =
                    DecimalFormatter.getFormatter().format(quoteOrderQtyValue);
            valMap.put("quoteOrderQty", quoteOrderQtyValueAsString);
        }
        String newClientOrderIdValue = getNewClientOrderId();
        if (newClientOrderIdValue != null) {
            String newClientOrderIdValueAsString = newClientOrderIdValue.toString();
            valMap.put("newClientOrderId", newClientOrderIdValueAsString);
        }
        NewOrderRespType newOrderRespTypeValue = getNewOrderRespType();
        if (newOrderRespTypeValue != null) {
            String newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
            valMap.put("newOrderRespType", newOrderRespTypeValueAsString);
        }
        Double stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            String stopPriceValueAsString = DecimalFormatter.getFormatter().format(stopPriceValue);
            valMap.put("stopPrice", stopPriceValueAsString);
        }
        Double trailingDeltaValue = getTrailingDelta();
        if (trailingDeltaValue != null) {
            String trailingDeltaValueAsString =
                    DecimalFormatter.getFormatter().format(trailingDeltaValue);
            valMap.put("trailingDelta", trailingDeltaValueAsString);
        }
        Double icebergQtyValue = getIcebergQty();
        if (icebergQtyValue != null) {
            String icebergQtyValueAsString =
                    DecimalFormatter.getFormatter().format(icebergQtyValue);
            valMap.put("icebergQty", icebergQtyValueAsString);
        }
        Long strategyIdValue = getStrategyId();
        if (strategyIdValue != null) {
            String strategyIdValueAsString = strategyIdValue.toString();
            valMap.put("strategyId", strategyIdValueAsString);
        }
        Integer strategyTypeValue = getStrategyType();
        if (strategyTypeValue != null) {
            String strategyTypeValueAsString = strategyTypeValue.toString();
            valMap.put("strategyType", strategyTypeValueAsString);
        }
        SelfTradePreventionMode selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            String selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValueAsString);
        }
        CancelRestrictions cancelRestrictionsValue = getCancelRestrictions();
        if (cancelRestrictionsValue != null) {
            String cancelRestrictionsValueAsString = cancelRestrictionsValue.toString();
            valMap.put("cancelRestrictions", cancelRestrictionsValueAsString);
        }
        OrderRateLimitExceededMode orderRateLimitExceededModeValue =
                getOrderRateLimitExceededMode();
        if (orderRateLimitExceededModeValue != null) {
            String orderRateLimitExceededModeValueAsString =
                    orderRateLimitExceededModeValue.toString();
            valMap.put("orderRateLimitExceededMode", orderRateLimitExceededModeValueAsString);
        }
        Long recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            String recvWindowValueAsString = recvWindowValue.toString();
            valMap.put("recvWindow", recvWindowValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object cancelReplaceModeValue = getCancelReplaceMode();
        if (cancelReplaceModeValue != null) {
            valMap.put("cancelReplaceMode", cancelReplaceModeValue);
        }
        Object cancelOrderIdValue = getCancelOrderId();
        if (cancelOrderIdValue != null) {
            valMap.put("cancelOrderId", cancelOrderIdValue);
        }
        Object cancelOrigClientOrderIdValue = getCancelOrigClientOrderId();
        if (cancelOrigClientOrderIdValue != null) {
            valMap.put("cancelOrigClientOrderId", cancelOrigClientOrderIdValue);
        }
        Object cancelNewClientOrderIdValue = getCancelNewClientOrderId();
        if (cancelNewClientOrderIdValue != null) {
            valMap.put("cancelNewClientOrderId", cancelNewClientOrderIdValue);
        }
        Object sideValue = getSide();
        if (sideValue != null) {
            valMap.put("side", sideValue);
        }
        Object typeValue = getType();
        if (typeValue != null) {
            valMap.put("type", typeValue);
        }
        Object timeInForceValue = getTimeInForce();
        if (timeInForceValue != null) {
            valMap.put("timeInForce", timeInForceValue);
        }
        Object priceValue = getPrice();
        if (priceValue != null) {
            valMap.put("price", priceValue);
        }
        Object quantityValue = getQuantity();
        if (quantityValue != null) {
            valMap.put("quantity", quantityValue);
        }
        Object quoteOrderQtyValue = getQuoteOrderQty();
        if (quoteOrderQtyValue != null) {
            valMap.put("quoteOrderQty", quoteOrderQtyValue);
        }
        Object newClientOrderIdValue = getNewClientOrderId();
        if (newClientOrderIdValue != null) {
            valMap.put("newClientOrderId", newClientOrderIdValue);
        }
        Object newOrderRespTypeValue = getNewOrderRespType();
        if (newOrderRespTypeValue != null) {
            valMap.put("newOrderRespType", newOrderRespTypeValue);
        }
        Object stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            valMap.put("stopPrice", stopPriceValue);
        }
        Object trailingDeltaValue = getTrailingDelta();
        if (trailingDeltaValue != null) {
            valMap.put("trailingDelta", trailingDeltaValue);
        }
        Object icebergQtyValue = getIcebergQty();
        if (icebergQtyValue != null) {
            valMap.put("icebergQty", icebergQtyValue);
        }
        Object strategyIdValue = getStrategyId();
        if (strategyIdValue != null) {
            valMap.put("strategyId", strategyIdValue);
        }
        Object strategyTypeValue = getStrategyType();
        if (strategyTypeValue != null) {
            valMap.put("strategyType", strategyTypeValue);
        }
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValue);
        }
        Object cancelRestrictionsValue = getCancelRestrictions();
        if (cancelRestrictionsValue != null) {
            valMap.put("cancelRestrictions", cancelRestrictionsValue);
        }
        Object orderRateLimitExceededModeValue = getOrderRateLimitExceededMode();
        if (orderRateLimitExceededModeValue != null) {
            valMap.put("orderRateLimitExceededMode", orderRateLimitExceededModeValue);
        }
        Object recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            valMap.put("recvWindow", recvWindowValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("cancelReplaceMode");
        openapiFields.add("cancelOrderId");
        openapiFields.add("cancelOrigClientOrderId");
        openapiFields.add("cancelNewClientOrderId");
        openapiFields.add("side");
        openapiFields.add("type");
        openapiFields.add("timeInForce");
        openapiFields.add("price");
        openapiFields.add("quantity");
        openapiFields.add("quoteOrderQty");
        openapiFields.add("newClientOrderId");
        openapiFields.add("newOrderRespType");
        openapiFields.add("stopPrice");
        openapiFields.add("trailingDelta");
        openapiFields.add("icebergQty");
        openapiFields.add("strategyId");
        openapiFields.add("strategyType");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("cancelRestrictions");
        openapiFields.add("orderRateLimitExceededMode");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("cancelReplaceMode");
        openapiRequiredFields.add("side");
        openapiRequiredFields.add("type");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderCancelReplaceRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderCancelReplaceRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderCancelReplaceRequest is not found"
                                        + " in the empty JSON string",
                                OrderCancelReplaceRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderCancelReplaceRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderCancelReplaceRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : OrderCancelReplaceRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        // validate the required field `cancelReplaceMode`
        CancelReplaceMode.validateJsonElement(jsonObj.get("cancelReplaceMode"));
        if ((jsonObj.get("cancelOrigClientOrderId") != null
                        && !jsonObj.get("cancelOrigClientOrderId").isJsonNull())
                && !jsonObj.get("cancelOrigClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cancelOrigClientOrderId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("cancelOrigClientOrderId").toString()));
        }
        if ((jsonObj.get("cancelNewClientOrderId") != null
                        && !jsonObj.get("cancelNewClientOrderId").isJsonNull())
                && !jsonObj.get("cancelNewClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cancelNewClientOrderId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("cancelNewClientOrderId").toString()));
        }
        // validate the required field `side`
        Side.validateJsonElement(jsonObj.get("side"));
        // validate the required field `type`
        OrderType.validateJsonElement(jsonObj.get("type"));
        // validate the optional field `timeInForce`
        if (jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) {
            TimeInForce.validateJsonElement(jsonObj.get("timeInForce"));
        }
        if ((jsonObj.get("newClientOrderId") != null
                        && !jsonObj.get("newClientOrderId").isJsonNull())
                && !jsonObj.get("newClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("newClientOrderId").toString()));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespType.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        // validate the optional field `selfTradePreventionMode`
        if (jsonObj.get("selfTradePreventionMode") != null
                && !jsonObj.get("selfTradePreventionMode").isJsonNull()) {
            SelfTradePreventionMode.validateJsonElement(jsonObj.get("selfTradePreventionMode"));
        }
        // validate the optional field `cancelRestrictions`
        if (jsonObj.get("cancelRestrictions") != null
                && !jsonObj.get("cancelRestrictions").isJsonNull()) {
            CancelRestrictions.validateJsonElement(jsonObj.get("cancelRestrictions"));
        }
        // validate the optional field `orderRateLimitExceededMode`
        if (jsonObj.get("orderRateLimitExceededMode") != null
                && !jsonObj.get("orderRateLimitExceededMode").isJsonNull()) {
            OrderRateLimitExceededMode.validateJsonElement(
                    jsonObj.get("orderRateLimitExceededMode"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderCancelReplaceRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderCancelReplaceRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderCancelReplaceRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderCancelReplaceRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderCancelReplaceRequest>() {
                        @Override
                        public void write(JsonWriter out, OrderCancelReplaceRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderCancelReplaceRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderCancelReplaceRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderCancelReplaceRequest
     * @throws IOException if the JSON string is invalid with respect to OrderCancelReplaceRequest
     */
    public static OrderCancelReplaceRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderCancelReplaceRequest.class);
    }

    /**
     * Convert an instance of OrderCancelReplaceRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
