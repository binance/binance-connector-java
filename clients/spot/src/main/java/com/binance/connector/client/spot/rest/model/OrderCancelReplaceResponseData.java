/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** OrderCancelReplaceResponseData */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderCancelReplaceResponseData {
    public static final String SERIALIZED_NAME_CANCEL_RESULT = "cancelResult";

    @SerializedName(SERIALIZED_NAME_CANCEL_RESULT)
    @jakarta.annotation.Nullable
    private String cancelResult;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESULT = "newOrderResult";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESULT)
    @jakarta.annotation.Nullable
    private String newOrderResult;

    public static final String SERIALIZED_NAME_CANCEL_RESPONSE = "cancelResponse";

    @SerializedName(SERIALIZED_NAME_CANCEL_RESPONSE)
    @jakarta.annotation.Nullable
    private OrderCancelReplaceResponseDataCancelResponse cancelResponse;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESPONSE = "newOrderResponse";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESPONSE)
    @jakarta.annotation.Nullable
    private OrderCancelReplaceResponseDataNewOrderResponse newOrderResponse;

    public OrderCancelReplaceResponseData() {}

    public OrderCancelReplaceResponseData cancelResult(
            @jakarta.annotation.Nullable String cancelResult) {
        this.cancelResult = cancelResult;
        return this;
    }

    /**
     * Get cancelResult
     *
     * @return cancelResult
     */
    @jakarta.annotation.Nullable
    public String getCancelResult() {
        return cancelResult;
    }

    public void setCancelResult(@jakarta.annotation.Nullable String cancelResult) {
        this.cancelResult = cancelResult;
    }

    public OrderCancelReplaceResponseData newOrderResult(
            @jakarta.annotation.Nullable String newOrderResult) {
        this.newOrderResult = newOrderResult;
        return this;
    }

    /**
     * Get newOrderResult
     *
     * @return newOrderResult
     */
    @jakarta.annotation.Nullable
    public String getNewOrderResult() {
        return newOrderResult;
    }

    public void setNewOrderResult(@jakarta.annotation.Nullable String newOrderResult) {
        this.newOrderResult = newOrderResult;
    }

    public OrderCancelReplaceResponseData cancelResponse(
            @jakarta.annotation.Nullable
                    OrderCancelReplaceResponseDataCancelResponse cancelResponse) {
        this.cancelResponse = cancelResponse;
        return this;
    }

    /**
     * Get cancelResponse
     *
     * @return cancelResponse
     */
    @jakarta.annotation.Nullable
    @Valid
    public OrderCancelReplaceResponseDataCancelResponse getCancelResponse() {
        return cancelResponse;
    }

    public void setCancelResponse(
            @jakarta.annotation.Nullable
                    OrderCancelReplaceResponseDataCancelResponse cancelResponse) {
        this.cancelResponse = cancelResponse;
    }

    public OrderCancelReplaceResponseData newOrderResponse(
            @jakarta.annotation.Nullable
                    OrderCancelReplaceResponseDataNewOrderResponse newOrderResponse) {
        this.newOrderResponse = newOrderResponse;
        return this;
    }

    /**
     * Get newOrderResponse
     *
     * @return newOrderResponse
     */
    @jakarta.annotation.Nullable
    @Valid
    public OrderCancelReplaceResponseDataNewOrderResponse getNewOrderResponse() {
        return newOrderResponse;
    }

    public void setNewOrderResponse(
            @jakarta.annotation.Nullable
                    OrderCancelReplaceResponseDataNewOrderResponse newOrderResponse) {
        this.newOrderResponse = newOrderResponse;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderCancelReplaceResponseData orderCancelReplaceResponseData =
                (OrderCancelReplaceResponseData) o;
        return Objects.equals(this.cancelResult, orderCancelReplaceResponseData.cancelResult)
                && Objects.equals(
                        this.newOrderResult, orderCancelReplaceResponseData.newOrderResult)
                && Objects.equals(
                        this.cancelResponse, orderCancelReplaceResponseData.cancelResponse)
                && Objects.equals(
                        this.newOrderResponse, orderCancelReplaceResponseData.newOrderResponse);
    }

    @Override
    public int hashCode() {
        return Objects.hash(cancelResult, newOrderResult, cancelResponse, newOrderResponse);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderCancelReplaceResponseData {\n");
        sb.append("		cancelResult: ").append(toIndentedString(cancelResult)).append("\n");
        sb.append("		newOrderResult: ").append(toIndentedString(newOrderResult)).append("\n");
        sb.append("		cancelResponse: ").append(toIndentedString(cancelResponse)).append("\n");
        sb.append("		newOrderResponse: ").append(toIndentedString(newOrderResponse)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object cancelResultValue = getCancelResult();
        String cancelResultValueAsString = "";
        cancelResultValueAsString = cancelResultValue.toString();
        sb.append("cancelResult=").append(urlEncode(cancelResultValueAsString)).append("");
        Object newOrderResultValue = getNewOrderResult();
        String newOrderResultValueAsString = "";
        newOrderResultValueAsString = newOrderResultValue.toString();
        sb.append("newOrderResult=").append(urlEncode(newOrderResultValueAsString)).append("");
        Object cancelResponseValue = getCancelResponse();
        String cancelResponseValueAsString = "";
        cancelResponseValueAsString = cancelResponseValue.toString();
        sb.append("cancelResponse=").append(urlEncode(cancelResponseValueAsString)).append("");
        Object newOrderResponseValue = getNewOrderResponse();
        String newOrderResponseValueAsString = "";
        newOrderResponseValueAsString = newOrderResponseValue.toString();
        sb.append("newOrderResponse=").append(urlEncode(newOrderResponseValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("cancelResult");
        openapiFields.add("newOrderResult");
        openapiFields.add("cancelResponse");
        openapiFields.add("newOrderResponse");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OrderCancelReplaceResponseData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderCancelReplaceResponseData.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderCancelReplaceResponseData is not"
                                        + " found in the empty JSON string",
                                OrderCancelReplaceResponseData.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderCancelReplaceResponseData.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderCancelReplaceResponseData` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("cancelResult") != null && !jsonObj.get("cancelResult").isJsonNull())
                && !jsonObj.get("cancelResult").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cancelResult` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("cancelResult").toString()));
        }
        if ((jsonObj.get("newOrderResult") != null && !jsonObj.get("newOrderResult").isJsonNull())
                && !jsonObj.get("newOrderResult").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newOrderResult` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("newOrderResult").toString()));
        }
        // validate the optional field `cancelResponse`
        if (jsonObj.get("cancelResponse") != null && !jsonObj.get("cancelResponse").isJsonNull()) {
            OrderCancelReplaceResponseDataCancelResponse.validateJsonElement(
                    jsonObj.get("cancelResponse"));
        }
        // validate the optional field `newOrderResponse`
        if (jsonObj.get("newOrderResponse") != null
                && !jsonObj.get("newOrderResponse").isJsonNull()) {
            OrderCancelReplaceResponseDataNewOrderResponse.validateJsonElement(
                    jsonObj.get("newOrderResponse"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderCancelReplaceResponseData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderCancelReplaceResponseData' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderCancelReplaceResponseData> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(OrderCancelReplaceResponseData.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderCancelReplaceResponseData>() {
                        @Override
                        public void write(JsonWriter out, OrderCancelReplaceResponseData value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderCancelReplaceResponseData read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderCancelReplaceResponseData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderCancelReplaceResponseData
     * @throws IOException if the JSON string is invalid with respect to
     *     OrderCancelReplaceResponseData
     */
    public static OrderCancelReplaceResponseData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderCancelReplaceResponseData.class);
    }

    /**
     * Convert an instance of OrderCancelReplaceResponseData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
