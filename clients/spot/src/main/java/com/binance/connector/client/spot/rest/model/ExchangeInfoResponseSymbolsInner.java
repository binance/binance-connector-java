/*
 * Binance Spot REST API
 * OpenAPI Specifications for the Binance Spot REST API  API documents:   - [Github rest-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md)   - [General API information for rest-api on website](https://developers.binance.com/docs/binance-spot-api-docs/rest-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.rest.model;

import com.binance.connector.client.spot.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** ExchangeInfoResponseSymbolsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ExchangeInfoResponseSymbolsInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_BASE_ASSET = "baseAsset";

    @SerializedName(SERIALIZED_NAME_BASE_ASSET)
    @jakarta.annotation.Nullable
    private String baseAsset;

    public static final String SERIALIZED_NAME_BASE_ASSET_PRECISION = "baseAssetPrecision";

    @SerializedName(SERIALIZED_NAME_BASE_ASSET_PRECISION)
    @jakarta.annotation.Nullable
    private Long baseAssetPrecision;

    public static final String SERIALIZED_NAME_QUOTE_ASSET = "quoteAsset";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET)
    @jakarta.annotation.Nullable
    private String quoteAsset;

    public static final String SERIALIZED_NAME_QUOTE_PRECISION = "quotePrecision";

    @SerializedName(SERIALIZED_NAME_QUOTE_PRECISION)
    @jakarta.annotation.Nullable
    private Long quotePrecision;

    public static final String SERIALIZED_NAME_QUOTE_ASSET_PRECISION = "quoteAssetPrecision";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET_PRECISION)
    @jakarta.annotation.Nullable
    private Long quoteAssetPrecision;

    public static final String SERIALIZED_NAME_BASE_COMMISSION_PRECISION =
            "baseCommissionPrecision";

    @SerializedName(SERIALIZED_NAME_BASE_COMMISSION_PRECISION)
    @jakarta.annotation.Nullable
    private Long baseCommissionPrecision;

    public static final String SERIALIZED_NAME_QUOTE_COMMISSION_PRECISION =
            "quoteCommissionPrecision";

    @SerializedName(SERIALIZED_NAME_QUOTE_COMMISSION_PRECISION)
    @jakarta.annotation.Nullable
    private Long quoteCommissionPrecision;

    public static final String SERIALIZED_NAME_ORDER_TYPES = "orderTypes";

    @SerializedName(SERIALIZED_NAME_ORDER_TYPES)
    @jakarta.annotation.Nullable
    private List<String> orderTypes;

    public static final String SERIALIZED_NAME_ICEBERG_ALLOWED = "icebergAllowed";

    @SerializedName(SERIALIZED_NAME_ICEBERG_ALLOWED)
    @jakarta.annotation.Nullable
    private Boolean icebergAllowed;

    public static final String SERIALIZED_NAME_OCO_ALLOWED = "ocoAllowed";

    @SerializedName(SERIALIZED_NAME_OCO_ALLOWED)
    @jakarta.annotation.Nullable
    private Boolean ocoAllowed;

    public static final String SERIALIZED_NAME_OTO_ALLOWED = "otoAllowed";

    @SerializedName(SERIALIZED_NAME_OTO_ALLOWED)
    @jakarta.annotation.Nullable
    private Boolean otoAllowed;

    public static final String SERIALIZED_NAME_QUOTE_ORDER_QTY_MARKET_ALLOWED =
            "quoteOrderQtyMarketAllowed";

    @SerializedName(SERIALIZED_NAME_QUOTE_ORDER_QTY_MARKET_ALLOWED)
    @jakarta.annotation.Nullable
    private Boolean quoteOrderQtyMarketAllowed;

    public static final String SERIALIZED_NAME_ALLOW_TRAILING_STOP = "allowTrailingStop";

    @SerializedName(SERIALIZED_NAME_ALLOW_TRAILING_STOP)
    @jakarta.annotation.Nullable
    private Boolean allowTrailingStop;

    public static final String SERIALIZED_NAME_CANCEL_REPLACE_ALLOWED = "cancelReplaceAllowed";

    @SerializedName(SERIALIZED_NAME_CANCEL_REPLACE_ALLOWED)
    @jakarta.annotation.Nullable
    private Boolean cancelReplaceAllowed;

    public static final String SERIALIZED_NAME_ALLOW_AMEND = "allowAmend";

    @SerializedName(SERIALIZED_NAME_ALLOW_AMEND)
    @jakarta.annotation.Nullable
    private Boolean allowAmend;

    public static final String SERIALIZED_NAME_IS_SPOT_TRADING_ALLOWED = "isSpotTradingAllowed";

    @SerializedName(SERIALIZED_NAME_IS_SPOT_TRADING_ALLOWED)
    @jakarta.annotation.Nullable
    private Boolean isSpotTradingAllowed;

    public static final String SERIALIZED_NAME_IS_MARGIN_TRADING_ALLOWED = "isMarginTradingAllowed";

    @SerializedName(SERIALIZED_NAME_IS_MARGIN_TRADING_ALLOWED)
    @jakarta.annotation.Nullable
    private Boolean isMarginTradingAllowed;

    public static final String SERIALIZED_NAME_FILTERS = "filters";

    @SerializedName(SERIALIZED_NAME_FILTERS)
    @jakarta.annotation.Nullable
    private List<@Valid ExchangeInfoResponseSymbolsInnerFiltersInner> filters;

    public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";

    @SerializedName(SERIALIZED_NAME_PERMISSIONS)
    @jakarta.annotation.Nullable
    private List<String> permissions;

    public static final String SERIALIZED_NAME_PERMISSION_SETS = "permissionSets";

    @SerializedName(SERIALIZED_NAME_PERMISSION_SETS)
    @jakarta.annotation.Nullable
    private List<List<String>> permissionSets;

    public static final String SERIALIZED_NAME_DEFAULT_SELF_TRADE_PREVENTION_MODE =
            "defaultSelfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_DEFAULT_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private String defaultSelfTradePreventionMode;

    public static final String SERIALIZED_NAME_ALLOWED_SELF_TRADE_PREVENTION_MODES =
            "allowedSelfTradePreventionModes";

    @SerializedName(SERIALIZED_NAME_ALLOWED_SELF_TRADE_PREVENTION_MODES)
    @jakarta.annotation.Nullable
    private List<String> allowedSelfTradePreventionModes;

    public ExchangeInfoResponseSymbolsInner() {}

    public ExchangeInfoResponseSymbolsInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public ExchangeInfoResponseSymbolsInner status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public ExchangeInfoResponseSymbolsInner baseAsset(
            @jakarta.annotation.Nullable String baseAsset) {
        this.baseAsset = baseAsset;
        return this;
    }

    /**
     * Get baseAsset
     *
     * @return baseAsset
     */
    @jakarta.annotation.Nullable
    public String getBaseAsset() {
        return baseAsset;
    }

    public void setBaseAsset(@jakarta.annotation.Nullable String baseAsset) {
        this.baseAsset = baseAsset;
    }

    public ExchangeInfoResponseSymbolsInner baseAssetPrecision(
            @jakarta.annotation.Nullable Long baseAssetPrecision) {
        this.baseAssetPrecision = baseAssetPrecision;
        return this;
    }

    /**
     * Get baseAssetPrecision
     *
     * @return baseAssetPrecision
     */
    @jakarta.annotation.Nullable
    public Long getBaseAssetPrecision() {
        return baseAssetPrecision;
    }

    public void setBaseAssetPrecision(@jakarta.annotation.Nullable Long baseAssetPrecision) {
        this.baseAssetPrecision = baseAssetPrecision;
    }

    public ExchangeInfoResponseSymbolsInner quoteAsset(
            @jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
        return this;
    }

    /**
     * Get quoteAsset
     *
     * @return quoteAsset
     */
    @jakarta.annotation.Nullable
    public String getQuoteAsset() {
        return quoteAsset;
    }

    public void setQuoteAsset(@jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
    }

    public ExchangeInfoResponseSymbolsInner quotePrecision(
            @jakarta.annotation.Nullable Long quotePrecision) {
        this.quotePrecision = quotePrecision;
        return this;
    }

    /**
     * Get quotePrecision
     *
     * @return quotePrecision
     */
    @jakarta.annotation.Nullable
    public Long getQuotePrecision() {
        return quotePrecision;
    }

    public void setQuotePrecision(@jakarta.annotation.Nullable Long quotePrecision) {
        this.quotePrecision = quotePrecision;
    }

    public ExchangeInfoResponseSymbolsInner quoteAssetPrecision(
            @jakarta.annotation.Nullable Long quoteAssetPrecision) {
        this.quoteAssetPrecision = quoteAssetPrecision;
        return this;
    }

    /**
     * Get quoteAssetPrecision
     *
     * @return quoteAssetPrecision
     */
    @jakarta.annotation.Nullable
    public Long getQuoteAssetPrecision() {
        return quoteAssetPrecision;
    }

    public void setQuoteAssetPrecision(@jakarta.annotation.Nullable Long quoteAssetPrecision) {
        this.quoteAssetPrecision = quoteAssetPrecision;
    }

    public ExchangeInfoResponseSymbolsInner baseCommissionPrecision(
            @jakarta.annotation.Nullable Long baseCommissionPrecision) {
        this.baseCommissionPrecision = baseCommissionPrecision;
        return this;
    }

    /**
     * Get baseCommissionPrecision
     *
     * @return baseCommissionPrecision
     */
    @jakarta.annotation.Nullable
    public Long getBaseCommissionPrecision() {
        return baseCommissionPrecision;
    }

    public void setBaseCommissionPrecision(
            @jakarta.annotation.Nullable Long baseCommissionPrecision) {
        this.baseCommissionPrecision = baseCommissionPrecision;
    }

    public ExchangeInfoResponseSymbolsInner quoteCommissionPrecision(
            @jakarta.annotation.Nullable Long quoteCommissionPrecision) {
        this.quoteCommissionPrecision = quoteCommissionPrecision;
        return this;
    }

    /**
     * Get quoteCommissionPrecision
     *
     * @return quoteCommissionPrecision
     */
    @jakarta.annotation.Nullable
    public Long getQuoteCommissionPrecision() {
        return quoteCommissionPrecision;
    }

    public void setQuoteCommissionPrecision(
            @jakarta.annotation.Nullable Long quoteCommissionPrecision) {
        this.quoteCommissionPrecision = quoteCommissionPrecision;
    }

    public ExchangeInfoResponseSymbolsInner orderTypes(
            @jakarta.annotation.Nullable List<String> orderTypes) {
        this.orderTypes = orderTypes;
        return this;
    }

    public ExchangeInfoResponseSymbolsInner addOrderTypesItem(String orderTypesItem) {
        if (this.orderTypes == null) {
            this.orderTypes = new ArrayList<>();
        }
        this.orderTypes.add(orderTypesItem);
        return this;
    }

    /**
     * Get orderTypes
     *
     * @return orderTypes
     */
    @jakarta.annotation.Nullable
    public List<String> getOrderTypes() {
        return orderTypes;
    }

    public void setOrderTypes(@jakarta.annotation.Nullable List<String> orderTypes) {
        this.orderTypes = orderTypes;
    }

    public ExchangeInfoResponseSymbolsInner icebergAllowed(
            @jakarta.annotation.Nullable Boolean icebergAllowed) {
        this.icebergAllowed = icebergAllowed;
        return this;
    }

    /**
     * Get icebergAllowed
     *
     * @return icebergAllowed
     */
    @jakarta.annotation.Nullable
    public Boolean getIcebergAllowed() {
        return icebergAllowed;
    }

    public void setIcebergAllowed(@jakarta.annotation.Nullable Boolean icebergAllowed) {
        this.icebergAllowed = icebergAllowed;
    }

    public ExchangeInfoResponseSymbolsInner ocoAllowed(
            @jakarta.annotation.Nullable Boolean ocoAllowed) {
        this.ocoAllowed = ocoAllowed;
        return this;
    }

    /**
     * Get ocoAllowed
     *
     * @return ocoAllowed
     */
    @jakarta.annotation.Nullable
    public Boolean getOcoAllowed() {
        return ocoAllowed;
    }

    public void setOcoAllowed(@jakarta.annotation.Nullable Boolean ocoAllowed) {
        this.ocoAllowed = ocoAllowed;
    }

    public ExchangeInfoResponseSymbolsInner otoAllowed(
            @jakarta.annotation.Nullable Boolean otoAllowed) {
        this.otoAllowed = otoAllowed;
        return this;
    }

    /**
     * Get otoAllowed
     *
     * @return otoAllowed
     */
    @jakarta.annotation.Nullable
    public Boolean getOtoAllowed() {
        return otoAllowed;
    }

    public void setOtoAllowed(@jakarta.annotation.Nullable Boolean otoAllowed) {
        this.otoAllowed = otoAllowed;
    }

    public ExchangeInfoResponseSymbolsInner quoteOrderQtyMarketAllowed(
            @jakarta.annotation.Nullable Boolean quoteOrderQtyMarketAllowed) {
        this.quoteOrderQtyMarketAllowed = quoteOrderQtyMarketAllowed;
        return this;
    }

    /**
     * Get quoteOrderQtyMarketAllowed
     *
     * @return quoteOrderQtyMarketAllowed
     */
    @jakarta.annotation.Nullable
    public Boolean getQuoteOrderQtyMarketAllowed() {
        return quoteOrderQtyMarketAllowed;
    }

    public void setQuoteOrderQtyMarketAllowed(
            @jakarta.annotation.Nullable Boolean quoteOrderQtyMarketAllowed) {
        this.quoteOrderQtyMarketAllowed = quoteOrderQtyMarketAllowed;
    }

    public ExchangeInfoResponseSymbolsInner allowTrailingStop(
            @jakarta.annotation.Nullable Boolean allowTrailingStop) {
        this.allowTrailingStop = allowTrailingStop;
        return this;
    }

    /**
     * Get allowTrailingStop
     *
     * @return allowTrailingStop
     */
    @jakarta.annotation.Nullable
    public Boolean getAllowTrailingStop() {
        return allowTrailingStop;
    }

    public void setAllowTrailingStop(@jakarta.annotation.Nullable Boolean allowTrailingStop) {
        this.allowTrailingStop = allowTrailingStop;
    }

    public ExchangeInfoResponseSymbolsInner cancelReplaceAllowed(
            @jakarta.annotation.Nullable Boolean cancelReplaceAllowed) {
        this.cancelReplaceAllowed = cancelReplaceAllowed;
        return this;
    }

    /**
     * Get cancelReplaceAllowed
     *
     * @return cancelReplaceAllowed
     */
    @jakarta.annotation.Nullable
    public Boolean getCancelReplaceAllowed() {
        return cancelReplaceAllowed;
    }

    public void setCancelReplaceAllowed(@jakarta.annotation.Nullable Boolean cancelReplaceAllowed) {
        this.cancelReplaceAllowed = cancelReplaceAllowed;
    }

    public ExchangeInfoResponseSymbolsInner allowAmend(
            @jakarta.annotation.Nullable Boolean allowAmend) {
        this.allowAmend = allowAmend;
        return this;
    }

    /**
     * Get allowAmend
     *
     * @return allowAmend
     */
    @jakarta.annotation.Nullable
    public Boolean getAllowAmend() {
        return allowAmend;
    }

    public void setAllowAmend(@jakarta.annotation.Nullable Boolean allowAmend) {
        this.allowAmend = allowAmend;
    }

    public ExchangeInfoResponseSymbolsInner isSpotTradingAllowed(
            @jakarta.annotation.Nullable Boolean isSpotTradingAllowed) {
        this.isSpotTradingAllowed = isSpotTradingAllowed;
        return this;
    }

    /**
     * Get isSpotTradingAllowed
     *
     * @return isSpotTradingAllowed
     */
    @jakarta.annotation.Nullable
    public Boolean getIsSpotTradingAllowed() {
        return isSpotTradingAllowed;
    }

    public void setIsSpotTradingAllowed(@jakarta.annotation.Nullable Boolean isSpotTradingAllowed) {
        this.isSpotTradingAllowed = isSpotTradingAllowed;
    }

    public ExchangeInfoResponseSymbolsInner isMarginTradingAllowed(
            @jakarta.annotation.Nullable Boolean isMarginTradingAllowed) {
        this.isMarginTradingAllowed = isMarginTradingAllowed;
        return this;
    }

    /**
     * Get isMarginTradingAllowed
     *
     * @return isMarginTradingAllowed
     */
    @jakarta.annotation.Nullable
    public Boolean getIsMarginTradingAllowed() {
        return isMarginTradingAllowed;
    }

    public void setIsMarginTradingAllowed(
            @jakarta.annotation.Nullable Boolean isMarginTradingAllowed) {
        this.isMarginTradingAllowed = isMarginTradingAllowed;
    }

    public ExchangeInfoResponseSymbolsInner filters(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInfoResponseSymbolsInnerFiltersInner> filters) {
        this.filters = filters;
        return this;
    }

    public ExchangeInfoResponseSymbolsInner addFiltersItem(
            ExchangeInfoResponseSymbolsInnerFiltersInner filtersItem) {
        if (this.filters == null) {
            this.filters = new ArrayList<>();
        }
        this.filters.add(filtersItem);
        return this;
    }

    /**
     * Get filters
     *
     * @return filters
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ExchangeInfoResponseSymbolsInnerFiltersInner> getFilters() {
        return filters;
    }

    public void setFilters(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInfoResponseSymbolsInnerFiltersInner> filters) {
        this.filters = filters;
    }

    public ExchangeInfoResponseSymbolsInner permissions(
            @jakarta.annotation.Nullable List<String> permissions) {
        this.permissions = permissions;
        return this;
    }

    public ExchangeInfoResponseSymbolsInner addPermissionsItem(String permissionsItem) {
        if (this.permissions == null) {
            this.permissions = new ArrayList<>();
        }
        this.permissions.add(permissionsItem);
        return this;
    }

    /**
     * Get permissions
     *
     * @return permissions
     */
    @jakarta.annotation.Nullable
    public List<String> getPermissions() {
        return permissions;
    }

    public void setPermissions(@jakarta.annotation.Nullable List<String> permissions) {
        this.permissions = permissions;
    }

    public ExchangeInfoResponseSymbolsInner permissionSets(
            @jakarta.annotation.Nullable List<List<String>> permissionSets) {
        this.permissionSets = permissionSets;
        return this;
    }

    public ExchangeInfoResponseSymbolsInner addPermissionSetsItem(List<String> permissionSetsItem) {
        if (this.permissionSets == null) {
            this.permissionSets = new ArrayList<>();
        }
        this.permissionSets.add(permissionSetsItem);
        return this;
    }

    /**
     * Get permissionSets
     *
     * @return permissionSets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<List<String>> getPermissionSets() {
        return permissionSets;
    }

    public void setPermissionSets(@jakarta.annotation.Nullable List<List<String>> permissionSets) {
        this.permissionSets = permissionSets;
    }

    public ExchangeInfoResponseSymbolsInner defaultSelfTradePreventionMode(
            @jakarta.annotation.Nullable String defaultSelfTradePreventionMode) {
        this.defaultSelfTradePreventionMode = defaultSelfTradePreventionMode;
        return this;
    }

    /**
     * Get defaultSelfTradePreventionMode
     *
     * @return defaultSelfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    public String getDefaultSelfTradePreventionMode() {
        return defaultSelfTradePreventionMode;
    }

    public void setDefaultSelfTradePreventionMode(
            @jakarta.annotation.Nullable String defaultSelfTradePreventionMode) {
        this.defaultSelfTradePreventionMode = defaultSelfTradePreventionMode;
    }

    public ExchangeInfoResponseSymbolsInner allowedSelfTradePreventionModes(
            @jakarta.annotation.Nullable List<String> allowedSelfTradePreventionModes) {
        this.allowedSelfTradePreventionModes = allowedSelfTradePreventionModes;
        return this;
    }

    public ExchangeInfoResponseSymbolsInner addAllowedSelfTradePreventionModesItem(
            String allowedSelfTradePreventionModesItem) {
        if (this.allowedSelfTradePreventionModes == null) {
            this.allowedSelfTradePreventionModes = new ArrayList<>();
        }
        this.allowedSelfTradePreventionModes.add(allowedSelfTradePreventionModesItem);
        return this;
    }

    /**
     * Get allowedSelfTradePreventionModes
     *
     * @return allowedSelfTradePreventionModes
     */
    @jakarta.annotation.Nullable
    public List<String> getAllowedSelfTradePreventionModes() {
        return allowedSelfTradePreventionModes;
    }

    public void setAllowedSelfTradePreventionModes(
            @jakarta.annotation.Nullable List<String> allowedSelfTradePreventionModes) {
        this.allowedSelfTradePreventionModes = allowedSelfTradePreventionModes;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExchangeInfoResponseSymbolsInner exchangeInfoResponseSymbolsInner =
                (ExchangeInfoResponseSymbolsInner) o;
        return Objects.equals(this.symbol, exchangeInfoResponseSymbolsInner.symbol)
                && Objects.equals(this.status, exchangeInfoResponseSymbolsInner.status)
                && Objects.equals(this.baseAsset, exchangeInfoResponseSymbolsInner.baseAsset)
                && Objects.equals(
                        this.baseAssetPrecision,
                        exchangeInfoResponseSymbolsInner.baseAssetPrecision)
                && Objects.equals(this.quoteAsset, exchangeInfoResponseSymbolsInner.quoteAsset)
                && Objects.equals(
                        this.quotePrecision, exchangeInfoResponseSymbolsInner.quotePrecision)
                && Objects.equals(
                        this.quoteAssetPrecision,
                        exchangeInfoResponseSymbolsInner.quoteAssetPrecision)
                && Objects.equals(
                        this.baseCommissionPrecision,
                        exchangeInfoResponseSymbolsInner.baseCommissionPrecision)
                && Objects.equals(
                        this.quoteCommissionPrecision,
                        exchangeInfoResponseSymbolsInner.quoteCommissionPrecision)
                && Objects.equals(this.orderTypes, exchangeInfoResponseSymbolsInner.orderTypes)
                && Objects.equals(
                        this.icebergAllowed, exchangeInfoResponseSymbolsInner.icebergAllowed)
                && Objects.equals(this.ocoAllowed, exchangeInfoResponseSymbolsInner.ocoAllowed)
                && Objects.equals(this.otoAllowed, exchangeInfoResponseSymbolsInner.otoAllowed)
                && Objects.equals(
                        this.quoteOrderQtyMarketAllowed,
                        exchangeInfoResponseSymbolsInner.quoteOrderQtyMarketAllowed)
                && Objects.equals(
                        this.allowTrailingStop, exchangeInfoResponseSymbolsInner.allowTrailingStop)
                && Objects.equals(
                        this.cancelReplaceAllowed,
                        exchangeInfoResponseSymbolsInner.cancelReplaceAllowed)
                && Objects.equals(this.allowAmend, exchangeInfoResponseSymbolsInner.allowAmend)
                && Objects.equals(
                        this.isSpotTradingAllowed,
                        exchangeInfoResponseSymbolsInner.isSpotTradingAllowed)
                && Objects.equals(
                        this.isMarginTradingAllowed,
                        exchangeInfoResponseSymbolsInner.isMarginTradingAllowed)
                && Objects.equals(this.filters, exchangeInfoResponseSymbolsInner.filters)
                && Objects.equals(this.permissions, exchangeInfoResponseSymbolsInner.permissions)
                && Objects.equals(
                        this.permissionSets, exchangeInfoResponseSymbolsInner.permissionSets)
                && Objects.equals(
                        this.defaultSelfTradePreventionMode,
                        exchangeInfoResponseSymbolsInner.defaultSelfTradePreventionMode)
                && Objects.equals(
                        this.allowedSelfTradePreventionModes,
                        exchangeInfoResponseSymbolsInner.allowedSelfTradePreventionModes);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                status,
                baseAsset,
                baseAssetPrecision,
                quoteAsset,
                quotePrecision,
                quoteAssetPrecision,
                baseCommissionPrecision,
                quoteCommissionPrecision,
                orderTypes,
                icebergAllowed,
                ocoAllowed,
                otoAllowed,
                quoteOrderQtyMarketAllowed,
                allowTrailingStop,
                cancelReplaceAllowed,
                allowAmend,
                isSpotTradingAllowed,
                isMarginTradingAllowed,
                filters,
                permissions,
                permissionSets,
                defaultSelfTradePreventionMode,
                allowedSelfTradePreventionModes);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExchangeInfoResponseSymbolsInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		baseAsset: ").append(toIndentedString(baseAsset)).append("\n");
        sb.append("		baseAssetPrecision: ")
                .append(toIndentedString(baseAssetPrecision))
                .append("\n");
        sb.append("		quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
        sb.append("		quotePrecision: ").append(toIndentedString(quotePrecision)).append("\n");
        sb.append("		quoteAssetPrecision: ")
                .append(toIndentedString(quoteAssetPrecision))
                .append("\n");
        sb.append("		baseCommissionPrecision: ")
                .append(toIndentedString(baseCommissionPrecision))
                .append("\n");
        sb.append("		quoteCommissionPrecision: ")
                .append(toIndentedString(quoteCommissionPrecision))
                .append("\n");
        sb.append("		orderTypes: ").append(toIndentedString(orderTypes)).append("\n");
        sb.append("		icebergAllowed: ").append(toIndentedString(icebergAllowed)).append("\n");
        sb.append("		ocoAllowed: ").append(toIndentedString(ocoAllowed)).append("\n");
        sb.append("		otoAllowed: ").append(toIndentedString(otoAllowed)).append("\n");
        sb.append("		quoteOrderQtyMarketAllowed: ")
                .append(toIndentedString(quoteOrderQtyMarketAllowed))
                .append("\n");
        sb.append("		allowTrailingStop: ").append(toIndentedString(allowTrailingStop)).append("\n");
        sb.append("		cancelReplaceAllowed: ")
                .append(toIndentedString(cancelReplaceAllowed))
                .append("\n");
        sb.append("		allowAmend: ").append(toIndentedString(allowAmend)).append("\n");
        sb.append("		isSpotTradingAllowed: ")
                .append(toIndentedString(isSpotTradingAllowed))
                .append("\n");
        sb.append("		isMarginTradingAllowed: ")
                .append(toIndentedString(isMarginTradingAllowed))
                .append("\n");
        sb.append("		filters: ").append(toIndentedString(filters)).append("\n");
        sb.append("		permissions: ").append(toIndentedString(permissions)).append("\n");
        sb.append("		permissionSets: ").append(toIndentedString(permissionSets)).append("\n");
        sb.append("		defaultSelfTradePreventionMode: ")
                .append(toIndentedString(defaultSelfTradePreventionMode))
                .append("\n");
        sb.append("		allowedSelfTradePreventionModes: ")
                .append(toIndentedString(allowedSelfTradePreventionModes))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object baseAssetValue = getBaseAsset();
        String baseAssetValueAsString = "";
        baseAssetValueAsString = baseAssetValue.toString();
        sb.append("baseAsset=").append(urlEncode(baseAssetValueAsString)).append("");
        Object baseAssetPrecisionValue = getBaseAssetPrecision();
        String baseAssetPrecisionValueAsString = "";
        baseAssetPrecisionValueAsString = baseAssetPrecisionValue.toString();
        sb.append("baseAssetPrecision=")
                .append(urlEncode(baseAssetPrecisionValueAsString))
                .append("");
        Object quoteAssetValue = getQuoteAsset();
        String quoteAssetValueAsString = "";
        quoteAssetValueAsString = quoteAssetValue.toString();
        sb.append("quoteAsset=").append(urlEncode(quoteAssetValueAsString)).append("");
        Object quotePrecisionValue = getQuotePrecision();
        String quotePrecisionValueAsString = "";
        quotePrecisionValueAsString = quotePrecisionValue.toString();
        sb.append("quotePrecision=").append(urlEncode(quotePrecisionValueAsString)).append("");
        Object quoteAssetPrecisionValue = getQuoteAssetPrecision();
        String quoteAssetPrecisionValueAsString = "";
        quoteAssetPrecisionValueAsString = quoteAssetPrecisionValue.toString();
        sb.append("quoteAssetPrecision=")
                .append(urlEncode(quoteAssetPrecisionValueAsString))
                .append("");
        Object baseCommissionPrecisionValue = getBaseCommissionPrecision();
        String baseCommissionPrecisionValueAsString = "";
        baseCommissionPrecisionValueAsString = baseCommissionPrecisionValue.toString();
        sb.append("baseCommissionPrecision=")
                .append(urlEncode(baseCommissionPrecisionValueAsString))
                .append("");
        Object quoteCommissionPrecisionValue = getQuoteCommissionPrecision();
        String quoteCommissionPrecisionValueAsString = "";
        quoteCommissionPrecisionValueAsString = quoteCommissionPrecisionValue.toString();
        sb.append("quoteCommissionPrecision=")
                .append(urlEncode(quoteCommissionPrecisionValueAsString))
                .append("");
        Object orderTypesValue = getOrderTypes();
        String orderTypesValueAsString = "";
        orderTypesValueAsString =
                (String)
                        ((Collection) orderTypesValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("orderTypes=").append(urlEncode(orderTypesValueAsString)).append("");
        Object icebergAllowedValue = getIcebergAllowed();
        String icebergAllowedValueAsString = "";
        icebergAllowedValueAsString = icebergAllowedValue.toString();
        sb.append("icebergAllowed=").append(urlEncode(icebergAllowedValueAsString)).append("");
        Object ocoAllowedValue = getOcoAllowed();
        String ocoAllowedValueAsString = "";
        ocoAllowedValueAsString = ocoAllowedValue.toString();
        sb.append("ocoAllowed=").append(urlEncode(ocoAllowedValueAsString)).append("");
        Object otoAllowedValue = getOtoAllowed();
        String otoAllowedValueAsString = "";
        otoAllowedValueAsString = otoAllowedValue.toString();
        sb.append("otoAllowed=").append(urlEncode(otoAllowedValueAsString)).append("");
        Object quoteOrderQtyMarketAllowedValue = getQuoteOrderQtyMarketAllowed();
        String quoteOrderQtyMarketAllowedValueAsString = "";
        quoteOrderQtyMarketAllowedValueAsString = quoteOrderQtyMarketAllowedValue.toString();
        sb.append("quoteOrderQtyMarketAllowed=")
                .append(urlEncode(quoteOrderQtyMarketAllowedValueAsString))
                .append("");
        Object allowTrailingStopValue = getAllowTrailingStop();
        String allowTrailingStopValueAsString = "";
        allowTrailingStopValueAsString = allowTrailingStopValue.toString();
        sb.append("allowTrailingStop=")
                .append(urlEncode(allowTrailingStopValueAsString))
                .append("");
        Object cancelReplaceAllowedValue = getCancelReplaceAllowed();
        String cancelReplaceAllowedValueAsString = "";
        cancelReplaceAllowedValueAsString = cancelReplaceAllowedValue.toString();
        sb.append("cancelReplaceAllowed=")
                .append(urlEncode(cancelReplaceAllowedValueAsString))
                .append("");
        Object allowAmendValue = getAllowAmend();
        String allowAmendValueAsString = "";
        allowAmendValueAsString = allowAmendValue.toString();
        sb.append("allowAmend=").append(urlEncode(allowAmendValueAsString)).append("");
        Object isSpotTradingAllowedValue = getIsSpotTradingAllowed();
        String isSpotTradingAllowedValueAsString = "";
        isSpotTradingAllowedValueAsString = isSpotTradingAllowedValue.toString();
        sb.append("isSpotTradingAllowed=")
                .append(urlEncode(isSpotTradingAllowedValueAsString))
                .append("");
        Object isMarginTradingAllowedValue = getIsMarginTradingAllowed();
        String isMarginTradingAllowedValueAsString = "";
        isMarginTradingAllowedValueAsString = isMarginTradingAllowedValue.toString();
        sb.append("isMarginTradingAllowed=")
                .append(urlEncode(isMarginTradingAllowedValueAsString))
                .append("");
        Object filtersValue = getFilters();
        String filtersValueAsString = "";
        filtersValueAsString =
                (String)
                        ((Collection) filtersValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("filters=").append(urlEncode(filtersValueAsString)).append("");
        Object permissionsValue = getPermissions();
        String permissionsValueAsString = "";
        permissionsValueAsString =
                (String)
                        ((Collection) permissionsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("permissions=").append(urlEncode(permissionsValueAsString)).append("");
        Object permissionSetsValue = getPermissionSets();
        String permissionSetsValueAsString = "";
        permissionSetsValueAsString =
                (String)
                        ((Collection) permissionSetsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("permissionSets=").append(urlEncode(permissionSetsValueAsString)).append("");
        Object defaultSelfTradePreventionModeValue = getDefaultSelfTradePreventionMode();
        String defaultSelfTradePreventionModeValueAsString = "";
        defaultSelfTradePreventionModeValueAsString =
                defaultSelfTradePreventionModeValue.toString();
        sb.append("defaultSelfTradePreventionMode=")
                .append(urlEncode(defaultSelfTradePreventionModeValueAsString))
                .append("");
        Object allowedSelfTradePreventionModesValue = getAllowedSelfTradePreventionModes();
        String allowedSelfTradePreventionModesValueAsString = "";
        allowedSelfTradePreventionModesValueAsString =
                (String)
                        ((Collection) allowedSelfTradePreventionModesValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("allowedSelfTradePreventionModes=")
                .append(urlEncode(allowedSelfTradePreventionModesValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("status");
        openapiFields.add("baseAsset");
        openapiFields.add("baseAssetPrecision");
        openapiFields.add("quoteAsset");
        openapiFields.add("quotePrecision");
        openapiFields.add("quoteAssetPrecision");
        openapiFields.add("baseCommissionPrecision");
        openapiFields.add("quoteCommissionPrecision");
        openapiFields.add("orderTypes");
        openapiFields.add("icebergAllowed");
        openapiFields.add("ocoAllowed");
        openapiFields.add("otoAllowed");
        openapiFields.add("quoteOrderQtyMarketAllowed");
        openapiFields.add("allowTrailingStop");
        openapiFields.add("cancelReplaceAllowed");
        openapiFields.add("allowAmend");
        openapiFields.add("isSpotTradingAllowed");
        openapiFields.add("isMarginTradingAllowed");
        openapiFields.add("filters");
        openapiFields.add("permissions");
        openapiFields.add("permissionSets");
        openapiFields.add("defaultSelfTradePreventionMode");
        openapiFields.add("allowedSelfTradePreventionModes");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ExchangeInfoResponseSymbolsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ExchangeInfoResponseSymbolsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ExchangeInfoResponseSymbolsInner is"
                                        + " not found in the empty JSON string",
                                ExchangeInfoResponseSymbolsInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ExchangeInfoResponseSymbolsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ExchangeInfoResponseSymbolsInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("baseAsset") != null && !jsonObj.get("baseAsset").isJsonNull())
                && !jsonObj.get("baseAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `baseAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("baseAsset").toString()));
        }
        if ((jsonObj.get("quoteAsset") != null && !jsonObj.get("quoteAsset").isJsonNull())
                && !jsonObj.get("quoteAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteAsset").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("orderTypes") != null
                && !jsonObj.get("orderTypes").isJsonNull()
                && !jsonObj.get("orderTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderTypes` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("orderTypes").toString()));
        }
        if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
            JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
            if (jsonArrayfilters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("filters").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `filters` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("filters").toString()));
                }

                // validate the optional field `filters` (array)
                for (int i = 0; i < jsonArrayfilters.size(); i++) {
                    ExchangeInfoResponseSymbolsInnerFiltersInner.validateJsonElement(
                            jsonArrayfilters.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("permissions") != null
                && !jsonObj.get("permissions").isJsonNull()
                && !jsonObj.get("permissions").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `permissions` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("permissions").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("permissionSets") != null
                && !jsonObj.get("permissionSets").isJsonNull()
                && !jsonObj.get("permissionSets").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `permissionSets` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("permissionSets").toString()));
        }
        if ((jsonObj.get("defaultSelfTradePreventionMode") != null
                        && !jsonObj.get("defaultSelfTradePreventionMode").isJsonNull())
                && !jsonObj.get("defaultSelfTradePreventionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `defaultSelfTradePreventionMode` to be a primitive"
                                    + " type in the JSON string but got `%s`",
                            jsonObj.get("defaultSelfTradePreventionMode").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("allowedSelfTradePreventionModes") != null
                && !jsonObj.get("allowedSelfTradePreventionModes").isJsonNull()
                && !jsonObj.get("allowedSelfTradePreventionModes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `allowedSelfTradePreventionModes` to be an array in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("allowedSelfTradePreventionModes").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ExchangeInfoResponseSymbolsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ExchangeInfoResponseSymbolsInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeInfoResponseSymbolsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ExchangeInfoResponseSymbolsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ExchangeInfoResponseSymbolsInner>() {
                        @Override
                        public void write(JsonWriter out, ExchangeInfoResponseSymbolsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ExchangeInfoResponseSymbolsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ExchangeInfoResponseSymbolsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ExchangeInfoResponseSymbolsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     ExchangeInfoResponseSymbolsInner
     */
    public static ExchangeInfoResponseSymbolsInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ExchangeInfoResponseSymbolsInner.class);
    }

    /**
     * Convert an instance of ExchangeInfoResponseSymbolsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
