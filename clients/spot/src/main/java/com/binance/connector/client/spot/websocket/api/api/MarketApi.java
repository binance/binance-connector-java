/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.api;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.common.websocket.adapter.ConnectionInterface;
import com.binance.connector.client.common.websocket.dtos.ApiRequestWrapperDTO;
import com.binance.connector.client.spot.websocket.api.model.AvgPriceRequest;
import com.binance.connector.client.spot.websocket.api.model.AvgPriceResponse;
import com.binance.connector.client.spot.websocket.api.model.DepthRequest;
import com.binance.connector.client.spot.websocket.api.model.DepthResponse;
import com.binance.connector.client.spot.websocket.api.model.KlinesRequest;
import com.binance.connector.client.spot.websocket.api.model.KlinesResponse;
import com.binance.connector.client.spot.websocket.api.model.Ticker24hrRequest;
import com.binance.connector.client.spot.websocket.api.model.Ticker24hrResponse;
import com.binance.connector.client.spot.websocket.api.model.TickerBookRequest;
import com.binance.connector.client.spot.websocket.api.model.TickerBookResponse;
import com.binance.connector.client.spot.websocket.api.model.TickerPriceRequest;
import com.binance.connector.client.spot.websocket.api.model.TickerPriceResponse;
import com.binance.connector.client.spot.websocket.api.model.TickerRequest;
import com.binance.connector.client.spot.websocket.api.model.TickerResponse;
import com.binance.connector.client.spot.websocket.api.model.TickerTradingDayRequest;
import com.binance.connector.client.spot.websocket.api.model.TickerTradingDayResponse;
import com.binance.connector.client.spot.websocket.api.model.TradesAggregateRequest;
import com.binance.connector.client.spot.websocket.api.model.TradesAggregateResponse;
import com.binance.connector.client.spot.websocket.api.model.TradesHistoricalRequest;
import com.binance.connector.client.spot.websocket.api.model.TradesHistoricalResponse;
import com.binance.connector.client.spot.websocket.api.model.TradesRecentRequest;
import com.binance.connector.client.spot.websocket.api.model.TradesRecentResponse;
import com.binance.connector.client.spot.websocket.api.model.UiKlinesRequest;
import com.binance.connector.client.spot.websocket.api.model.UiKlinesResponse;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class MarketApi {
    private ConnectionInterface connection;

    public MarketApi() {}

    public MarketApi(ConnectionInterface connection) {
        this.connection = connection;
    }

    /**
     * WebSocket Current average price Get current average price for a symbol. Weight: 2
     *
     * @param avgPriceRequest (required)
     * @return AvgPriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Current average price </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#current-average-price">WebSocket
     *     Current average price Documentation</a>
     */
    public CompletableFuture<AvgPriceResponse> avgPrice(AvgPriceRequest avgPriceRequest)
            throws ApiException {
        avgPriceValidateBeforeCall(avgPriceRequest);
        String methodName = "/avgPrice".substring(1);
        ApiRequestWrapperDTO<AvgPriceRequest, AvgPriceResponse> build =
                new ApiRequestWrapperDTO.Builder<AvgPriceRequest, AvgPriceResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(avgPriceRequest)
                        .responseType(AvgPriceResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void avgPriceValidateBeforeCall(AvgPriceRequest avgPriceRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<AvgPriceRequest>> violations =
                    validator.validate(avgPriceRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Order book Get current order book. Note that this request returns limited market
     * depth. If you need to continuously monitor order book updates, please consider using
     * WebSocket Streams: * &#x60;&lt;symbol&gt;@depth&lt;levels&gt;&#x60; *
     * &#x60;&lt;symbol&gt;@depth&#x60; You can use &#x60;depth&#x60; request together with
     * &#x60;&lt;symbol&gt;@depth&#x60; streams to [maintain a local order
     * book](web-socket-streams.md#how-to-manage-a-local-order-book-correctly). Weight: Adjusted
     * based on the limit: | Limit | Weight | |:---------:|:------:| | 1–100 | 5 | | 101–500 | 25| |
     * 501–1000 | 50 | | 1001–5000 | 250 |
     *
     * @param depthRequest (required)
     * @return DepthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Order book </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#order-book">WebSocket
     *     Order book Documentation</a>
     */
    public CompletableFuture<DepthResponse> depth(DepthRequest depthRequest) throws ApiException {
        depthValidateBeforeCall(depthRequest);
        String methodName = "/depth".substring(1);
        ApiRequestWrapperDTO<DepthRequest, DepthResponse> build =
                new ApiRequestWrapperDTO.Builder<DepthRequest, DepthResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(depthRequest)
                        .responseType(DepthResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void depthValidateBeforeCall(DepthRequest depthRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<DepthRequest>> violations = validator.validate(depthRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Klines Get klines (candlestick bars). Klines are uniquely identified by their open
     * &amp; close time. If you need access to real-time kline updates, please consider using
     * WebSocket Streams: * &#x60;&lt;symbol&gt;@kline_&lt;interval&gt;&#x60; If you need historical
     * kline data, please consider using
     * [data.binance.vision](https://github.com/binance/binance-public-data/#klines). Weight: 2
     *
     * @param klinesRequest (required)
     * @return KlinesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Klines </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#klines">WebSocket
     *     Klines Documentation</a>
     */
    public CompletableFuture<KlinesResponse> klines(KlinesRequest klinesRequest)
            throws ApiException {
        klinesValidateBeforeCall(klinesRequest);
        String methodName = "/klines".substring(1);
        ApiRequestWrapperDTO<KlinesRequest, KlinesResponse> build =
                new ApiRequestWrapperDTO.Builder<KlinesRequest, KlinesResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(klinesRequest)
                        .responseType(KlinesResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void klinesValidateBeforeCall(KlinesRequest klinesRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<KlinesRequest>> violations = validator.validate(klinesRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Rolling window price change statistics Get rolling window price change statistics
     * with a custom window. This request is similar to &#x60;ticker.24hr&#x60;, but statistics are
     * computed on demand using the arbitrary window you specify. Weight: Adjusted based on the
     * number of requested symbols: | Symbols | Weight | |:-------:|:------:| | 1–50 | 4 per symbol
     * | | 51–100 | 200 |
     *
     * @param tickerRequest (optional)
     * @return TickerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Rolling window price change statistics </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#rolling-window-price-change-statistics">WebSocket
     *     Rolling window price change statistics Documentation</a>
     */
    public CompletableFuture<TickerResponse> ticker(TickerRequest tickerRequest)
            throws ApiException {
        tickerValidateBeforeCall(tickerRequest);
        String methodName = "/ticker".substring(1);
        ApiRequestWrapperDTO<TickerRequest, TickerResponse> build =
                new ApiRequestWrapperDTO.Builder<TickerRequest, TickerResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(tickerRequest)
                        .responseType(TickerResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void tickerValidateBeforeCall(TickerRequest tickerRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<TickerRequest>> violations = validator.validate(tickerRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket 24hr ticker price change statistics Get 24-hour rolling window price change
     * statistics. If you need to continuously monitor trading statistics, please consider using
     * WebSocket Streams: * &#x60;&lt;symbol&gt;@ticker&#x60; or &#x60;!ticker@arr&#x60; *
     * &#x60;&lt;symbol&gt;@miniTicker&#x60; or &#x60;!miniTicker@arr&#x60; If you need different
     * window sizes, use the &#x60;ticker&#x60; request. Weight: Adjusted based on the number of
     * requested symbols: | Symbols | Weight | |:-----------:|:------:| | 1–20 | 2 | | 21–100 | 40 |
     * | 101 or more | 80 | | all symbols | 80 |
     *
     * @param ticker24hrRequest (optional)
     * @return Ticker24hrResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> 24hr ticker price change statistics </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#24hr-ticker-price-change-statistics">WebSocket
     *     24hr ticker price change statistics Documentation</a>
     */
    public CompletableFuture<Ticker24hrResponse> ticker24hr(Ticker24hrRequest ticker24hrRequest)
            throws ApiException {
        ticker24hrValidateBeforeCall(ticker24hrRequest);
        String methodName = "/ticker.24hr".substring(1);
        ApiRequestWrapperDTO<Ticker24hrRequest, Ticker24hrResponse> build =
                new ApiRequestWrapperDTO.Builder<Ticker24hrRequest, Ticker24hrResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(ticker24hrRequest)
                        .responseType(Ticker24hrResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void ticker24hrValidateBeforeCall(Ticker24hrRequest ticker24hrRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<Ticker24hrRequest>> violations =
                    validator.validate(ticker24hrRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Symbol order book ticker Get the current best price and quantity on the order book.
     * If you need access to real-time order book ticker updates, please consider using WebSocket
     * Streams: * &#x60;&lt;symbol&gt;@bookTicker&#x60; Weight: Adjusted based on the number of
     * requested symbols: | Parameter | Weight | | --------- |:------:| | &#x60;symbol&#x60; | 2 | |
     * &#x60;symbols&#x60; | 4 | | none | 4 |
     *
     * @param tickerBookRequest (optional)
     * @return TickerBookResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Symbol order book ticker </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#symbol-order-book-ticker">WebSocket
     *     Symbol order book ticker Documentation</a>
     */
    public CompletableFuture<TickerBookResponse> tickerBook(TickerBookRequest tickerBookRequest)
            throws ApiException {
        tickerBookValidateBeforeCall(tickerBookRequest);
        String methodName = "/ticker.book".substring(1);
        ApiRequestWrapperDTO<TickerBookRequest, TickerBookResponse> build =
                new ApiRequestWrapperDTO.Builder<TickerBookRequest, TickerBookResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(tickerBookRequest)
                        .responseType(TickerBookResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void tickerBookValidateBeforeCall(TickerBookRequest tickerBookRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<TickerBookRequest>> violations =
                    validator.validate(tickerBookRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Symbol price ticker Get the latest market price for a symbol. If you need access to
     * real-time price updates, please consider using WebSocket Streams: *
     * &#x60;&lt;symbol&gt;@aggTrade&#x60; * &#x60;&lt;symbol&gt;@trade&#x60; Weight: Adjusted based
     * on the number of requested symbols: | Parameter | Weight | | --------- |:------:| |
     * &#x60;symbol&#x60; | 2 | | &#x60;symbols&#x60; | 4 | | none | 4 |
     *
     * @param tickerPriceRequest (optional)
     * @return TickerPriceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Symbol price ticker </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#symbol-price-ticker">WebSocket
     *     Symbol price ticker Documentation</a>
     */
    public CompletableFuture<TickerPriceResponse> tickerPrice(TickerPriceRequest tickerPriceRequest)
            throws ApiException {
        tickerPriceValidateBeforeCall(tickerPriceRequest);
        String methodName = "/ticker.price".substring(1);
        ApiRequestWrapperDTO<TickerPriceRequest, TickerPriceResponse> build =
                new ApiRequestWrapperDTO.Builder<TickerPriceRequest, TickerPriceResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(tickerPriceRequest)
                        .responseType(TickerPriceResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void tickerPriceValidateBeforeCall(TickerPriceRequest tickerPriceRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<TickerPriceRequest>> violations =
                    validator.validate(tickerPriceRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Trading Day Ticker Price change statistics for a trading day. Weight: 4 for each
     * requested &lt;tt&gt;symbol&lt;/tt&gt;. &lt;br/&gt;&lt;br/&gt; The weight for this request
     * will cap at 200 once the number of &#x60;symbols&#x60; in the request is more than 50.
     *
     * @param tickerTradingDayRequest (optional)
     * @return TickerTradingDayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Trading Day Ticker </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#trading-day-ticker">WebSocket
     *     Trading Day Ticker Documentation</a>
     */
    public CompletableFuture<TickerTradingDayResponse> tickerTradingDay(
            TickerTradingDayRequest tickerTradingDayRequest) throws ApiException {
        tickerTradingDayValidateBeforeCall(tickerTradingDayRequest);
        String methodName = "/ticker.tradingDay".substring(1);
        ApiRequestWrapperDTO<TickerTradingDayRequest, TickerTradingDayResponse> build =
                new ApiRequestWrapperDTO.Builder<
                                TickerTradingDayRequest, TickerTradingDayResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(tickerTradingDayRequest)
                        .responseType(TickerTradingDayResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void tickerTradingDayValidateBeforeCall(TickerTradingDayRequest tickerTradingDayRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<TickerTradingDayRequest>> violations =
                    validator.validate(tickerTradingDayRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Aggregate trades Get aggregate trades. An *aggregate trade* (aggtrade) represents
     * one or more individual trades. Trades that fill at the same time, from the same taker order,
     * with the same price – those trades are collected into an aggregate trade with total quantity
     * of the individual trades. If you need access to real-time trading activity, please consider
     * using WebSocket Streams: * &#x60;&lt;symbol&gt;@aggTrade&#x60; If you need historical
     * aggregate trade data, please consider using
     * [data.binance.vision](https://github.com/binance/binance-public-data/#aggtrades). Weight: 4
     *
     * @param tradesAggregateRequest (required)
     * @return TradesAggregateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Aggregate trades </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#aggregate-trades">WebSocket
     *     Aggregate trades Documentation</a>
     */
    public CompletableFuture<TradesAggregateResponse> tradesAggregate(
            TradesAggregateRequest tradesAggregateRequest) throws ApiException {
        tradesAggregateValidateBeforeCall(tradesAggregateRequest);
        String methodName = "/trades.aggregate".substring(1);
        ApiRequestWrapperDTO<TradesAggregateRequest, TradesAggregateResponse> build =
                new ApiRequestWrapperDTO.Builder<TradesAggregateRequest, TradesAggregateResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(tradesAggregateRequest)
                        .responseType(TradesAggregateResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void tradesAggregateValidateBeforeCall(TradesAggregateRequest tradesAggregateRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<TradesAggregateRequest>> violations =
                    validator.validate(tradesAggregateRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Historical trades Get historical trades. Weight: 25
     *
     * @param tradesHistoricalRequest (required)
     * @return TradesHistoricalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Historical trades </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#historical-trades">WebSocket
     *     Historical trades Documentation</a>
     */
    public CompletableFuture<TradesHistoricalResponse> tradesHistorical(
            TradesHistoricalRequest tradesHistoricalRequest) throws ApiException {
        tradesHistoricalValidateBeforeCall(tradesHistoricalRequest);
        String methodName = "/trades.historical".substring(1);
        ApiRequestWrapperDTO<TradesHistoricalRequest, TradesHistoricalResponse> build =
                new ApiRequestWrapperDTO.Builder<
                                TradesHistoricalRequest, TradesHistoricalResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(tradesHistoricalRequest)
                        .responseType(TradesHistoricalResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void tradesHistoricalValidateBeforeCall(TradesHistoricalRequest tradesHistoricalRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<TradesHistoricalRequest>> violations =
                    validator.validate(tradesHistoricalRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket Recent trades Get recent trades. If you need access to real-time trading activity,
     * please consider using WebSocket Streams: * &#x60;&lt;symbol&gt;@trade&#x60; Weight: 25
     *
     * @param tradesRecentRequest (required)
     * @return TradesRecentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Recent trades </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#recent-trades">WebSocket
     *     Recent trades Documentation</a>
     */
    public CompletableFuture<TradesRecentResponse> tradesRecent(
            TradesRecentRequest tradesRecentRequest) throws ApiException {
        tradesRecentValidateBeforeCall(tradesRecentRequest);
        String methodName = "/trades.recent".substring(1);
        ApiRequestWrapperDTO<TradesRecentRequest, TradesRecentResponse> build =
                new ApiRequestWrapperDTO.Builder<TradesRecentRequest, TradesRecentResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(tradesRecentRequest)
                        .responseType(TradesRecentResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void tradesRecentValidateBeforeCall(TradesRecentRequest tradesRecentRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<TradesRecentRequest>> violations =
                    validator.validate(tradesRecentRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * WebSocket UI Klines Get klines (candlestick bars) optimized for presentation. This request is
     * similar to &#x60;klines&#x60;, having the same parameters and response. &#x60;uiKlines&#x60;
     * return modified kline data, optimized for presentation of candlestick charts. Weight: 2
     *
     * @param uiKlinesRequest (required)
     * @return UiKlinesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> UI Klines </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/binance-spot-api-docs/websocket-api/market-data-requests#ui-klines">WebSocket
     *     UI Klines Documentation</a>
     */
    public CompletableFuture<UiKlinesResponse> uiKlines(UiKlinesRequest uiKlinesRequest)
            throws ApiException {
        uiKlinesValidateBeforeCall(uiKlinesRequest);
        String methodName = "/uiKlines".substring(1);
        ApiRequestWrapperDTO<UiKlinesRequest, UiKlinesResponse> build =
                new ApiRequestWrapperDTO.Builder<UiKlinesRequest, UiKlinesResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(uiKlinesRequest)
                        .responseType(UiKlinesResponse.class)
                        .signed(false)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void uiKlinesValidateBeforeCall(UiKlinesRequest uiKlinesRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<UiKlinesRequest>> violations =
                    validator.validate(uiKlinesRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    public String getRequestID() {
        return UUID.randomUUID().toString();
    }
}
