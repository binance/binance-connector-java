/*
 * Binance Spot WebSocket API
 * OpenAPI Specifications for the Binance Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.spot.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.spot.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderAmendmentsRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderAmendmentsRequest extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nonnull
    private Long orderId;

    public static final String SERIALIZED_NAME_FROM_EXECUTION_ID = "fromExecutionId";

    @SerializedName(SERIALIZED_NAME_FROM_EXECUTION_ID)
    @jakarta.annotation.Nullable
    private Long fromExecutionId;

    public static final String SERIALIZED_NAME_LIMIT = "limit";

    @SerializedName(SERIALIZED_NAME_LIMIT)
    @jakarta.annotation.Nullable
    private Integer limit;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public OrderAmendmentsRequest() {}

    public OrderAmendmentsRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public OrderAmendmentsRequest orderId(@jakarta.annotation.Nonnull Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nonnull Long orderId) {
        this.orderId = orderId;
    }

    public OrderAmendmentsRequest fromExecutionId(
            @jakarta.annotation.Nullable Long fromExecutionId) {
        this.fromExecutionId = fromExecutionId;
        return this;
    }

    /**
     * Get fromExecutionId
     *
     * @return fromExecutionId
     */
    @jakarta.annotation.Nullable
    public Long getFromExecutionId() {
        return fromExecutionId;
    }

    public void setFromExecutionId(@jakarta.annotation.Nullable Long fromExecutionId) {
        this.fromExecutionId = fromExecutionId;
    }

    public OrderAmendmentsRequest limit(@jakarta.annotation.Nullable Integer limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get limit
     *
     * @return limit
     */
    @jakarta.annotation.Nullable
    public Integer getLimit() {
        return limit;
    }

    public void setLimit(@jakarta.annotation.Nullable Integer limit) {
        this.limit = limit;
    }

    public OrderAmendmentsRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderAmendmentsRequest orderAmendmentsRequest = (OrderAmendmentsRequest) o;
        return Objects.equals(this.symbol, orderAmendmentsRequest.symbol)
                && Objects.equals(this.orderId, orderAmendmentsRequest.orderId)
                && Objects.equals(this.fromExecutionId, orderAmendmentsRequest.fromExecutionId)
                && Objects.equals(this.limit, orderAmendmentsRequest.limit)
                && Objects.equals(this.recvWindow, orderAmendmentsRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbol, orderId, fromExecutionId, limit, recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderAmendmentsRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		fromExecutionId: ").append(toIndentedString(fromExecutionId)).append("\n");
        sb.append("		limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        Long orderIdValue = getOrderId();
        if (orderIdValue != null) {
            String orderIdValueAsString = orderIdValue.toString();
            valMap.put("orderId", orderIdValueAsString);
        }
        Long fromExecutionIdValue = getFromExecutionId();
        if (fromExecutionIdValue != null) {
            String fromExecutionIdValueAsString = fromExecutionIdValue.toString();
            valMap.put("fromExecutionId", fromExecutionIdValueAsString);
        }
        Integer limitValue = getLimit();
        if (limitValue != null) {
            String limitValueAsString = limitValue.toString();
            valMap.put("limit", limitValueAsString);
        }
        Long recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            String recvWindowValueAsString = recvWindowValue.toString();
            valMap.put("recvWindow", recvWindowValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object orderIdValue = getOrderId();
        if (orderIdValue != null) {
            valMap.put("orderId", orderIdValue);
        }
        Object fromExecutionIdValue = getFromExecutionId();
        if (fromExecutionIdValue != null) {
            valMap.put("fromExecutionId", fromExecutionIdValue);
        }
        Object limitValue = getLimit();
        if (limitValue != null) {
            valMap.put("limit", limitValue);
        }
        Object recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            valMap.put("recvWindow", recvWindowValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("orderId");
        openapiFields.add("fromExecutionId");
        openapiFields.add("limit");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("orderId");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderAmendmentsRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderAmendmentsRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderAmendmentsRequest is not found in"
                                        + " the empty JSON string",
                                OrderAmendmentsRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderAmendmentsRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderAmendmentsRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : OrderAmendmentsRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderAmendmentsRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderAmendmentsRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderAmendmentsRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderAmendmentsRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderAmendmentsRequest>() {
                        @Override
                        public void write(JsonWriter out, OrderAmendmentsRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderAmendmentsRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderAmendmentsRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderAmendmentsRequest
     * @throws IOException if the JSON string is invalid with respect to OrderAmendmentsRequest
     */
    public static OrderAmendmentsRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderAmendmentsRequest.class);
    }

    /**
     * Convert an instance of OrderAmendmentsRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
