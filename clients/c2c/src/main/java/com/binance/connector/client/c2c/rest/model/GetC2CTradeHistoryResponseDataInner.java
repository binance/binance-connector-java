/*
 * Binance C2C REST API
 * OpenAPI Specification for the Binance C2C REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.c2c.rest.model;

import com.binance.connector.client.c2c.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetC2CTradeHistoryResponseDataInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetC2CTradeHistoryResponseDataInner {
    public static final String SERIALIZED_NAME_ORDER_NUMBER = "orderNumber";

    @SerializedName(SERIALIZED_NAME_ORDER_NUMBER)
    @jakarta.annotation.Nullable
    private String orderNumber;

    public static final String SERIALIZED_NAME_ADV_NO = "advNo";

    @SerializedName(SERIALIZED_NAME_ADV_NO)
    @jakarta.annotation.Nullable
    private String advNo;

    public static final String SERIALIZED_NAME_TRADE_TYPE = "tradeType";

    @SerializedName(SERIALIZED_NAME_TRADE_TYPE)
    @jakarta.annotation.Nullable
    private String tradeType;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_FIAT = "fiat";

    @SerializedName(SERIALIZED_NAME_FIAT)
    @jakarta.annotation.Nullable
    private String fiat;

    public static final String SERIALIZED_NAME_FIAT_SYMBOL = "fiatSymbol";

    @SerializedName(SERIALIZED_NAME_FIAT_SYMBOL)
    @jakarta.annotation.Nullable
    private String fiatSymbol;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_TOTAL_PRICE = "totalPrice";

    @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
    @jakarta.annotation.Nullable
    private String totalPrice;

    public static final String SERIALIZED_NAME_UNIT_PRICE = "unitPrice";

    @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
    @jakarta.annotation.Nullable
    private String unitPrice;

    public static final String SERIALIZED_NAME_ORDER_STATUS = "orderStatus";

    @SerializedName(SERIALIZED_NAME_ORDER_STATUS)
    @jakarta.annotation.Nullable
    private String orderStatus;

    public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";

    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    @jakarta.annotation.Nullable
    private Long createTime;

    public static final String SERIALIZED_NAME_COMMISSION = "commission";

    @SerializedName(SERIALIZED_NAME_COMMISSION)
    @jakarta.annotation.Nullable
    private String commission;

    public static final String SERIALIZED_NAME_COUNTER_PART_NICK_NAME = "counterPartNickName";

    @SerializedName(SERIALIZED_NAME_COUNTER_PART_NICK_NAME)
    @jakarta.annotation.Nullable
    private String counterPartNickName;

    public static final String SERIALIZED_NAME_ADVERTISEMENT_ROLE = "advertisementRole";

    @SerializedName(SERIALIZED_NAME_ADVERTISEMENT_ROLE)
    @jakarta.annotation.Nullable
    private String advertisementRole;

    public GetC2CTradeHistoryResponseDataInner() {}

    public GetC2CTradeHistoryResponseDataInner orderNumber(
            @jakarta.annotation.Nullable String orderNumber) {
        this.orderNumber = orderNumber;
        return this;
    }

    /**
     * Get orderNumber
     *
     * @return orderNumber
     */
    @jakarta.annotation.Nullable
    public String getOrderNumber() {
        return orderNumber;
    }

    public void setOrderNumber(@jakarta.annotation.Nullable String orderNumber) {
        this.orderNumber = orderNumber;
    }

    public GetC2CTradeHistoryResponseDataInner advNo(@jakarta.annotation.Nullable String advNo) {
        this.advNo = advNo;
        return this;
    }

    /**
     * Get advNo
     *
     * @return advNo
     */
    @jakarta.annotation.Nullable
    public String getAdvNo() {
        return advNo;
    }

    public void setAdvNo(@jakarta.annotation.Nullable String advNo) {
        this.advNo = advNo;
    }

    public GetC2CTradeHistoryResponseDataInner tradeType(
            @jakarta.annotation.Nullable String tradeType) {
        this.tradeType = tradeType;
        return this;
    }

    /**
     * Get tradeType
     *
     * @return tradeType
     */
    @jakarta.annotation.Nullable
    public String getTradeType() {
        return tradeType;
    }

    public void setTradeType(@jakarta.annotation.Nullable String tradeType) {
        this.tradeType = tradeType;
    }

    public GetC2CTradeHistoryResponseDataInner asset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public GetC2CTradeHistoryResponseDataInner fiat(@jakarta.annotation.Nullable String fiat) {
        this.fiat = fiat;
        return this;
    }

    /**
     * Get fiat
     *
     * @return fiat
     */
    @jakarta.annotation.Nullable
    public String getFiat() {
        return fiat;
    }

    public void setFiat(@jakarta.annotation.Nullable String fiat) {
        this.fiat = fiat;
    }

    public GetC2CTradeHistoryResponseDataInner fiatSymbol(
            @jakarta.annotation.Nullable String fiatSymbol) {
        this.fiatSymbol = fiatSymbol;
        return this;
    }

    /**
     * Get fiatSymbol
     *
     * @return fiatSymbol
     */
    @jakarta.annotation.Nullable
    public String getFiatSymbol() {
        return fiatSymbol;
    }

    public void setFiatSymbol(@jakarta.annotation.Nullable String fiatSymbol) {
        this.fiatSymbol = fiatSymbol;
    }

    public GetC2CTradeHistoryResponseDataInner amount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public GetC2CTradeHistoryResponseDataInner totalPrice(
            @jakarta.annotation.Nullable String totalPrice) {
        this.totalPrice = totalPrice;
        return this;
    }

    /**
     * Get totalPrice
     *
     * @return totalPrice
     */
    @jakarta.annotation.Nullable
    public String getTotalPrice() {
        return totalPrice;
    }

    public void setTotalPrice(@jakarta.annotation.Nullable String totalPrice) {
        this.totalPrice = totalPrice;
    }

    public GetC2CTradeHistoryResponseDataInner unitPrice(
            @jakarta.annotation.Nullable String unitPrice) {
        this.unitPrice = unitPrice;
        return this;
    }

    /**
     * Get unitPrice
     *
     * @return unitPrice
     */
    @jakarta.annotation.Nullable
    public String getUnitPrice() {
        return unitPrice;
    }

    public void setUnitPrice(@jakarta.annotation.Nullable String unitPrice) {
        this.unitPrice = unitPrice;
    }

    public GetC2CTradeHistoryResponseDataInner orderStatus(
            @jakarta.annotation.Nullable String orderStatus) {
        this.orderStatus = orderStatus;
        return this;
    }

    /**
     * Get orderStatus
     *
     * @return orderStatus
     */
    @jakarta.annotation.Nullable
    public String getOrderStatus() {
        return orderStatus;
    }

    public void setOrderStatus(@jakarta.annotation.Nullable String orderStatus) {
        this.orderStatus = orderStatus;
    }

    public GetC2CTradeHistoryResponseDataInner createTime(
            @jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get createTime
     *
     * @return createTime
     */
    @jakarta.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(@jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
    }

    public GetC2CTradeHistoryResponseDataInner commission(
            @jakarta.annotation.Nullable String commission) {
        this.commission = commission;
        return this;
    }

    /**
     * Get commission
     *
     * @return commission
     */
    @jakarta.annotation.Nullable
    public String getCommission() {
        return commission;
    }

    public void setCommission(@jakarta.annotation.Nullable String commission) {
        this.commission = commission;
    }

    public GetC2CTradeHistoryResponseDataInner counterPartNickName(
            @jakarta.annotation.Nullable String counterPartNickName) {
        this.counterPartNickName = counterPartNickName;
        return this;
    }

    /**
     * Get counterPartNickName
     *
     * @return counterPartNickName
     */
    @jakarta.annotation.Nullable
    public String getCounterPartNickName() {
        return counterPartNickName;
    }

    public void setCounterPartNickName(@jakarta.annotation.Nullable String counterPartNickName) {
        this.counterPartNickName = counterPartNickName;
    }

    public GetC2CTradeHistoryResponseDataInner advertisementRole(
            @jakarta.annotation.Nullable String advertisementRole) {
        this.advertisementRole = advertisementRole;
        return this;
    }

    /**
     * Get advertisementRole
     *
     * @return advertisementRole
     */
    @jakarta.annotation.Nullable
    public String getAdvertisementRole() {
        return advertisementRole;
    }

    public void setAdvertisementRole(@jakarta.annotation.Nullable String advertisementRole) {
        this.advertisementRole = advertisementRole;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetC2CTradeHistoryResponseDataInner getC2CTradeHistoryResponseDataInner =
                (GetC2CTradeHistoryResponseDataInner) o;
        return Objects.equals(this.orderNumber, getC2CTradeHistoryResponseDataInner.orderNumber)
                && Objects.equals(this.advNo, getC2CTradeHistoryResponseDataInner.advNo)
                && Objects.equals(this.tradeType, getC2CTradeHistoryResponseDataInner.tradeType)
                && Objects.equals(this.asset, getC2CTradeHistoryResponseDataInner.asset)
                && Objects.equals(this.fiat, getC2CTradeHistoryResponseDataInner.fiat)
                && Objects.equals(this.fiatSymbol, getC2CTradeHistoryResponseDataInner.fiatSymbol)
                && Objects.equals(this.amount, getC2CTradeHistoryResponseDataInner.amount)
                && Objects.equals(this.totalPrice, getC2CTradeHistoryResponseDataInner.totalPrice)
                && Objects.equals(this.unitPrice, getC2CTradeHistoryResponseDataInner.unitPrice)
                && Objects.equals(this.orderStatus, getC2CTradeHistoryResponseDataInner.orderStatus)
                && Objects.equals(this.createTime, getC2CTradeHistoryResponseDataInner.createTime)
                && Objects.equals(this.commission, getC2CTradeHistoryResponseDataInner.commission)
                && Objects.equals(
                        this.counterPartNickName,
                        getC2CTradeHistoryResponseDataInner.counterPartNickName)
                && Objects.equals(
                        this.advertisementRole,
                        getC2CTradeHistoryResponseDataInner.advertisementRole);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                orderNumber,
                advNo,
                tradeType,
                asset,
                fiat,
                fiatSymbol,
                amount,
                totalPrice,
                unitPrice,
                orderStatus,
                createTime,
                commission,
                counterPartNickName,
                advertisementRole);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetC2CTradeHistoryResponseDataInner {\n");
        sb.append("		orderNumber: ").append(toIndentedString(orderNumber)).append("\n");
        sb.append("		advNo: ").append(toIndentedString(advNo)).append("\n");
        sb.append("		tradeType: ").append(toIndentedString(tradeType)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		fiat: ").append(toIndentedString(fiat)).append("\n");
        sb.append("		fiatSymbol: ").append(toIndentedString(fiatSymbol)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
        sb.append("		unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
        sb.append("		orderStatus: ").append(toIndentedString(orderStatus)).append("\n");
        sb.append("		createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("		commission: ").append(toIndentedString(commission)).append("\n");
        sb.append("		counterPartNickName: ")
                .append(toIndentedString(counterPartNickName))
                .append("\n");
        sb.append("		advertisementRole: ").append(toIndentedString(advertisementRole)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object orderNumberValue = getOrderNumber();
        String orderNumberValueAsString = "";
        orderNumberValueAsString = orderNumberValue.toString();
        sb.append("orderNumber=").append(urlEncode(orderNumberValueAsString)).append("");
        Object advNoValue = getAdvNo();
        String advNoValueAsString = "";
        advNoValueAsString = advNoValue.toString();
        sb.append("advNo=").append(urlEncode(advNoValueAsString)).append("");
        Object tradeTypeValue = getTradeType();
        String tradeTypeValueAsString = "";
        tradeTypeValueAsString = tradeTypeValue.toString();
        sb.append("tradeType=").append(urlEncode(tradeTypeValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object fiatValue = getFiat();
        String fiatValueAsString = "";
        fiatValueAsString = fiatValue.toString();
        sb.append("fiat=").append(urlEncode(fiatValueAsString)).append("");
        Object fiatSymbolValue = getFiatSymbol();
        String fiatSymbolValueAsString = "";
        fiatSymbolValueAsString = fiatSymbolValue.toString();
        sb.append("fiatSymbol=").append(urlEncode(fiatSymbolValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object totalPriceValue = getTotalPrice();
        String totalPriceValueAsString = "";
        totalPriceValueAsString = totalPriceValue.toString();
        sb.append("totalPrice=").append(urlEncode(totalPriceValueAsString)).append("");
        Object unitPriceValue = getUnitPrice();
        String unitPriceValueAsString = "";
        unitPriceValueAsString = unitPriceValue.toString();
        sb.append("unitPrice=").append(urlEncode(unitPriceValueAsString)).append("");
        Object orderStatusValue = getOrderStatus();
        String orderStatusValueAsString = "";
        orderStatusValueAsString = orderStatusValue.toString();
        sb.append("orderStatus=").append(urlEncode(orderStatusValueAsString)).append("");
        Object createTimeValue = getCreateTime();
        String createTimeValueAsString = "";
        createTimeValueAsString = createTimeValue.toString();
        sb.append("createTime=").append(urlEncode(createTimeValueAsString)).append("");
        Object commissionValue = getCommission();
        String commissionValueAsString = "";
        commissionValueAsString = commissionValue.toString();
        sb.append("commission=").append(urlEncode(commissionValueAsString)).append("");
        Object counterPartNickNameValue = getCounterPartNickName();
        String counterPartNickNameValueAsString = "";
        counterPartNickNameValueAsString = counterPartNickNameValue.toString();
        sb.append("counterPartNickName=")
                .append(urlEncode(counterPartNickNameValueAsString))
                .append("");
        Object advertisementRoleValue = getAdvertisementRole();
        String advertisementRoleValueAsString = "";
        advertisementRoleValueAsString = advertisementRoleValue.toString();
        sb.append("advertisementRole=")
                .append(urlEncode(advertisementRoleValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderNumber");
        openapiFields.add("advNo");
        openapiFields.add("tradeType");
        openapiFields.add("asset");
        openapiFields.add("fiat");
        openapiFields.add("fiatSymbol");
        openapiFields.add("amount");
        openapiFields.add("totalPrice");
        openapiFields.add("unitPrice");
        openapiFields.add("orderStatus");
        openapiFields.add("createTime");
        openapiFields.add("commission");
        openapiFields.add("counterPartNickName");
        openapiFields.add("advertisementRole");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetC2CTradeHistoryResponseDataInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetC2CTradeHistoryResponseDataInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetC2CTradeHistoryResponseDataInner is"
                                        + " not found in the empty JSON string",
                                GetC2CTradeHistoryResponseDataInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetC2CTradeHistoryResponseDataInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetC2CTradeHistoryResponseDataInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("orderNumber") != null && !jsonObj.get("orderNumber").isJsonNull())
                && !jsonObj.get("orderNumber").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderNumber` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("orderNumber").toString()));
        }
        if ((jsonObj.get("advNo") != null && !jsonObj.get("advNo").isJsonNull())
                && !jsonObj.get("advNo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `advNo` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("advNo").toString()));
        }
        if ((jsonObj.get("tradeType") != null && !jsonObj.get("tradeType").isJsonNull())
                && !jsonObj.get("tradeType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `tradeType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("tradeType").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("fiat") != null && !jsonObj.get("fiat").isJsonNull())
                && !jsonObj.get("fiat").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fiat` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("fiat").toString()));
        }
        if ((jsonObj.get("fiatSymbol") != null && !jsonObj.get("fiatSymbol").isJsonNull())
                && !jsonObj.get("fiatSymbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fiatSymbol` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fiatSymbol").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("totalPrice") != null && !jsonObj.get("totalPrice").isJsonNull())
                && !jsonObj.get("totalPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("totalPrice").toString()));
        }
        if ((jsonObj.get("unitPrice") != null && !jsonObj.get("unitPrice").isJsonNull())
                && !jsonObj.get("unitPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `unitPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("unitPrice").toString()));
        }
        if ((jsonObj.get("orderStatus") != null && !jsonObj.get("orderStatus").isJsonNull())
                && !jsonObj.get("orderStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("orderStatus").toString()));
        }
        if ((jsonObj.get("commission") != null && !jsonObj.get("commission").isJsonNull())
                && !jsonObj.get("commission").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `commission` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("commission").toString()));
        }
        if ((jsonObj.get("counterPartNickName") != null
                        && !jsonObj.get("counterPartNickName").isJsonNull())
                && !jsonObj.get("counterPartNickName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `counterPartNickName` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("counterPartNickName").toString()));
        }
        if ((jsonObj.get("advertisementRole") != null
                        && !jsonObj.get("advertisementRole").isJsonNull())
                && !jsonObj.get("advertisementRole").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `advertisementRole` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("advertisementRole").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetC2CTradeHistoryResponseDataInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetC2CTradeHistoryResponseDataInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetC2CTradeHistoryResponseDataInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetC2CTradeHistoryResponseDataInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetC2CTradeHistoryResponseDataInner>() {
                        @Override
                        public void write(JsonWriter out, GetC2CTradeHistoryResponseDataInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetC2CTradeHistoryResponseDataInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetC2CTradeHistoryResponseDataInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetC2CTradeHistoryResponseDataInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetC2CTradeHistoryResponseDataInner
     */
    public static GetC2CTradeHistoryResponseDataInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetC2CTradeHistoryResponseDataInner.class);
    }

    /**
     * Convert an instance of GetC2CTradeHistoryResponseDataInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
