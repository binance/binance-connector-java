/*
 * Binance Convert REST API
 * OpenAPI Specification for the Binance Convert REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.convert.rest.model;

import com.binance.connector.client.convert.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetConvertTradeHistoryResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetConvertTradeHistoryResponse {
    public static final String SERIALIZED_NAME_LIST = "list";

    @SerializedName(SERIALIZED_NAME_LIST)
    @jakarta.annotation.Nullable
    private List<@Valid GetConvertTradeHistoryResponseListInner> _list;

    public static final String SERIALIZED_NAME_START_TIME = "startTime";

    @SerializedName(SERIALIZED_NAME_START_TIME)
    @jakarta.annotation.Nullable
    private Long startTime;

    public static final String SERIALIZED_NAME_END_TIME = "endTime";

    @SerializedName(SERIALIZED_NAME_END_TIME)
    @jakarta.annotation.Nullable
    private Long endTime;

    public static final String SERIALIZED_NAME_LIMIT = "limit";

    @SerializedName(SERIALIZED_NAME_LIMIT)
    @jakarta.annotation.Nullable
    private Long limit;

    public static final String SERIALIZED_NAME_MORE_DATA = "moreData";

    @SerializedName(SERIALIZED_NAME_MORE_DATA)
    @jakarta.annotation.Nullable
    private Boolean moreData;

    public GetConvertTradeHistoryResponse() {}

    public GetConvertTradeHistoryResponse _list(
            @jakarta.annotation.Nullable
                    List<@Valid GetConvertTradeHistoryResponseListInner> _list) {
        this._list = _list;
        return this;
    }

    public GetConvertTradeHistoryResponse addListItem(
            GetConvertTradeHistoryResponseListInner _listItem) {
        if (this._list == null) {
            this._list = new ArrayList<>();
        }
        this._list.add(_listItem);
        return this;
    }

    /**
     * Get _list
     *
     * @return _list
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid GetConvertTradeHistoryResponseListInner> getList() {
        return _list;
    }

    public void setList(
            @jakarta.annotation.Nullable
                    List<@Valid GetConvertTradeHistoryResponseListInner> _list) {
        this._list = _list;
    }

    public GetConvertTradeHistoryResponse startTime(@jakarta.annotation.Nullable Long startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get startTime
     *
     * @return startTime
     */
    @jakarta.annotation.Nullable
    public Long getStartTime() {
        return startTime;
    }

    public void setStartTime(@jakarta.annotation.Nullable Long startTime) {
        this.startTime = startTime;
    }

    public GetConvertTradeHistoryResponse endTime(@jakarta.annotation.Nullable Long endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get endTime
     *
     * @return endTime
     */
    @jakarta.annotation.Nullable
    public Long getEndTime() {
        return endTime;
    }

    public void setEndTime(@jakarta.annotation.Nullable Long endTime) {
        this.endTime = endTime;
    }

    public GetConvertTradeHistoryResponse limit(@jakarta.annotation.Nullable Long limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get limit
     *
     * @return limit
     */
    @jakarta.annotation.Nullable
    public Long getLimit() {
        return limit;
    }

    public void setLimit(@jakarta.annotation.Nullable Long limit) {
        this.limit = limit;
    }

    public GetConvertTradeHistoryResponse moreData(@jakarta.annotation.Nullable Boolean moreData) {
        this.moreData = moreData;
        return this;
    }

    /**
     * Get moreData
     *
     * @return moreData
     */
    @jakarta.annotation.Nullable
    public Boolean getMoreData() {
        return moreData;
    }

    public void setMoreData(@jakarta.annotation.Nullable Boolean moreData) {
        this.moreData = moreData;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetConvertTradeHistoryResponse getConvertTradeHistoryResponse =
                (GetConvertTradeHistoryResponse) o;
        return Objects.equals(this._list, getConvertTradeHistoryResponse._list)
                && Objects.equals(this.startTime, getConvertTradeHistoryResponse.startTime)
                && Objects.equals(this.endTime, getConvertTradeHistoryResponse.endTime)
                && Objects.equals(this.limit, getConvertTradeHistoryResponse.limit)
                && Objects.equals(this.moreData, getConvertTradeHistoryResponse.moreData);
    }

    @Override
    public int hashCode() {
        return Objects.hash(_list, startTime, endTime, limit, moreData);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetConvertTradeHistoryResponse {\n");
        sb.append("		_list: ").append(toIndentedString(_list)).append("\n");
        sb.append("		startTime: ").append(toIndentedString(startTime)).append("\n");
        sb.append("		endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("		limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("		moreData: ").append(toIndentedString(moreData)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object _listValue = getList();
        String _listValueAsString = "";
        _listValueAsString =
                (String)
                        ((Collection) _listValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("_list=").append(urlEncode(_listValueAsString)).append("");
        Object startTimeValue = getStartTime();
        String startTimeValueAsString = "";
        startTimeValueAsString = startTimeValue.toString();
        sb.append("startTime=").append(urlEncode(startTimeValueAsString)).append("");
        Object endTimeValue = getEndTime();
        String endTimeValueAsString = "";
        endTimeValueAsString = endTimeValue.toString();
        sb.append("endTime=").append(urlEncode(endTimeValueAsString)).append("");
        Object limitValue = getLimit();
        String limitValueAsString = "";
        limitValueAsString = limitValue.toString();
        sb.append("limit=").append(urlEncode(limitValueAsString)).append("");
        Object moreDataValue = getMoreData();
        String moreDataValueAsString = "";
        moreDataValueAsString = moreDataValue.toString();
        sb.append("moreData=").append(urlEncode(moreDataValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("list");
        openapiFields.add("startTime");
        openapiFields.add("endTime");
        openapiFields.add("limit");
        openapiFields.add("moreData");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetConvertTradeHistoryResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetConvertTradeHistoryResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetConvertTradeHistoryResponse is not"
                                        + " found in the empty JSON string",
                                GetConvertTradeHistoryResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetConvertTradeHistoryResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetConvertTradeHistoryResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("list") != null && !jsonObj.get("list").isJsonNull()) {
            JsonArray jsonArray_list = jsonObj.getAsJsonArray("list");
            if (jsonArray_list != null) {
                // ensure the json data is an array
                if (!jsonObj.get("list").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `list` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("list").toString()));
                }

                // validate the optional field `list` (array)
                for (int i = 0; i < jsonArray_list.size(); i++) {
                    GetConvertTradeHistoryResponseListInner.validateJsonElement(
                            jsonArray_list.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetConvertTradeHistoryResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetConvertTradeHistoryResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetConvertTradeHistoryResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetConvertTradeHistoryResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetConvertTradeHistoryResponse>() {
                        @Override
                        public void write(JsonWriter out, GetConvertTradeHistoryResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetConvertTradeHistoryResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetConvertTradeHistoryResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetConvertTradeHistoryResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     GetConvertTradeHistoryResponse
     */
    public static GetConvertTradeHistoryResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetConvertTradeHistoryResponse.class);
    }

    /**
     * Convert an instance of GetConvertTradeHistoryResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
