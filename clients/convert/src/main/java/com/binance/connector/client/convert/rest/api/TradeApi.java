/*
 * Binance Convert REST API
 * OpenAPI Specification for the Binance Convert REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.convert.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.convert.rest.model.AcceptQuoteRequest;
import com.binance.connector.client.convert.rest.model.AcceptQuoteResponse;
import com.binance.connector.client.convert.rest.model.CancelLimitOrderRequest;
import com.binance.connector.client.convert.rest.model.CancelLimitOrderResponse;
import com.binance.connector.client.convert.rest.model.GetConvertTradeHistoryResponse;
import com.binance.connector.client.convert.rest.model.OrderStatusResponse;
import com.binance.connector.client.convert.rest.model.PlaceLimitOrderRequest;
import com.binance.connector.client.convert.rest.model.PlaceLimitOrderResponse;
import com.binance.connector.client.convert.rest.model.QueryLimitOpenOrdersRequest;
import com.binance.connector.client.convert.rest.model.QueryLimitOpenOrdersResponse;
import com.binance.connector.client.convert.rest.model.SendQuoteRequestRequest;
import com.binance.connector.client.convert.rest.model.SendQuoteRequestResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class TradeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-convert/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public TradeApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public TradeApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptQuote
     *
     * @param acceptQuoteRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Accept Quote </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Accept-Quote">Accept Quote
     *     (TRADE) Documentation</a>
     */
    private okhttp3.Call acceptQuoteCall(AcceptQuoteRequest acceptQuoteRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/convert/acceptQuote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptQuoteRequest.getQuoteId() != null) {
            localVarFormParams.put("quoteId", acceptQuoteRequest.getQuoteId());
        }

        if (acceptQuoteRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", acceptQuoteRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptQuoteValidateBeforeCall(AcceptQuoteRequest acceptQuoteRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {acceptQuoteRequest};
            Method method = this.getClass().getMethod("acceptQuote", AcceptQuoteRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return acceptQuoteCall(acceptQuoteRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Accept Quote (TRADE) Accept the offered quote by quote ID. Weight: 500(UID)
     *
     * @param acceptQuoteRequest (required)
     * @return ApiResponse&lt;AcceptQuoteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Accept Quote </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Accept-Quote">Accept Quote
     *     (TRADE) Documentation</a>
     */
    public ApiResponse<AcceptQuoteResponse> acceptQuote(
            @Valid @NotNull AcceptQuoteRequest acceptQuoteRequest) throws ApiException {
        okhttp3.Call localVarCall = acceptQuoteValidateBeforeCall(acceptQuoteRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AcceptQuoteResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for cancelLimitOrder
     *
     * @param cancelLimitOrderRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cancel limit order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Cancel-Order">Cancel limit
     *     order (USER_DATA) Documentation</a>
     */
    private okhttp3.Call cancelLimitOrderCall(CancelLimitOrderRequest cancelLimitOrderRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/convert/limit/cancelOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cancelLimitOrderRequest.getOrderId() != null) {
            localVarFormParams.put("orderId", cancelLimitOrderRequest.getOrderId());
        }

        if (cancelLimitOrderRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", cancelLimitOrderRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelLimitOrderValidateBeforeCall(
            CancelLimitOrderRequest cancelLimitOrderRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {cancelLimitOrderRequest};
            Method method =
                    this.getClass().getMethod("cancelLimitOrder", CancelLimitOrderRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return cancelLimitOrderCall(cancelLimitOrderRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Cancel limit order (USER_DATA) Enable users to cancel a limit order Weight: 200(UID)
     *
     * @param cancelLimitOrderRequest (required)
     * @return ApiResponse&lt;CancelLimitOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cancel limit order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Cancel-Order">Cancel limit
     *     order (USER_DATA) Documentation</a>
     */
    public ApiResponse<CancelLimitOrderResponse> cancelLimitOrder(
            @Valid @NotNull CancelLimitOrderRequest cancelLimitOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = cancelLimitOrderValidateBeforeCall(cancelLimitOrderRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<CancelLimitOrderResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getConvertTradeHistory
     *
     * @param startTime (required)
     * @param endTime (required)
     * @param limit Default 100, Max 1000 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Convert Trade History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/convert/trade/Get-Convert-Trade-History">Get
     *     Convert Trade History(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getConvertTradeHistoryCall(
            Long startTime, Long endTime, Long limit, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/convert/tradeFlow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConvertTradeHistoryValidateBeforeCall(
            Long startTime, Long endTime, Long limit, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {startTime, endTime, limit, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getConvertTradeHistory",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getConvertTradeHistoryCall(startTime, endTime, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Convert Trade History(USER_DATA) Get Convert Trade History * The max interval between
     * startTime and endTime is 30 days. Weight: 3000
     *
     * @param startTime (required)
     * @param endTime (required)
     * @param limit Default 100, Max 1000 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;GetConvertTradeHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Convert Trade History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/convert/trade/Get-Convert-Trade-History">Get
     *     Convert Trade History(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetConvertTradeHistoryResponse> getConvertTradeHistory(
            @NotNull Long startTime, @NotNull Long endTime, Long limit, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getConvertTradeHistoryValidateBeforeCall(startTime, endTime, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetConvertTradeHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for orderStatus
     *
     * @param orderId Either orderId or quoteId is required (optional)
     * @param quoteId Either orderId or quoteId is required (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Order status </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Order-Status">Order
     *     status(USER_DATA) Documentation</a>
     */
    private okhttp3.Call orderStatusCall(String orderId, String quoteId) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/convert/orderStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderId", orderId));
        }

        if (quoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteId", quoteId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call orderStatusValidateBeforeCall(String orderId, String quoteId)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {orderId, quoteId};
            Method method = this.getClass().getMethod("orderStatus", String.class, String.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return orderStatusCall(orderId, quoteId);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Order status(USER_DATA) Query order status by order ID. Weight: 100(UID)
     *
     * @param orderId Either orderId or quoteId is required (optional)
     * @param quoteId Either orderId or quoteId is required (optional)
     * @return ApiResponse&lt;OrderStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Order status </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Order-Status">Order
     *     status(USER_DATA) Documentation</a>
     */
    public ApiResponse<OrderStatusResponse> orderStatus(String orderId, String quoteId)
            throws ApiException {
        okhttp3.Call localVarCall = orderStatusValidateBeforeCall(orderId, quoteId);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<OrderStatusResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for placeLimitOrder
     *
     * @param placeLimitOrderRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Place limit order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Place-Order">Place limit
     *     order (USER_DATA) Documentation</a>
     */
    private okhttp3.Call placeLimitOrderCall(PlaceLimitOrderRequest placeLimitOrderRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/convert/limit/placeOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (placeLimitOrderRequest.getBaseAsset() != null) {
            localVarFormParams.put("baseAsset", placeLimitOrderRequest.getBaseAsset());
        }

        if (placeLimitOrderRequest.getQuoteAsset() != null) {
            localVarFormParams.put("quoteAsset", placeLimitOrderRequest.getQuoteAsset());
        }

        if (placeLimitOrderRequest.getLimitPrice() != null) {
            localVarFormParams.put(
                    "limitPrice",
                    DecimalFormatter.getFormatter().format(placeLimitOrderRequest.getLimitPrice()));
        }

        if (placeLimitOrderRequest.getBaseAmount() != null) {
            localVarFormParams.put(
                    "baseAmount",
                    DecimalFormatter.getFormatter().format(placeLimitOrderRequest.getBaseAmount()));
        }

        if (placeLimitOrderRequest.getQuoteAmount() != null) {
            localVarFormParams.put(
                    "quoteAmount",
                    DecimalFormatter.getFormatter()
                            .format(placeLimitOrderRequest.getQuoteAmount()));
        }

        if (placeLimitOrderRequest.getSide() != null) {
            localVarFormParams.put("side", placeLimitOrderRequest.getSide());
        }

        if (placeLimitOrderRequest.getWalletType() != null) {
            localVarFormParams.put("walletType", placeLimitOrderRequest.getWalletType());
        }

        if (placeLimitOrderRequest.getExpiredType() != null) {
            localVarFormParams.put("expiredType", placeLimitOrderRequest.getExpiredType());
        }

        if (placeLimitOrderRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", placeLimitOrderRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call placeLimitOrderValidateBeforeCall(
            PlaceLimitOrderRequest placeLimitOrderRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {placeLimitOrderRequest};
            Method method =
                    this.getClass().getMethod("placeLimitOrder", PlaceLimitOrderRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return placeLimitOrderCall(placeLimitOrderRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Place limit order (USER_DATA) Enable users to place a limit order * &#x60;baseAsset&#x60; or
     * &#x60;quoteAsset&#x60; can be determined via &#x60;exchangeInfo&#x60; endpoint. * Limit price
     * is defined from &#x60;baseAsset&#x60; to &#x60;quoteAsset&#x60;. * Either
     * &#x60;baseAmount&#x60; or &#x60;quoteAmount&#x60; is used. Weight: 500(UID)
     *
     * @param placeLimitOrderRequest (required)
     * @return ApiResponse&lt;PlaceLimitOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Place limit order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Place-Order">Place limit
     *     order (USER_DATA) Documentation</a>
     */
    public ApiResponse<PlaceLimitOrderResponse> placeLimitOrder(
            @Valid @NotNull PlaceLimitOrderRequest placeLimitOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = placeLimitOrderValidateBeforeCall(placeLimitOrderRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<PlaceLimitOrderResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryLimitOpenOrders
     *
     * @param queryLimitOpenOrdersRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> limit open orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Query-Order">Query limit open
     *     orders (USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryLimitOpenOrdersCall(
            QueryLimitOpenOrdersRequest queryLimitOpenOrdersRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/convert/limit/queryOpenOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (queryLimitOpenOrdersRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", queryLimitOpenOrdersRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryLimitOpenOrdersValidateBeforeCall(
            QueryLimitOpenOrdersRequest queryLimitOpenOrdersRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {queryLimitOpenOrdersRequest};
            Method method =
                    this.getClass()
                            .getMethod("queryLimitOpenOrders", QueryLimitOpenOrdersRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryLimitOpenOrdersCall(queryLimitOpenOrdersRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query limit open orders (USER_DATA) Request a quote for the requested token pairs Weight:
     * 3000(UID)
     *
     * @param queryLimitOpenOrdersRequest (required)
     * @return ApiResponse&lt;QueryLimitOpenOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> limit open orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Query-Order">Query limit open
     *     orders (USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryLimitOpenOrdersResponse> queryLimitOpenOrders(
            @Valid @NotNull QueryLimitOpenOrdersRequest queryLimitOpenOrdersRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                queryLimitOpenOrdersValidateBeforeCall(queryLimitOpenOrdersRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryLimitOpenOrdersResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for sendQuoteRequest
     *
     * @param sendQuoteRequestRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Send Quote Request </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Send-quote-request">Send
     *     Quote Request(USER_DATA) Documentation</a>
     */
    private okhttp3.Call sendQuoteRequestCall(SendQuoteRequestRequest sendQuoteRequestRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/convert/getQuote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendQuoteRequestRequest.getFromAsset() != null) {
            localVarFormParams.put("fromAsset", sendQuoteRequestRequest.getFromAsset());
        }

        if (sendQuoteRequestRequest.getToAsset() != null) {
            localVarFormParams.put("toAsset", sendQuoteRequestRequest.getToAsset());
        }

        if (sendQuoteRequestRequest.getFromAmount() != null) {
            localVarFormParams.put(
                    "fromAmount",
                    DecimalFormatter.getFormatter()
                            .format(sendQuoteRequestRequest.getFromAmount()));
        }

        if (sendQuoteRequestRequest.getToAmount() != null) {
            localVarFormParams.put(
                    "toAmount",
                    DecimalFormatter.getFormatter().format(sendQuoteRequestRequest.getToAmount()));
        }

        if (sendQuoteRequestRequest.getWalletType() != null) {
            localVarFormParams.put("walletType", sendQuoteRequestRequest.getWalletType());
        }

        if (sendQuoteRequestRequest.getValidTime() != null) {
            localVarFormParams.put("validTime", sendQuoteRequestRequest.getValidTime());
        }

        if (sendQuoteRequestRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", sendQuoteRequestRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendQuoteRequestValidateBeforeCall(
            SendQuoteRequestRequest sendQuoteRequestRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {sendQuoteRequestRequest};
            Method method =
                    this.getClass().getMethod("sendQuoteRequest", SendQuoteRequestRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return sendQuoteRequestCall(sendQuoteRequestRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Send Quote Request(USER_DATA) Request a quote for the requested token pairs * Either
     * fromAmount or toAmount should be sent * &#x60;quoteId&#x60; will be returned only if you have
     * enough funds to convert Weight: 200(UID)
     *
     * @param sendQuoteRequestRequest (required)
     * @return ApiResponse&lt;SendQuoteRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Send Quote Request </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/convert/trade/Send-quote-request">Send
     *     Quote Request(USER_DATA) Documentation</a>
     */
    public ApiResponse<SendQuoteRequestResponse> sendQuoteRequest(
            @Valid @NotNull SendQuoteRequestRequest sendQuoteRequestRequest) throws ApiException {
        okhttp3.Call localVarCall = sendQuoteRequestValidateBeforeCall(sendQuoteRequestRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SendQuoteRequestResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
