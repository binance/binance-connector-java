/*
 * Binance Convert REST API
 * OpenAPI Specification for the Binance Convert REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.convert.rest.model;

import com.binance.connector.client.convert.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** PlaceLimitOrderRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class PlaceLimitOrderRequest {
    public static final String SERIALIZED_NAME_BASE_ASSET = "baseAsset";

    @SerializedName(SERIALIZED_NAME_BASE_ASSET)
    @jakarta.annotation.Nonnull
    private String baseAsset;

    public static final String SERIALIZED_NAME_QUOTE_ASSET = "quoteAsset";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET)
    @jakarta.annotation.Nonnull
    private String quoteAsset;

    public static final String SERIALIZED_NAME_LIMIT_PRICE = "limitPrice";

    @SerializedName(SERIALIZED_NAME_LIMIT_PRICE)
    @jakarta.annotation.Nonnull
    private Double limitPrice;

    public static final String SERIALIZED_NAME_BASE_AMOUNT = "baseAmount";

    @SerializedName(SERIALIZED_NAME_BASE_AMOUNT)
    @jakarta.annotation.Nullable
    private Double baseAmount;

    public static final String SERIALIZED_NAME_QUOTE_AMOUNT = "quoteAmount";

    @SerializedName(SERIALIZED_NAME_QUOTE_AMOUNT)
    @jakarta.annotation.Nullable
    private Double quoteAmount;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nonnull
    private String side;

    public static final String SERIALIZED_NAME_WALLET_TYPE = "walletType";

    @SerializedName(SERIALIZED_NAME_WALLET_TYPE)
    @jakarta.annotation.Nullable
    private String walletType;

    public static final String SERIALIZED_NAME_EXPIRED_TYPE = "expiredType";

    @SerializedName(SERIALIZED_NAME_EXPIRED_TYPE)
    @jakarta.annotation.Nonnull
    private String expiredType;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public PlaceLimitOrderRequest() {}

    public PlaceLimitOrderRequest baseAsset(@jakarta.annotation.Nonnull String baseAsset) {
        this.baseAsset = baseAsset;
        return this;
    }

    /**
     * Get baseAsset
     *
     * @return baseAsset
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getBaseAsset() {
        return baseAsset;
    }

    public void setBaseAsset(@jakarta.annotation.Nonnull String baseAsset) {
        this.baseAsset = baseAsset;
    }

    public PlaceLimitOrderRequest quoteAsset(@jakarta.annotation.Nonnull String quoteAsset) {
        this.quoteAsset = quoteAsset;
        return this;
    }

    /**
     * Get quoteAsset
     *
     * @return quoteAsset
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getQuoteAsset() {
        return quoteAsset;
    }

    public void setQuoteAsset(@jakarta.annotation.Nonnull String quoteAsset) {
        this.quoteAsset = quoteAsset;
    }

    public PlaceLimitOrderRequest limitPrice(@jakarta.annotation.Nonnull Double limitPrice) {
        this.limitPrice = limitPrice;
        return this;
    }

    /**
     * Get limitPrice
     *
     * @return limitPrice
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getLimitPrice() {
        return limitPrice;
    }

    public void setLimitPrice(@jakarta.annotation.Nonnull Double limitPrice) {
        this.limitPrice = limitPrice;
    }

    public PlaceLimitOrderRequest baseAmount(@jakarta.annotation.Nullable Double baseAmount) {
        this.baseAmount = baseAmount;
        return this;
    }

    /**
     * Get baseAmount
     *
     * @return baseAmount
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getBaseAmount() {
        return baseAmount;
    }

    public void setBaseAmount(@jakarta.annotation.Nullable Double baseAmount) {
        this.baseAmount = baseAmount;
    }

    public PlaceLimitOrderRequest quoteAmount(@jakarta.annotation.Nullable Double quoteAmount) {
        this.quoteAmount = quoteAmount;
        return this;
    }

    /**
     * Get quoteAmount
     *
     * @return quoteAmount
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getQuoteAmount() {
        return quoteAmount;
    }

    public void setQuoteAmount(@jakarta.annotation.Nullable Double quoteAmount) {
        this.quoteAmount = quoteAmount;
    }

    public PlaceLimitOrderRequest side(@jakarta.annotation.Nonnull String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nonnull String side) {
        this.side = side;
    }

    public PlaceLimitOrderRequest walletType(@jakarta.annotation.Nullable String walletType) {
        this.walletType = walletType;
        return this;
    }

    /**
     * Get walletType
     *
     * @return walletType
     */
    @jakarta.annotation.Nullable
    public String getWalletType() {
        return walletType;
    }

    public void setWalletType(@jakarta.annotation.Nullable String walletType) {
        this.walletType = walletType;
    }

    public PlaceLimitOrderRequest expiredType(@jakarta.annotation.Nonnull String expiredType) {
        this.expiredType = expiredType;
        return this;
    }

    /**
     * Get expiredType
     *
     * @return expiredType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getExpiredType() {
        return expiredType;
    }

    public void setExpiredType(@jakarta.annotation.Nonnull String expiredType) {
        this.expiredType = expiredType;
    }

    public PlaceLimitOrderRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PlaceLimitOrderRequest placeLimitOrderRequest = (PlaceLimitOrderRequest) o;
        return Objects.equals(this.baseAsset, placeLimitOrderRequest.baseAsset)
                && Objects.equals(this.quoteAsset, placeLimitOrderRequest.quoteAsset)
                && Objects.equals(this.limitPrice, placeLimitOrderRequest.limitPrice)
                && Objects.equals(this.baseAmount, placeLimitOrderRequest.baseAmount)
                && Objects.equals(this.quoteAmount, placeLimitOrderRequest.quoteAmount)
                && Objects.equals(this.side, placeLimitOrderRequest.side)
                && Objects.equals(this.walletType, placeLimitOrderRequest.walletType)
                && Objects.equals(this.expiredType, placeLimitOrderRequest.expiredType)
                && Objects.equals(this.recvWindow, placeLimitOrderRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                baseAsset,
                quoteAsset,
                limitPrice,
                baseAmount,
                quoteAmount,
                side,
                walletType,
                expiredType,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PlaceLimitOrderRequest {\n");
        sb.append("		baseAsset: ").append(toIndentedString(baseAsset)).append("\n");
        sb.append("		quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
        sb.append("		limitPrice: ").append(toIndentedString(limitPrice)).append("\n");
        sb.append("		baseAmount: ").append(toIndentedString(baseAmount)).append("\n");
        sb.append("		quoteAmount: ").append(toIndentedString(quoteAmount)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		walletType: ").append(toIndentedString(walletType)).append("\n");
        sb.append("		expiredType: ").append(toIndentedString(expiredType)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object baseAssetValue = getBaseAsset();
        String baseAssetValueAsString = "";
        baseAssetValueAsString = baseAssetValue.toString();
        sb.append("baseAsset=").append(urlEncode(baseAssetValueAsString)).append("");
        Object quoteAssetValue = getQuoteAsset();
        String quoteAssetValueAsString = "";
        quoteAssetValueAsString = quoteAssetValue.toString();
        sb.append("quoteAsset=").append(urlEncode(quoteAssetValueAsString)).append("");
        Object limitPriceValue = getLimitPrice();
        String limitPriceValueAsString = "";
        limitPriceValueAsString = limitPriceValue.toString();
        sb.append("limitPrice=").append(urlEncode(limitPriceValueAsString)).append("");
        Object baseAmountValue = getBaseAmount();
        String baseAmountValueAsString = "";
        baseAmountValueAsString = baseAmountValue.toString();
        sb.append("baseAmount=").append(urlEncode(baseAmountValueAsString)).append("");
        Object quoteAmountValue = getQuoteAmount();
        String quoteAmountValueAsString = "";
        quoteAmountValueAsString = quoteAmountValue.toString();
        sb.append("quoteAmount=").append(urlEncode(quoteAmountValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object walletTypeValue = getWalletType();
        String walletTypeValueAsString = "";
        walletTypeValueAsString = walletTypeValue.toString();
        sb.append("walletType=").append(urlEncode(walletTypeValueAsString)).append("");
        Object expiredTypeValue = getExpiredType();
        String expiredTypeValueAsString = "";
        expiredTypeValueAsString = expiredTypeValue.toString();
        sb.append("expiredType=").append(urlEncode(expiredTypeValueAsString)).append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("baseAsset");
        openapiFields.add("quoteAsset");
        openapiFields.add("limitPrice");
        openapiFields.add("baseAmount");
        openapiFields.add("quoteAmount");
        openapiFields.add("side");
        openapiFields.add("walletType");
        openapiFields.add("expiredType");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("baseAsset");
        openapiRequiredFields.add("quoteAsset");
        openapiRequiredFields.add("limitPrice");
        openapiRequiredFields.add("side");
        openapiRequiredFields.add("expiredType");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PlaceLimitOrderRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PlaceLimitOrderRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PlaceLimitOrderRequest is not found in"
                                        + " the empty JSON string",
                                PlaceLimitOrderRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!PlaceLimitOrderRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PlaceLimitOrderRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : PlaceLimitOrderRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("baseAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `baseAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("baseAsset").toString()));
        }
        if (!jsonObj.get("quoteAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteAsset").toString()));
        }
        if (!jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("walletType") != null && !jsonObj.get("walletType").isJsonNull())
                && !jsonObj.get("walletType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `walletType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("walletType").toString()));
        }
        if (!jsonObj.get("expiredType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `expiredType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("expiredType").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PlaceLimitOrderRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PlaceLimitOrderRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PlaceLimitOrderRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PlaceLimitOrderRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PlaceLimitOrderRequest>() {
                        @Override
                        public void write(JsonWriter out, PlaceLimitOrderRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PlaceLimitOrderRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PlaceLimitOrderRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PlaceLimitOrderRequest
     * @throws IOException if the JSON string is invalid with respect to PlaceLimitOrderRequest
     */
    public static PlaceLimitOrderRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PlaceLimitOrderRequest.class);
    }

    /**
     * Convert an instance of PlaceLimitOrderRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
