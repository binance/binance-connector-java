/*
 * Binance Convert REST API
 * OpenAPI Specification for the Binance Convert REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.convert.rest.model;

import com.binance.connector.client.convert.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** PlaceLimitOrderResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class PlaceLimitOrderResponse {
    public static final String SERIALIZED_NAME_QUOTE_ID = "quoteId";

    @SerializedName(SERIALIZED_NAME_QUOTE_ID)
    @jakarta.annotation.Nullable
    private String quoteId;

    public static final String SERIALIZED_NAME_RATIO = "ratio";

    @SerializedName(SERIALIZED_NAME_RATIO)
    @jakarta.annotation.Nullable
    private String ratio;

    public static final String SERIALIZED_NAME_INVERSE_RATIO = "inverseRatio";

    @SerializedName(SERIALIZED_NAME_INVERSE_RATIO)
    @jakarta.annotation.Nullable
    private String inverseRatio;

    public static final String SERIALIZED_NAME_VALID_TIMESTAMP = "validTimestamp";

    @SerializedName(SERIALIZED_NAME_VALID_TIMESTAMP)
    @jakarta.annotation.Nullable
    private Long validTimestamp;

    public static final String SERIALIZED_NAME_TO_AMOUNT = "toAmount";

    @SerializedName(SERIALIZED_NAME_TO_AMOUNT)
    @jakarta.annotation.Nullable
    private String toAmount;

    public static final String SERIALIZED_NAME_FROM_AMOUNT = "fromAmount";

    @SerializedName(SERIALIZED_NAME_FROM_AMOUNT)
    @jakarta.annotation.Nullable
    private String fromAmount;

    public PlaceLimitOrderResponse() {}

    public PlaceLimitOrderResponse quoteId(@jakarta.annotation.Nullable String quoteId) {
        this.quoteId = quoteId;
        return this;
    }

    /**
     * Get quoteId
     *
     * @return quoteId
     */
    @jakarta.annotation.Nullable
    public String getQuoteId() {
        return quoteId;
    }

    public void setQuoteId(@jakarta.annotation.Nullable String quoteId) {
        this.quoteId = quoteId;
    }

    public PlaceLimitOrderResponse ratio(@jakarta.annotation.Nullable String ratio) {
        this.ratio = ratio;
        return this;
    }

    /**
     * Get ratio
     *
     * @return ratio
     */
    @jakarta.annotation.Nullable
    public String getRatio() {
        return ratio;
    }

    public void setRatio(@jakarta.annotation.Nullable String ratio) {
        this.ratio = ratio;
    }

    public PlaceLimitOrderResponse inverseRatio(@jakarta.annotation.Nullable String inverseRatio) {
        this.inverseRatio = inverseRatio;
        return this;
    }

    /**
     * Get inverseRatio
     *
     * @return inverseRatio
     */
    @jakarta.annotation.Nullable
    public String getInverseRatio() {
        return inverseRatio;
    }

    public void setInverseRatio(@jakarta.annotation.Nullable String inverseRatio) {
        this.inverseRatio = inverseRatio;
    }

    public PlaceLimitOrderResponse validTimestamp(
            @jakarta.annotation.Nullable Long validTimestamp) {
        this.validTimestamp = validTimestamp;
        return this;
    }

    /**
     * Get validTimestamp
     *
     * @return validTimestamp
     */
    @jakarta.annotation.Nullable
    public Long getValidTimestamp() {
        return validTimestamp;
    }

    public void setValidTimestamp(@jakarta.annotation.Nullable Long validTimestamp) {
        this.validTimestamp = validTimestamp;
    }

    public PlaceLimitOrderResponse toAmount(@jakarta.annotation.Nullable String toAmount) {
        this.toAmount = toAmount;
        return this;
    }

    /**
     * Get toAmount
     *
     * @return toAmount
     */
    @jakarta.annotation.Nullable
    public String getToAmount() {
        return toAmount;
    }

    public void setToAmount(@jakarta.annotation.Nullable String toAmount) {
        this.toAmount = toAmount;
    }

    public PlaceLimitOrderResponse fromAmount(@jakarta.annotation.Nullable String fromAmount) {
        this.fromAmount = fromAmount;
        return this;
    }

    /**
     * Get fromAmount
     *
     * @return fromAmount
     */
    @jakarta.annotation.Nullable
    public String getFromAmount() {
        return fromAmount;
    }

    public void setFromAmount(@jakarta.annotation.Nullable String fromAmount) {
        this.fromAmount = fromAmount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PlaceLimitOrderResponse placeLimitOrderResponse = (PlaceLimitOrderResponse) o;
        return Objects.equals(this.quoteId, placeLimitOrderResponse.quoteId)
                && Objects.equals(this.ratio, placeLimitOrderResponse.ratio)
                && Objects.equals(this.inverseRatio, placeLimitOrderResponse.inverseRatio)
                && Objects.equals(this.validTimestamp, placeLimitOrderResponse.validTimestamp)
                && Objects.equals(this.toAmount, placeLimitOrderResponse.toAmount)
                && Objects.equals(this.fromAmount, placeLimitOrderResponse.fromAmount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(quoteId, ratio, inverseRatio, validTimestamp, toAmount, fromAmount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class PlaceLimitOrderResponse {\n");
        sb.append("		quoteId: ").append(toIndentedString(quoteId)).append("\n");
        sb.append("		ratio: ").append(toIndentedString(ratio)).append("\n");
        sb.append("		inverseRatio: ").append(toIndentedString(inverseRatio)).append("\n");
        sb.append("		validTimestamp: ").append(toIndentedString(validTimestamp)).append("\n");
        sb.append("		toAmount: ").append(toIndentedString(toAmount)).append("\n");
        sb.append("		fromAmount: ").append(toIndentedString(fromAmount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object quoteIdValue = getQuoteId();
        String quoteIdValueAsString = "";
        quoteIdValueAsString = quoteIdValue.toString();
        sb.append("quoteId=").append(urlEncode(quoteIdValueAsString)).append("");
        Object ratioValue = getRatio();
        String ratioValueAsString = "";
        ratioValueAsString = ratioValue.toString();
        sb.append("ratio=").append(urlEncode(ratioValueAsString)).append("");
        Object inverseRatioValue = getInverseRatio();
        String inverseRatioValueAsString = "";
        inverseRatioValueAsString = inverseRatioValue.toString();
        sb.append("inverseRatio=").append(urlEncode(inverseRatioValueAsString)).append("");
        Object validTimestampValue = getValidTimestamp();
        String validTimestampValueAsString = "";
        validTimestampValueAsString = validTimestampValue.toString();
        sb.append("validTimestamp=").append(urlEncode(validTimestampValueAsString)).append("");
        Object toAmountValue = getToAmount();
        String toAmountValueAsString = "";
        toAmountValueAsString = toAmountValue.toString();
        sb.append("toAmount=").append(urlEncode(toAmountValueAsString)).append("");
        Object fromAmountValue = getFromAmount();
        String fromAmountValueAsString = "";
        fromAmountValueAsString = fromAmountValue.toString();
        sb.append("fromAmount=").append(urlEncode(fromAmountValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("quoteId");
        openapiFields.add("ratio");
        openapiFields.add("inverseRatio");
        openapiFields.add("validTimestamp");
        openapiFields.add("toAmount");
        openapiFields.add("fromAmount");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to PlaceLimitOrderResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PlaceLimitOrderResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in PlaceLimitOrderResponse is not found"
                                        + " in the empty JSON string",
                                PlaceLimitOrderResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!PlaceLimitOrderResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `PlaceLimitOrderResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("quoteId") != null && !jsonObj.get("quoteId").isJsonNull())
                && !jsonObj.get("quoteId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("quoteId").toString()));
        }
        if ((jsonObj.get("ratio") != null && !jsonObj.get("ratio").isJsonNull())
                && !jsonObj.get("ratio").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ratio` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("ratio").toString()));
        }
        if ((jsonObj.get("inverseRatio") != null && !jsonObj.get("inverseRatio").isJsonNull())
                && !jsonObj.get("inverseRatio").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `inverseRatio` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("inverseRatio").toString()));
        }
        if ((jsonObj.get("toAmount") != null && !jsonObj.get("toAmount").isJsonNull())
                && !jsonObj.get("toAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("toAmount").toString()));
        }
        if ((jsonObj.get("fromAmount") != null && !jsonObj.get("fromAmount").isJsonNull())
                && !jsonObj.get("fromAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fromAmount").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PlaceLimitOrderResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PlaceLimitOrderResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PlaceLimitOrderResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(PlaceLimitOrderResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PlaceLimitOrderResponse>() {
                        @Override
                        public void write(JsonWriter out, PlaceLimitOrderResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public PlaceLimitOrderResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PlaceLimitOrderResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PlaceLimitOrderResponse
     * @throws IOException if the JSON string is invalid with respect to PlaceLimitOrderResponse
     */
    public static PlaceLimitOrderResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, PlaceLimitOrderResponse.class);
    }

    /**
     * Convert an instance of PlaceLimitOrderResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
