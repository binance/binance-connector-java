/*
 * Binance Fiat REST API
 * OpenAPI Specification for the Binance Fiat REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.fiat.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.fiat.rest.model.GetFiatDepositWithdrawHistoryResponse;
import com.binance.connector.client.fiat.rest.model.GetFiatPaymentsHistoryResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for FiatApi */
public class FiatApiTest {

    private FiatApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new FiatApi(apiClientSpy);
    }

    /**
     * Get Fiat Deposit/Withdraw History (USER_DATA)
     *
     * <p>Get Fiat Deposit/Withdraw History * If beginTime and endTime are not sent, the recent
     * 30-day data will be returned. Weight: 90000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFiatDepositWithdrawHistoryTest() throws ApiException, CryptoException {
        String transactionType = "";
        Long beginTime = 0L;
        Long endTime = 1641782889000L;
        Long page = 1L;
        Long rows = 100L;
        Long recvWindow = 5000L;
        ApiResponse<GetFiatDepositWithdrawHistoryResponse> response =
                api.getFiatDepositWithdrawHistory(
                        transactionType, beginTime, endTime, page, rows, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "transactionType=&beginTime=0&endTime=1641782889000&page=1&rows=100&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "b4337ba4e96bcd9ab9c9948711a139f1bfc288957e36f18aae7e3a25b7b9640f",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/fiat/orders", actualRequest.url().encodedPath());
    }

    /**
     * Get Fiat Payments History (USER_DATA)
     *
     * <p>Get Fiat Deposit/Withdraw History * If beginTime and endTime are not sent, the recent
     * 30-day data will be returned. * paymentMethod: Only when requesting payments history for buy
     * (transactionType&#x3D;0), response contains paymentMethod representing the way of purchase.
     * Now we have: * Cash Balance * Credit Card * Online Banking * Bank Transfer Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFiatPaymentsHistoryTest() throws ApiException, CryptoException {
        String transactionType = "";
        Long beginTime = 0L;
        Long endTime = 1641782889000L;
        Long page = 1L;
        Long rows = 100L;
        Long recvWindow = 5000L;
        ApiResponse<GetFiatPaymentsHistoryResponse> response =
                api.getFiatPaymentsHistory(
                        transactionType, beginTime, endTime, page, rows, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "transactionType=&beginTime=0&endTime=1641782889000&page=1&rows=100&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "b4337ba4e96bcd9ab9c9948711a139f1bfc288957e36f18aae7e3a25b7b9640f",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/fiat/payments", actualRequest.url().encodedPath());
    }
}
