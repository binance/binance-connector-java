/*
 * Binance Fiat REST API
 * OpenAPI Specification for the Binance Fiat REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.fiat.rest.model;

import com.binance.connector.client.fiat.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFiatPaymentsHistoryResponseDataInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFiatPaymentsHistoryResponseDataInner {
    public static final String SERIALIZED_NAME_ORDER_NO = "orderNo";

    @SerializedName(SERIALIZED_NAME_ORDER_NO)
    @jakarta.annotation.Nullable
    private String orderNo;

    public static final String SERIALIZED_NAME_SOURCE_AMOUNT = "sourceAmount";

    @SerializedName(SERIALIZED_NAME_SOURCE_AMOUNT)
    @jakarta.annotation.Nullable
    private String sourceAmount;

    public static final String SERIALIZED_NAME_FIAT_CURRENCY = "fiatCurrency";

    @SerializedName(SERIALIZED_NAME_FIAT_CURRENCY)
    @jakarta.annotation.Nullable
    private String fiatCurrency;

    public static final String SERIALIZED_NAME_OBTAIN_AMOUNT = "obtainAmount";

    @SerializedName(SERIALIZED_NAME_OBTAIN_AMOUNT)
    @jakarta.annotation.Nullable
    private String obtainAmount;

    public static final String SERIALIZED_NAME_CRYPTO_CURRENCY = "cryptoCurrency";

    @SerializedName(SERIALIZED_NAME_CRYPTO_CURRENCY)
    @jakarta.annotation.Nullable
    private String cryptoCurrency;

    public static final String SERIALIZED_NAME_TOTAL_FEE = "totalFee";

    @SerializedName(SERIALIZED_NAME_TOTAL_FEE)
    @jakarta.annotation.Nullable
    private String totalFee;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_PAYMENT_METHOD = "paymentMethod";

    @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD)
    @jakarta.annotation.Nullable
    private String paymentMethod;

    public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";

    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    @jakarta.annotation.Nullable
    private Long createTime;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public GetFiatPaymentsHistoryResponseDataInner() {}

    public GetFiatPaymentsHistoryResponseDataInner orderNo(
            @jakarta.annotation.Nullable String orderNo) {
        this.orderNo = orderNo;
        return this;
    }

    /**
     * Get orderNo
     *
     * @return orderNo
     */
    @jakarta.annotation.Nullable
    public String getOrderNo() {
        return orderNo;
    }

    public void setOrderNo(@jakarta.annotation.Nullable String orderNo) {
        this.orderNo = orderNo;
    }

    public GetFiatPaymentsHistoryResponseDataInner sourceAmount(
            @jakarta.annotation.Nullable String sourceAmount) {
        this.sourceAmount = sourceAmount;
        return this;
    }

    /**
     * Get sourceAmount
     *
     * @return sourceAmount
     */
    @jakarta.annotation.Nullable
    public String getSourceAmount() {
        return sourceAmount;
    }

    public void setSourceAmount(@jakarta.annotation.Nullable String sourceAmount) {
        this.sourceAmount = sourceAmount;
    }

    public GetFiatPaymentsHistoryResponseDataInner fiatCurrency(
            @jakarta.annotation.Nullable String fiatCurrency) {
        this.fiatCurrency = fiatCurrency;
        return this;
    }

    /**
     * Get fiatCurrency
     *
     * @return fiatCurrency
     */
    @jakarta.annotation.Nullable
    public String getFiatCurrency() {
        return fiatCurrency;
    }

    public void setFiatCurrency(@jakarta.annotation.Nullable String fiatCurrency) {
        this.fiatCurrency = fiatCurrency;
    }

    public GetFiatPaymentsHistoryResponseDataInner obtainAmount(
            @jakarta.annotation.Nullable String obtainAmount) {
        this.obtainAmount = obtainAmount;
        return this;
    }

    /**
     * Get obtainAmount
     *
     * @return obtainAmount
     */
    @jakarta.annotation.Nullable
    public String getObtainAmount() {
        return obtainAmount;
    }

    public void setObtainAmount(@jakarta.annotation.Nullable String obtainAmount) {
        this.obtainAmount = obtainAmount;
    }

    public GetFiatPaymentsHistoryResponseDataInner cryptoCurrency(
            @jakarta.annotation.Nullable String cryptoCurrency) {
        this.cryptoCurrency = cryptoCurrency;
        return this;
    }

    /**
     * Get cryptoCurrency
     *
     * @return cryptoCurrency
     */
    @jakarta.annotation.Nullable
    public String getCryptoCurrency() {
        return cryptoCurrency;
    }

    public void setCryptoCurrency(@jakarta.annotation.Nullable String cryptoCurrency) {
        this.cryptoCurrency = cryptoCurrency;
    }

    public GetFiatPaymentsHistoryResponseDataInner totalFee(
            @jakarta.annotation.Nullable String totalFee) {
        this.totalFee = totalFee;
        return this;
    }

    /**
     * Get totalFee
     *
     * @return totalFee
     */
    @jakarta.annotation.Nullable
    public String getTotalFee() {
        return totalFee;
    }

    public void setTotalFee(@jakarta.annotation.Nullable String totalFee) {
        this.totalFee = totalFee;
    }

    public GetFiatPaymentsHistoryResponseDataInner price(
            @jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public GetFiatPaymentsHistoryResponseDataInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public GetFiatPaymentsHistoryResponseDataInner paymentMethod(
            @jakarta.annotation.Nullable String paymentMethod) {
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * Get paymentMethod
     *
     * @return paymentMethod
     */
    @jakarta.annotation.Nullable
    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(@jakarta.annotation.Nullable String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public GetFiatPaymentsHistoryResponseDataInner createTime(
            @jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get createTime
     *
     * @return createTime
     */
    @jakarta.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(@jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
    }

    public GetFiatPaymentsHistoryResponseDataInner updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFiatPaymentsHistoryResponseDataInner getFiatPaymentsHistoryResponseDataInner =
                (GetFiatPaymentsHistoryResponseDataInner) o;
        return Objects.equals(this.orderNo, getFiatPaymentsHistoryResponseDataInner.orderNo)
                && Objects.equals(
                        this.sourceAmount, getFiatPaymentsHistoryResponseDataInner.sourceAmount)
                && Objects.equals(
                        this.fiatCurrency, getFiatPaymentsHistoryResponseDataInner.fiatCurrency)
                && Objects.equals(
                        this.obtainAmount, getFiatPaymentsHistoryResponseDataInner.obtainAmount)
                && Objects.equals(
                        this.cryptoCurrency, getFiatPaymentsHistoryResponseDataInner.cryptoCurrency)
                && Objects.equals(this.totalFee, getFiatPaymentsHistoryResponseDataInner.totalFee)
                && Objects.equals(this.price, getFiatPaymentsHistoryResponseDataInner.price)
                && Objects.equals(this.status, getFiatPaymentsHistoryResponseDataInner.status)
                && Objects.equals(
                        this.paymentMethod, getFiatPaymentsHistoryResponseDataInner.paymentMethod)
                && Objects.equals(
                        this.createTime, getFiatPaymentsHistoryResponseDataInner.createTime)
                && Objects.equals(
                        this.updateTime, getFiatPaymentsHistoryResponseDataInner.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                orderNo,
                sourceAmount,
                fiatCurrency,
                obtainAmount,
                cryptoCurrency,
                totalFee,
                price,
                status,
                paymentMethod,
                createTime,
                updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetFiatPaymentsHistoryResponseDataInner {\n");
        sb.append("		orderNo: ").append(toIndentedString(orderNo)).append("\n");
        sb.append("		sourceAmount: ").append(toIndentedString(sourceAmount)).append("\n");
        sb.append("		fiatCurrency: ").append(toIndentedString(fiatCurrency)).append("\n");
        sb.append("		obtainAmount: ").append(toIndentedString(obtainAmount)).append("\n");
        sb.append("		cryptoCurrency: ").append(toIndentedString(cryptoCurrency)).append("\n");
        sb.append("		totalFee: ").append(toIndentedString(totalFee)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
        sb.append("		createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object orderNoValue = getOrderNo();
        String orderNoValueAsString = "";
        orderNoValueAsString = orderNoValue.toString();
        sb.append("orderNo=").append(urlEncode(orderNoValueAsString)).append("");
        Object sourceAmountValue = getSourceAmount();
        String sourceAmountValueAsString = "";
        sourceAmountValueAsString = sourceAmountValue.toString();
        sb.append("sourceAmount=").append(urlEncode(sourceAmountValueAsString)).append("");
        Object fiatCurrencyValue = getFiatCurrency();
        String fiatCurrencyValueAsString = "";
        fiatCurrencyValueAsString = fiatCurrencyValue.toString();
        sb.append("fiatCurrency=").append(urlEncode(fiatCurrencyValueAsString)).append("");
        Object obtainAmountValue = getObtainAmount();
        String obtainAmountValueAsString = "";
        obtainAmountValueAsString = obtainAmountValue.toString();
        sb.append("obtainAmount=").append(urlEncode(obtainAmountValueAsString)).append("");
        Object cryptoCurrencyValue = getCryptoCurrency();
        String cryptoCurrencyValueAsString = "";
        cryptoCurrencyValueAsString = cryptoCurrencyValue.toString();
        sb.append("cryptoCurrency=").append(urlEncode(cryptoCurrencyValueAsString)).append("");
        Object totalFeeValue = getTotalFee();
        String totalFeeValueAsString = "";
        totalFeeValueAsString = totalFeeValue.toString();
        sb.append("totalFee=").append(urlEncode(totalFeeValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object paymentMethodValue = getPaymentMethod();
        String paymentMethodValueAsString = "";
        paymentMethodValueAsString = paymentMethodValue.toString();
        sb.append("paymentMethod=").append(urlEncode(paymentMethodValueAsString)).append("");
        Object createTimeValue = getCreateTime();
        String createTimeValueAsString = "";
        createTimeValueAsString = createTimeValue.toString();
        sb.append("createTime=").append(urlEncode(createTimeValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderNo");
        openapiFields.add("sourceAmount");
        openapiFields.add("fiatCurrency");
        openapiFields.add("obtainAmount");
        openapiFields.add("cryptoCurrency");
        openapiFields.add("totalFee");
        openapiFields.add("price");
        openapiFields.add("status");
        openapiFields.add("paymentMethod");
        openapiFields.add("createTime");
        openapiFields.add("updateTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFiatPaymentsHistoryResponseDataInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFiatPaymentsHistoryResponseDataInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetFiatPaymentsHistoryResponseDataInner is not found in the"
                                    + " empty JSON string",
                                GetFiatPaymentsHistoryResponseDataInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFiatPaymentsHistoryResponseDataInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetFiatPaymentsHistoryResponseDataInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("orderNo") != null && !jsonObj.get("orderNo").isJsonNull())
                && !jsonObj.get("orderNo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderNo` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("orderNo").toString()));
        }
        if ((jsonObj.get("sourceAmount") != null && !jsonObj.get("sourceAmount").isJsonNull())
                && !jsonObj.get("sourceAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceAmount").toString()));
        }
        if ((jsonObj.get("fiatCurrency") != null && !jsonObj.get("fiatCurrency").isJsonNull())
                && !jsonObj.get("fiatCurrency").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fiatCurrency` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fiatCurrency").toString()));
        }
        if ((jsonObj.get("obtainAmount") != null && !jsonObj.get("obtainAmount").isJsonNull())
                && !jsonObj.get("obtainAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `obtainAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("obtainAmount").toString()));
        }
        if ((jsonObj.get("cryptoCurrency") != null && !jsonObj.get("cryptoCurrency").isJsonNull())
                && !jsonObj.get("cryptoCurrency").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cryptoCurrency` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("cryptoCurrency").toString()));
        }
        if ((jsonObj.get("totalFee") != null && !jsonObj.get("totalFee").isJsonNull())
                && !jsonObj.get("totalFee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalFee` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("totalFee").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("paymentMethod") != null && !jsonObj.get("paymentMethod").isJsonNull())
                && !jsonObj.get("paymentMethod").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `paymentMethod` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("paymentMethod").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFiatPaymentsHistoryResponseDataInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'GetFiatPaymentsHistoryResponseDataInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetFiatPaymentsHistoryResponseDataInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetFiatPaymentsHistoryResponseDataInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetFiatPaymentsHistoryResponseDataInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetFiatPaymentsHistoryResponseDataInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetFiatPaymentsHistoryResponseDataInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFiatPaymentsHistoryResponseDataInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFiatPaymentsHistoryResponseDataInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFiatPaymentsHistoryResponseDataInner
     */
    public static GetFiatPaymentsHistoryResponseDataInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetFiatPaymentsHistoryResponseDataInner.class);
    }

    /**
     * Convert an instance of GetFiatPaymentsHistoryResponseDataInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
