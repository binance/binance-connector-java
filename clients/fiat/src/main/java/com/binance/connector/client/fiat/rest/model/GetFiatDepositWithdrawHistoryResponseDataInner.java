/*
 * Binance Fiat REST API
 * OpenAPI Specification for the Binance Fiat REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.fiat.rest.model;

import com.binance.connector.client.fiat.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFiatDepositWithdrawHistoryResponseDataInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFiatDepositWithdrawHistoryResponseDataInner {
    public static final String SERIALIZED_NAME_ORDER_NO = "orderNo";

    @SerializedName(SERIALIZED_NAME_ORDER_NO)
    @jakarta.annotation.Nullable
    private String orderNo;

    public static final String SERIALIZED_NAME_FIAT_CURRENCY = "fiatCurrency";

    @SerializedName(SERIALIZED_NAME_FIAT_CURRENCY)
    @jakarta.annotation.Nullable
    private String fiatCurrency;

    public static final String SERIALIZED_NAME_INDICATED_AMOUNT = "indicatedAmount";

    @SerializedName(SERIALIZED_NAME_INDICATED_AMOUNT)
    @jakarta.annotation.Nullable
    private String indicatedAmount;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_TOTAL_FEE = "totalFee";

    @SerializedName(SERIALIZED_NAME_TOTAL_FEE)
    @jakarta.annotation.Nullable
    private String totalFee;

    public static final String SERIALIZED_NAME_METHOD = "method";

    @SerializedName(SERIALIZED_NAME_METHOD)
    @jakarta.annotation.Nullable
    private String method;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";

    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    @jakarta.annotation.Nullable
    private Long createTime;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public GetFiatDepositWithdrawHistoryResponseDataInner() {}

    public GetFiatDepositWithdrawHistoryResponseDataInner orderNo(
            @jakarta.annotation.Nullable String orderNo) {
        this.orderNo = orderNo;
        return this;
    }

    /**
     * Get orderNo
     *
     * @return orderNo
     */
    @jakarta.annotation.Nullable
    public String getOrderNo() {
        return orderNo;
    }

    public void setOrderNo(@jakarta.annotation.Nullable String orderNo) {
        this.orderNo = orderNo;
    }

    public GetFiatDepositWithdrawHistoryResponseDataInner fiatCurrency(
            @jakarta.annotation.Nullable String fiatCurrency) {
        this.fiatCurrency = fiatCurrency;
        return this;
    }

    /**
     * Get fiatCurrency
     *
     * @return fiatCurrency
     */
    @jakarta.annotation.Nullable
    public String getFiatCurrency() {
        return fiatCurrency;
    }

    public void setFiatCurrency(@jakarta.annotation.Nullable String fiatCurrency) {
        this.fiatCurrency = fiatCurrency;
    }

    public GetFiatDepositWithdrawHistoryResponseDataInner indicatedAmount(
            @jakarta.annotation.Nullable String indicatedAmount) {
        this.indicatedAmount = indicatedAmount;
        return this;
    }

    /**
     * Get indicatedAmount
     *
     * @return indicatedAmount
     */
    @jakarta.annotation.Nullable
    public String getIndicatedAmount() {
        return indicatedAmount;
    }

    public void setIndicatedAmount(@jakarta.annotation.Nullable String indicatedAmount) {
        this.indicatedAmount = indicatedAmount;
    }

    public GetFiatDepositWithdrawHistoryResponseDataInner amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public GetFiatDepositWithdrawHistoryResponseDataInner totalFee(
            @jakarta.annotation.Nullable String totalFee) {
        this.totalFee = totalFee;
        return this;
    }

    /**
     * Get totalFee
     *
     * @return totalFee
     */
    @jakarta.annotation.Nullable
    public String getTotalFee() {
        return totalFee;
    }

    public void setTotalFee(@jakarta.annotation.Nullable String totalFee) {
        this.totalFee = totalFee;
    }

    public GetFiatDepositWithdrawHistoryResponseDataInner method(
            @jakarta.annotation.Nullable String method) {
        this.method = method;
        return this;
    }

    /**
     * Get method
     *
     * @return method
     */
    @jakarta.annotation.Nullable
    public String getMethod() {
        return method;
    }

    public void setMethod(@jakarta.annotation.Nullable String method) {
        this.method = method;
    }

    public GetFiatDepositWithdrawHistoryResponseDataInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public GetFiatDepositWithdrawHistoryResponseDataInner createTime(
            @jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get createTime
     *
     * @return createTime
     */
    @jakarta.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(@jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
    }

    public GetFiatDepositWithdrawHistoryResponseDataInner updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFiatDepositWithdrawHistoryResponseDataInner
                getFiatDepositWithdrawHistoryResponseDataInner =
                        (GetFiatDepositWithdrawHistoryResponseDataInner) o;
        return Objects.equals(this.orderNo, getFiatDepositWithdrawHistoryResponseDataInner.orderNo)
                && Objects.equals(
                        this.fiatCurrency,
                        getFiatDepositWithdrawHistoryResponseDataInner.fiatCurrency)
                && Objects.equals(
                        this.indicatedAmount,
                        getFiatDepositWithdrawHistoryResponseDataInner.indicatedAmount)
                && Objects.equals(
                        this.amount, getFiatDepositWithdrawHistoryResponseDataInner.amount)
                && Objects.equals(
                        this.totalFee, getFiatDepositWithdrawHistoryResponseDataInner.totalFee)
                && Objects.equals(
                        this.method, getFiatDepositWithdrawHistoryResponseDataInner.method)
                && Objects.equals(
                        this.status, getFiatDepositWithdrawHistoryResponseDataInner.status)
                && Objects.equals(
                        this.createTime, getFiatDepositWithdrawHistoryResponseDataInner.createTime)
                && Objects.equals(
                        this.updateTime, getFiatDepositWithdrawHistoryResponseDataInner.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                orderNo,
                fiatCurrency,
                indicatedAmount,
                amount,
                totalFee,
                method,
                status,
                createTime,
                updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetFiatDepositWithdrawHistoryResponseDataInner {\n");
        sb.append("		orderNo: ").append(toIndentedString(orderNo)).append("\n");
        sb.append("		fiatCurrency: ").append(toIndentedString(fiatCurrency)).append("\n");
        sb.append("		indicatedAmount: ").append(toIndentedString(indicatedAmount)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		totalFee: ").append(toIndentedString(totalFee)).append("\n");
        sb.append("		method: ").append(toIndentedString(method)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object orderNoValue = getOrderNo();
        String orderNoValueAsString = "";
        orderNoValueAsString = orderNoValue.toString();
        sb.append("orderNo=").append(urlEncode(orderNoValueAsString)).append("");
        Object fiatCurrencyValue = getFiatCurrency();
        String fiatCurrencyValueAsString = "";
        fiatCurrencyValueAsString = fiatCurrencyValue.toString();
        sb.append("fiatCurrency=").append(urlEncode(fiatCurrencyValueAsString)).append("");
        Object indicatedAmountValue = getIndicatedAmount();
        String indicatedAmountValueAsString = "";
        indicatedAmountValueAsString = indicatedAmountValue.toString();
        sb.append("indicatedAmount=").append(urlEncode(indicatedAmountValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object totalFeeValue = getTotalFee();
        String totalFeeValueAsString = "";
        totalFeeValueAsString = totalFeeValue.toString();
        sb.append("totalFee=").append(urlEncode(totalFeeValueAsString)).append("");
        Object methodValue = getMethod();
        String methodValueAsString = "";
        methodValueAsString = methodValue.toString();
        sb.append("method=").append(urlEncode(methodValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object createTimeValue = getCreateTime();
        String createTimeValueAsString = "";
        createTimeValueAsString = createTimeValue.toString();
        sb.append("createTime=").append(urlEncode(createTimeValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderNo");
        openapiFields.add("fiatCurrency");
        openapiFields.add("indicatedAmount");
        openapiFields.add("amount");
        openapiFields.add("totalFee");
        openapiFields.add("method");
        openapiFields.add("status");
        openapiFields.add("createTime");
        openapiFields.add("updateTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFiatDepositWithdrawHistoryResponseDataInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFiatDepositWithdrawHistoryResponseDataInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetFiatDepositWithdrawHistoryResponseDataInner is not found"
                                    + " in the empty JSON string",
                                GetFiatDepositWithdrawHistoryResponseDataInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFiatDepositWithdrawHistoryResponseDataInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetFiatDepositWithdrawHistoryResponseDataInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("orderNo") != null && !jsonObj.get("orderNo").isJsonNull())
                && !jsonObj.get("orderNo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderNo` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("orderNo").toString()));
        }
        if ((jsonObj.get("fiatCurrency") != null && !jsonObj.get("fiatCurrency").isJsonNull())
                && !jsonObj.get("fiatCurrency").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fiatCurrency` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fiatCurrency").toString()));
        }
        if ((jsonObj.get("indicatedAmount") != null && !jsonObj.get("indicatedAmount").isJsonNull())
                && !jsonObj.get("indicatedAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `indicatedAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("indicatedAmount").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("totalFee") != null && !jsonObj.get("totalFee").isJsonNull())
                && !jsonObj.get("totalFee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalFee` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("totalFee").toString()));
        }
        if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull())
                && !jsonObj.get("method").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `method` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("method").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFiatDepositWithdrawHistoryResponseDataInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetFiatDepositWithdrawHistoryResponseDataInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetFiatDepositWithdrawHistoryResponseDataInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(GetFiatDepositWithdrawHistoryResponseDataInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetFiatDepositWithdrawHistoryResponseDataInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetFiatDepositWithdrawHistoryResponseDataInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetFiatDepositWithdrawHistoryResponseDataInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFiatDepositWithdrawHistoryResponseDataInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFiatDepositWithdrawHistoryResponseDataInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFiatDepositWithdrawHistoryResponseDataInner
     */
    public static GetFiatDepositWithdrawHistoryResponseDataInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetFiatDepositWithdrawHistoryResponseDataInner.class);
    }

    /**
     * Convert an instance of GetFiatDepositWithdrawHistoryResponseDataInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
