/*
 * Binance Mining REST API
 * OpenAPI Specification for the Binance Mining REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.mining.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.mining.rest.model.AccountListResponse;
import com.binance.connector.client.mining.rest.model.AcquiringAlgorithmResponse;
import com.binance.connector.client.mining.rest.model.AcquiringCoinnameResponse;
import com.binance.connector.client.mining.rest.model.CancelHashrateResaleConfigurationRequest;
import com.binance.connector.client.mining.rest.model.CancelHashrateResaleConfigurationResponse;
import com.binance.connector.client.mining.rest.model.EarningsListResponse;
import com.binance.connector.client.mining.rest.model.ExtraBonusListResponse;
import com.binance.connector.client.mining.rest.model.HashrateResaleDetailResponse;
import com.binance.connector.client.mining.rest.model.HashrateResaleListResponse;
import com.binance.connector.client.mining.rest.model.HashrateResaleRequestRequest;
import com.binance.connector.client.mining.rest.model.HashrateResaleRequestResponse;
import com.binance.connector.client.mining.rest.model.MiningAccountEarningResponse;
import com.binance.connector.client.mining.rest.model.RequestForDetailMinerListResponse;
import com.binance.connector.client.mining.rest.model.RequestForMinerListResponse;
import com.binance.connector.client.mining.rest.model.StatisticListResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for MiningApi */
public class MiningApiTest {

    private MiningApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new MiningApi(apiClientSpy);
    }

    /**
     * Account List(USER_DATA)
     *
     * <p>Query Account List Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void accountListTest() throws ApiException, CryptoException {
        String algo = "";
        String userName = "";
        Long recvWindow = 5000L;
        ApiResponse<AccountListResponse> response = api.accountList(algo, userName, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "algo=&userName=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "141af9d2d84660e9e442d9499a0db96fbe222cb8547ee7ab7e98858f8246dd7a",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/statistics/user/list", actualRequest.url().encodedPath());
    }

    /**
     * Acquiring Algorithm(MARKET_DATA)
     *
     * <p>Acquiring Algorithm Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acquiringAlgorithmTest() throws ApiException, CryptoException {
        ApiResponse<AcquiringAlgorithmResponse> response = api.acquiringAlgorithm();

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/pub/algoList", actualRequest.url().encodedPath());
    }

    /**
     * Acquiring CoinName(MARKET_DATA)
     *
     * <p>Acquiring CoinName Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void acquiringCoinnameTest() throws ApiException, CryptoException {
        ApiResponse<AcquiringCoinnameResponse> response = api.acquiringCoinname();

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/pub/coinList", actualRequest.url().encodedPath());
    }

    /**
     * Cancel hashrate resale configuration(USER_DATA)
     *
     * <p>Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelHashrateResaleConfigurationTest() throws ApiException, CryptoException {
        CancelHashrateResaleConfigurationRequest cancelHashrateResaleConfigurationRequest =
                new CancelHashrateResaleConfigurationRequest();

        cancelHashrateResaleConfigurationRequest.configId(1L);
        cancelHashrateResaleConfigurationRequest.userName("");

        ApiResponse<CancelHashrateResaleConfigurationResponse> response =
                api.cancelHashrateResaleConfiguration(cancelHashrateResaleConfigurationRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000configId=1&userName=", signInputCaptor.getValue());
        assertEquals(
                "3359c610e6bf3b9a31f4a67a4cf2036c5d87d23142480d6a81197d4ebca69bee",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/mining/hash-transfer/config/cancel", actualRequest.url().encodedPath());
    }

    /**
     * Earnings List(USER_DATA)
     *
     * <p>Query Earnings List Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void earningsListTest() throws ApiException, CryptoException {
        String algo = "";
        String userName = "";
        String coin = "";
        Long startDate = 0L;
        Long endDate = 0L;
        Long pageIndex = 1L;
        Long pageSize = 0L;
        Long recvWindow = 5000L;
        ApiResponse<EarningsListResponse> response =
                api.earningsList(
                        algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "algo=&userName=&coin=&startDate=0&endDate=0&pageIndex=1&pageSize=0&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "7f6636bd78ea170d9f83c50fc67019daf7418a882cd6cbe3004b3e7d9dad6ebe",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/payment/list", actualRequest.url().encodedPath());
    }

    /**
     * Extra Bonus List(USER_DATA)
     *
     * <p>Extra Bonus List Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void extraBonusListTest() throws ApiException, CryptoException {
        String algo = "";
        String userName = "";
        String coin = "";
        Long startDate = 0L;
        Long endDate = 0L;
        Long pageIndex = 1L;
        Long pageSize = 0L;
        Long recvWindow = 5000L;
        ApiResponse<ExtraBonusListResponse> response =
                api.extraBonusList(
                        algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "algo=&userName=&coin=&startDate=0&endDate=0&pageIndex=1&pageSize=0&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "7f6636bd78ea170d9f83c50fc67019daf7418a882cd6cbe3004b3e7d9dad6ebe",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/payment/other", actualRequest.url().encodedPath());
    }

    /**
     * Hashrate Resale Detail(USER_DATA)
     *
     * <p>Hashrate Resale Detail(USER_DATA) Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hashrateResaleDetailTest() throws ApiException, CryptoException {
        Long configId = 1L;
        String userName = "";
        Long pageIndex = 1L;
        Long pageSize = 0L;
        Long recvWindow = 5000L;
        ApiResponse<HashrateResaleDetailResponse> response =
                api.hashrateResaleDetail(configId, userName, pageIndex, pageSize, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "configId=1&userName=&pageIndex=1&pageSize=0&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "b103a00035916bdb8dda3e3a55f6af838e11a6a38aab27a2dd32367be83b547b",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/mining/hash-transfer/profit/details", actualRequest.url().encodedPath());
    }

    /**
     * Hashrate Resale List
     *
     * <p>Hashrate Resale List Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hashrateResaleListTest() throws ApiException, CryptoException {
        Long pageIndex = 1L;
        Long pageSize = 0L;
        Long recvWindow = 5000L;
        ApiResponse<HashrateResaleListResponse> response =
                api.hashrateResaleList(pageIndex, pageSize, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/mining/hash-transfer/config/details/list",
                actualRequest.url().encodedPath());
    }

    /**
     * Hashrate Resale Request(USER_DATA)
     *
     * <p>Hashrate Resale Request Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hashrateResaleRequestTest() throws ApiException, CryptoException {
        HashrateResaleRequestRequest hashrateResaleRequestRequest =
                new HashrateResaleRequestRequest();

        hashrateResaleRequestRequest.userName("");
        hashrateResaleRequestRequest.algo("");
        hashrateResaleRequestRequest.endDate(0L);
        hashrateResaleRequestRequest.startDate(0L);
        hashrateResaleRequestRequest.toPoolUser("");
        hashrateResaleRequestRequest.hashRate(0L);

        ApiResponse<HashrateResaleRequestResponse> response =
                api.hashrateResaleRequest(hashrateResaleRequestRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000endDate=0&hashRate=0&toPoolUser=&userName=&algo=&startDate=0",
                signInputCaptor.getValue());
        assertEquals(
                "073a5442df95c2ecc49586a1fb54b910ec59e6621e68bca759ca1dfc8d665167",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/hash-transfer/config", actualRequest.url().encodedPath());
    }

    /**
     * Mining Account Earning(USER_DATA)
     *
     * <p>Mining Account Earning Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void miningAccountEarningTest() throws ApiException, CryptoException {
        String algo = "";
        Long startDate = 0L;
        Long endDate = 0L;
        Long pageIndex = 1L;
        Long pageSize = 0L;
        Long recvWindow = 5000L;
        ApiResponse<MiningAccountEarningResponse> response =
                api.miningAccountEarning(algo, startDate, endDate, pageIndex, pageSize, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "algo=&startDate=0&endDate=0&pageIndex=1&pageSize=0&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "6c64a0ee43b62211c4efc572d1e296e39065c906a64f73198a5bf1b4d3669e14",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/payment/uid", actualRequest.url().encodedPath());
    }

    /**
     * Request for Detail Miner List(USER_DATA)
     *
     * <p>Request for Detail Miner List Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestForDetailMinerListTest() throws ApiException, CryptoException {
        String algo = "";
        String userName = "";
        String workerName = "";
        Long recvWindow = 5000L;
        ApiResponse<RequestForDetailMinerListResponse> response =
                api.requestForDetailMinerList(algo, userName, workerName, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "algo=&userName=&workerName=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "18fd7f75b1cdf1312e37d06b70439a0ac45a1ce7dfa5325eb634192ab2126af5",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/worker/detail", actualRequest.url().encodedPath());
    }

    /**
     * Request for Miner List(USER_DATA)
     *
     * <p>Request for Miner List Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestForMinerListTest() throws ApiException, CryptoException {
        String algo = "";
        String userName = "";
        Long pageIndex = 1L;
        Long sort = 0L;
        Long sortColumn = 1L;
        Long workerStatus = 0L;
        Long recvWindow = 5000L;
        ApiResponse<RequestForMinerListResponse> response =
                api.requestForMinerList(
                        algo, userName, pageIndex, sort, sortColumn, workerStatus, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "algo=&userName=&pageIndex=1&sort=0&sortColumn=1&workerStatus=0&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "71a9590cb1f71643402b6f00af8944be65056eeebcad9c6cdefa09cd44b514b4",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/worker/list", actualRequest.url().encodedPath());
    }

    /**
     * Statistic List(USER_DATA)
     *
     * <p>Statistic List Weight: 5
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void statisticListTest() throws ApiException, CryptoException {
        String algo = "";
        String userName = "";
        Long recvWindow = 5000L;
        ApiResponse<StatisticListResponse> response = api.statisticList(algo, userName, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "algo=&userName=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "141af9d2d84660e9e442d9499a0db96fbe222cb8547ee7ab7e98858f8246dd7a",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/mining/statistics/user/status", actualRequest.url().encodedPath());
    }
}
