/*
 * Binance Mining REST API
 * OpenAPI Specification for the Binance Mining REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.mining.rest.model;

import com.binance.connector.client.mining.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AcquiringCoinnameResponseDataInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AcquiringCoinnameResponseDataInner {
    public static final String SERIALIZED_NAME_COIN_NAME = "coinName";

    @SerializedName(SERIALIZED_NAME_COIN_NAME)
    @jakarta.annotation.Nullable
    private String coinName;

    public static final String SERIALIZED_NAME_COIN_ID = "coinId";

    @SerializedName(SERIALIZED_NAME_COIN_ID)
    @jakarta.annotation.Nullable
    private Long coinId;

    public static final String SERIALIZED_NAME_POOL_INDEX = "poolIndex";

    @SerializedName(SERIALIZED_NAME_POOL_INDEX)
    @jakarta.annotation.Nullable
    private Long poolIndex;

    public static final String SERIALIZED_NAME_ALGO_ID = "algoId";

    @SerializedName(SERIALIZED_NAME_ALGO_ID)
    @jakarta.annotation.Nullable
    private Long algoId;

    public static final String SERIALIZED_NAME_ALGO_NAME = "algoName";

    @SerializedName(SERIALIZED_NAME_ALGO_NAME)
    @jakarta.annotation.Nullable
    private String algoName;

    public AcquiringCoinnameResponseDataInner() {}

    public AcquiringCoinnameResponseDataInner coinName(
            @jakarta.annotation.Nullable String coinName) {
        this.coinName = coinName;
        return this;
    }

    /**
     * Get coinName
     *
     * @return coinName
     */
    @jakarta.annotation.Nullable
    public String getCoinName() {
        return coinName;
    }

    public void setCoinName(@jakarta.annotation.Nullable String coinName) {
        this.coinName = coinName;
    }

    public AcquiringCoinnameResponseDataInner coinId(@jakarta.annotation.Nullable Long coinId) {
        this.coinId = coinId;
        return this;
    }

    /**
     * Get coinId
     *
     * @return coinId
     */
    @jakarta.annotation.Nullable
    public Long getCoinId() {
        return coinId;
    }

    public void setCoinId(@jakarta.annotation.Nullable Long coinId) {
        this.coinId = coinId;
    }

    public AcquiringCoinnameResponseDataInner poolIndex(
            @jakarta.annotation.Nullable Long poolIndex) {
        this.poolIndex = poolIndex;
        return this;
    }

    /**
     * Get poolIndex
     *
     * @return poolIndex
     */
    @jakarta.annotation.Nullable
    public Long getPoolIndex() {
        return poolIndex;
    }

    public void setPoolIndex(@jakarta.annotation.Nullable Long poolIndex) {
        this.poolIndex = poolIndex;
    }

    public AcquiringCoinnameResponseDataInner algoId(@jakarta.annotation.Nullable Long algoId) {
        this.algoId = algoId;
        return this;
    }

    /**
     * Get algoId
     *
     * @return algoId
     */
    @jakarta.annotation.Nullable
    public Long getAlgoId() {
        return algoId;
    }

    public void setAlgoId(@jakarta.annotation.Nullable Long algoId) {
        this.algoId = algoId;
    }

    public AcquiringCoinnameResponseDataInner algoName(
            @jakarta.annotation.Nullable String algoName) {
        this.algoName = algoName;
        return this;
    }

    /**
     * Get algoName
     *
     * @return algoName
     */
    @jakarta.annotation.Nullable
    public String getAlgoName() {
        return algoName;
    }

    public void setAlgoName(@jakarta.annotation.Nullable String algoName) {
        this.algoName = algoName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AcquiringCoinnameResponseDataInner acquiringCoinnameResponseDataInner =
                (AcquiringCoinnameResponseDataInner) o;
        return Objects.equals(this.coinName, acquiringCoinnameResponseDataInner.coinName)
                && Objects.equals(this.coinId, acquiringCoinnameResponseDataInner.coinId)
                && Objects.equals(this.poolIndex, acquiringCoinnameResponseDataInner.poolIndex)
                && Objects.equals(this.algoId, acquiringCoinnameResponseDataInner.algoId)
                && Objects.equals(this.algoName, acquiringCoinnameResponseDataInner.algoName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(coinName, coinId, poolIndex, algoId, algoName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AcquiringCoinnameResponseDataInner {\n");
        sb.append("		coinName: ").append(toIndentedString(coinName)).append("\n");
        sb.append("		coinId: ").append(toIndentedString(coinId)).append("\n");
        sb.append("		poolIndex: ").append(toIndentedString(poolIndex)).append("\n");
        sb.append("		algoId: ").append(toIndentedString(algoId)).append("\n");
        sb.append("		algoName: ").append(toIndentedString(algoName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object coinNameValue = getCoinName();
        String coinNameValueAsString = "";
        coinNameValueAsString = coinNameValue.toString();
        sb.append("coinName=").append(urlEncode(coinNameValueAsString)).append("");
        Object coinIdValue = getCoinId();
        String coinIdValueAsString = "";
        coinIdValueAsString = coinIdValue.toString();
        sb.append("coinId=").append(urlEncode(coinIdValueAsString)).append("");
        Object poolIndexValue = getPoolIndex();
        String poolIndexValueAsString = "";
        poolIndexValueAsString = poolIndexValue.toString();
        sb.append("poolIndex=").append(urlEncode(poolIndexValueAsString)).append("");
        Object algoIdValue = getAlgoId();
        String algoIdValueAsString = "";
        algoIdValueAsString = algoIdValue.toString();
        sb.append("algoId=").append(urlEncode(algoIdValueAsString)).append("");
        Object algoNameValue = getAlgoName();
        String algoNameValueAsString = "";
        algoNameValueAsString = algoNameValue.toString();
        sb.append("algoName=").append(urlEncode(algoNameValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("coinName");
        openapiFields.add("coinId");
        openapiFields.add("poolIndex");
        openapiFields.add("algoId");
        openapiFields.add("algoName");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AcquiringCoinnameResponseDataInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AcquiringCoinnameResponseDataInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AcquiringCoinnameResponseDataInner is"
                                        + " not found in the empty JSON string",
                                AcquiringCoinnameResponseDataInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AcquiringCoinnameResponseDataInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AcquiringCoinnameResponseDataInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("coinName") != null && !jsonObj.get("coinName").isJsonNull())
                && !jsonObj.get("coinName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coinName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("coinName").toString()));
        }
        if ((jsonObj.get("algoName") != null && !jsonObj.get("algoName").isJsonNull())
                && !jsonObj.get("algoName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `algoName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("algoName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AcquiringCoinnameResponseDataInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AcquiringCoinnameResponseDataInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AcquiringCoinnameResponseDataInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AcquiringCoinnameResponseDataInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AcquiringCoinnameResponseDataInner>() {
                        @Override
                        public void write(JsonWriter out, AcquiringCoinnameResponseDataInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AcquiringCoinnameResponseDataInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AcquiringCoinnameResponseDataInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AcquiringCoinnameResponseDataInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AcquiringCoinnameResponseDataInner
     */
    public static AcquiringCoinnameResponseDataInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, AcquiringCoinnameResponseDataInner.class);
    }

    /**
     * Convert an instance of AcquiringCoinnameResponseDataInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
