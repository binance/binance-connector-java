/*
 * Binance Mining REST API
 * OpenAPI Specification for the Binance Mining REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.mining.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.mining.rest.model.AccountListResponse;
import com.binance.connector.client.mining.rest.model.AcquiringAlgorithmResponse;
import com.binance.connector.client.mining.rest.model.AcquiringCoinnameResponse;
import com.binance.connector.client.mining.rest.model.CancelHashrateResaleConfigurationRequest;
import com.binance.connector.client.mining.rest.model.CancelHashrateResaleConfigurationResponse;
import com.binance.connector.client.mining.rest.model.EarningsListResponse;
import com.binance.connector.client.mining.rest.model.ExtraBonusListResponse;
import com.binance.connector.client.mining.rest.model.HashrateResaleDetailResponse;
import com.binance.connector.client.mining.rest.model.HashrateResaleListResponse;
import com.binance.connector.client.mining.rest.model.HashrateResaleRequestRequest;
import com.binance.connector.client.mining.rest.model.HashrateResaleRequestResponse;
import com.binance.connector.client.mining.rest.model.MiningAccountEarningResponse;
import com.binance.connector.client.mining.rest.model.RequestForDetailMinerListResponse;
import com.binance.connector.client.mining.rest.model.RequestForMinerListResponse;
import com.binance.connector.client.mining.rest.model.StatisticListResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class MiningApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-mining/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public MiningApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public MiningApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountList
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Account List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/mining/rest-api/Account-List">Account
     *     List(USER_DATA) Documentation</a>
     */
    private okhttp3.Call accountListCall(String algo, String userName, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/statistics/user/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algo", algo));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountListValidateBeforeCall(
            String algo, String userName, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {algo, userName, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod("accountList", String.class, String.class, Long.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return accountListCall(algo, userName, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Account List(USER_DATA) Query Account List Weight: 5
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;AccountListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Account List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/mining/rest-api/Account-List">Account
     *     List(USER_DATA) Documentation</a>
     */
    public ApiResponse<AccountListResponse> accountList(
            @NotNull String algo, @NotNull String userName, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall = accountListValidateBeforeCall(algo, userName, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AccountListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for acquiringAlgorithm
     *
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Acquiring Algorithm </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Acquiring-Algorithm">Acquiring
     *     Algorithm(MARKET_DATA) Documentation</a>
     */
    private okhttp3.Call acquiringAlgorithmCall() throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/pub/algoList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acquiringAlgorithmValidateBeforeCall() throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {};
            Method method = this.getClass().getMethod("acquiringAlgorithm");
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return acquiringAlgorithmCall();
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Acquiring Algorithm(MARKET_DATA) Acquiring Algorithm Weight: 1
     *
     * @return ApiResponse&lt;AcquiringAlgorithmResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Acquiring Algorithm </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Acquiring-Algorithm">Acquiring
     *     Algorithm(MARKET_DATA) Documentation</a>
     */
    public ApiResponse<AcquiringAlgorithmResponse> acquiringAlgorithm() throws ApiException {
        okhttp3.Call localVarCall = acquiringAlgorithmValidateBeforeCall();
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AcquiringAlgorithmResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for acquiringCoinname
     *
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Acquiring CoinName </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Acquiring-CoinName">Acquiring
     *     CoinName(MARKET_DATA) Documentation</a>
     */
    private okhttp3.Call acquiringCoinnameCall() throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/pub/coinList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acquiringCoinnameValidateBeforeCall() throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {};
            Method method = this.getClass().getMethod("acquiringCoinname");
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return acquiringCoinnameCall();
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Acquiring CoinName(MARKET_DATA) Acquiring CoinName Weight: 1
     *
     * @return ApiResponse&lt;AcquiringCoinnameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Acquiring CoinName </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Acquiring-CoinName">Acquiring
     *     CoinName(MARKET_DATA) Documentation</a>
     */
    public ApiResponse<AcquiringCoinnameResponse> acquiringCoinname() throws ApiException {
        okhttp3.Call localVarCall = acquiringCoinnameValidateBeforeCall();
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AcquiringCoinnameResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for cancelHashrateResaleConfiguration
     *
     * @param cancelHashrateResaleConfigurationRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cancel hashrate resale configuration </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Cancel-hashrate-resale-configuration">Cancel
     *     hashrate resale configuration(USER_DATA) Documentation</a>
     */
    private okhttp3.Call cancelHashrateResaleConfigurationCall(
            CancelHashrateResaleConfigurationRequest cancelHashrateResaleConfigurationRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/hash-transfer/config/cancel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cancelHashrateResaleConfigurationRequest.getConfigId() != null) {
            localVarFormParams.put(
                    "configId", cancelHashrateResaleConfigurationRequest.getConfigId());
        }

        if (cancelHashrateResaleConfigurationRequest.getUserName() != null) {
            localVarFormParams.put(
                    "userName", cancelHashrateResaleConfigurationRequest.getUserName());
        }

        if (cancelHashrateResaleConfigurationRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", cancelHashrateResaleConfigurationRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelHashrateResaleConfigurationValidateBeforeCall(
            CancelHashrateResaleConfigurationRequest cancelHashrateResaleConfigurationRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {cancelHashrateResaleConfigurationRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "cancelHashrateResaleConfiguration",
                                    CancelHashrateResaleConfigurationRequest.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return cancelHashrateResaleConfigurationCall(
                        cancelHashrateResaleConfigurationRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Cancel hashrate resale configuration(USER_DATA) Weight: 5
     *
     * @param cancelHashrateResaleConfigurationRequest (required)
     * @return ApiResponse&lt;CancelHashrateResaleConfigurationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cancel hashrate resale configuration </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Cancel-hashrate-resale-configuration">Cancel
     *     hashrate resale configuration(USER_DATA) Documentation</a>
     */
    public ApiResponse<CancelHashrateResaleConfigurationResponse> cancelHashrateResaleConfiguration(
            @Valid @NotNull
                    CancelHashrateResaleConfigurationRequest
                            cancelHashrateResaleConfigurationRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                cancelHashrateResaleConfigurationValidateBeforeCall(
                        cancelHashrateResaleConfigurationRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<CancelHashrateResaleConfigurationResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for earningsList
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param coin Coin Name (optional)
     * @param startDate Millisecond timestamp (optional)
     * @param endDate Millisecond timestamp (optional)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Earnings List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/mining/rest-api/Earnings-List">Earnings
     *     List(USER_DATA) Documentation</a>
     */
    private okhttp3.Call earningsListCall(
            String algo,
            String userName,
            String coin,
            Long startDate,
            Long endDate,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/payment/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algo", algo));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call earningsListValidateBeforeCall(
            String algo,
            String userName,
            String coin,
            Long startDate,
            Long endDate,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "earningsList",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return earningsListCall(
                        algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Earnings List(USER_DATA) Query Earnings List Weight: 5
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param coin Coin Name (optional)
     * @param startDate Millisecond timestamp (optional)
     * @param endDate Millisecond timestamp (optional)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;EarningsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Earnings List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/mining/rest-api/Earnings-List">Earnings
     *     List(USER_DATA) Documentation</a>
     */
    public ApiResponse<EarningsListResponse> earningsList(
            @NotNull String algo,
            @NotNull String userName,
            String coin,
            Long startDate,
            Long endDate,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                earningsListValidateBeforeCall(
                        algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<EarningsListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for extraBonusList
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param coin Coin Name (optional)
     * @param startDate Millisecond timestamp (optional)
     * @param endDate Millisecond timestamp (optional)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Extra Bonus List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/mining/rest-api/Extra-Bonus-List">Extra
     *     Bonus List(USER_DATA) Documentation</a>
     */
    private okhttp3.Call extraBonusListCall(
            String algo,
            String userName,
            String coin,
            Long startDate,
            Long endDate,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/payment/other";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algo", algo));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extraBonusListValidateBeforeCall(
            String algo,
            String userName,
            String coin,
            Long startDate,
            Long endDate,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "extraBonusList",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return extraBonusListCall(
                        algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Extra Bonus List(USER_DATA) Extra Bonus List Weight: 5
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param coin Coin Name (optional)
     * @param startDate Millisecond timestamp (optional)
     * @param endDate Millisecond timestamp (optional)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;ExtraBonusListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Extra Bonus List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/mining/rest-api/Extra-Bonus-List">Extra
     *     Bonus List(USER_DATA) Documentation</a>
     */
    public ApiResponse<ExtraBonusListResponse> extraBonusList(
            @NotNull String algo,
            @NotNull String userName,
            String coin,
            Long startDate,
            Long endDate,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                extraBonusListValidateBeforeCall(
                        algo, userName, coin, startDate, endDate, pageIndex, pageSize, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<ExtraBonusListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for hashrateResaleDetail
     *
     * @param configId Mining ID 168 (required)
     * @param userName Mining account test (required)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Hashrate Resale Detail </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Hashrate-Resale-Detail">Hashrate
     *     Resale Detail(USER_DATA) Documentation</a>
     */
    private okhttp3.Call hashrateResaleDetailCall(
            Long configId, String userName, Long pageIndex, Long pageSize, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/hash-transfer/profit/details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("configId", configId));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hashrateResaleDetailValidateBeforeCall(
            Long configId, String userName, Long pageIndex, Long pageSize, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {configId, userName, pageIndex, pageSize, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "hashrateResaleDetail",
                                    Long.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return hashrateResaleDetailCall(
                        configId, userName, pageIndex, pageSize, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Hashrate Resale Detail(USER_DATA) Hashrate Resale Detail(USER_DATA) Weight: 5
     *
     * @param configId Mining ID 168 (required)
     * @param userName Mining account test (required)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;HashrateResaleDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Hashrate Resale Detail </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Hashrate-Resale-Detail">Hashrate
     *     Resale Detail(USER_DATA) Documentation</a>
     */
    public ApiResponse<HashrateResaleDetailResponse> hashrateResaleDetail(
            @NotNull Long configId,
            @NotNull String userName,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                hashrateResaleDetailValidateBeforeCall(
                        configId, userName, pageIndex, pageSize, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<HashrateResaleDetailResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for hashrateResaleList
     *
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Hashrate Resale List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Hashrate-Resale-List">Hashrate
     *     Resale List Documentation</a>
     */
    private okhttp3.Call hashrateResaleListCall(Long pageIndex, Long pageSize, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/hash-transfer/config/details/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hashrateResaleListValidateBeforeCall(
            Long pageIndex, Long pageSize, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {pageIndex, pageSize, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod("hashrateResaleList", Long.class, Long.class, Long.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return hashrateResaleListCall(pageIndex, pageSize, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Hashrate Resale List Hashrate Resale List Weight: 5
     *
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;HashrateResaleListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Hashrate Resale List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Hashrate-Resale-List">Hashrate
     *     Resale List Documentation</a>
     */
    public ApiResponse<HashrateResaleListResponse> hashrateResaleList(
            Long pageIndex, Long pageSize, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                hashrateResaleListValidateBeforeCall(pageIndex, pageSize, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<HashrateResaleListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for hashrateResaleRequest
     *
     * @param hashrateResaleRequestRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Hashrate Resale Request </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Hashrate-Resale-Request">Hashrate
     *     Resale Request(USER_DATA) Documentation</a>
     */
    private okhttp3.Call hashrateResaleRequestCall(
            HashrateResaleRequestRequest hashrateResaleRequestRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/hash-transfer/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (hashrateResaleRequestRequest.getUserName() != null) {
            localVarFormParams.put("userName", hashrateResaleRequestRequest.getUserName());
        }

        if (hashrateResaleRequestRequest.getAlgo() != null) {
            localVarFormParams.put("algo", hashrateResaleRequestRequest.getAlgo());
        }

        if (hashrateResaleRequestRequest.getEndDate() != null) {
            localVarFormParams.put("endDate", hashrateResaleRequestRequest.getEndDate());
        }

        if (hashrateResaleRequestRequest.getStartDate() != null) {
            localVarFormParams.put("startDate", hashrateResaleRequestRequest.getStartDate());
        }

        if (hashrateResaleRequestRequest.getToPoolUser() != null) {
            localVarFormParams.put("toPoolUser", hashrateResaleRequestRequest.getToPoolUser());
        }

        if (hashrateResaleRequestRequest.getHashRate() != null) {
            localVarFormParams.put("hashRate", hashrateResaleRequestRequest.getHashRate());
        }

        if (hashrateResaleRequestRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", hashrateResaleRequestRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hashrateResaleRequestValidateBeforeCall(
            HashrateResaleRequestRequest hashrateResaleRequestRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {hashrateResaleRequestRequest};
            Method method =
                    this.getClass()
                            .getMethod("hashrateResaleRequest", HashrateResaleRequestRequest.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return hashrateResaleRequestCall(hashrateResaleRequestRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Hashrate Resale Request(USER_DATA) Hashrate Resale Request Weight: 5
     *
     * @param hashrateResaleRequestRequest (required)
     * @return ApiResponse&lt;HashrateResaleRequestResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Hashrate Resale Request </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Hashrate-Resale-Request">Hashrate
     *     Resale Request(USER_DATA) Documentation</a>
     */
    public ApiResponse<HashrateResaleRequestResponse> hashrateResaleRequest(
            @Valid @NotNull HashrateResaleRequestRequest hashrateResaleRequestRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                hashrateResaleRequestValidateBeforeCall(hashrateResaleRequestRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<HashrateResaleRequestResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for miningAccountEarning
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param startDate Millisecond timestamp (optional)
     * @param endDate Millisecond timestamp (optional)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Mining Account Earning </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Mining-Account-Earning">Mining
     *     Account Earning(USER_DATA) Documentation</a>
     */
    private okhttp3.Call miningAccountEarningCall(
            String algo,
            Long startDate,
            Long endDate,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/payment/uid";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algo", algo));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call miningAccountEarningValidateBeforeCall(
            String algo,
            Long startDate,
            Long endDate,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {algo, startDate, endDate, pageIndex, pageSize, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "miningAccountEarning",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return miningAccountEarningCall(
                        algo, startDate, endDate, pageIndex, pageSize, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Mining Account Earning(USER_DATA) Mining Account Earning Weight: 5
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param startDate Millisecond timestamp (optional)
     * @param endDate Millisecond timestamp (optional)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param pageSize Min 10,Max 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;MiningAccountEarningResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Mining Account Earning </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Mining-Account-Earning">Mining
     *     Account Earning(USER_DATA) Documentation</a>
     */
    public ApiResponse<MiningAccountEarningResponse> miningAccountEarning(
            @NotNull String algo,
            Long startDate,
            Long endDate,
            Long pageIndex,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                miningAccountEarningValidateBeforeCall(
                        algo, startDate, endDate, pageIndex, pageSize, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<MiningAccountEarningResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for requestForDetailMinerList
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param workerName Miner’s name(required) bhdc1.16A10404B (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Request for Detail Miner List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Request-for-Detail-Miner-List">Request
     *     for Detail Miner List(USER_DATA) Documentation</a>
     */
    private okhttp3.Call requestForDetailMinerListCall(
            String algo, String userName, String workerName, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/worker/detail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algo", algo));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (workerName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workerName", workerName));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestForDetailMinerListValidateBeforeCall(
            String algo, String userName, String workerName, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {algo, userName, workerName, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "requestForDetailMinerList",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return requestForDetailMinerListCall(algo, userName, workerName, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Request for Detail Miner List(USER_DATA) Request for Detail Miner List Weight: 5
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param workerName Miner’s name(required) bhdc1.16A10404B (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;RequestForDetailMinerListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Request for Detail Miner List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Request-for-Detail-Miner-List">Request
     *     for Detail Miner List(USER_DATA) Documentation</a>
     */
    public ApiResponse<RequestForDetailMinerListResponse> requestForDetailMinerList(
            @NotNull String algo,
            @NotNull String userName,
            @NotNull String workerName,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                requestForDetailMinerListValidateBeforeCall(algo, userName, workerName, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<RequestForDetailMinerListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for requestForMinerList
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param sort sort sequence(default&#x3D;0)0 positive sequence，1 negative sequence (optional)
     * @param sortColumn Sort by( default 1): &lt;br&gt;&lt;/br&gt;1: miner name,
     *     &lt;br&gt;&lt;/br&gt;2: real-time computing power, &lt;br&gt;&lt;/br&gt;3: daily average
     *     computing power, &lt;br&gt;&lt;/br&gt;4: real-time rejection rate,
     *     &lt;br&gt;&lt;/br&gt;5: last submission time (optional)
     * @param workerStatus miners status(default&#x3D;0),0 all，1 valid，2 invalid，3 failure
     *     (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Request for Miner List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Request-for-Miner-List">Request
     *     for Miner List(USER_DATA) Documentation</a>
     */
    private okhttp3.Call requestForMinerListCall(
            String algo,
            String userName,
            Long pageIndex,
            Long sort,
            Long sortColumn,
            Long workerStatus,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/worker/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algo", algo));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortColumn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortColumn", sortColumn));
        }

        if (workerStatus != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("workerStatus", workerStatus));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestForMinerListValidateBeforeCall(
            String algo,
            String userName,
            Long pageIndex,
            Long sort,
            Long sortColumn,
            Long workerStatus,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                algo, userName, pageIndex, sort, sortColumn, workerStatus, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "requestForMinerList",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return requestForMinerListCall(
                        algo, userName, pageIndex, sort, sortColumn, workerStatus, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Request for Miner List(USER_DATA) Request for Miner List Weight: 5
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param pageIndex Page number, empty default first page, starting from 1 (optional)
     * @param sort sort sequence(default&#x3D;0)0 positive sequence，1 negative sequence (optional)
     * @param sortColumn Sort by( default 1): &lt;br&gt;&lt;/br&gt;1: miner name,
     *     &lt;br&gt;&lt;/br&gt;2: real-time computing power, &lt;br&gt;&lt;/br&gt;3: daily average
     *     computing power, &lt;br&gt;&lt;/br&gt;4: real-time rejection rate,
     *     &lt;br&gt;&lt;/br&gt;5: last submission time (optional)
     * @param workerStatus miners status(default&#x3D;0),0 all，1 valid，2 invalid，3 failure
     *     (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;RequestForMinerListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Request for Miner List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/mining/rest-api/Request-for-Miner-List">Request
     *     for Miner List(USER_DATA) Documentation</a>
     */
    public ApiResponse<RequestForMinerListResponse> requestForMinerList(
            @NotNull String algo,
            @NotNull String userName,
            Long pageIndex,
            Long sort,
            Long sortColumn,
            Long workerStatus,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                requestForMinerListValidateBeforeCall(
                        algo, userName, pageIndex, sort, sortColumn, workerStatus, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<RequestForMinerListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for statisticList
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Statistic List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/mining/rest-api/Statistic-List">Statistic
     *     List(USER_DATA) Documentation</a>
     */
    private okhttp3.Call statisticListCall(String algo, String userName, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/mining/statistics/user/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algo", algo));
        }

        if (userName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userName", userName));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call statisticListValidateBeforeCall(
            String algo, String userName, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {algo, userName, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod("statisticList", String.class, String.class, Long.class);
            Set<ConstraintViolation<MiningApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return statisticListCall(algo, userName, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Statistic List(USER_DATA) Statistic List Weight: 5
     *
     * @param algo Algorithm(sha256) sha256 (required)
     * @param userName Mining account test (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;StatisticListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Statistic List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/mining/rest-api/Statistic-List">Statistic
     *     List(USER_DATA) Documentation</a>
     */
    public ApiResponse<StatisticListResponse> statisticList(
            @NotNull String algo, @NotNull String userName, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall = statisticListValidateBeforeCall(algo, userName, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<StatisticListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
