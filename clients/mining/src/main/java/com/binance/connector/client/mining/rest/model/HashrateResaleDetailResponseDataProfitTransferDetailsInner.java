/*
 * Binance Mining REST API
 * OpenAPI Specification for the Binance Mining REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.mining.rest.model;

import com.binance.connector.client.mining.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** HashrateResaleDetailResponseDataProfitTransferDetailsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class HashrateResaleDetailResponseDataProfitTransferDetailsInner {
    public static final String SERIALIZED_NAME_POOL_USERNAME = "poolUsername";

    @SerializedName(SERIALIZED_NAME_POOL_USERNAME)
    @jakarta.annotation.Nullable
    private String poolUsername;

    public static final String SERIALIZED_NAME_TO_POOL_USERNAME = "toPoolUsername";

    @SerializedName(SERIALIZED_NAME_TO_POOL_USERNAME)
    @jakarta.annotation.Nullable
    private String toPoolUsername;

    public static final String SERIALIZED_NAME_ALGO_NAME = "algoName";

    @SerializedName(SERIALIZED_NAME_ALGO_NAME)
    @jakarta.annotation.Nullable
    private String algoName;

    public static final String SERIALIZED_NAME_HASH_RATE = "hashRate";

    @SerializedName(SERIALIZED_NAME_HASH_RATE)
    @jakarta.annotation.Nullable
    private Long hashRate;

    public static final String SERIALIZED_NAME_DAY = "day";

    @SerializedName(SERIALIZED_NAME_DAY)
    @jakarta.annotation.Nullable
    private Long day;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private Double amount;

    public static final String SERIALIZED_NAME_COIN_NAME = "coinName";

    @SerializedName(SERIALIZED_NAME_COIN_NAME)
    @jakarta.annotation.Nullable
    private String coinName;

    public HashrateResaleDetailResponseDataProfitTransferDetailsInner() {}

    public HashrateResaleDetailResponseDataProfitTransferDetailsInner poolUsername(
            @jakarta.annotation.Nullable String poolUsername) {
        this.poolUsername = poolUsername;
        return this;
    }

    /**
     * Get poolUsername
     *
     * @return poolUsername
     */
    @jakarta.annotation.Nullable
    public String getPoolUsername() {
        return poolUsername;
    }

    public void setPoolUsername(@jakarta.annotation.Nullable String poolUsername) {
        this.poolUsername = poolUsername;
    }

    public HashrateResaleDetailResponseDataProfitTransferDetailsInner toPoolUsername(
            @jakarta.annotation.Nullable String toPoolUsername) {
        this.toPoolUsername = toPoolUsername;
        return this;
    }

    /**
     * Get toPoolUsername
     *
     * @return toPoolUsername
     */
    @jakarta.annotation.Nullable
    public String getToPoolUsername() {
        return toPoolUsername;
    }

    public void setToPoolUsername(@jakarta.annotation.Nullable String toPoolUsername) {
        this.toPoolUsername = toPoolUsername;
    }

    public HashrateResaleDetailResponseDataProfitTransferDetailsInner algoName(
            @jakarta.annotation.Nullable String algoName) {
        this.algoName = algoName;
        return this;
    }

    /**
     * Get algoName
     *
     * @return algoName
     */
    @jakarta.annotation.Nullable
    public String getAlgoName() {
        return algoName;
    }

    public void setAlgoName(@jakarta.annotation.Nullable String algoName) {
        this.algoName = algoName;
    }

    public HashrateResaleDetailResponseDataProfitTransferDetailsInner hashRate(
            @jakarta.annotation.Nullable Long hashRate) {
        this.hashRate = hashRate;
        return this;
    }

    /**
     * Get hashRate
     *
     * @return hashRate
     */
    @jakarta.annotation.Nullable
    public Long getHashRate() {
        return hashRate;
    }

    public void setHashRate(@jakarta.annotation.Nullable Long hashRate) {
        this.hashRate = hashRate;
    }

    public HashrateResaleDetailResponseDataProfitTransferDetailsInner day(
            @jakarta.annotation.Nullable Long day) {
        this.day = day;
        return this;
    }

    /**
     * Get day
     *
     * @return day
     */
    @jakarta.annotation.Nullable
    public Long getDay() {
        return day;
    }

    public void setDay(@jakarta.annotation.Nullable Long day) {
        this.day = day;
    }

    public HashrateResaleDetailResponseDataProfitTransferDetailsInner amount(
            @jakarta.annotation.Nullable Double amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable Double amount) {
        this.amount = amount;
    }

    public HashrateResaleDetailResponseDataProfitTransferDetailsInner coinName(
            @jakarta.annotation.Nullable String coinName) {
        this.coinName = coinName;
        return this;
    }

    /**
     * Get coinName
     *
     * @return coinName
     */
    @jakarta.annotation.Nullable
    public String getCoinName() {
        return coinName;
    }

    public void setCoinName(@jakarta.annotation.Nullable String coinName) {
        this.coinName = coinName;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HashrateResaleDetailResponseDataProfitTransferDetailsInner
                hashrateResaleDetailResponseDataProfitTransferDetailsInner =
                        (HashrateResaleDetailResponseDataProfitTransferDetailsInner) o;
        return Objects.equals(
                        this.poolUsername,
                        hashrateResaleDetailResponseDataProfitTransferDetailsInner.poolUsername)
                && Objects.equals(
                        this.toPoolUsername,
                        hashrateResaleDetailResponseDataProfitTransferDetailsInner.toPoolUsername)
                && Objects.equals(
                        this.algoName,
                        hashrateResaleDetailResponseDataProfitTransferDetailsInner.algoName)
                && Objects.equals(
                        this.hashRate,
                        hashrateResaleDetailResponseDataProfitTransferDetailsInner.hashRate)
                && Objects.equals(
                        this.day, hashrateResaleDetailResponseDataProfitTransferDetailsInner.day)
                && Objects.equals(
                        this.amount,
                        hashrateResaleDetailResponseDataProfitTransferDetailsInner.amount)
                && Objects.equals(
                        this.coinName,
                        hashrateResaleDetailResponseDataProfitTransferDetailsInner.coinName);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                poolUsername, toPoolUsername, algoName, hashRate, day, amount, coinName);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class HashrateResaleDetailResponseDataProfitTransferDetailsInner {\n");
        sb.append("		poolUsername: ").append(toIndentedString(poolUsername)).append("\n");
        sb.append("		toPoolUsername: ").append(toIndentedString(toPoolUsername)).append("\n");
        sb.append("		algoName: ").append(toIndentedString(algoName)).append("\n");
        sb.append("		hashRate: ").append(toIndentedString(hashRate)).append("\n");
        sb.append("		day: ").append(toIndentedString(day)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		coinName: ").append(toIndentedString(coinName)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object poolUsernameValue = getPoolUsername();
        String poolUsernameValueAsString = "";
        poolUsernameValueAsString = poolUsernameValue.toString();
        sb.append("poolUsername=").append(urlEncode(poolUsernameValueAsString)).append("");
        Object toPoolUsernameValue = getToPoolUsername();
        String toPoolUsernameValueAsString = "";
        toPoolUsernameValueAsString = toPoolUsernameValue.toString();
        sb.append("toPoolUsername=").append(urlEncode(toPoolUsernameValueAsString)).append("");
        Object algoNameValue = getAlgoName();
        String algoNameValueAsString = "";
        algoNameValueAsString = algoNameValue.toString();
        sb.append("algoName=").append(urlEncode(algoNameValueAsString)).append("");
        Object hashRateValue = getHashRate();
        String hashRateValueAsString = "";
        hashRateValueAsString = hashRateValue.toString();
        sb.append("hashRate=").append(urlEncode(hashRateValueAsString)).append("");
        Object dayValue = getDay();
        String dayValueAsString = "";
        dayValueAsString = dayValue.toString();
        sb.append("day=").append(urlEncode(dayValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object coinNameValue = getCoinName();
        String coinNameValueAsString = "";
        coinNameValueAsString = coinNameValue.toString();
        sb.append("coinName=").append(urlEncode(coinNameValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("poolUsername");
        openapiFields.add("toPoolUsername");
        openapiFields.add("algoName");
        openapiFields.add("hashRate");
        openapiFields.add("day");
        openapiFields.add("amount");
        openapiFields.add("coinName");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     HashrateResaleDetailResponseDataProfitTransferDetailsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!HashrateResaleDetailResponseDataProfitTransferDetailsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " HashrateResaleDetailResponseDataProfitTransferDetailsInner"
                                    + " is not found in the empty JSON string",
                                HashrateResaleDetailResponseDataProfitTransferDetailsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!HashrateResaleDetailResponseDataProfitTransferDetailsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `HashrateResaleDetailResponseDataProfitTransferDetailsInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("poolUsername") != null && !jsonObj.get("poolUsername").isJsonNull())
                && !jsonObj.get("poolUsername").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `poolUsername` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("poolUsername").toString()));
        }
        if ((jsonObj.get("toPoolUsername") != null && !jsonObj.get("toPoolUsername").isJsonNull())
                && !jsonObj.get("toPoolUsername").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toPoolUsername` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("toPoolUsername").toString()));
        }
        if ((jsonObj.get("algoName") != null && !jsonObj.get("algoName").isJsonNull())
                && !jsonObj.get("algoName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `algoName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("algoName").toString()));
        }
        if ((jsonObj.get("coinName") != null && !jsonObj.get("coinName").isJsonNull())
                && !jsonObj.get("coinName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coinName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("coinName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!HashrateResaleDetailResponseDataProfitTransferDetailsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'HashrateResaleDetailResponseDataProfitTransferDetailsInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<HashrateResaleDetailResponseDataProfitTransferDetailsInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            HashrateResaleDetailResponseDataProfitTransferDetailsInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<HashrateResaleDetailResponseDataProfitTransferDetailsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                HashrateResaleDetailResponseDataProfitTransferDetailsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public HashrateResaleDetailResponseDataProfitTransferDetailsInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of HashrateResaleDetailResponseDataProfitTransferDetailsInner given an
     * JSON string
     *
     * @param jsonString JSON string
     * @return An instance of HashrateResaleDetailResponseDataProfitTransferDetailsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     HashrateResaleDetailResponseDataProfitTransferDetailsInner
     */
    public static HashrateResaleDetailResponseDataProfitTransferDetailsInner fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        HashrateResaleDetailResponseDataProfitTransferDetailsInner.class);
    }

    /**
     * Convert an instance of HashrateResaleDetailResponseDataProfitTransferDetailsInner to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
