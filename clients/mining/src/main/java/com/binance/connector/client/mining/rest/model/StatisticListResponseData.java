/*
 * Binance Mining REST API
 * OpenAPI Specification for the Binance Mining REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.mining.rest.model;

import com.binance.connector.client.mining.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** StatisticListResponseData */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class StatisticListResponseData {
    public static final String SERIALIZED_NAME_FIFTEEN_MIN_HASH_RATE = "fifteenMinHashRate";

    @SerializedName(SERIALIZED_NAME_FIFTEEN_MIN_HASH_RATE)
    @jakarta.annotation.Nullable
    private String fifteenMinHashRate;

    public static final String SERIALIZED_NAME_DAY_HASH_RATE = "dayHashRate";

    @SerializedName(SERIALIZED_NAME_DAY_HASH_RATE)
    @jakarta.annotation.Nullable
    private String dayHashRate;

    public static final String SERIALIZED_NAME_VALID_NUM = "validNum";

    @SerializedName(SERIALIZED_NAME_VALID_NUM)
    @jakarta.annotation.Nullable
    private Long validNum;

    public static final String SERIALIZED_NAME_INVALID_NUM = "invalidNum";

    @SerializedName(SERIALIZED_NAME_INVALID_NUM)
    @jakarta.annotation.Nullable
    private Long invalidNum;

    public static final String SERIALIZED_NAME_PROFIT_TODAY = "profitToday";

    @SerializedName(SERIALIZED_NAME_PROFIT_TODAY)
    @jakarta.annotation.Nullable
    private StatisticListResponseDataProfitToday profitToday;

    public static final String SERIALIZED_NAME_PROFIT_YESTERDAY = "profitYesterday";

    @SerializedName(SERIALIZED_NAME_PROFIT_YESTERDAY)
    @jakarta.annotation.Nullable
    private StatisticListResponseDataProfitToday profitYesterday;

    public static final String SERIALIZED_NAME_USER_NAME = "userName";

    @SerializedName(SERIALIZED_NAME_USER_NAME)
    @jakarta.annotation.Nullable
    private String userName;

    public static final String SERIALIZED_NAME_UNIT = "unit";

    @SerializedName(SERIALIZED_NAME_UNIT)
    @jakarta.annotation.Nullable
    private String unit;

    public static final String SERIALIZED_NAME_ALGO = "algo";

    @SerializedName(SERIALIZED_NAME_ALGO)
    @jakarta.annotation.Nullable
    private String algo;

    public StatisticListResponseData() {}

    public StatisticListResponseData fifteenMinHashRate(
            @jakarta.annotation.Nullable String fifteenMinHashRate) {
        this.fifteenMinHashRate = fifteenMinHashRate;
        return this;
    }

    /**
     * Get fifteenMinHashRate
     *
     * @return fifteenMinHashRate
     */
    @jakarta.annotation.Nullable
    public String getFifteenMinHashRate() {
        return fifteenMinHashRate;
    }

    public void setFifteenMinHashRate(@jakarta.annotation.Nullable String fifteenMinHashRate) {
        this.fifteenMinHashRate = fifteenMinHashRate;
    }

    public StatisticListResponseData dayHashRate(@jakarta.annotation.Nullable String dayHashRate) {
        this.dayHashRate = dayHashRate;
        return this;
    }

    /**
     * Get dayHashRate
     *
     * @return dayHashRate
     */
    @jakarta.annotation.Nullable
    public String getDayHashRate() {
        return dayHashRate;
    }

    public void setDayHashRate(@jakarta.annotation.Nullable String dayHashRate) {
        this.dayHashRate = dayHashRate;
    }

    public StatisticListResponseData validNum(@jakarta.annotation.Nullable Long validNum) {
        this.validNum = validNum;
        return this;
    }

    /**
     * Get validNum
     *
     * @return validNum
     */
    @jakarta.annotation.Nullable
    public Long getValidNum() {
        return validNum;
    }

    public void setValidNum(@jakarta.annotation.Nullable Long validNum) {
        this.validNum = validNum;
    }

    public StatisticListResponseData invalidNum(@jakarta.annotation.Nullable Long invalidNum) {
        this.invalidNum = invalidNum;
        return this;
    }

    /**
     * Get invalidNum
     *
     * @return invalidNum
     */
    @jakarta.annotation.Nullable
    public Long getInvalidNum() {
        return invalidNum;
    }

    public void setInvalidNum(@jakarta.annotation.Nullable Long invalidNum) {
        this.invalidNum = invalidNum;
    }

    public StatisticListResponseData profitToday(
            @jakarta.annotation.Nullable StatisticListResponseDataProfitToday profitToday) {
        this.profitToday = profitToday;
        return this;
    }

    /**
     * Get profitToday
     *
     * @return profitToday
     */
    @jakarta.annotation.Nullable
    @Valid
    public StatisticListResponseDataProfitToday getProfitToday() {
        return profitToday;
    }

    public void setProfitToday(
            @jakarta.annotation.Nullable StatisticListResponseDataProfitToday profitToday) {
        this.profitToday = profitToday;
    }

    public StatisticListResponseData profitYesterday(
            @jakarta.annotation.Nullable StatisticListResponseDataProfitToday profitYesterday) {
        this.profitYesterday = profitYesterday;
        return this;
    }

    /**
     * Get profitYesterday
     *
     * @return profitYesterday
     */
    @jakarta.annotation.Nullable
    @Valid
    public StatisticListResponseDataProfitToday getProfitYesterday() {
        return profitYesterday;
    }

    public void setProfitYesterday(
            @jakarta.annotation.Nullable StatisticListResponseDataProfitToday profitYesterday) {
        this.profitYesterday = profitYesterday;
    }

    public StatisticListResponseData userName(@jakarta.annotation.Nullable String userName) {
        this.userName = userName;
        return this;
    }

    /**
     * Get userName
     *
     * @return userName
     */
    @jakarta.annotation.Nullable
    public String getUserName() {
        return userName;
    }

    public void setUserName(@jakarta.annotation.Nullable String userName) {
        this.userName = userName;
    }

    public StatisticListResponseData unit(@jakarta.annotation.Nullable String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get unit
     *
     * @return unit
     */
    @jakarta.annotation.Nullable
    public String getUnit() {
        return unit;
    }

    public void setUnit(@jakarta.annotation.Nullable String unit) {
        this.unit = unit;
    }

    public StatisticListResponseData algo(@jakarta.annotation.Nullable String algo) {
        this.algo = algo;
        return this;
    }

    /**
     * Get algo
     *
     * @return algo
     */
    @jakarta.annotation.Nullable
    public String getAlgo() {
        return algo;
    }

    public void setAlgo(@jakarta.annotation.Nullable String algo) {
        this.algo = algo;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StatisticListResponseData statisticListResponseData = (StatisticListResponseData) o;
        return Objects.equals(this.fifteenMinHashRate, statisticListResponseData.fifteenMinHashRate)
                && Objects.equals(this.dayHashRate, statisticListResponseData.dayHashRate)
                && Objects.equals(this.validNum, statisticListResponseData.validNum)
                && Objects.equals(this.invalidNum, statisticListResponseData.invalidNum)
                && Objects.equals(this.profitToday, statisticListResponseData.profitToday)
                && Objects.equals(this.profitYesterday, statisticListResponseData.profitYesterday)
                && Objects.equals(this.userName, statisticListResponseData.userName)
                && Objects.equals(this.unit, statisticListResponseData.unit)
                && Objects.equals(this.algo, statisticListResponseData.algo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                fifteenMinHashRate,
                dayHashRate,
                validNum,
                invalidNum,
                profitToday,
                profitYesterday,
                userName,
                unit,
                algo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class StatisticListResponseData {\n");
        sb.append("		fifteenMinHashRate: ")
                .append(toIndentedString(fifteenMinHashRate))
                .append("\n");
        sb.append("		dayHashRate: ").append(toIndentedString(dayHashRate)).append("\n");
        sb.append("		validNum: ").append(toIndentedString(validNum)).append("\n");
        sb.append("		invalidNum: ").append(toIndentedString(invalidNum)).append("\n");
        sb.append("		profitToday: ").append(toIndentedString(profitToday)).append("\n");
        sb.append("		profitYesterday: ").append(toIndentedString(profitYesterday)).append("\n");
        sb.append("		userName: ").append(toIndentedString(userName)).append("\n");
        sb.append("		unit: ").append(toIndentedString(unit)).append("\n");
        sb.append("		algo: ").append(toIndentedString(algo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object fifteenMinHashRateValue = getFifteenMinHashRate();
        String fifteenMinHashRateValueAsString = "";
        fifteenMinHashRateValueAsString = fifteenMinHashRateValue.toString();
        sb.append("fifteenMinHashRate=")
                .append(urlEncode(fifteenMinHashRateValueAsString))
                .append("");
        Object dayHashRateValue = getDayHashRate();
        String dayHashRateValueAsString = "";
        dayHashRateValueAsString = dayHashRateValue.toString();
        sb.append("dayHashRate=").append(urlEncode(dayHashRateValueAsString)).append("");
        Object validNumValue = getValidNum();
        String validNumValueAsString = "";
        validNumValueAsString = validNumValue.toString();
        sb.append("validNum=").append(urlEncode(validNumValueAsString)).append("");
        Object invalidNumValue = getInvalidNum();
        String invalidNumValueAsString = "";
        invalidNumValueAsString = invalidNumValue.toString();
        sb.append("invalidNum=").append(urlEncode(invalidNumValueAsString)).append("");
        Object profitTodayValue = getProfitToday();
        String profitTodayValueAsString = "";
        profitTodayValueAsString = profitTodayValue.toString();
        sb.append("profitToday=").append(urlEncode(profitTodayValueAsString)).append("");
        Object profitYesterdayValue = getProfitYesterday();
        String profitYesterdayValueAsString = "";
        profitYesterdayValueAsString = profitYesterdayValue.toString();
        sb.append("profitYesterday=").append(urlEncode(profitYesterdayValueAsString)).append("");
        Object userNameValue = getUserName();
        String userNameValueAsString = "";
        userNameValueAsString = userNameValue.toString();
        sb.append("userName=").append(urlEncode(userNameValueAsString)).append("");
        Object unitValue = getUnit();
        String unitValueAsString = "";
        unitValueAsString = unitValue.toString();
        sb.append("unit=").append(urlEncode(unitValueAsString)).append("");
        Object algoValue = getAlgo();
        String algoValueAsString = "";
        algoValueAsString = algoValue.toString();
        sb.append("algo=").append(urlEncode(algoValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("fifteenMinHashRate");
        openapiFields.add("dayHashRate");
        openapiFields.add("validNum");
        openapiFields.add("invalidNum");
        openapiFields.add("profitToday");
        openapiFields.add("profitYesterday");
        openapiFields.add("userName");
        openapiFields.add("unit");
        openapiFields.add("algo");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to StatisticListResponseData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!StatisticListResponseData.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in StatisticListResponseData is not found"
                                        + " in the empty JSON string",
                                StatisticListResponseData.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!StatisticListResponseData.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `StatisticListResponseData` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("fifteenMinHashRate") != null
                        && !jsonObj.get("fifteenMinHashRate").isJsonNull())
                && !jsonObj.get("fifteenMinHashRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fifteenMinHashRate` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("fifteenMinHashRate").toString()));
        }
        if ((jsonObj.get("dayHashRate") != null && !jsonObj.get("dayHashRate").isJsonNull())
                && !jsonObj.get("dayHashRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `dayHashRate` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("dayHashRate").toString()));
        }
        // validate the optional field `profitToday`
        if (jsonObj.get("profitToday") != null && !jsonObj.get("profitToday").isJsonNull()) {
            StatisticListResponseDataProfitToday.validateJsonElement(jsonObj.get("profitToday"));
        }
        // validate the optional field `profitYesterday`
        if (jsonObj.get("profitYesterday") != null
                && !jsonObj.get("profitYesterday").isJsonNull()) {
            StatisticListResponseDataProfitToday.validateJsonElement(
                    jsonObj.get("profitYesterday"));
        }
        if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull())
                && !jsonObj.get("userName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `userName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("userName").toString()));
        }
        if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull())
                && !jsonObj.get("unit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `unit` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("unit").toString()));
        }
        if ((jsonObj.get("algo") != null && !jsonObj.get("algo").isJsonNull())
                && !jsonObj.get("algo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `algo` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("algo").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!StatisticListResponseData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'StatisticListResponseData' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<StatisticListResponseData> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(StatisticListResponseData.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<StatisticListResponseData>() {
                        @Override
                        public void write(JsonWriter out, StatisticListResponseData value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public StatisticListResponseData read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of StatisticListResponseData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of StatisticListResponseData
     * @throws IOException if the JSON string is invalid with respect to StatisticListResponseData
     */
    public static StatisticListResponseData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, StatisticListResponseData.class);
    }

    /**
     * Convert an instance of StatisticListResponseData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
