/*
 * Binance Mining REST API
 * OpenAPI Specification for the Binance Mining REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.mining.rest.model;

import com.binance.connector.client.mining.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** EarningsListResponseDataAccountProfitsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class EarningsListResponseDataAccountProfitsInner {
    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private Long type;

    public static final String SERIALIZED_NAME_HASH_TRANSFER = "hashTransfer";

    @SerializedName(SERIALIZED_NAME_HASH_TRANSFER)
    @jakarta.annotation.Nullable
    private Long hashTransfer;

    public static final String SERIALIZED_NAME_TRANSFER_AMOUNT = "transferAmount";

    @SerializedName(SERIALIZED_NAME_TRANSFER_AMOUNT)
    @jakarta.annotation.Nullable
    private Double transferAmount;

    public static final String SERIALIZED_NAME_DAY_HASH_RATE = "dayHashRate";

    @SerializedName(SERIALIZED_NAME_DAY_HASH_RATE)
    @jakarta.annotation.Nullable
    private Long dayHashRate;

    public static final String SERIALIZED_NAME_PROFIT_AMOUNT = "profitAmount";

    @SerializedName(SERIALIZED_NAME_PROFIT_AMOUNT)
    @jakarta.annotation.Nullable
    private Double profitAmount;

    public static final String SERIALIZED_NAME_COIN_NAME = "coinName";

    @SerializedName(SERIALIZED_NAME_COIN_NAME)
    @jakarta.annotation.Nullable
    private String coinName;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private Long status;

    public EarningsListResponseDataAccountProfitsInner() {}

    public EarningsListResponseDataAccountProfitsInner time(
            @jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public EarningsListResponseDataAccountProfitsInner type(
            @jakarta.annotation.Nullable Long type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public Long getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable Long type) {
        this.type = type;
    }

    public EarningsListResponseDataAccountProfitsInner hashTransfer(
            @jakarta.annotation.Nullable Long hashTransfer) {
        this.hashTransfer = hashTransfer;
        return this;
    }

    /**
     * Get hashTransfer
     *
     * @return hashTransfer
     */
    @jakarta.annotation.Nullable
    public Long getHashTransfer() {
        return hashTransfer;
    }

    public void setHashTransfer(@jakarta.annotation.Nullable Long hashTransfer) {
        this.hashTransfer = hashTransfer;
    }

    public EarningsListResponseDataAccountProfitsInner transferAmount(
            @jakarta.annotation.Nullable Double transferAmount) {
        this.transferAmount = transferAmount;
        return this;
    }

    /**
     * Get transferAmount
     *
     * @return transferAmount
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getTransferAmount() {
        return transferAmount;
    }

    public void setTransferAmount(@jakarta.annotation.Nullable Double transferAmount) {
        this.transferAmount = transferAmount;
    }

    public EarningsListResponseDataAccountProfitsInner dayHashRate(
            @jakarta.annotation.Nullable Long dayHashRate) {
        this.dayHashRate = dayHashRate;
        return this;
    }

    /**
     * Get dayHashRate
     *
     * @return dayHashRate
     */
    @jakarta.annotation.Nullable
    public Long getDayHashRate() {
        return dayHashRate;
    }

    public void setDayHashRate(@jakarta.annotation.Nullable Long dayHashRate) {
        this.dayHashRate = dayHashRate;
    }

    public EarningsListResponseDataAccountProfitsInner profitAmount(
            @jakarta.annotation.Nullable Double profitAmount) {
        this.profitAmount = profitAmount;
        return this;
    }

    /**
     * Get profitAmount
     *
     * @return profitAmount
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getProfitAmount() {
        return profitAmount;
    }

    public void setProfitAmount(@jakarta.annotation.Nullable Double profitAmount) {
        this.profitAmount = profitAmount;
    }

    public EarningsListResponseDataAccountProfitsInner coinName(
            @jakarta.annotation.Nullable String coinName) {
        this.coinName = coinName;
        return this;
    }

    /**
     * Get coinName
     *
     * @return coinName
     */
    @jakarta.annotation.Nullable
    public String getCoinName() {
        return coinName;
    }

    public void setCoinName(@jakarta.annotation.Nullable String coinName) {
        this.coinName = coinName;
    }

    public EarningsListResponseDataAccountProfitsInner status(
            @jakarta.annotation.Nullable Long status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public Long getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable Long status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EarningsListResponseDataAccountProfitsInner earningsListResponseDataAccountProfitsInner =
                (EarningsListResponseDataAccountProfitsInner) o;
        return Objects.equals(this.time, earningsListResponseDataAccountProfitsInner.time)
                && Objects.equals(this.type, earningsListResponseDataAccountProfitsInner.type)
                && Objects.equals(
                        this.hashTransfer, earningsListResponseDataAccountProfitsInner.hashTransfer)
                && Objects.equals(
                        this.transferAmount,
                        earningsListResponseDataAccountProfitsInner.transferAmount)
                && Objects.equals(
                        this.dayHashRate, earningsListResponseDataAccountProfitsInner.dayHashRate)
                && Objects.equals(
                        this.profitAmount, earningsListResponseDataAccountProfitsInner.profitAmount)
                && Objects.equals(
                        this.coinName, earningsListResponseDataAccountProfitsInner.coinName)
                && Objects.equals(this.status, earningsListResponseDataAccountProfitsInner.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                time,
                type,
                hashTransfer,
                transferAmount,
                dayHashRate,
                profitAmount,
                coinName,
                status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EarningsListResponseDataAccountProfitsInner {\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		hashTransfer: ").append(toIndentedString(hashTransfer)).append("\n");
        sb.append("		transferAmount: ").append(toIndentedString(transferAmount)).append("\n");
        sb.append("		dayHashRate: ").append(toIndentedString(dayHashRate)).append("\n");
        sb.append("		profitAmount: ").append(toIndentedString(profitAmount)).append("\n");
        sb.append("		coinName: ").append(toIndentedString(coinName)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object hashTransferValue = getHashTransfer();
        String hashTransferValueAsString = "";
        hashTransferValueAsString = hashTransferValue.toString();
        sb.append("hashTransfer=").append(urlEncode(hashTransferValueAsString)).append("");
        Object transferAmountValue = getTransferAmount();
        String transferAmountValueAsString = "";
        transferAmountValueAsString = transferAmountValue.toString();
        sb.append("transferAmount=").append(urlEncode(transferAmountValueAsString)).append("");
        Object dayHashRateValue = getDayHashRate();
        String dayHashRateValueAsString = "";
        dayHashRateValueAsString = dayHashRateValue.toString();
        sb.append("dayHashRate=").append(urlEncode(dayHashRateValueAsString)).append("");
        Object profitAmountValue = getProfitAmount();
        String profitAmountValueAsString = "";
        profitAmountValueAsString = profitAmountValue.toString();
        sb.append("profitAmount=").append(urlEncode(profitAmountValueAsString)).append("");
        Object coinNameValue = getCoinName();
        String coinNameValueAsString = "";
        coinNameValueAsString = coinNameValue.toString();
        sb.append("coinName=").append(urlEncode(coinNameValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("time");
        openapiFields.add("type");
        openapiFields.add("hashTransfer");
        openapiFields.add("transferAmount");
        openapiFields.add("dayHashRate");
        openapiFields.add("profitAmount");
        openapiFields.add("coinName");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     EarningsListResponseDataAccountProfitsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EarningsListResponseDataAccountProfitsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " EarningsListResponseDataAccountProfitsInner is not found in"
                                    + " the empty JSON string",
                                EarningsListResponseDataAccountProfitsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EarningsListResponseDataAccountProfitsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `EarningsListResponseDataAccountProfitsInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("coinName") != null && !jsonObj.get("coinName").isJsonNull())
                && !jsonObj.get("coinName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coinName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("coinName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EarningsListResponseDataAccountProfitsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'EarningsListResponseDataAccountProfitsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EarningsListResponseDataAccountProfitsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(EarningsListResponseDataAccountProfitsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<EarningsListResponseDataAccountProfitsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, EarningsListResponseDataAccountProfitsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public EarningsListResponseDataAccountProfitsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of EarningsListResponseDataAccountProfitsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EarningsListResponseDataAccountProfitsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     EarningsListResponseDataAccountProfitsInner
     */
    public static EarningsListResponseDataAccountProfitsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, EarningsListResponseDataAccountProfitsInner.class);
    }

    /**
     * Convert an instance of EarningsListResponseDataAccountProfitsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
