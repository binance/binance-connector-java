/*
 * Binance Mining REST API
 * OpenAPI Specification for the Binance Mining REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.mining.rest.model;

import com.binance.connector.client.mining.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** RequestForMinerListResponseDataWorkerDatasInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class RequestForMinerListResponseDataWorkerDatasInner {
    public static final String SERIALIZED_NAME_WORKER_ID = "workerId";

    @SerializedName(SERIALIZED_NAME_WORKER_ID)
    @jakarta.annotation.Nullable
    private String workerId;

    public static final String SERIALIZED_NAME_WORKER_NAME = "workerName";

    @SerializedName(SERIALIZED_NAME_WORKER_NAME)
    @jakarta.annotation.Nullable
    private String workerName;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private Long status;

    public static final String SERIALIZED_NAME_HASH_RATE = "hashRate";

    @SerializedName(SERIALIZED_NAME_HASH_RATE)
    @jakarta.annotation.Nullable
    private Long hashRate;

    public static final String SERIALIZED_NAME_DAY_HASH_RATE = "dayHashRate";

    @SerializedName(SERIALIZED_NAME_DAY_HASH_RATE)
    @jakarta.annotation.Nullable
    private Double dayHashRate;

    public static final String SERIALIZED_NAME_REJECT_RATE = "rejectRate";

    @SerializedName(SERIALIZED_NAME_REJECT_RATE)
    @jakarta.annotation.Nullable
    private Long rejectRate;

    public static final String SERIALIZED_NAME_LAST_SHARE_TIME = "lastShareTime";

    @SerializedName(SERIALIZED_NAME_LAST_SHARE_TIME)
    @jakarta.annotation.Nullable
    private Long lastShareTime;

    public RequestForMinerListResponseDataWorkerDatasInner() {}

    public RequestForMinerListResponseDataWorkerDatasInner workerId(
            @jakarta.annotation.Nullable String workerId) {
        this.workerId = workerId;
        return this;
    }

    /**
     * Get workerId
     *
     * @return workerId
     */
    @jakarta.annotation.Nullable
    public String getWorkerId() {
        return workerId;
    }

    public void setWorkerId(@jakarta.annotation.Nullable String workerId) {
        this.workerId = workerId;
    }

    public RequestForMinerListResponseDataWorkerDatasInner workerName(
            @jakarta.annotation.Nullable String workerName) {
        this.workerName = workerName;
        return this;
    }

    /**
     * Get workerName
     *
     * @return workerName
     */
    @jakarta.annotation.Nullable
    public String getWorkerName() {
        return workerName;
    }

    public void setWorkerName(@jakarta.annotation.Nullable String workerName) {
        this.workerName = workerName;
    }

    public RequestForMinerListResponseDataWorkerDatasInner status(
            @jakarta.annotation.Nullable Long status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public Long getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable Long status) {
        this.status = status;
    }

    public RequestForMinerListResponseDataWorkerDatasInner hashRate(
            @jakarta.annotation.Nullable Long hashRate) {
        this.hashRate = hashRate;
        return this;
    }

    /**
     * Get hashRate
     *
     * @return hashRate
     */
    @jakarta.annotation.Nullable
    public Long getHashRate() {
        return hashRate;
    }

    public void setHashRate(@jakarta.annotation.Nullable Long hashRate) {
        this.hashRate = hashRate;
    }

    public RequestForMinerListResponseDataWorkerDatasInner dayHashRate(
            @jakarta.annotation.Nullable Double dayHashRate) {
        this.dayHashRate = dayHashRate;
        return this;
    }

    /**
     * Get dayHashRate
     *
     * @return dayHashRate
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getDayHashRate() {
        return dayHashRate;
    }

    public void setDayHashRate(@jakarta.annotation.Nullable Double dayHashRate) {
        this.dayHashRate = dayHashRate;
    }

    public RequestForMinerListResponseDataWorkerDatasInner rejectRate(
            @jakarta.annotation.Nullable Long rejectRate) {
        this.rejectRate = rejectRate;
        return this;
    }

    /**
     * Get rejectRate
     *
     * @return rejectRate
     */
    @jakarta.annotation.Nullable
    public Long getRejectRate() {
        return rejectRate;
    }

    public void setRejectRate(@jakarta.annotation.Nullable Long rejectRate) {
        this.rejectRate = rejectRate;
    }

    public RequestForMinerListResponseDataWorkerDatasInner lastShareTime(
            @jakarta.annotation.Nullable Long lastShareTime) {
        this.lastShareTime = lastShareTime;
        return this;
    }

    /**
     * Get lastShareTime
     *
     * @return lastShareTime
     */
    @jakarta.annotation.Nullable
    public Long getLastShareTime() {
        return lastShareTime;
    }

    public void setLastShareTime(@jakarta.annotation.Nullable Long lastShareTime) {
        this.lastShareTime = lastShareTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequestForMinerListResponseDataWorkerDatasInner
                requestForMinerListResponseDataWorkerDatasInner =
                        (RequestForMinerListResponseDataWorkerDatasInner) o;
        return Objects.equals(
                        this.workerId, requestForMinerListResponseDataWorkerDatasInner.workerId)
                && Objects.equals(
                        this.workerName, requestForMinerListResponseDataWorkerDatasInner.workerName)
                && Objects.equals(
                        this.status, requestForMinerListResponseDataWorkerDatasInner.status)
                && Objects.equals(
                        this.hashRate, requestForMinerListResponseDataWorkerDatasInner.hashRate)
                && Objects.equals(
                        this.dayHashRate,
                        requestForMinerListResponseDataWorkerDatasInner.dayHashRate)
                && Objects.equals(
                        this.rejectRate, requestForMinerListResponseDataWorkerDatasInner.rejectRate)
                && Objects.equals(
                        this.lastShareTime,
                        requestForMinerListResponseDataWorkerDatasInner.lastShareTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                workerId, workerName, status, hashRate, dayHashRate, rejectRate, lastShareTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RequestForMinerListResponseDataWorkerDatasInner {\n");
        sb.append("		workerId: ").append(toIndentedString(workerId)).append("\n");
        sb.append("		workerName: ").append(toIndentedString(workerName)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		hashRate: ").append(toIndentedString(hashRate)).append("\n");
        sb.append("		dayHashRate: ").append(toIndentedString(dayHashRate)).append("\n");
        sb.append("		rejectRate: ").append(toIndentedString(rejectRate)).append("\n");
        sb.append("		lastShareTime: ").append(toIndentedString(lastShareTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object workerIdValue = getWorkerId();
        String workerIdValueAsString = "";
        workerIdValueAsString = workerIdValue.toString();
        sb.append("workerId=").append(urlEncode(workerIdValueAsString)).append("");
        Object workerNameValue = getWorkerName();
        String workerNameValueAsString = "";
        workerNameValueAsString = workerNameValue.toString();
        sb.append("workerName=").append(urlEncode(workerNameValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object hashRateValue = getHashRate();
        String hashRateValueAsString = "";
        hashRateValueAsString = hashRateValue.toString();
        sb.append("hashRate=").append(urlEncode(hashRateValueAsString)).append("");
        Object dayHashRateValue = getDayHashRate();
        String dayHashRateValueAsString = "";
        dayHashRateValueAsString = dayHashRateValue.toString();
        sb.append("dayHashRate=").append(urlEncode(dayHashRateValueAsString)).append("");
        Object rejectRateValue = getRejectRate();
        String rejectRateValueAsString = "";
        rejectRateValueAsString = rejectRateValue.toString();
        sb.append("rejectRate=").append(urlEncode(rejectRateValueAsString)).append("");
        Object lastShareTimeValue = getLastShareTime();
        String lastShareTimeValueAsString = "";
        lastShareTimeValueAsString = lastShareTimeValue.toString();
        sb.append("lastShareTime=").append(urlEncode(lastShareTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("workerId");
        openapiFields.add("workerName");
        openapiFields.add("status");
        openapiFields.add("hashRate");
        openapiFields.add("dayHashRate");
        openapiFields.add("rejectRate");
        openapiFields.add("lastShareTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     RequestForMinerListResponseDataWorkerDatasInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RequestForMinerListResponseDataWorkerDatasInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " RequestForMinerListResponseDataWorkerDatasInner is not"
                                        + " found in the empty JSON string",
                                RequestForMinerListResponseDataWorkerDatasInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RequestForMinerListResponseDataWorkerDatasInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `RequestForMinerListResponseDataWorkerDatasInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("workerId") != null && !jsonObj.get("workerId").isJsonNull())
                && !jsonObj.get("workerId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workerId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workerId").toString()));
        }
        if ((jsonObj.get("workerName") != null && !jsonObj.get("workerName").isJsonNull())
                && !jsonObj.get("workerName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workerName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workerName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RequestForMinerListResponseDataWorkerDatasInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'RequestForMinerListResponseDataWorkerDatasInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RequestForMinerListResponseDataWorkerDatasInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(RequestForMinerListResponseDataWorkerDatasInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<RequestForMinerListResponseDataWorkerDatasInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                RequestForMinerListResponseDataWorkerDatasInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public RequestForMinerListResponseDataWorkerDatasInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of RequestForMinerListResponseDataWorkerDatasInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RequestForMinerListResponseDataWorkerDatasInner
     * @throws IOException if the JSON string is invalid with respect to
     *     RequestForMinerListResponseDataWorkerDatasInner
     */
    public static RequestForMinerListResponseDataWorkerDatasInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, RequestForMinerListResponseDataWorkerDatasInner.class);
    }

    /**
     * Convert an instance of RequestForMinerListResponseDataWorkerDatasInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
