/*
 * Binance Mining REST API
 * OpenAPI Specification for the Binance Mining REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.mining.rest.model;

import com.binance.connector.client.mining.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** HashrateResaleListResponseDataConfigDetailsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class HashrateResaleListResponseDataConfigDetailsInner {
    public static final String SERIALIZED_NAME_CONFIG_ID = "configId";

    @SerializedName(SERIALIZED_NAME_CONFIG_ID)
    @jakarta.annotation.Nullable
    private Long configId;

    public static final String SERIALIZED_NAME_POOL_USERNAME = "poolUsername";

    @SerializedName(SERIALIZED_NAME_POOL_USERNAME)
    @jakarta.annotation.Nullable
    private String poolUsername;

    public static final String SERIALIZED_NAME_TO_POOL_USERNAME = "toPoolUsername";

    @SerializedName(SERIALIZED_NAME_TO_POOL_USERNAME)
    @jakarta.annotation.Nullable
    private String toPoolUsername;

    public static final String SERIALIZED_NAME_ALGO_NAME = "algoName";

    @SerializedName(SERIALIZED_NAME_ALGO_NAME)
    @jakarta.annotation.Nullable
    private String algoName;

    public static final String SERIALIZED_NAME_HASH_RATE = "hashRate";

    @SerializedName(SERIALIZED_NAME_HASH_RATE)
    @jakarta.annotation.Nullable
    private Long hashRate;

    public static final String SERIALIZED_NAME_START_DAY = "startDay";

    @SerializedName(SERIALIZED_NAME_START_DAY)
    @jakarta.annotation.Nullable
    private Long startDay;

    public static final String SERIALIZED_NAME_END_DAY = "endDay";

    @SerializedName(SERIALIZED_NAME_END_DAY)
    @jakarta.annotation.Nullable
    private Long endDay;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private Long status;

    public HashrateResaleListResponseDataConfigDetailsInner() {}

    public HashrateResaleListResponseDataConfigDetailsInner configId(
            @jakarta.annotation.Nullable Long configId) {
        this.configId = configId;
        return this;
    }

    /**
     * Get configId
     *
     * @return configId
     */
    @jakarta.annotation.Nullable
    public Long getConfigId() {
        return configId;
    }

    public void setConfigId(@jakarta.annotation.Nullable Long configId) {
        this.configId = configId;
    }

    public HashrateResaleListResponseDataConfigDetailsInner poolUsername(
            @jakarta.annotation.Nullable String poolUsername) {
        this.poolUsername = poolUsername;
        return this;
    }

    /**
     * Get poolUsername
     *
     * @return poolUsername
     */
    @jakarta.annotation.Nullable
    public String getPoolUsername() {
        return poolUsername;
    }

    public void setPoolUsername(@jakarta.annotation.Nullable String poolUsername) {
        this.poolUsername = poolUsername;
    }

    public HashrateResaleListResponseDataConfigDetailsInner toPoolUsername(
            @jakarta.annotation.Nullable String toPoolUsername) {
        this.toPoolUsername = toPoolUsername;
        return this;
    }

    /**
     * Get toPoolUsername
     *
     * @return toPoolUsername
     */
    @jakarta.annotation.Nullable
    public String getToPoolUsername() {
        return toPoolUsername;
    }

    public void setToPoolUsername(@jakarta.annotation.Nullable String toPoolUsername) {
        this.toPoolUsername = toPoolUsername;
    }

    public HashrateResaleListResponseDataConfigDetailsInner algoName(
            @jakarta.annotation.Nullable String algoName) {
        this.algoName = algoName;
        return this;
    }

    /**
     * Get algoName
     *
     * @return algoName
     */
    @jakarta.annotation.Nullable
    public String getAlgoName() {
        return algoName;
    }

    public void setAlgoName(@jakarta.annotation.Nullable String algoName) {
        this.algoName = algoName;
    }

    public HashrateResaleListResponseDataConfigDetailsInner hashRate(
            @jakarta.annotation.Nullable Long hashRate) {
        this.hashRate = hashRate;
        return this;
    }

    /**
     * Get hashRate
     *
     * @return hashRate
     */
    @jakarta.annotation.Nullable
    public Long getHashRate() {
        return hashRate;
    }

    public void setHashRate(@jakarta.annotation.Nullable Long hashRate) {
        this.hashRate = hashRate;
    }

    public HashrateResaleListResponseDataConfigDetailsInner startDay(
            @jakarta.annotation.Nullable Long startDay) {
        this.startDay = startDay;
        return this;
    }

    /**
     * Get startDay
     *
     * @return startDay
     */
    @jakarta.annotation.Nullable
    public Long getStartDay() {
        return startDay;
    }

    public void setStartDay(@jakarta.annotation.Nullable Long startDay) {
        this.startDay = startDay;
    }

    public HashrateResaleListResponseDataConfigDetailsInner endDay(
            @jakarta.annotation.Nullable Long endDay) {
        this.endDay = endDay;
        return this;
    }

    /**
     * Get endDay
     *
     * @return endDay
     */
    @jakarta.annotation.Nullable
    public Long getEndDay() {
        return endDay;
    }

    public void setEndDay(@jakarta.annotation.Nullable Long endDay) {
        this.endDay = endDay;
    }

    public HashrateResaleListResponseDataConfigDetailsInner status(
            @jakarta.annotation.Nullable Long status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public Long getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable Long status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HashrateResaleListResponseDataConfigDetailsInner
                hashrateResaleListResponseDataConfigDetailsInner =
                        (HashrateResaleListResponseDataConfigDetailsInner) o;
        return Objects.equals(
                        this.configId, hashrateResaleListResponseDataConfigDetailsInner.configId)
                && Objects.equals(
                        this.poolUsername,
                        hashrateResaleListResponseDataConfigDetailsInner.poolUsername)
                && Objects.equals(
                        this.toPoolUsername,
                        hashrateResaleListResponseDataConfigDetailsInner.toPoolUsername)
                && Objects.equals(
                        this.algoName, hashrateResaleListResponseDataConfigDetailsInner.algoName)
                && Objects.equals(
                        this.hashRate, hashrateResaleListResponseDataConfigDetailsInner.hashRate)
                && Objects.equals(
                        this.startDay, hashrateResaleListResponseDataConfigDetailsInner.startDay)
                && Objects.equals(
                        this.endDay, hashrateResaleListResponseDataConfigDetailsInner.endDay)
                && Objects.equals(
                        this.status, hashrateResaleListResponseDataConfigDetailsInner.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                configId,
                poolUsername,
                toPoolUsername,
                algoName,
                hashRate,
                startDay,
                endDay,
                status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class HashrateResaleListResponseDataConfigDetailsInner {\n");
        sb.append("		configId: ").append(toIndentedString(configId)).append("\n");
        sb.append("		poolUsername: ").append(toIndentedString(poolUsername)).append("\n");
        sb.append("		toPoolUsername: ").append(toIndentedString(toPoolUsername)).append("\n");
        sb.append("		algoName: ").append(toIndentedString(algoName)).append("\n");
        sb.append("		hashRate: ").append(toIndentedString(hashRate)).append("\n");
        sb.append("		startDay: ").append(toIndentedString(startDay)).append("\n");
        sb.append("		endDay: ").append(toIndentedString(endDay)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object configIdValue = getConfigId();
        String configIdValueAsString = "";
        configIdValueAsString = configIdValue.toString();
        sb.append("configId=").append(urlEncode(configIdValueAsString)).append("");
        Object poolUsernameValue = getPoolUsername();
        String poolUsernameValueAsString = "";
        poolUsernameValueAsString = poolUsernameValue.toString();
        sb.append("poolUsername=").append(urlEncode(poolUsernameValueAsString)).append("");
        Object toPoolUsernameValue = getToPoolUsername();
        String toPoolUsernameValueAsString = "";
        toPoolUsernameValueAsString = toPoolUsernameValue.toString();
        sb.append("toPoolUsername=").append(urlEncode(toPoolUsernameValueAsString)).append("");
        Object algoNameValue = getAlgoName();
        String algoNameValueAsString = "";
        algoNameValueAsString = algoNameValue.toString();
        sb.append("algoName=").append(urlEncode(algoNameValueAsString)).append("");
        Object hashRateValue = getHashRate();
        String hashRateValueAsString = "";
        hashRateValueAsString = hashRateValue.toString();
        sb.append("hashRate=").append(urlEncode(hashRateValueAsString)).append("");
        Object startDayValue = getStartDay();
        String startDayValueAsString = "";
        startDayValueAsString = startDayValue.toString();
        sb.append("startDay=").append(urlEncode(startDayValueAsString)).append("");
        Object endDayValue = getEndDay();
        String endDayValueAsString = "";
        endDayValueAsString = endDayValue.toString();
        sb.append("endDay=").append(urlEncode(endDayValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("configId");
        openapiFields.add("poolUsername");
        openapiFields.add("toPoolUsername");
        openapiFields.add("algoName");
        openapiFields.add("hashRate");
        openapiFields.add("startDay");
        openapiFields.add("endDay");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     HashrateResaleListResponseDataConfigDetailsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!HashrateResaleListResponseDataConfigDetailsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " HashrateResaleListResponseDataConfigDetailsInner is not"
                                        + " found in the empty JSON string",
                                HashrateResaleListResponseDataConfigDetailsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!HashrateResaleListResponseDataConfigDetailsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `HashrateResaleListResponseDataConfigDetailsInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("poolUsername") != null && !jsonObj.get("poolUsername").isJsonNull())
                && !jsonObj.get("poolUsername").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `poolUsername` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("poolUsername").toString()));
        }
        if ((jsonObj.get("toPoolUsername") != null && !jsonObj.get("toPoolUsername").isJsonNull())
                && !jsonObj.get("toPoolUsername").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toPoolUsername` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("toPoolUsername").toString()));
        }
        if ((jsonObj.get("algoName") != null && !jsonObj.get("algoName").isJsonNull())
                && !jsonObj.get("algoName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `algoName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("algoName").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!HashrateResaleListResponseDataConfigDetailsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'HashrateResaleListResponseDataConfigDetailsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<HashrateResaleListResponseDataConfigDetailsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(HashrateResaleListResponseDataConfigDetailsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<HashrateResaleListResponseDataConfigDetailsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                HashrateResaleListResponseDataConfigDetailsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public HashrateResaleListResponseDataConfigDetailsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of HashrateResaleListResponseDataConfigDetailsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of HashrateResaleListResponseDataConfigDetailsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     HashrateResaleListResponseDataConfigDetailsInner
     */
    public static HashrateResaleListResponseDataConfigDetailsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, HashrateResaleListResponseDataConfigDetailsInner.class);
    }

    /**
     * Convert an instance of HashrateResaleListResponseDataConfigDetailsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
