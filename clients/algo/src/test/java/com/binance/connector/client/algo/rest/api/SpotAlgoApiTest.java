/*
 * Binance Algo REST API
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.algo.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.algo.rest.model.CancelAlgoOrderSpotAlgoResponse;
import com.binance.connector.client.algo.rest.model.QueryCurrentAlgoOpenOrdersSpotAlgoResponse;
import com.binance.connector.client.algo.rest.model.QueryHistoricalAlgoOrdersSpotAlgoResponse;
import com.binance.connector.client.algo.rest.model.QuerySubOrdersSpotAlgoResponse;
import com.binance.connector.client.algo.rest.model.TimeWeightedAveragePriceSpotAlgoRequest;
import com.binance.connector.client.algo.rest.model.TimeWeightedAveragePriceSpotAlgoResponse;
import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for SpotAlgoApi */
public class SpotAlgoApiTest {

    private SpotAlgoApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new SpotAlgoApi(apiClientSpy);
    }

    /**
     * Cancel Algo Order(TRADE)
     *
     * <p>Cancel an open TWAP order Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelAlgoOrderSpotAlgoTest() throws ApiException, CryptoException {
        Long algoId = 1L;
        Long recvWindow = 5000L;
        ApiResponse<CancelAlgoOrderSpotAlgoResponse> response =
                api.cancelAlgoOrderSpotAlgo(algoId, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "algoId=1&recvWindow=5000&timestamp=1736393892000", signInputCaptor.getValue());
        assertEquals(
                "4dcc675276dcc7a5eddf3f11f98e221dc22b447b227be14ec73a51c61602f2a5",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/algo/spot/order", actualRequest.url().encodedPath());
    }

    /**
     * Query Current Algo Open Orders(USER_DATA)
     *
     * <p>Get all open SPOT TWAP orders Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryCurrentAlgoOpenOrdersSpotAlgoTest() throws ApiException, CryptoException {
        Long recvWindow = 5000L;
        ApiResponse<QueryCurrentAlgoOpenOrdersSpotAlgoResponse> response =
                api.queryCurrentAlgoOpenOrdersSpotAlgo(recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("recvWindow=5000&timestamp=1736393892000", signInputCaptor.getValue());
        assertEquals(
                "2cdd1e484bce80021437bee6b762e6a276b1954c3a0c011a16f6f2f6a47aba75",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/algo/spot/openOrders", actualRequest.url().encodedPath());
    }

    /**
     * Query Historical Algo Orders(USER_DATA)
     *
     * <p>Get all historical SPOT TWAP orders Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryHistoricalAlgoOrdersSpotAlgoTest() throws ApiException, CryptoException {
        String symbol = "BTCUSDT";
        String side = "BUY";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long page = 1L;
        Long pageSize = 100L;
        Long recvWindow = 5000L;
        ApiResponse<QueryHistoricalAlgoOrdersSpotAlgoResponse> response =
                api.queryHistoricalAlgoOrdersSpotAlgo(
                        symbol, side, startTime, endTime, page, pageSize, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "symbol=BTCUSDT&side=BUY&startTime=1623319461670&endTime=1641782889000&page=1&pageSize=100&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "0e8d5de4dda9f55852d3ecc886e0ca289d66e4696a2fc21f553d9348242a14f1",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/algo/spot/historicalOrders", actualRequest.url().encodedPath());
    }

    /**
     * Query Sub Orders(USER_DATA)
     *
     * <p>Get respective sub orders for a specified algoId Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySubOrdersSpotAlgoTest() throws ApiException, CryptoException {
        Long algoId = 1L;
        Long page = 1L;
        Long pageSize = 100L;
        Long recvWindow = 5000L;
        ApiResponse<QuerySubOrdersSpotAlgoResponse> response =
                api.querySubOrdersSpotAlgo(algoId, page, pageSize, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "algoId=1&page=1&pageSize=100&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "a862a7c54c6a5c1f71b2563d1d86c61f8763cb9514dc20641231cc60f7ac0445",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/algo/spot/subOrders", actualRequest.url().encodedPath());
    }

    /**
     * Time-Weighted Average Price(Twap) New Order(TRADE)
     *
     * <p>Place a new spot TWAP order with Algo service. * Total Algo open orders max allowed:
     * &#x60;20&#x60; orders. Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void timeWeightedAveragePriceSpotAlgoTest() throws ApiException, CryptoException {
        TimeWeightedAveragePriceSpotAlgoRequest timeWeightedAveragePriceSpotAlgoRequest =
                new TimeWeightedAveragePriceSpotAlgoRequest();

        timeWeightedAveragePriceSpotAlgoRequest.symbol("BTCUSDT");
        timeWeightedAveragePriceSpotAlgoRequest.side("BUY");
        timeWeightedAveragePriceSpotAlgoRequest.quantity(1d);
        timeWeightedAveragePriceSpotAlgoRequest.duration(5000L);

        ApiResponse<TimeWeightedAveragePriceSpotAlgoResponse> response =
                api.timeWeightedAveragePriceSpotAlgo(timeWeightedAveragePriceSpotAlgoRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000duration=5000&symbol=BTCUSDT&side=BUY&quantity=1",
                signInputCaptor.getValue());
        assertEquals(
                "cedadcc9e9190f0546a7247d2b7b627c8814e5e1f47b616211656ed04130a1a6",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/algo/spot/newOrderTwap", actualRequest.url().encodedPath());
    }
}
