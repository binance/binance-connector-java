/*
 * Binance Algo REST API
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.algo.rest.model;

import com.binance.connector.client.algo.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner {
    public static final String SERIALIZED_NAME_ALGO_ID = "algoId";

    @SerializedName(SERIALIZED_NAME_ALGO_ID)
    @jakarta.annotation.Nullable
    private Long algoId;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private String positionSide;

    public static final String SERIALIZED_NAME_TOTAL_QTY = "totalQty";

    @SerializedName(SERIALIZED_NAME_TOTAL_QTY)
    @jakarta.annotation.Nullable
    private String totalQty;

    public static final String SERIALIZED_NAME_EXECUTED_QTY = "executedQty";

    @SerializedName(SERIALIZED_NAME_EXECUTED_QTY)
    @jakarta.annotation.Nullable
    private String executedQty;

    public static final String SERIALIZED_NAME_EXECUTED_AMT = "executedAmt";

    @SerializedName(SERIALIZED_NAME_EXECUTED_AMT)
    @jakarta.annotation.Nullable
    private String executedAmt;

    public static final String SERIALIZED_NAME_AVG_PRICE = "avgPrice";

    @SerializedName(SERIALIZED_NAME_AVG_PRICE)
    @jakarta.annotation.Nullable
    private String avgPrice;

    public static final String SERIALIZED_NAME_CLIENT_ALGO_ID = "clientAlgoId";

    @SerializedName(SERIALIZED_NAME_CLIENT_ALGO_ID)
    @jakarta.annotation.Nullable
    private String clientAlgoId;

    public static final String SERIALIZED_NAME_BOOK_TIME = "bookTime";

    @SerializedName(SERIALIZED_NAME_BOOK_TIME)
    @jakarta.annotation.Nullable
    private Long bookTime;

    public static final String SERIALIZED_NAME_END_TIME = "endTime";

    @SerializedName(SERIALIZED_NAME_END_TIME)
    @jakarta.annotation.Nullable
    private Long endTime;

    public static final String SERIALIZED_NAME_ALGO_STATUS = "algoStatus";

    @SerializedName(SERIALIZED_NAME_ALGO_STATUS)
    @jakarta.annotation.Nullable
    private String algoStatus;

    public static final String SERIALIZED_NAME_ALGO_TYPE = "algoType";

    @SerializedName(SERIALIZED_NAME_ALGO_TYPE)
    @jakarta.annotation.Nullable
    private String algoType;

    public static final String SERIALIZED_NAME_URGENCY = "urgency";

    @SerializedName(SERIALIZED_NAME_URGENCY)
    @jakarta.annotation.Nullable
    private String urgency;

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner() {}

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner algoId(
            @jakarta.annotation.Nullable Long algoId) {
        this.algoId = algoId;
        return this;
    }

    /**
     * Get algoId
     *
     * @return algoId
     */
    @jakarta.annotation.Nullable
    public Long getAlgoId() {
        return algoId;
    }

    public void setAlgoId(@jakarta.annotation.Nullable Long algoId) {
        this.algoId = algoId;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner side(
            @jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner positionSide(
            @jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    public String getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner totalQty(
            @jakarta.annotation.Nullable String totalQty) {
        this.totalQty = totalQty;
        return this;
    }

    /**
     * Get totalQty
     *
     * @return totalQty
     */
    @jakarta.annotation.Nullable
    public String getTotalQty() {
        return totalQty;
    }

    public void setTotalQty(@jakarta.annotation.Nullable String totalQty) {
        this.totalQty = totalQty;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner executedQty(
            @jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
        return this;
    }

    /**
     * Get executedQty
     *
     * @return executedQty
     */
    @jakarta.annotation.Nullable
    public String getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner executedAmt(
            @jakarta.annotation.Nullable String executedAmt) {
        this.executedAmt = executedAmt;
        return this;
    }

    /**
     * Get executedAmt
     *
     * @return executedAmt
     */
    @jakarta.annotation.Nullable
    public String getExecutedAmt() {
        return executedAmt;
    }

    public void setExecutedAmt(@jakarta.annotation.Nullable String executedAmt) {
        this.executedAmt = executedAmt;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner avgPrice(
            @jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
        return this;
    }

    /**
     * Get avgPrice
     *
     * @return avgPrice
     */
    @jakarta.annotation.Nullable
    public String getAvgPrice() {
        return avgPrice;
    }

    public void setAvgPrice(@jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner clientAlgoId(
            @jakarta.annotation.Nullable String clientAlgoId) {
        this.clientAlgoId = clientAlgoId;
        return this;
    }

    /**
     * Get clientAlgoId
     *
     * @return clientAlgoId
     */
    @jakarta.annotation.Nullable
    public String getClientAlgoId() {
        return clientAlgoId;
    }

    public void setClientAlgoId(@jakarta.annotation.Nullable String clientAlgoId) {
        this.clientAlgoId = clientAlgoId;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner bookTime(
            @jakarta.annotation.Nullable Long bookTime) {
        this.bookTime = bookTime;
        return this;
    }

    /**
     * Get bookTime
     *
     * @return bookTime
     */
    @jakarta.annotation.Nullable
    public Long getBookTime() {
        return bookTime;
    }

    public void setBookTime(@jakarta.annotation.Nullable Long bookTime) {
        this.bookTime = bookTime;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner endTime(
            @jakarta.annotation.Nullable Long endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get endTime
     *
     * @return endTime
     */
    @jakarta.annotation.Nullable
    public Long getEndTime() {
        return endTime;
    }

    public void setEndTime(@jakarta.annotation.Nullable Long endTime) {
        this.endTime = endTime;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner algoStatus(
            @jakarta.annotation.Nullable String algoStatus) {
        this.algoStatus = algoStatus;
        return this;
    }

    /**
     * Get algoStatus
     *
     * @return algoStatus
     */
    @jakarta.annotation.Nullable
    public String getAlgoStatus() {
        return algoStatus;
    }

    public void setAlgoStatus(@jakarta.annotation.Nullable String algoStatus) {
        this.algoStatus = algoStatus;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner algoType(
            @jakarta.annotation.Nullable String algoType) {
        this.algoType = algoType;
        return this;
    }

    /**
     * Get algoType
     *
     * @return algoType
     */
    @jakarta.annotation.Nullable
    public String getAlgoType() {
        return algoType;
    }

    public void setAlgoType(@jakarta.annotation.Nullable String algoType) {
        this.algoType = algoType;
    }

    public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner urgency(
            @jakarta.annotation.Nullable String urgency) {
        this.urgency = urgency;
        return this;
    }

    /**
     * Get urgency
     *
     * @return urgency
     */
    @jakarta.annotation.Nullable
    public String getUrgency() {
        return urgency;
    }

    public void setUrgency(@jakarta.annotation.Nullable String urgency) {
        this.urgency = urgency;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner
                queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner =
                        (QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner) o;
        return Objects.equals(
                        this.algoId, queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.algoId)
                && Objects.equals(
                        this.symbol, queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.symbol)
                && Objects.equals(
                        this.side, queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.side)
                && Objects.equals(
                        this.positionSide,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.positionSide)
                && Objects.equals(
                        this.totalQty,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.totalQty)
                && Objects.equals(
                        this.executedQty,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.executedQty)
                && Objects.equals(
                        this.executedAmt,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.executedAmt)
                && Objects.equals(
                        this.avgPrice,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.avgPrice)
                && Objects.equals(
                        this.clientAlgoId,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.clientAlgoId)
                && Objects.equals(
                        this.bookTime,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.bookTime)
                && Objects.equals(
                        this.endTime,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.endTime)
                && Objects.equals(
                        this.algoStatus,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.algoStatus)
                && Objects.equals(
                        this.algoType,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.algoType)
                && Objects.equals(
                        this.urgency,
                        queryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.urgency);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                algoId,
                symbol,
                side,
                positionSide,
                totalQty,
                executedQty,
                executedAmt,
                avgPrice,
                clientAlgoId,
                bookTime,
                endTime,
                algoStatus,
                algoType,
                urgency);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner {\n");
        sb.append("		algoId: ").append(toIndentedString(algoId)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		totalQty: ").append(toIndentedString(totalQty)).append("\n");
        sb.append("		executedQty: ").append(toIndentedString(executedQty)).append("\n");
        sb.append("		executedAmt: ").append(toIndentedString(executedAmt)).append("\n");
        sb.append("		avgPrice: ").append(toIndentedString(avgPrice)).append("\n");
        sb.append("		clientAlgoId: ").append(toIndentedString(clientAlgoId)).append("\n");
        sb.append("		bookTime: ").append(toIndentedString(bookTime)).append("\n");
        sb.append("		endTime: ").append(toIndentedString(endTime)).append("\n");
        sb.append("		algoStatus: ").append(toIndentedString(algoStatus)).append("\n");
        sb.append("		algoType: ").append(toIndentedString(algoType)).append("\n");
        sb.append("		urgency: ").append(toIndentedString(urgency)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object algoIdValue = getAlgoId();
        String algoIdValueAsString = "";
        algoIdValueAsString = algoIdValue.toString();
        sb.append("algoId=").append(urlEncode(algoIdValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object positionSideValue = getPositionSide();
        String positionSideValueAsString = "";
        positionSideValueAsString = positionSideValue.toString();
        sb.append("positionSide=").append(urlEncode(positionSideValueAsString)).append("");
        Object totalQtyValue = getTotalQty();
        String totalQtyValueAsString = "";
        totalQtyValueAsString = totalQtyValue.toString();
        sb.append("totalQty=").append(urlEncode(totalQtyValueAsString)).append("");
        Object executedQtyValue = getExecutedQty();
        String executedQtyValueAsString = "";
        executedQtyValueAsString = executedQtyValue.toString();
        sb.append("executedQty=").append(urlEncode(executedQtyValueAsString)).append("");
        Object executedAmtValue = getExecutedAmt();
        String executedAmtValueAsString = "";
        executedAmtValueAsString = executedAmtValue.toString();
        sb.append("executedAmt=").append(urlEncode(executedAmtValueAsString)).append("");
        Object avgPriceValue = getAvgPrice();
        String avgPriceValueAsString = "";
        avgPriceValueAsString = avgPriceValue.toString();
        sb.append("avgPrice=").append(urlEncode(avgPriceValueAsString)).append("");
        Object clientAlgoIdValue = getClientAlgoId();
        String clientAlgoIdValueAsString = "";
        clientAlgoIdValueAsString = clientAlgoIdValue.toString();
        sb.append("clientAlgoId=").append(urlEncode(clientAlgoIdValueAsString)).append("");
        Object bookTimeValue = getBookTime();
        String bookTimeValueAsString = "";
        bookTimeValueAsString = bookTimeValue.toString();
        sb.append("bookTime=").append(urlEncode(bookTimeValueAsString)).append("");
        Object endTimeValue = getEndTime();
        String endTimeValueAsString = "";
        endTimeValueAsString = endTimeValue.toString();
        sb.append("endTime=").append(urlEncode(endTimeValueAsString)).append("");
        Object algoStatusValue = getAlgoStatus();
        String algoStatusValueAsString = "";
        algoStatusValueAsString = algoStatusValue.toString();
        sb.append("algoStatus=").append(urlEncode(algoStatusValueAsString)).append("");
        Object algoTypeValue = getAlgoType();
        String algoTypeValueAsString = "";
        algoTypeValueAsString = algoTypeValue.toString();
        sb.append("algoType=").append(urlEncode(algoTypeValueAsString)).append("");
        Object urgencyValue = getUrgency();
        String urgencyValueAsString = "";
        urgencyValueAsString = urgencyValue.toString();
        sb.append("urgency=").append(urlEncode(urgencyValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("algoId");
        openapiFields.add("symbol");
        openapiFields.add("side");
        openapiFields.add("positionSide");
        openapiFields.add("totalQty");
        openapiFields.add("executedQty");
        openapiFields.add("executedAmt");
        openapiFields.add("avgPrice");
        openapiFields.add("clientAlgoId");
        openapiFields.add("bookTime");
        openapiFields.add("endTime");
        openapiFields.add("algoStatus");
        openapiFields.add("algoType");
        openapiFields.add("urgency");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner is"
                                    + " not found in the empty JSON string",
                                QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull())
                && !jsonObj.get("positionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionSide").toString()));
        }
        if ((jsonObj.get("totalQty") != null && !jsonObj.get("totalQty").isJsonNull())
                && !jsonObj.get("totalQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("totalQty").toString()));
        }
        if ((jsonObj.get("executedQty") != null && !jsonObj.get("executedQty").isJsonNull())
                && !jsonObj.get("executedQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedQty").toString()));
        }
        if ((jsonObj.get("executedAmt") != null && !jsonObj.get("executedAmt").isJsonNull())
                && !jsonObj.get("executedAmt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedAmt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedAmt").toString()));
        }
        if ((jsonObj.get("avgPrice") != null && !jsonObj.get("avgPrice").isJsonNull())
                && !jsonObj.get("avgPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `avgPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("avgPrice").toString()));
        }
        if ((jsonObj.get("clientAlgoId") != null && !jsonObj.get("clientAlgoId").isJsonNull())
                && !jsonObj.get("clientAlgoId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `clientAlgoId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("clientAlgoId").toString()));
        }
        if ((jsonObj.get("algoStatus") != null && !jsonObj.get("algoStatus").isJsonNull())
                && !jsonObj.get("algoStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `algoStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("algoStatus").toString()));
        }
        if ((jsonObj.get("algoType") != null && !jsonObj.get("algoType").isJsonNull())
                && !jsonObj.get("algoType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `algoType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("algoType").toString()));
        }
        if ((jsonObj.get("urgency") != null && !jsonObj.get("urgency").isJsonNull())
                && !jsonObj.get("urgency").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `urgency` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("urgency").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner
     */
    public static QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner.class);
    }

    /**
     * Convert an instance of QueryHistoricalAlgoOrdersFutureAlgoResponseOrdersInner to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
