/*
 * Binance Algo REST API
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.algo.rest.model;

import com.binance.connector.client.algo.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QuerySubOrdersFutureAlgoResponseSubOrdersInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QuerySubOrdersFutureAlgoResponseSubOrdersInner {
    public static final String SERIALIZED_NAME_ALGO_ID = "algoId";

    @SerializedName(SERIALIZED_NAME_ALGO_ID)
    @jakarta.annotation.Nullable
    private Long algoId;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_ORDER_STATUS = "orderStatus";

    @SerializedName(SERIALIZED_NAME_ORDER_STATUS)
    @jakarta.annotation.Nullable
    private String orderStatus;

    public static final String SERIALIZED_NAME_EXECUTED_QTY = "executedQty";

    @SerializedName(SERIALIZED_NAME_EXECUTED_QTY)
    @jakarta.annotation.Nullable
    private String executedQty;

    public static final String SERIALIZED_NAME_EXECUTED_AMT = "executedAmt";

    @SerializedName(SERIALIZED_NAME_EXECUTED_AMT)
    @jakarta.annotation.Nullable
    private String executedAmt;

    public static final String SERIALIZED_NAME_FEE_AMT = "feeAmt";

    @SerializedName(SERIALIZED_NAME_FEE_AMT)
    @jakarta.annotation.Nullable
    private String feeAmt;

    public static final String SERIALIZED_NAME_FEE_ASSET = "feeAsset";

    @SerializedName(SERIALIZED_NAME_FEE_ASSET)
    @jakarta.annotation.Nullable
    private String feeAsset;

    public static final String SERIALIZED_NAME_BOOK_TIME = "bookTime";

    @SerializedName(SERIALIZED_NAME_BOOK_TIME)
    @jakarta.annotation.Nullable
    private Long bookTime;

    public static final String SERIALIZED_NAME_AVG_PRICE = "avgPrice";

    @SerializedName(SERIALIZED_NAME_AVG_PRICE)
    @jakarta.annotation.Nullable
    private String avgPrice;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_SUB_ID = "subId";

    @SerializedName(SERIALIZED_NAME_SUB_ID)
    @jakarta.annotation.Nullable
    private Long subId;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String timeInForce;

    public static final String SERIALIZED_NAME_ORIG_QTY = "origQty";

    @SerializedName(SERIALIZED_NAME_ORIG_QTY)
    @jakarta.annotation.Nullable
    private String origQty;

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner() {}

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner algoId(
            @jakarta.annotation.Nullable Long algoId) {
        this.algoId = algoId;
        return this;
    }

    /**
     * Get algoId
     *
     * @return algoId
     */
    @jakarta.annotation.Nullable
    public Long getAlgoId() {
        return algoId;
    }

    public void setAlgoId(@jakarta.annotation.Nullable Long algoId) {
        this.algoId = algoId;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner orderId(
            @jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner orderStatus(
            @jakarta.annotation.Nullable String orderStatus) {
        this.orderStatus = orderStatus;
        return this;
    }

    /**
     * Get orderStatus
     *
     * @return orderStatus
     */
    @jakarta.annotation.Nullable
    public String getOrderStatus() {
        return orderStatus;
    }

    public void setOrderStatus(@jakarta.annotation.Nullable String orderStatus) {
        this.orderStatus = orderStatus;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner executedQty(
            @jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
        return this;
    }

    /**
     * Get executedQty
     *
     * @return executedQty
     */
    @jakarta.annotation.Nullable
    public String getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner executedAmt(
            @jakarta.annotation.Nullable String executedAmt) {
        this.executedAmt = executedAmt;
        return this;
    }

    /**
     * Get executedAmt
     *
     * @return executedAmt
     */
    @jakarta.annotation.Nullable
    public String getExecutedAmt() {
        return executedAmt;
    }

    public void setExecutedAmt(@jakarta.annotation.Nullable String executedAmt) {
        this.executedAmt = executedAmt;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner feeAmt(
            @jakarta.annotation.Nullable String feeAmt) {
        this.feeAmt = feeAmt;
        return this;
    }

    /**
     * Get feeAmt
     *
     * @return feeAmt
     */
    @jakarta.annotation.Nullable
    public String getFeeAmt() {
        return feeAmt;
    }

    public void setFeeAmt(@jakarta.annotation.Nullable String feeAmt) {
        this.feeAmt = feeAmt;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner feeAsset(
            @jakarta.annotation.Nullable String feeAsset) {
        this.feeAsset = feeAsset;
        return this;
    }

    /**
     * Get feeAsset
     *
     * @return feeAsset
     */
    @jakarta.annotation.Nullable
    public String getFeeAsset() {
        return feeAsset;
    }

    public void setFeeAsset(@jakarta.annotation.Nullable String feeAsset) {
        this.feeAsset = feeAsset;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner bookTime(
            @jakarta.annotation.Nullable Long bookTime) {
        this.bookTime = bookTime;
        return this;
    }

    /**
     * Get bookTime
     *
     * @return bookTime
     */
    @jakarta.annotation.Nullable
    public Long getBookTime() {
        return bookTime;
    }

    public void setBookTime(@jakarta.annotation.Nullable Long bookTime) {
        this.bookTime = bookTime;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner avgPrice(
            @jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
        return this;
    }

    /**
     * Get avgPrice
     *
     * @return avgPrice
     */
    @jakarta.annotation.Nullable
    public String getAvgPrice() {
        return avgPrice;
    }

    public void setAvgPrice(@jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner side(
            @jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner subId(
            @jakarta.annotation.Nullable Long subId) {
        this.subId = subId;
        return this;
    }

    /**
     * Get subId
     *
     * @return subId
     */
    @jakarta.annotation.Nullable
    public Long getSubId() {
        return subId;
    }

    public void setSubId(@jakarta.annotation.Nullable Long subId) {
        this.subId = subId;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner timeInForce(
            @jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public String getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
    }

    public QuerySubOrdersFutureAlgoResponseSubOrdersInner origQty(
            @jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
        return this;
    }

    /**
     * Get origQty
     *
     * @return origQty
     */
    @jakarta.annotation.Nullable
    public String getOrigQty() {
        return origQty;
    }

    public void setOrigQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuerySubOrdersFutureAlgoResponseSubOrdersInner
                querySubOrdersFutureAlgoResponseSubOrdersInner =
                        (QuerySubOrdersFutureAlgoResponseSubOrdersInner) o;
        return Objects.equals(this.algoId, querySubOrdersFutureAlgoResponseSubOrdersInner.algoId)
                && Objects.equals(
                        this.orderId, querySubOrdersFutureAlgoResponseSubOrdersInner.orderId)
                && Objects.equals(
                        this.orderStatus,
                        querySubOrdersFutureAlgoResponseSubOrdersInner.orderStatus)
                && Objects.equals(
                        this.executedQty,
                        querySubOrdersFutureAlgoResponseSubOrdersInner.executedQty)
                && Objects.equals(
                        this.executedAmt,
                        querySubOrdersFutureAlgoResponseSubOrdersInner.executedAmt)
                && Objects.equals(
                        this.feeAmt, querySubOrdersFutureAlgoResponseSubOrdersInner.feeAmt)
                && Objects.equals(
                        this.feeAsset, querySubOrdersFutureAlgoResponseSubOrdersInner.feeAsset)
                && Objects.equals(
                        this.bookTime, querySubOrdersFutureAlgoResponseSubOrdersInner.bookTime)
                && Objects.equals(
                        this.avgPrice, querySubOrdersFutureAlgoResponseSubOrdersInner.avgPrice)
                && Objects.equals(this.side, querySubOrdersFutureAlgoResponseSubOrdersInner.side)
                && Objects.equals(
                        this.symbol, querySubOrdersFutureAlgoResponseSubOrdersInner.symbol)
                && Objects.equals(this.subId, querySubOrdersFutureAlgoResponseSubOrdersInner.subId)
                && Objects.equals(
                        this.timeInForce,
                        querySubOrdersFutureAlgoResponseSubOrdersInner.timeInForce)
                && Objects.equals(
                        this.origQty, querySubOrdersFutureAlgoResponseSubOrdersInner.origQty);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                algoId,
                orderId,
                orderStatus,
                executedQty,
                executedAmt,
                feeAmt,
                feeAsset,
                bookTime,
                avgPrice,
                side,
                symbol,
                subId,
                timeInForce,
                origQty);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QuerySubOrdersFutureAlgoResponseSubOrdersInner {\n");
        sb.append("		algoId: ").append(toIndentedString(algoId)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		orderStatus: ").append(toIndentedString(orderStatus)).append("\n");
        sb.append("		executedQty: ").append(toIndentedString(executedQty)).append("\n");
        sb.append("		executedAmt: ").append(toIndentedString(executedAmt)).append("\n");
        sb.append("		feeAmt: ").append(toIndentedString(feeAmt)).append("\n");
        sb.append("		feeAsset: ").append(toIndentedString(feeAsset)).append("\n");
        sb.append("		bookTime: ").append(toIndentedString(bookTime)).append("\n");
        sb.append("		avgPrice: ").append(toIndentedString(avgPrice)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		subId: ").append(toIndentedString(subId)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		origQty: ").append(toIndentedString(origQty)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object algoIdValue = getAlgoId();
        String algoIdValueAsString = "";
        algoIdValueAsString = algoIdValue.toString();
        sb.append("algoId=").append(urlEncode(algoIdValueAsString)).append("");
        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object orderStatusValue = getOrderStatus();
        String orderStatusValueAsString = "";
        orderStatusValueAsString = orderStatusValue.toString();
        sb.append("orderStatus=").append(urlEncode(orderStatusValueAsString)).append("");
        Object executedQtyValue = getExecutedQty();
        String executedQtyValueAsString = "";
        executedQtyValueAsString = executedQtyValue.toString();
        sb.append("executedQty=").append(urlEncode(executedQtyValueAsString)).append("");
        Object executedAmtValue = getExecutedAmt();
        String executedAmtValueAsString = "";
        executedAmtValueAsString = executedAmtValue.toString();
        sb.append("executedAmt=").append(urlEncode(executedAmtValueAsString)).append("");
        Object feeAmtValue = getFeeAmt();
        String feeAmtValueAsString = "";
        feeAmtValueAsString = feeAmtValue.toString();
        sb.append("feeAmt=").append(urlEncode(feeAmtValueAsString)).append("");
        Object feeAssetValue = getFeeAsset();
        String feeAssetValueAsString = "";
        feeAssetValueAsString = feeAssetValue.toString();
        sb.append("feeAsset=").append(urlEncode(feeAssetValueAsString)).append("");
        Object bookTimeValue = getBookTime();
        String bookTimeValueAsString = "";
        bookTimeValueAsString = bookTimeValue.toString();
        sb.append("bookTime=").append(urlEncode(bookTimeValueAsString)).append("");
        Object avgPriceValue = getAvgPrice();
        String avgPriceValueAsString = "";
        avgPriceValueAsString = avgPriceValue.toString();
        sb.append("avgPrice=").append(urlEncode(avgPriceValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object subIdValue = getSubId();
        String subIdValueAsString = "";
        subIdValueAsString = subIdValue.toString();
        sb.append("subId=").append(urlEncode(subIdValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString = timeInForceValue.toString();
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object origQtyValue = getOrigQty();
        String origQtyValueAsString = "";
        origQtyValueAsString = origQtyValue.toString();
        sb.append("origQty=").append(urlEncode(origQtyValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("algoId");
        openapiFields.add("orderId");
        openapiFields.add("orderStatus");
        openapiFields.add("executedQty");
        openapiFields.add("executedAmt");
        openapiFields.add("feeAmt");
        openapiFields.add("feeAsset");
        openapiFields.add("bookTime");
        openapiFields.add("avgPrice");
        openapiFields.add("side");
        openapiFields.add("symbol");
        openapiFields.add("subId");
        openapiFields.add("timeInForce");
        openapiFields.add("origQty");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QuerySubOrdersFutureAlgoResponseSubOrdersInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QuerySubOrdersFutureAlgoResponseSubOrdersInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QuerySubOrdersFutureAlgoResponseSubOrdersInner is not found"
                                    + " in the empty JSON string",
                                QuerySubOrdersFutureAlgoResponseSubOrdersInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QuerySubOrdersFutureAlgoResponseSubOrdersInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QuerySubOrdersFutureAlgoResponseSubOrdersInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("orderStatus") != null && !jsonObj.get("orderStatus").isJsonNull())
                && !jsonObj.get("orderStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("orderStatus").toString()));
        }
        if ((jsonObj.get("executedQty") != null && !jsonObj.get("executedQty").isJsonNull())
                && !jsonObj.get("executedQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedQty").toString()));
        }
        if ((jsonObj.get("executedAmt") != null && !jsonObj.get("executedAmt").isJsonNull())
                && !jsonObj.get("executedAmt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedAmt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedAmt").toString()));
        }
        if ((jsonObj.get("feeAmt") != null && !jsonObj.get("feeAmt").isJsonNull())
                && !jsonObj.get("feeAmt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `feeAmt` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("feeAmt").toString()));
        }
        if ((jsonObj.get("feeAsset") != null && !jsonObj.get("feeAsset").isJsonNull())
                && !jsonObj.get("feeAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `feeAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("feeAsset").toString()));
        }
        if ((jsonObj.get("avgPrice") != null && !jsonObj.get("avgPrice").isJsonNull())
                && !jsonObj.get("avgPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `avgPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("avgPrice").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull())
                && !jsonObj.get("timeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        if ((jsonObj.get("origQty") != null && !jsonObj.get("origQty").isJsonNull())
                && !jsonObj.get("origQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("origQty").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QuerySubOrdersFutureAlgoResponseSubOrdersInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QuerySubOrdersFutureAlgoResponseSubOrdersInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QuerySubOrdersFutureAlgoResponseSubOrdersInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(QuerySubOrdersFutureAlgoResponseSubOrdersInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QuerySubOrdersFutureAlgoResponseSubOrdersInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QuerySubOrdersFutureAlgoResponseSubOrdersInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QuerySubOrdersFutureAlgoResponseSubOrdersInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QuerySubOrdersFutureAlgoResponseSubOrdersInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QuerySubOrdersFutureAlgoResponseSubOrdersInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QuerySubOrdersFutureAlgoResponseSubOrdersInner
     */
    public static QuerySubOrdersFutureAlgoResponseSubOrdersInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QuerySubOrdersFutureAlgoResponseSubOrdersInner.class);
    }

    /**
     * Convert an instance of QuerySubOrdersFutureAlgoResponseSubOrdersInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
