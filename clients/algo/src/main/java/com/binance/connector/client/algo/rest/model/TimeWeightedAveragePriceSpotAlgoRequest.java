/*
 * Binance Algo REST API
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.algo.rest.model;

import com.binance.connector.client.algo.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** TimeWeightedAveragePriceSpotAlgoRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class TimeWeightedAveragePriceSpotAlgoRequest {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nonnull
    private String side;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double quantity;

    public static final String SERIALIZED_NAME_DURATION = "duration";

    @SerializedName(SERIALIZED_NAME_DURATION)
    @jakarta.annotation.Nonnull
    private Long duration;

    public static final String SERIALIZED_NAME_CLIENT_ALGO_ID = "clientAlgoId";

    @SerializedName(SERIALIZED_NAME_CLIENT_ALGO_ID)
    @jakarta.annotation.Nullable
    private String clientAlgoId;

    public static final String SERIALIZED_NAME_LIMIT_PRICE = "limitPrice";

    @SerializedName(SERIALIZED_NAME_LIMIT_PRICE)
    @jakarta.annotation.Nullable
    private Double limitPrice;

    public TimeWeightedAveragePriceSpotAlgoRequest() {}

    public TimeWeightedAveragePriceSpotAlgoRequest symbol(
            @jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public TimeWeightedAveragePriceSpotAlgoRequest side(@jakarta.annotation.Nonnull String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nonnull String side) {
        this.side = side;
    }

    public TimeWeightedAveragePriceSpotAlgoRequest quantity(
            @jakarta.annotation.Nonnull Double quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nonnull Double quantity) {
        this.quantity = quantity;
    }

    public TimeWeightedAveragePriceSpotAlgoRequest duration(
            @jakarta.annotation.Nonnull Long duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get duration
     *
     * @return duration
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public Long getDuration() {
        return duration;
    }

    public void setDuration(@jakarta.annotation.Nonnull Long duration) {
        this.duration = duration;
    }

    public TimeWeightedAveragePriceSpotAlgoRequest clientAlgoId(
            @jakarta.annotation.Nullable String clientAlgoId) {
        this.clientAlgoId = clientAlgoId;
        return this;
    }

    /**
     * Get clientAlgoId
     *
     * @return clientAlgoId
     */
    @jakarta.annotation.Nullable
    public String getClientAlgoId() {
        return clientAlgoId;
    }

    public void setClientAlgoId(@jakarta.annotation.Nullable String clientAlgoId) {
        this.clientAlgoId = clientAlgoId;
    }

    public TimeWeightedAveragePriceSpotAlgoRequest limitPrice(
            @jakarta.annotation.Nullable Double limitPrice) {
        this.limitPrice = limitPrice;
        return this;
    }

    /**
     * Get limitPrice
     *
     * @return limitPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getLimitPrice() {
        return limitPrice;
    }

    public void setLimitPrice(@jakarta.annotation.Nullable Double limitPrice) {
        this.limitPrice = limitPrice;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimeWeightedAveragePriceSpotAlgoRequest timeWeightedAveragePriceSpotAlgoRequest =
                (TimeWeightedAveragePriceSpotAlgoRequest) o;
        return Objects.equals(this.symbol, timeWeightedAveragePriceSpotAlgoRequest.symbol)
                && Objects.equals(this.side, timeWeightedAveragePriceSpotAlgoRequest.side)
                && Objects.equals(this.quantity, timeWeightedAveragePriceSpotAlgoRequest.quantity)
                && Objects.equals(this.duration, timeWeightedAveragePriceSpotAlgoRequest.duration)
                && Objects.equals(
                        this.clientAlgoId, timeWeightedAveragePriceSpotAlgoRequest.clientAlgoId)
                && Objects.equals(
                        this.limitPrice, timeWeightedAveragePriceSpotAlgoRequest.limitPrice);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbol, side, quantity, duration, clientAlgoId, limitPrice);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TimeWeightedAveragePriceSpotAlgoRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("		clientAlgoId: ").append(toIndentedString(clientAlgoId)).append("\n");
        sb.append("		limitPrice: ").append(toIndentedString(limitPrice)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object durationValue = getDuration();
        String durationValueAsString = "";
        durationValueAsString = durationValue.toString();
        sb.append("duration=").append(urlEncode(durationValueAsString)).append("");
        Object clientAlgoIdValue = getClientAlgoId();
        String clientAlgoIdValueAsString = "";
        clientAlgoIdValueAsString = clientAlgoIdValue.toString();
        sb.append("clientAlgoId=").append(urlEncode(clientAlgoIdValueAsString)).append("");
        Object limitPriceValue = getLimitPrice();
        String limitPriceValueAsString = "";
        limitPriceValueAsString = limitPriceValue.toString();
        sb.append("limitPrice=").append(urlEncode(limitPriceValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("side");
        openapiFields.add("quantity");
        openapiFields.add("duration");
        openapiFields.add("clientAlgoId");
        openapiFields.add("limitPrice");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("side");
        openapiRequiredFields.add("quantity");
        openapiRequiredFields.add("duration");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     TimeWeightedAveragePriceSpotAlgoRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!TimeWeightedAveragePriceSpotAlgoRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " TimeWeightedAveragePriceSpotAlgoRequest is not found in the"
                                    + " empty JSON string",
                                TimeWeightedAveragePriceSpotAlgoRequest.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!TimeWeightedAveragePriceSpotAlgoRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `TimeWeightedAveragePriceSpotAlgoRequest` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : TimeWeightedAveragePriceSpotAlgoRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if (!jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("clientAlgoId") != null && !jsonObj.get("clientAlgoId").isJsonNull())
                && !jsonObj.get("clientAlgoId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `clientAlgoId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("clientAlgoId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TimeWeightedAveragePriceSpotAlgoRequest.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'TimeWeightedAveragePriceSpotAlgoRequest'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TimeWeightedAveragePriceSpotAlgoRequest> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(TimeWeightedAveragePriceSpotAlgoRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<TimeWeightedAveragePriceSpotAlgoRequest>() {
                        @Override
                        public void write(
                                JsonWriter out, TimeWeightedAveragePriceSpotAlgoRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public TimeWeightedAveragePriceSpotAlgoRequest read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of TimeWeightedAveragePriceSpotAlgoRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TimeWeightedAveragePriceSpotAlgoRequest
     * @throws IOException if the JSON string is invalid with respect to
     *     TimeWeightedAveragePriceSpotAlgoRequest
     */
    public static TimeWeightedAveragePriceSpotAlgoRequest fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, TimeWeightedAveragePriceSpotAlgoRequest.class);
    }

    /**
     * Convert an instance of TimeWeightedAveragePriceSpotAlgoRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
