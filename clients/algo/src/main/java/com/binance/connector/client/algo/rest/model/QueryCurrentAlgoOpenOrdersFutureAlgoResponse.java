/*
 * Binance Algo REST API
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.algo.rest.model;

import com.binance.connector.client.algo.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryCurrentAlgoOpenOrdersFutureAlgoResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryCurrentAlgoOpenOrdersFutureAlgoResponse {
    public static final String SERIALIZED_NAME_TOTAL = "total";

    @SerializedName(SERIALIZED_NAME_TOTAL)
    @jakarta.annotation.Nullable
    private Long total;

    public static final String SERIALIZED_NAME_ORDERS = "orders";

    @SerializedName(SERIALIZED_NAME_ORDERS)
    @jakarta.annotation.Nullable
    private List<@Valid QueryCurrentAlgoOpenOrdersFutureAlgoResponseOrdersInner> orders;

    public QueryCurrentAlgoOpenOrdersFutureAlgoResponse() {}

    public QueryCurrentAlgoOpenOrdersFutureAlgoResponse total(
            @jakarta.annotation.Nullable Long total) {
        this.total = total;
        return this;
    }

    /**
     * Get total
     *
     * @return total
     */
    @jakarta.annotation.Nullable
    public Long getTotal() {
        return total;
    }

    public void setTotal(@jakarta.annotation.Nullable Long total) {
        this.total = total;
    }

    public QueryCurrentAlgoOpenOrdersFutureAlgoResponse orders(
            @jakarta.annotation.Nullable
                    List<@Valid QueryCurrentAlgoOpenOrdersFutureAlgoResponseOrdersInner> orders) {
        this.orders = orders;
        return this;
    }

    public QueryCurrentAlgoOpenOrdersFutureAlgoResponse addOrdersItem(
            QueryCurrentAlgoOpenOrdersFutureAlgoResponseOrdersInner ordersItem) {
        if (this.orders == null) {
            this.orders = new ArrayList<>();
        }
        this.orders.add(ordersItem);
        return this;
    }

    /**
     * Get orders
     *
     * @return orders
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryCurrentAlgoOpenOrdersFutureAlgoResponseOrdersInner> getOrders() {
        return orders;
    }

    public void setOrders(
            @jakarta.annotation.Nullable
                    List<@Valid QueryCurrentAlgoOpenOrdersFutureAlgoResponseOrdersInner> orders) {
        this.orders = orders;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryCurrentAlgoOpenOrdersFutureAlgoResponse queryCurrentAlgoOpenOrdersFutureAlgoResponse =
                (QueryCurrentAlgoOpenOrdersFutureAlgoResponse) o;
        return Objects.equals(this.total, queryCurrentAlgoOpenOrdersFutureAlgoResponse.total)
                && Objects.equals(this.orders, queryCurrentAlgoOpenOrdersFutureAlgoResponse.orders);
    }

    @Override
    public int hashCode() {
        return Objects.hash(total, orders);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryCurrentAlgoOpenOrdersFutureAlgoResponse {\n");
        sb.append("		total: ").append(toIndentedString(total)).append("\n");
        sb.append("		orders: ").append(toIndentedString(orders)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object totalValue = getTotal();
        String totalValueAsString = "";
        totalValueAsString = totalValue.toString();
        sb.append("total=").append(urlEncode(totalValueAsString)).append("");
        Object ordersValue = getOrders();
        String ordersValueAsString = "";
        ordersValueAsString =
                (String)
                        ((Collection) ordersValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("orders=").append(urlEncode(ordersValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("total");
        openapiFields.add("orders");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryCurrentAlgoOpenOrdersFutureAlgoResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryCurrentAlgoOpenOrdersFutureAlgoResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryCurrentAlgoOpenOrdersFutureAlgoResponse is not found"
                                    + " in the empty JSON string",
                                QueryCurrentAlgoOpenOrdersFutureAlgoResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryCurrentAlgoOpenOrdersFutureAlgoResponse.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryCurrentAlgoOpenOrdersFutureAlgoResponse` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("orders") != null && !jsonObj.get("orders").isJsonNull()) {
            JsonArray jsonArrayorders = jsonObj.getAsJsonArray("orders");
            if (jsonArrayorders != null) {
                // ensure the json data is an array
                if (!jsonObj.get("orders").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `orders` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("orders").toString()));
                }

                // validate the optional field `orders` (array)
                for (int i = 0; i < jsonArrayorders.size(); i++) {
                    QueryCurrentAlgoOpenOrdersFutureAlgoResponseOrdersInner.validateJsonElement(
                            jsonArrayorders.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryCurrentAlgoOpenOrdersFutureAlgoResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryCurrentAlgoOpenOrdersFutureAlgoResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryCurrentAlgoOpenOrdersFutureAlgoResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(QueryCurrentAlgoOpenOrdersFutureAlgoResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryCurrentAlgoOpenOrdersFutureAlgoResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryCurrentAlgoOpenOrdersFutureAlgoResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryCurrentAlgoOpenOrdersFutureAlgoResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryCurrentAlgoOpenOrdersFutureAlgoResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryCurrentAlgoOpenOrdersFutureAlgoResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryCurrentAlgoOpenOrdersFutureAlgoResponse
     */
    public static QueryCurrentAlgoOpenOrdersFutureAlgoResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QueryCurrentAlgoOpenOrdersFutureAlgoResponse.class);
    }

    /**
     * Convert an instance of QueryCurrentAlgoOpenOrdersFutureAlgoResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
