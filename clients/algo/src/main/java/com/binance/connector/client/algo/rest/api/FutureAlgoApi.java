/*
 * Binance Algo REST API
 * OpenAPI Specification for the Binance Algo REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.algo.rest.api;

import com.binance.connector.client.algo.rest.model.CancelAlgoOrderFutureAlgoResponse;
import com.binance.connector.client.algo.rest.model.QueryCurrentAlgoOpenOrdersFutureAlgoResponse;
import com.binance.connector.client.algo.rest.model.QueryHistoricalAlgoOrdersFutureAlgoResponse;
import com.binance.connector.client.algo.rest.model.QuerySubOrdersFutureAlgoResponse;
import com.binance.connector.client.algo.rest.model.TimeWeightedAveragePriceFutureAlgoRequest;
import com.binance.connector.client.algo.rest.model.TimeWeightedAveragePriceFutureAlgoResponse;
import com.binance.connector.client.algo.rest.model.VolumeParticipationFutureAlgoRequest;
import com.binance.connector.client.algo.rest.model.VolumeParticipationFutureAlgoResponse;
import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class FutureAlgoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-algo/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public FutureAlgoApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public FutureAlgoApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelAlgoOrderFutureAlgo
     *
     * @param algoId eg. 14511 (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cancel Algo Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/algo/future-algo/Cancel-Algo-Order">Cancel
     *     Algo Order(TRADE) Documentation</a>
     */
    private okhttp3.Call cancelAlgoOrderFutureAlgoCall(Long algoId, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/algo/futures/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algoId", algoId));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelAlgoOrderFutureAlgoValidateBeforeCall(Long algoId, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {algoId, recvWindow};
            Method method =
                    this.getClass().getMethod("cancelAlgoOrderFutureAlgo", Long.class, Long.class);
            Set<ConstraintViolation<FutureAlgoApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return cancelAlgoOrderFutureAlgoCall(algoId, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Cancel Algo Order(TRADE) Cancel an active order. * You need to enable &#x60;Futures Trading
     * Permission&#x60; for the api key which requests this endpoint. * Base URL:
     * https://api.binance.com Weight: 1
     *
     * @param algoId eg. 14511 (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;CancelAlgoOrderFutureAlgoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cancel Algo Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/algo/future-algo/Cancel-Algo-Order">Cancel
     *     Algo Order(TRADE) Documentation</a>
     */
    public ApiResponse<CancelAlgoOrderFutureAlgoResponse> cancelAlgoOrderFutureAlgo(
            @NotNull Long algoId, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall = cancelAlgoOrderFutureAlgoValidateBeforeCall(algoId, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<CancelAlgoOrderFutureAlgoResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryCurrentAlgoOpenOrdersFutureAlgo
     *
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Current Algo Open Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/algo/future-algo/Query-Current-Algo-Open-Orders">Query
     *     Current Algo Open Orders(USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryCurrentAlgoOpenOrdersFutureAlgoCall(Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/algo/futures/openOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryCurrentAlgoOpenOrdersFutureAlgoValidateBeforeCall(Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method =
                    this.getClass().getMethod("queryCurrentAlgoOpenOrdersFutureAlgo", Long.class);
            Set<ConstraintViolation<FutureAlgoApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryCurrentAlgoOpenOrdersFutureAlgoCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Current Algo Open Orders(USER_DATA) Query Current Algo Open Orders * You need to enable
     * &#x60;Futures Trading Permission&#x60; for the api key which requests this endpoint. * Base
     * URL: https://api.binance.com Weight: 1
     *
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryCurrentAlgoOpenOrdersFutureAlgoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Current Algo Open Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/algo/future-algo/Query-Current-Algo-Open-Orders">Query
     *     Current Algo Open Orders(USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryCurrentAlgoOpenOrdersFutureAlgoResponse>
            queryCurrentAlgoOpenOrdersFutureAlgo(Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                queryCurrentAlgoOpenOrdersFutureAlgoValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryCurrentAlgoOpenOrdersFutureAlgoResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryHistoricalAlgoOrdersFutureAlgo
     *
     * @param symbol Trading symbol eg. BTCUSDT (optional)
     * @param side BUY or SELL (optional)
     * @param startTime in milliseconds eg.1641522717552 (optional)
     * @param endTime in milliseconds eg.1641522526562 (optional)
     * @param page Default is 1 (optional)
     * @param pageSize MIN 1, MAX 100; Default 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Historical Algo Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/algo/future-algo/Query-Historical-Algo-Orders">Query
     *     Historical Algo Orders(USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryHistoricalAlgoOrdersFutureAlgoCall(
            String symbol,
            String side,
            Long startTime,
            Long endTime,
            Long page,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/algo/futures/historicalOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (side != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("side", side));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryHistoricalAlgoOrdersFutureAlgoValidateBeforeCall(
            String symbol,
            String side,
            Long startTime,
            Long endTime,
            Long page,
            Long pageSize,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                symbol, side, startTime, endTime, page, pageSize, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryHistoricalAlgoOrdersFutureAlgo",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<FutureAlgoApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryHistoricalAlgoOrdersFutureAlgoCall(
                        symbol, side, startTime, endTime, page, pageSize, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Historical Algo Orders(USER_DATA) Query Historical Algo Order * You need to enable
     * &#x60;Futures Trading Permission&#x60; for the api key which requests this endpoint. * Base
     * URL: https://api.binance.com Weight: 1
     *
     * @param symbol Trading symbol eg. BTCUSDT (optional)
     * @param side BUY or SELL (optional)
     * @param startTime in milliseconds eg.1641522717552 (optional)
     * @param endTime in milliseconds eg.1641522526562 (optional)
     * @param page Default is 1 (optional)
     * @param pageSize MIN 1, MAX 100; Default 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryHistoricalAlgoOrdersFutureAlgoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Historical Algo Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/algo/future-algo/Query-Historical-Algo-Orders">Query
     *     Historical Algo Orders(USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryHistoricalAlgoOrdersFutureAlgoResponse>
            queryHistoricalAlgoOrdersFutureAlgo(
                    String symbol,
                    String side,
                    Long startTime,
                    Long endTime,
                    Long page,
                    Long pageSize,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                queryHistoricalAlgoOrdersFutureAlgoValidateBeforeCall(
                        symbol, side, startTime, endTime, page, pageSize, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryHistoricalAlgoOrdersFutureAlgoResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for querySubOrdersFutureAlgo
     *
     * @param algoId eg. 14511 (required)
     * @param page Default is 1 (optional)
     * @param pageSize MIN 1, MAX 100; Default 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/algo/future-algo/Query-Sub-Orders">Query
     *     Sub Orders(USER_DATA) Documentation</a>
     */
    private okhttp3.Call querySubOrdersFutureAlgoCall(
            Long algoId, Long page, Long pageSize, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/algo/futures/subOrders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (algoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("algoId", algoId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySubOrdersFutureAlgoValidateBeforeCall(
            Long algoId, Long page, Long pageSize, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {algoId, page, pageSize, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "querySubOrdersFutureAlgo",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<FutureAlgoApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return querySubOrdersFutureAlgoCall(algoId, page, pageSize, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Sub Orders(USER_DATA) Get respective sub orders for a specified algoId * You need to
     * enable &#x60;Futures Trading Permission&#x60; for the api key which requests this endpoint. *
     * Base URL: https://api.binance.com Weight: 1
     *
     * @param algoId eg. 14511 (required)
     * @param page Default is 1 (optional)
     * @param pageSize MIN 1, MAX 100; Default 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QuerySubOrdersFutureAlgoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/algo/future-algo/Query-Sub-Orders">Query
     *     Sub Orders(USER_DATA) Documentation</a>
     */
    public ApiResponse<QuerySubOrdersFutureAlgoResponse> querySubOrdersFutureAlgo(
            @NotNull Long algoId, Long page, Long pageSize, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                querySubOrdersFutureAlgoValidateBeforeCall(algoId, page, pageSize, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QuerySubOrdersFutureAlgoResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for timeWeightedAveragePriceFutureAlgo
     *
     * @param timeWeightedAveragePriceFutureAlgoRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Time-Weighted Average Price </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/algo/future-algo/Time-Weighted-Average-Price-New-Order">Time-Weighted
     *     Average Price(Twap) New Order(TRADE) Documentation</a>
     */
    private okhttp3.Call timeWeightedAveragePriceFutureAlgoCall(
            TimeWeightedAveragePriceFutureAlgoRequest timeWeightedAveragePriceFutureAlgoRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/algo/futures/newOrderTwap";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timeWeightedAveragePriceFutureAlgoRequest.getSymbol() != null) {
            localVarFormParams.put("symbol", timeWeightedAveragePriceFutureAlgoRequest.getSymbol());
        }

        if (timeWeightedAveragePriceFutureAlgoRequest.getSide() != null) {
            localVarFormParams.put("side", timeWeightedAveragePriceFutureAlgoRequest.getSide());
        }

        if (timeWeightedAveragePriceFutureAlgoRequest.getPositionSide() != null) {
            localVarFormParams.put(
                    "positionSide", timeWeightedAveragePriceFutureAlgoRequest.getPositionSide());
        }

        if (timeWeightedAveragePriceFutureAlgoRequest.getQuantity() != null) {
            localVarFormParams.put(
                    "quantity",
                    DecimalFormatter.getFormatter()
                            .format(timeWeightedAveragePriceFutureAlgoRequest.getQuantity()));
        }

        if (timeWeightedAveragePriceFutureAlgoRequest.getDuration() != null) {
            localVarFormParams.put(
                    "duration", timeWeightedAveragePriceFutureAlgoRequest.getDuration());
        }

        if (timeWeightedAveragePriceFutureAlgoRequest.getClientAlgoId() != null) {
            localVarFormParams.put(
                    "clientAlgoId", timeWeightedAveragePriceFutureAlgoRequest.getClientAlgoId());
        }

        if (timeWeightedAveragePriceFutureAlgoRequest.getReduceOnly() != null) {
            localVarFormParams.put(
                    "reduceOnly", timeWeightedAveragePriceFutureAlgoRequest.getReduceOnly());
        }

        if (timeWeightedAveragePriceFutureAlgoRequest.getLimitPrice() != null) {
            localVarFormParams.put(
                    "limitPrice",
                    DecimalFormatter.getFormatter()
                            .format(timeWeightedAveragePriceFutureAlgoRequest.getLimitPrice()));
        }

        if (timeWeightedAveragePriceFutureAlgoRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", timeWeightedAveragePriceFutureAlgoRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeWeightedAveragePriceFutureAlgoValidateBeforeCall(
            TimeWeightedAveragePriceFutureAlgoRequest timeWeightedAveragePriceFutureAlgoRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {timeWeightedAveragePriceFutureAlgoRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "timeWeightedAveragePriceFutureAlgo",
                                    TimeWeightedAveragePriceFutureAlgoRequest.class);
            Set<ConstraintViolation<FutureAlgoApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return timeWeightedAveragePriceFutureAlgoCall(
                        timeWeightedAveragePriceFutureAlgoRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Time-Weighted Average Price(Twap) New Order(TRADE) Send in a Twap new order. Only support on
     * USDⓈ-M Contracts. * Total Algo open orders max allowed: &#x60;30&#x60; orders. * Leverage of
     * symbols and position mode will be the same as your futures account settings. You can set up
     * through the trading page or fapi. * Receiving &#x60;\&quot;success\&quot;: true&#x60; does
     * not mean that your order will be executed. Please use the query order endpoints（&#x60;GET
     * sapi/v1/algo/futures/openOrders&#x60; or &#x60;GET
     * sapi/v1/algo/futures/historicalOrders&#x60;） to check the order status. For example: Your
     * futures balance is insufficient, or open position with reduce only or position side is
     * inconsistent with your own setting. In these cases you will receive
     * &#x60;\&quot;success\&quot;: true&#x60;, but the order status will be &#x60;expired&#x60;
     * after we check it. * &#x60;quantity&#x60; * 60 / &#x60;duration&#x60; should be larger than
     * minQty * &#x60;duration&#x60; cannot be less than 5 mins or more than 24 hours. * For
     * delivery contracts, TWAP end time should be one hour earlier than the delivery time of the
     * symbol. * You need to enable &#x60;Futures Trading Permission&#x60; for the api key which
     * requests this endpoint. * Base URL: https://api.binance.com Weight: 3000
     *
     * @param timeWeightedAveragePriceFutureAlgoRequest (required)
     * @return ApiResponse&lt;TimeWeightedAveragePriceFutureAlgoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Time-Weighted Average Price </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/algo/future-algo/Time-Weighted-Average-Price-New-Order">Time-Weighted
     *     Average Price(Twap) New Order(TRADE) Documentation</a>
     */
    public ApiResponse<TimeWeightedAveragePriceFutureAlgoResponse>
            timeWeightedAveragePriceFutureAlgo(
                    @Valid @NotNull
                            TimeWeightedAveragePriceFutureAlgoRequest
                                    timeWeightedAveragePriceFutureAlgoRequest)
                    throws ApiException {
        okhttp3.Call localVarCall =
                timeWeightedAveragePriceFutureAlgoValidateBeforeCall(
                        timeWeightedAveragePriceFutureAlgoRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<TimeWeightedAveragePriceFutureAlgoResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for volumeParticipationFutureAlgo
     *
     * @param volumeParticipationFutureAlgoRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Volume Participation </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/algo/future-algo/Volume-Participation-New-Order">Volume
     *     Participation(VP) New Order (TRADE) Documentation</a>
     */
    private okhttp3.Call volumeParticipationFutureAlgoCall(
            VolumeParticipationFutureAlgoRequest volumeParticipationFutureAlgoRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/algo/futures/newOrderVp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (volumeParticipationFutureAlgoRequest.getSymbol() != null) {
            localVarFormParams.put("symbol", volumeParticipationFutureAlgoRequest.getSymbol());
        }

        if (volumeParticipationFutureAlgoRequest.getSide() != null) {
            localVarFormParams.put("side", volumeParticipationFutureAlgoRequest.getSide());
        }

        if (volumeParticipationFutureAlgoRequest.getPositionSide() != null) {
            localVarFormParams.put(
                    "positionSide", volumeParticipationFutureAlgoRequest.getPositionSide());
        }

        if (volumeParticipationFutureAlgoRequest.getQuantity() != null) {
            localVarFormParams.put(
                    "quantity",
                    DecimalFormatter.getFormatter()
                            .format(volumeParticipationFutureAlgoRequest.getQuantity()));
        }

        if (volumeParticipationFutureAlgoRequest.getUrgency() != null) {
            localVarFormParams.put("urgency", volumeParticipationFutureAlgoRequest.getUrgency());
        }

        if (volumeParticipationFutureAlgoRequest.getClientAlgoId() != null) {
            localVarFormParams.put(
                    "clientAlgoId", volumeParticipationFutureAlgoRequest.getClientAlgoId());
        }

        if (volumeParticipationFutureAlgoRequest.getReduceOnly() != null) {
            localVarFormParams.put(
                    "reduceOnly", volumeParticipationFutureAlgoRequest.getReduceOnly());
        }

        if (volumeParticipationFutureAlgoRequest.getLimitPrice() != null) {
            localVarFormParams.put(
                    "limitPrice",
                    DecimalFormatter.getFormatter()
                            .format(volumeParticipationFutureAlgoRequest.getLimitPrice()));
        }

        if (volumeParticipationFutureAlgoRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", volumeParticipationFutureAlgoRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call volumeParticipationFutureAlgoValidateBeforeCall(
            VolumeParticipationFutureAlgoRequest volumeParticipationFutureAlgoRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {volumeParticipationFutureAlgoRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "volumeParticipationFutureAlgo",
                                    VolumeParticipationFutureAlgoRequest.class);
            Set<ConstraintViolation<FutureAlgoApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return volumeParticipationFutureAlgoCall(volumeParticipationFutureAlgoRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Volume Participation(VP) New Order (TRADE) Send in a VP new order. Only support on USDⓈ-M
     * Contracts. * Total Algo open orders max allowed: &#x60;10&#x60; orders. * Leverage of symbols
     * and position mode will be the same as your futures account settings. You can set up through
     * the trading page or fapi. * Receiving &#x60;\&quot;success\&quot;: true&#x60; does not mean
     * that your order will be executed. Please use the query order endpoints（&#x60;GET
     * sapi/v1/algo/futures/openOrders&#x60; or &#x60;GET
     * sapi/v1/algo/futures/historicalOrders&#x60;） to check the order status. For example: Your
     * futures balance is insufficient, or open position with reduce only or position side is
     * inconsistent with your own setting. In these cases you will receive
     * &#x60;\&quot;success\&quot;: true&#x60;, but the order status will be &#x60;expired&#x60;
     * after we check it. * You need to enable &#x60;Futures Trading Permission&#x60; for the api
     * key which requests this endpoint. * Base URL: https://api.binance.com Weight: 300
     *
     * @param volumeParticipationFutureAlgoRequest (required)
     * @return ApiResponse&lt;VolumeParticipationFutureAlgoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Volume Participation </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/algo/future-algo/Volume-Participation-New-Order">Volume
     *     Participation(VP) New Order (TRADE) Documentation</a>
     */
    public ApiResponse<VolumeParticipationFutureAlgoResponse> volumeParticipationFutureAlgo(
            @Valid @NotNull
                    VolumeParticipationFutureAlgoRequest volumeParticipationFutureAlgoRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                volumeParticipationFutureAlgoValidateBeforeCall(
                        volumeParticipationFutureAlgoRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<VolumeParticipationFutureAlgoResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
