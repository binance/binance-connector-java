/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.simple_earn.rest.model.GetFlexibleSubscriptionPreviewResponse;
import com.binance.connector.client.simple_earn.rest.model.GetLockedSubscriptionPreviewResponse;
import com.binance.connector.client.simple_earn.rest.model.RedeemFlexibleProductRequest;
import com.binance.connector.client.simple_earn.rest.model.RedeemFlexibleProductResponse;
import com.binance.connector.client.simple_earn.rest.model.RedeemLockedProductRequest;
import com.binance.connector.client.simple_earn.rest.model.RedeemLockedProductResponse;
import com.binance.connector.client.simple_earn.rest.model.SetFlexibleAutoSubscribeRequest;
import com.binance.connector.client.simple_earn.rest.model.SetFlexibleAutoSubscribeResponse;
import com.binance.connector.client.simple_earn.rest.model.SetLockedAutoSubscribeRequest;
import com.binance.connector.client.simple_earn.rest.model.SetLockedAutoSubscribeResponse;
import com.binance.connector.client.simple_earn.rest.model.SetLockedProductRedeemOptionRequest;
import com.binance.connector.client.simple_earn.rest.model.SetLockedProductRedeemOptionResponse;
import com.binance.connector.client.simple_earn.rest.model.SubscribeFlexibleProductRequest;
import com.binance.connector.client.simple_earn.rest.model.SubscribeFlexibleProductResponse;
import com.binance.connector.client.simple_earn.rest.model.SubscribeLockedProductRequest;
import com.binance.connector.client.simple_earn.rest.model.SubscribeLockedProductResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for EarnApi */
public class EarnApiTest {

    private EarnApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new EarnApi(apiClientSpy);
    }

    /**
     * Get Flexible Subscription Preview(USER_DATA)
     *
     * <p>Get Flexible Subscription Preview Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleSubscriptionPreviewTest() throws ApiException, CryptoException {
        String productId = "1";
        Double amount = 1d;
        Long recvWindow = 5000L;
        ApiResponse<GetFlexibleSubscriptionPreviewResponse> response =
                api.getFlexibleSubscriptionPreview(productId, amount, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "productId=1&amount=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "00a7c80c0c410b10c6a3067e01f82fc810a365b87c83c5086e7224f826896ff5",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/flexible/subscriptionPreview",
                actualRequest.url().encodedPath());
    }

    /**
     * Get Locked Subscription Preview(USER_DATA)
     *
     * <p>Get Locked Subscription Preview Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLockedSubscriptionPreviewTest() throws ApiException, CryptoException {
        String projectId = "1";
        Double amount = 1d;
        Boolean autoSubscribe = false;
        Long recvWindow = 5000L;
        ApiResponse<GetLockedSubscriptionPreviewResponse> response =
                api.getLockedSubscriptionPreview(projectId, amount, autoSubscribe, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "projectId=1&amount=1&autoSubscribe=false&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "ed6d60bbbd167523b7f2ff4be5baa4485dbf0f39322a1cb34907612d59aac34a",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/locked/subscriptionPreview",
                actualRequest.url().encodedPath());
    }

    /**
     * Redeem Flexible Product(TRADE)
     *
     * <p>Redeem Flexible Product * You need to open &#x60;Enable Spot &amp; Margin Trading&#x60;
     * permission for the API Key which requests this endpoint. Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redeemFlexibleProductTest() throws ApiException, CryptoException {
        RedeemFlexibleProductRequest redeemFlexibleProductRequest =
                new RedeemFlexibleProductRequest();

        redeemFlexibleProductRequest.productId("1");

        ApiResponse<RedeemFlexibleProductResponse> response =
                api.redeemFlexibleProduct(redeemFlexibleProductRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000productId=1", signInputCaptor.getValue());
        assertEquals(
                "c4c7af86a6a8cfafc9909bb0dec0f67695e17aba2a88ca75e983de6e0b915279",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/simple-earn/flexible/redeem", actualRequest.url().encodedPath());
    }

    /**
     * Redeem Locked Product(TRADE)
     *
     * <p>Redeem Locked Product * You need to open &#x60;Enable Spot &amp; Margin Trading&#x60;
     * permission for the API Key which requests this endpoint. Weight: 1/3s per account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redeemLockedProductTest() throws ApiException, CryptoException {
        RedeemLockedProductRequest redeemLockedProductRequest = new RedeemLockedProductRequest();

        redeemLockedProductRequest.positionId("1");

        ApiResponse<RedeemLockedProductResponse> response =
                api.redeemLockedProduct(redeemLockedProductRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000positionId=1", signInputCaptor.getValue());
        assertEquals(
                "05345189012e725ecf394a569c76b468c3a9d6377f5b644a1b90e1551920ce91",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/simple-earn/locked/redeem", actualRequest.url().encodedPath());
    }

    /**
     * Set Flexible Auto Subscribe(USER_DATA)
     *
     * <p>Set Flexible Auto Subscribe Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setFlexibleAutoSubscribeTest() throws ApiException, CryptoException {
        SetFlexibleAutoSubscribeRequest setFlexibleAutoSubscribeRequest =
                new SetFlexibleAutoSubscribeRequest();

        setFlexibleAutoSubscribeRequest.productId("1");
        setFlexibleAutoSubscribeRequest.autoSubscribe(false);

        ApiResponse<SetFlexibleAutoSubscribeResponse> response =
                api.setFlexibleAutoSubscribe(setFlexibleAutoSubscribeRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000productId=1&autoSubscribe=false",
                signInputCaptor.getValue());
        assertEquals(
                "7f0e71e1d2216401bdf0ebda0fabfe4e4c1000d47e4c68eb693dac11779f033f",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/flexible/setAutoSubscribe",
                actualRequest.url().encodedPath());
    }

    /**
     * Set Locked Auto Subscribe(USER_DATA)
     *
     * <p>Set locked auto subscribe Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setLockedAutoSubscribeTest() throws ApiException, CryptoException {
        SetLockedAutoSubscribeRequest setLockedAutoSubscribeRequest =
                new SetLockedAutoSubscribeRequest();

        setLockedAutoSubscribeRequest.positionId("1");
        setLockedAutoSubscribeRequest.autoSubscribe(false);

        ApiResponse<SetLockedAutoSubscribeResponse> response =
                api.setLockedAutoSubscribe(setLockedAutoSubscribeRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000positionId=1&autoSubscribe=false",
                signInputCaptor.getValue());
        assertEquals(
                "3a195934cb713ee1998b4fa336da6ec3a9a4b2087a91d11a2d5602c7af3474e0",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/locked/setAutoSubscribe", actualRequest.url().encodedPath());
    }

    /**
     * Set Locked Product Redeem Option(USER_DATA)
     *
     * <p>Set redeem option for Locked product Weight: 50
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setLockedProductRedeemOptionTest() throws ApiException, CryptoException {
        SetLockedProductRedeemOptionRequest setLockedProductRedeemOptionRequest =
                new SetLockedProductRedeemOptionRequest();

        setLockedProductRedeemOptionRequest.positionId("1");
        setLockedProductRedeemOptionRequest.redeemTo("");

        ApiResponse<SetLockedProductRedeemOptionResponse> response =
                api.setLockedProductRedeemOption(setLockedProductRedeemOptionRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000positionId=1&redeemTo=", signInputCaptor.getValue());
        assertEquals(
                "f8aaddc07f48085384e59233efb3421133330e9bcd0357b99332f1202fe03d70",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/locked/setRedeemOption", actualRequest.url().encodedPath());
    }

    /**
     * Subscribe Flexible Product(TRADE)
     *
     * <p>Subscribe Flexible Product * You need to open &#x60;Enable Spot &amp; Margin Trading&#x60;
     * permission for the API Key which requests this endpoint. Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeFlexibleProductTest() throws ApiException, CryptoException {
        SubscribeFlexibleProductRequest subscribeFlexibleProductRequest =
                new SubscribeFlexibleProductRequest();

        subscribeFlexibleProductRequest.productId("1");
        subscribeFlexibleProductRequest.amount(1d);

        ApiResponse<SubscribeFlexibleProductResponse> response =
                api.subscribeFlexibleProduct(subscribeFlexibleProductRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000amount=1&productId=1", signInputCaptor.getValue());
        assertEquals(
                "d71f21fc51817b324b37ac741557e5f0e37ba4c300b9b0dcf20dadffde1a1e1a",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/simple-earn/flexible/subscribe", actualRequest.url().encodedPath());
    }

    /**
     * Subscribe Locked Product(TRADE)
     *
     * <p>Subscribe Locked Product * You need to open &#x60;Enable Spot &amp; Margin Trading&#x60;
     * permission for the API Key which requests this endpoint. Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void subscribeLockedProductTest() throws ApiException, CryptoException {
        SubscribeLockedProductRequest subscribeLockedProductRequest =
                new SubscribeLockedProductRequest();

        subscribeLockedProductRequest.projectId("1");
        subscribeLockedProductRequest.amount(1d);

        ApiResponse<SubscribeLockedProductResponse> response =
                api.subscribeLockedProduct(subscribeLockedProductRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000amount=1&projectId=1", signInputCaptor.getValue());
        assertEquals(
                "7ef22d632c2aec6bea9e728707f8eac15fbf16144341682080788f00ceb268ac",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/simple-earn/locked/subscribe", actualRequest.url().encodedPath());
    }
}
