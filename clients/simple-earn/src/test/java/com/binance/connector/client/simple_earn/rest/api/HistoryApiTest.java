/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.simple_earn.rest.model.GetCollateralRecordResponse;
import com.binance.connector.client.simple_earn.rest.model.GetFlexibleRedemptionRecordResponse;
import com.binance.connector.client.simple_earn.rest.model.GetFlexibleRewardsHistoryResponse;
import com.binance.connector.client.simple_earn.rest.model.GetFlexibleSubscriptionRecordResponse;
import com.binance.connector.client.simple_earn.rest.model.GetLockedRedemptionRecordResponse;
import com.binance.connector.client.simple_earn.rest.model.GetLockedRewardsHistoryResponse;
import com.binance.connector.client.simple_earn.rest.model.GetLockedSubscriptionRecordResponse;
import com.binance.connector.client.simple_earn.rest.model.GetRateHistoryResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for HistoryApi */
public class HistoryApiTest {

    private HistoryApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new HistoryApi(apiClientSpy);
    }

    /**
     * Get Collateral Record(USER_DATA)
     *
     * <p>Get Collateral Record * The time between &#x60;startTime&#x60; and &#x60;endTime&#x60;
     * cannot be longer than 30 days. * If &#x60;startTime&#x60; and &#x60;endTime&#x60; are both
     * not sent, then the last 30 days&#39; data will be returned. * If &#x60;startTime&#x60; is
     * sent but &#x60;endTime&#x60; is not sent, the next 30 days&#39; data beginning from
     * &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollateralRecordTest() throws ApiException, CryptoException {
        String productId = "1";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long size = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetCollateralRecordResponse> response =
                api.getCollateralRecord(productId, startTime, endTime, current, size, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "productId=1&startTime=1623319461670&endTime=1641782889000&current=1&size=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "906323d23878072da9680bca3160b76d28b6ea07530e027f762757a381c263c0",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/flexible/history/collateralRecord",
                actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Redemption Record(USER_DATA)
     *
     * <p>Get Flexible Redemption Record * The time between &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; cannot be longer than 3 months. * If &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; are both not sent, then the last 30 days&#39; data will be returned. * If
     * &#x60;startTime&#x60; is sent but &#x60;endTime&#x60; is not sent, the next 30 days&#39; data
     * beginning from &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleRedemptionRecordTest() throws ApiException, CryptoException {
        String productId = "1";
        String redeemId = "1";
        String asset = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long size = 10L;
        ApiResponse<GetFlexibleRedemptionRecordResponse> response =
                api.getFlexibleRedemptionRecord(
                        productId, redeemId, asset, startTime, endTime, current, size);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "productId=1&redeemId=1&asset=&startTime=1623319461670&endTime=1641782889000&current=1&size=10&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "43dfdd492c8d655c2c53ca9b371f7a4b5dc484bc6ff05c18006c8c807ed024b6",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/flexible/history/redemptionRecord",
                actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Rewards History(USER_DATA)
     *
     * <p>Get Flexible Rewards History * The time between &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; cannot be longer than 3 months. * If &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; are both not sent, then the last 30 days&#39; data will be returned. * If
     * &#x60;startTime&#x60; is sent but &#x60;endTime&#x60; is not sent, the next 30 days&#39; data
     * beginning from &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleRewardsHistoryTest() throws ApiException, CryptoException {
        String type = "Bonus";
        String productId = "1";
        String asset = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = null;
        Long size = null;
        Long recvWindow = null;
        ApiResponse<GetFlexibleRewardsHistoryResponse> response =
                api.getFlexibleRewardsHistory(type, productId, asset, startTime, endTime, current, size, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "productId=1&asset=&startTime=1623319461670&endTime=1641782889000&type=Bonus&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "aaca82b4120f35ab3bf0bc811eb9e830f570191c637ef87b11b4e820934b3f50",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/flexible/history/rewardsRecord",
                actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Subscription Record(USER_DATA)
     *
     * <p>Get Flexible Subscription Record * The time between &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; cannot be longer than 3 months. * If &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; are both not sent, then the last 30 days&#39; data will be returned. * If
     * &#x60;startTime&#x60; is sent but &#x60;endTime&#x60; is not sent, the next 30 days&#39; data
     * beginning from &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleSubscriptionRecordTest() throws ApiException, CryptoException {
        String productId = "1";
        String purchaseId = "1";
        String asset = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long size = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetFlexibleSubscriptionRecordResponse> response =
                api.getFlexibleSubscriptionRecord(
                        productId,
                        purchaseId,
                        asset,
                        startTime,
                        endTime,
                        current,
                        size,
                        recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "productId=1&purchaseId=1&asset=&startTime=1623319461670&endTime=1641782889000&current=1&size=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "e68ebd079318006615cac9e1f467bdc7c3ac82bf05a7180825541e5925b07e51",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/flexible/history/subscriptionRecord",
                actualRequest.url().encodedPath());
    }

    /**
     * Get Locked Redemption Record(USER_DATA)
     *
     * <p>Get Locked Redemption Record * The time between &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; cannot be longer than 3 months. * If &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; are both not sent, then the last 30 days&#39; data will be returned. * If
     * &#x60;startTime&#x60; is sent but &#x60;endTime&#x60; is not sent, the next 30 days&#39; data
     * beginning from &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLockedRedemptionRecordTest() throws ApiException, CryptoException {
        String positionId = "1";
        String redeemId = "1";
        String asset = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long size = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetLockedRedemptionRecordResponse> response =
                api.getLockedRedemptionRecord(
                        positionId, redeemId, asset, startTime, endTime, current, size, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "positionId=1&redeemId=1&asset=&startTime=1623319461670&endTime=1641782889000&current=1&size=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "b969874fd814b72e7c29bdebdc319072c1dc23126f0a117b9b22f3617918204d",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/locked/history/redemptionRecord",
                actualRequest.url().encodedPath());
    }

    /**
     * Get Locked Rewards History(USER_DATA)
     *
     * <p>Get Locked Rewards History * The time between &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; cannot be longer than 3 months. * If &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; are both not sent, then the last 30 days&#39; data will be returned. * If
     * &#x60;startTime&#x60; is sent but &#x60;endTime&#x60; is not sent, the next 30 days&#39; data
     * beginning from &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLockedRewardsHistoryTest() throws ApiException, CryptoException {
        String positionId = "1";
        String asset = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long size = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetLockedRewardsHistoryResponse> response =
                api.getLockedRewardsHistory(
                        positionId, asset, startTime, endTime, current, size, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "positionId=1&asset=&startTime=1623319461670&endTime=1641782889000&current=1&size=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "fa00e647d10a074646817619a9a8485086bbc8257eed00382562bf960d5f0143",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/locked/history/rewardsRecord",
                actualRequest.url().encodedPath());
    }

    /**
     * Get Locked Subscription Record(USER_DATA)
     *
     * <p>Get Locked Subscription Record * The time between &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; cannot be longer than 3 months. * If &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; are both not sent, then the last 30 days&#39; data will be returned. * If
     * &#x60;startTime&#x60; is sent but &#x60;endTime&#x60; is not sent, the next 30 days&#39; data
     * beginning from &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLockedSubscriptionRecordTest() throws ApiException, CryptoException {
        String purchaseId = "1";
        String asset = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long size = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetLockedSubscriptionRecordResponse> response =
                api.getLockedSubscriptionRecord(
                        purchaseId, asset, startTime, endTime, current, size, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "purchaseId=1&asset=&startTime=1623319461670&endTime=1641782889000&current=1&size=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "bd233092b66eaad8df11be01a5a41670f67daa39dfc19880a9d14424471cfba7",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/locked/history/subscriptionRecord",
                actualRequest.url().encodedPath());
    }

    /**
     * Get Rate History(USER_DATA)
     *
     * <p>Get Rate History * The time between startTime and endTime cannot be longer than 1 year. *
     * If &#x60;startTime&#x60; and &#x60;endTime&#x60; are both not sent, then the last 30
     * days&#39; data will be returned. * If &#x60;startTime&#x60; is sent but &#x60;endTime&#x60;
     * is not sent, the next 30 days&#39; data beginning from &#x60;startTime&#x60; will be
     * returned. * If &#x60;endTime&#x60; is sent but &#x60;startTime&#x60; is not sent, the 30
     * days&#39; data before &#x60;endTime&#x60; will be returned. Weight: 150
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRateHistoryTest() throws ApiException, CryptoException {
        String productId = "1";
        String aprPeriod = "DAY";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long size = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetRateHistoryResponse> response =
                api.getRateHistory(
                        productId, aprPeriod, startTime, endTime, current, size, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "productId=1&aprPeriod=DAY&startTime=1623319461670&endTime=1641782889000&current=1&size=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "0af754bef31bbc2eacb35fc0379a27fbebb9e93765a6b817a1c1a593149b478f",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/simple-earn/flexible/history/rateHistory",
                actualRequest.url().encodedPath());
    }
}
