/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.model;

import com.binance.connector.client.simple_earn.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** SimpleAccountResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SimpleAccountResponse {
    public static final String SERIALIZED_NAME_TOTAL_AMOUNT_IN_B_T_C = "totalAmountInBTC";

    @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_IN_B_T_C)
    @jakarta.annotation.Nullable
    private String totalAmountInBTC;

    public static final String SERIALIZED_NAME_TOTAL_AMOUNT_IN_U_S_D_T = "totalAmountInUSDT";

    @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_IN_U_S_D_T)
    @jakarta.annotation.Nullable
    private String totalAmountInUSDT;

    public static final String SERIALIZED_NAME_TOTAL_FLEXIBLE_AMOUNT_IN_B_T_C =
            "totalFlexibleAmountInBTC";

    @SerializedName(SERIALIZED_NAME_TOTAL_FLEXIBLE_AMOUNT_IN_B_T_C)
    @jakarta.annotation.Nullable
    private String totalFlexibleAmountInBTC;

    public static final String SERIALIZED_NAME_TOTAL_FLEXIBLE_AMOUNT_IN_U_S_D_T =
            "totalFlexibleAmountInUSDT";

    @SerializedName(SERIALIZED_NAME_TOTAL_FLEXIBLE_AMOUNT_IN_U_S_D_T)
    @jakarta.annotation.Nullable
    private String totalFlexibleAmountInUSDT;

    public static final String SERIALIZED_NAME_TOTAL_LOCKED_IN_B_T_C = "totalLockedInBTC";

    @SerializedName(SERIALIZED_NAME_TOTAL_LOCKED_IN_B_T_C)
    @jakarta.annotation.Nullable
    private String totalLockedInBTC;

    public static final String SERIALIZED_NAME_TOTAL_LOCKED_IN_U_S_D_T = "totalLockedInUSDT";

    @SerializedName(SERIALIZED_NAME_TOTAL_LOCKED_IN_U_S_D_T)
    @jakarta.annotation.Nullable
    private String totalLockedInUSDT;

    public SimpleAccountResponse() {}

    public SimpleAccountResponse totalAmountInBTC(
            @jakarta.annotation.Nullable String totalAmountInBTC) {
        this.totalAmountInBTC = totalAmountInBTC;
        return this;
    }

    /**
     * Get totalAmountInBTC
     *
     * @return totalAmountInBTC
     */
    @jakarta.annotation.Nullable
    public String getTotalAmountInBTC() {
        return totalAmountInBTC;
    }

    public void setTotalAmountInBTC(@jakarta.annotation.Nullable String totalAmountInBTC) {
        this.totalAmountInBTC = totalAmountInBTC;
    }

    public SimpleAccountResponse totalAmountInUSDT(
            @jakarta.annotation.Nullable String totalAmountInUSDT) {
        this.totalAmountInUSDT = totalAmountInUSDT;
        return this;
    }

    /**
     * Get totalAmountInUSDT
     *
     * @return totalAmountInUSDT
     */
    @jakarta.annotation.Nullable
    public String getTotalAmountInUSDT() {
        return totalAmountInUSDT;
    }

    public void setTotalAmountInUSDT(@jakarta.annotation.Nullable String totalAmountInUSDT) {
        this.totalAmountInUSDT = totalAmountInUSDT;
    }

    public SimpleAccountResponse totalFlexibleAmountInBTC(
            @jakarta.annotation.Nullable String totalFlexibleAmountInBTC) {
        this.totalFlexibleAmountInBTC = totalFlexibleAmountInBTC;
        return this;
    }

    /**
     * Get totalFlexibleAmountInBTC
     *
     * @return totalFlexibleAmountInBTC
     */
    @jakarta.annotation.Nullable
    public String getTotalFlexibleAmountInBTC() {
        return totalFlexibleAmountInBTC;
    }

    public void setTotalFlexibleAmountInBTC(
            @jakarta.annotation.Nullable String totalFlexibleAmountInBTC) {
        this.totalFlexibleAmountInBTC = totalFlexibleAmountInBTC;
    }

    public SimpleAccountResponse totalFlexibleAmountInUSDT(
            @jakarta.annotation.Nullable String totalFlexibleAmountInUSDT) {
        this.totalFlexibleAmountInUSDT = totalFlexibleAmountInUSDT;
        return this;
    }

    /**
     * Get totalFlexibleAmountInUSDT
     *
     * @return totalFlexibleAmountInUSDT
     */
    @jakarta.annotation.Nullable
    public String getTotalFlexibleAmountInUSDT() {
        return totalFlexibleAmountInUSDT;
    }

    public void setTotalFlexibleAmountInUSDT(
            @jakarta.annotation.Nullable String totalFlexibleAmountInUSDT) {
        this.totalFlexibleAmountInUSDT = totalFlexibleAmountInUSDT;
    }

    public SimpleAccountResponse totalLockedInBTC(
            @jakarta.annotation.Nullable String totalLockedInBTC) {
        this.totalLockedInBTC = totalLockedInBTC;
        return this;
    }

    /**
     * Get totalLockedInBTC
     *
     * @return totalLockedInBTC
     */
    @jakarta.annotation.Nullable
    public String getTotalLockedInBTC() {
        return totalLockedInBTC;
    }

    public void setTotalLockedInBTC(@jakarta.annotation.Nullable String totalLockedInBTC) {
        this.totalLockedInBTC = totalLockedInBTC;
    }

    public SimpleAccountResponse totalLockedInUSDT(
            @jakarta.annotation.Nullable String totalLockedInUSDT) {
        this.totalLockedInUSDT = totalLockedInUSDT;
        return this;
    }

    /**
     * Get totalLockedInUSDT
     *
     * @return totalLockedInUSDT
     */
    @jakarta.annotation.Nullable
    public String getTotalLockedInUSDT() {
        return totalLockedInUSDT;
    }

    public void setTotalLockedInUSDT(@jakarta.annotation.Nullable String totalLockedInUSDT) {
        this.totalLockedInUSDT = totalLockedInUSDT;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SimpleAccountResponse simpleAccountResponse = (SimpleAccountResponse) o;
        return Objects.equals(this.totalAmountInBTC, simpleAccountResponse.totalAmountInBTC)
                && Objects.equals(this.totalAmountInUSDT, simpleAccountResponse.totalAmountInUSDT)
                && Objects.equals(
                        this.totalFlexibleAmountInBTC,
                        simpleAccountResponse.totalFlexibleAmountInBTC)
                && Objects.equals(
                        this.totalFlexibleAmountInUSDT,
                        simpleAccountResponse.totalFlexibleAmountInUSDT)
                && Objects.equals(this.totalLockedInBTC, simpleAccountResponse.totalLockedInBTC)
                && Objects.equals(this.totalLockedInUSDT, simpleAccountResponse.totalLockedInUSDT);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                totalAmountInBTC,
                totalAmountInUSDT,
                totalFlexibleAmountInBTC,
                totalFlexibleAmountInUSDT,
                totalLockedInBTC,
                totalLockedInUSDT);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SimpleAccountResponse {\n");
        sb.append("		totalAmountInBTC: ").append(toIndentedString(totalAmountInBTC)).append("\n");
        sb.append("		totalAmountInUSDT: ").append(toIndentedString(totalAmountInUSDT)).append("\n");
        sb.append("		totalFlexibleAmountInBTC: ")
                .append(toIndentedString(totalFlexibleAmountInBTC))
                .append("\n");
        sb.append("		totalFlexibleAmountInUSDT: ")
                .append(toIndentedString(totalFlexibleAmountInUSDT))
                .append("\n");
        sb.append("		totalLockedInBTC: ").append(toIndentedString(totalLockedInBTC)).append("\n");
        sb.append("		totalLockedInUSDT: ").append(toIndentedString(totalLockedInUSDT)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object totalAmountInBTCValue = getTotalAmountInBTC();
        String totalAmountInBTCValueAsString = "";
        totalAmountInBTCValueAsString = totalAmountInBTCValue.toString();
        sb.append("totalAmountInBTC=").append(urlEncode(totalAmountInBTCValueAsString)).append("");
        Object totalAmountInUSDTValue = getTotalAmountInUSDT();
        String totalAmountInUSDTValueAsString = "";
        totalAmountInUSDTValueAsString = totalAmountInUSDTValue.toString();
        sb.append("totalAmountInUSDT=")
                .append(urlEncode(totalAmountInUSDTValueAsString))
                .append("");
        Object totalFlexibleAmountInBTCValue = getTotalFlexibleAmountInBTC();
        String totalFlexibleAmountInBTCValueAsString = "";
        totalFlexibleAmountInBTCValueAsString = totalFlexibleAmountInBTCValue.toString();
        sb.append("totalFlexibleAmountInBTC=")
                .append(urlEncode(totalFlexibleAmountInBTCValueAsString))
                .append("");
        Object totalFlexibleAmountInUSDTValue = getTotalFlexibleAmountInUSDT();
        String totalFlexibleAmountInUSDTValueAsString = "";
        totalFlexibleAmountInUSDTValueAsString = totalFlexibleAmountInUSDTValue.toString();
        sb.append("totalFlexibleAmountInUSDT=")
                .append(urlEncode(totalFlexibleAmountInUSDTValueAsString))
                .append("");
        Object totalLockedInBTCValue = getTotalLockedInBTC();
        String totalLockedInBTCValueAsString = "";
        totalLockedInBTCValueAsString = totalLockedInBTCValue.toString();
        sb.append("totalLockedInBTC=").append(urlEncode(totalLockedInBTCValueAsString)).append("");
        Object totalLockedInUSDTValue = getTotalLockedInUSDT();
        String totalLockedInUSDTValueAsString = "";
        totalLockedInUSDTValueAsString = totalLockedInUSDTValue.toString();
        sb.append("totalLockedInUSDT=")
                .append(urlEncode(totalLockedInUSDTValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("totalAmountInBTC");
        openapiFields.add("totalAmountInUSDT");
        openapiFields.add("totalFlexibleAmountInBTC");
        openapiFields.add("totalFlexibleAmountInUSDT");
        openapiFields.add("totalLockedInBTC");
        openapiFields.add("totalLockedInUSDT");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SimpleAccountResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SimpleAccountResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SimpleAccountResponse is not found in"
                                        + " the empty JSON string",
                                SimpleAccountResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SimpleAccountResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SimpleAccountResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("totalAmountInBTC") != null
                        && !jsonObj.get("totalAmountInBTC").isJsonNull())
                && !jsonObj.get("totalAmountInBTC").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalAmountInBTC` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalAmountInBTC").toString()));
        }
        if ((jsonObj.get("totalAmountInUSDT") != null
                        && !jsonObj.get("totalAmountInUSDT").isJsonNull())
                && !jsonObj.get("totalAmountInUSDT").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalAmountInUSDT` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalAmountInUSDT").toString()));
        }
        if ((jsonObj.get("totalFlexibleAmountInBTC") != null
                        && !jsonObj.get("totalFlexibleAmountInBTC").isJsonNull())
                && !jsonObj.get("totalFlexibleAmountInBTC").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalFlexibleAmountInBTC` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("totalFlexibleAmountInBTC").toString()));
        }
        if ((jsonObj.get("totalFlexibleAmountInUSDT") != null
                        && !jsonObj.get("totalFlexibleAmountInUSDT").isJsonNull())
                && !jsonObj.get("totalFlexibleAmountInUSDT").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalFlexibleAmountInUSDT` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("totalFlexibleAmountInUSDT").toString()));
        }
        if ((jsonObj.get("totalLockedInBTC") != null
                        && !jsonObj.get("totalLockedInBTC").isJsonNull())
                && !jsonObj.get("totalLockedInBTC").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalLockedInBTC` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalLockedInBTC").toString()));
        }
        if ((jsonObj.get("totalLockedInUSDT") != null
                        && !jsonObj.get("totalLockedInUSDT").isJsonNull())
                && !jsonObj.get("totalLockedInUSDT").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalLockedInUSDT` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalLockedInUSDT").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SimpleAccountResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SimpleAccountResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SimpleAccountResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SimpleAccountResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SimpleAccountResponse>() {
                        @Override
                        public void write(JsonWriter out, SimpleAccountResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SimpleAccountResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SimpleAccountResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SimpleAccountResponse
     * @throws IOException if the JSON string is invalid with respect to SimpleAccountResponse
     */
    public static SimpleAccountResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SimpleAccountResponse.class);
    }

    /**
     * Convert an instance of SimpleAccountResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
