/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.model;

import com.binance.connector.client.simple_earn.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFlexibleSubscriptionPreviewResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFlexibleSubscriptionPreviewResponse {
    public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";

    @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
    @jakarta.annotation.Nullable
    private String totalAmount;

    public static final String SERIALIZED_NAME_REWARD_ASSET = "rewardAsset";

    @SerializedName(SERIALIZED_NAME_REWARD_ASSET)
    @jakarta.annotation.Nullable
    private String rewardAsset;

    public static final String SERIALIZED_NAME_AIR_DROP_ASSET = "airDropAsset";

    @SerializedName(SERIALIZED_NAME_AIR_DROP_ASSET)
    @jakarta.annotation.Nullable
    private String airDropAsset;

    public static final String SERIALIZED_NAME_EST_DAILY_BONUS_REWARDS = "estDailyBonusRewards";

    @SerializedName(SERIALIZED_NAME_EST_DAILY_BONUS_REWARDS)
    @jakarta.annotation.Nullable
    private String estDailyBonusRewards;

    public static final String SERIALIZED_NAME_EST_DAILY_REAL_TIME_REWARDS =
            "estDailyRealTimeRewards";

    @SerializedName(SERIALIZED_NAME_EST_DAILY_REAL_TIME_REWARDS)
    @jakarta.annotation.Nullable
    private String estDailyRealTimeRewards;

    public static final String SERIALIZED_NAME_EST_DAILY_AIRDROP_REWARDS = "estDailyAirdropRewards";

    @SerializedName(SERIALIZED_NAME_EST_DAILY_AIRDROP_REWARDS)
    @jakarta.annotation.Nullable
    private String estDailyAirdropRewards;

    public GetFlexibleSubscriptionPreviewResponse() {}

    public GetFlexibleSubscriptionPreviewResponse totalAmount(
            @jakarta.annotation.Nullable String totalAmount) {
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Get totalAmount
     *
     * @return totalAmount
     */
    @jakarta.annotation.Nullable
    public String getTotalAmount() {
        return totalAmount;
    }

    public void setTotalAmount(@jakarta.annotation.Nullable String totalAmount) {
        this.totalAmount = totalAmount;
    }

    public GetFlexibleSubscriptionPreviewResponse rewardAsset(
            @jakarta.annotation.Nullable String rewardAsset) {
        this.rewardAsset = rewardAsset;
        return this;
    }

    /**
     * Get rewardAsset
     *
     * @return rewardAsset
     */
    @jakarta.annotation.Nullable
    public String getRewardAsset() {
        return rewardAsset;
    }

    public void setRewardAsset(@jakarta.annotation.Nullable String rewardAsset) {
        this.rewardAsset = rewardAsset;
    }

    public GetFlexibleSubscriptionPreviewResponse airDropAsset(
            @jakarta.annotation.Nullable String airDropAsset) {
        this.airDropAsset = airDropAsset;
        return this;
    }

    /**
     * Get airDropAsset
     *
     * @return airDropAsset
     */
    @jakarta.annotation.Nullable
    public String getAirDropAsset() {
        return airDropAsset;
    }

    public void setAirDropAsset(@jakarta.annotation.Nullable String airDropAsset) {
        this.airDropAsset = airDropAsset;
    }

    public GetFlexibleSubscriptionPreviewResponse estDailyBonusRewards(
            @jakarta.annotation.Nullable String estDailyBonusRewards) {
        this.estDailyBonusRewards = estDailyBonusRewards;
        return this;
    }

    /**
     * Get estDailyBonusRewards
     *
     * @return estDailyBonusRewards
     */
    @jakarta.annotation.Nullable
    public String getEstDailyBonusRewards() {
        return estDailyBonusRewards;
    }

    public void setEstDailyBonusRewards(@jakarta.annotation.Nullable String estDailyBonusRewards) {
        this.estDailyBonusRewards = estDailyBonusRewards;
    }

    public GetFlexibleSubscriptionPreviewResponse estDailyRealTimeRewards(
            @jakarta.annotation.Nullable String estDailyRealTimeRewards) {
        this.estDailyRealTimeRewards = estDailyRealTimeRewards;
        return this;
    }

    /**
     * Get estDailyRealTimeRewards
     *
     * @return estDailyRealTimeRewards
     */
    @jakarta.annotation.Nullable
    public String getEstDailyRealTimeRewards() {
        return estDailyRealTimeRewards;
    }

    public void setEstDailyRealTimeRewards(
            @jakarta.annotation.Nullable String estDailyRealTimeRewards) {
        this.estDailyRealTimeRewards = estDailyRealTimeRewards;
    }

    public GetFlexibleSubscriptionPreviewResponse estDailyAirdropRewards(
            @jakarta.annotation.Nullable String estDailyAirdropRewards) {
        this.estDailyAirdropRewards = estDailyAirdropRewards;
        return this;
    }

    /**
     * Get estDailyAirdropRewards
     *
     * @return estDailyAirdropRewards
     */
    @jakarta.annotation.Nullable
    public String getEstDailyAirdropRewards() {
        return estDailyAirdropRewards;
    }

    public void setEstDailyAirdropRewards(
            @jakarta.annotation.Nullable String estDailyAirdropRewards) {
        this.estDailyAirdropRewards = estDailyAirdropRewards;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFlexibleSubscriptionPreviewResponse getFlexibleSubscriptionPreviewResponse =
                (GetFlexibleSubscriptionPreviewResponse) o;
        return Objects.equals(this.totalAmount, getFlexibleSubscriptionPreviewResponse.totalAmount)
                && Objects.equals(
                        this.rewardAsset, getFlexibleSubscriptionPreviewResponse.rewardAsset)
                && Objects.equals(
                        this.airDropAsset, getFlexibleSubscriptionPreviewResponse.airDropAsset)
                && Objects.equals(
                        this.estDailyBonusRewards,
                        getFlexibleSubscriptionPreviewResponse.estDailyBonusRewards)
                && Objects.equals(
                        this.estDailyRealTimeRewards,
                        getFlexibleSubscriptionPreviewResponse.estDailyRealTimeRewards)
                && Objects.equals(
                        this.estDailyAirdropRewards,
                        getFlexibleSubscriptionPreviewResponse.estDailyAirdropRewards);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                totalAmount,
                rewardAsset,
                airDropAsset,
                estDailyBonusRewards,
                estDailyRealTimeRewards,
                estDailyAirdropRewards);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetFlexibleSubscriptionPreviewResponse {\n");
        sb.append("		totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
        sb.append("		rewardAsset: ").append(toIndentedString(rewardAsset)).append("\n");
        sb.append("		airDropAsset: ").append(toIndentedString(airDropAsset)).append("\n");
        sb.append("		estDailyBonusRewards: ")
                .append(toIndentedString(estDailyBonusRewards))
                .append("\n");
        sb.append("		estDailyRealTimeRewards: ")
                .append(toIndentedString(estDailyRealTimeRewards))
                .append("\n");
        sb.append("		estDailyAirdropRewards: ")
                .append(toIndentedString(estDailyAirdropRewards))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object totalAmountValue = getTotalAmount();
        String totalAmountValueAsString = "";
        totalAmountValueAsString = totalAmountValue.toString();
        sb.append("totalAmount=").append(urlEncode(totalAmountValueAsString)).append("");
        Object rewardAssetValue = getRewardAsset();
        String rewardAssetValueAsString = "";
        rewardAssetValueAsString = rewardAssetValue.toString();
        sb.append("rewardAsset=").append(urlEncode(rewardAssetValueAsString)).append("");
        Object airDropAssetValue = getAirDropAsset();
        String airDropAssetValueAsString = "";
        airDropAssetValueAsString = airDropAssetValue.toString();
        sb.append("airDropAsset=").append(urlEncode(airDropAssetValueAsString)).append("");
        Object estDailyBonusRewardsValue = getEstDailyBonusRewards();
        String estDailyBonusRewardsValueAsString = "";
        estDailyBonusRewardsValueAsString = estDailyBonusRewardsValue.toString();
        sb.append("estDailyBonusRewards=")
                .append(urlEncode(estDailyBonusRewardsValueAsString))
                .append("");
        Object estDailyRealTimeRewardsValue = getEstDailyRealTimeRewards();
        String estDailyRealTimeRewardsValueAsString = "";
        estDailyRealTimeRewardsValueAsString = estDailyRealTimeRewardsValue.toString();
        sb.append("estDailyRealTimeRewards=")
                .append(urlEncode(estDailyRealTimeRewardsValueAsString))
                .append("");
        Object estDailyAirdropRewardsValue = getEstDailyAirdropRewards();
        String estDailyAirdropRewardsValueAsString = "";
        estDailyAirdropRewardsValueAsString = estDailyAirdropRewardsValue.toString();
        sb.append("estDailyAirdropRewards=")
                .append(urlEncode(estDailyAirdropRewardsValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("totalAmount");
        openapiFields.add("rewardAsset");
        openapiFields.add("airDropAsset");
        openapiFields.add("estDailyBonusRewards");
        openapiFields.add("estDailyRealTimeRewards");
        openapiFields.add("estDailyAirdropRewards");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFlexibleSubscriptionPreviewResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFlexibleSubscriptionPreviewResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetFlexibleSubscriptionPreviewResponse"
                                        + " is not found in the empty JSON string",
                                GetFlexibleSubscriptionPreviewResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFlexibleSubscriptionPreviewResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetFlexibleSubscriptionPreviewResponse` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("totalAmount") != null && !jsonObj.get("totalAmount").isJsonNull())
                && !jsonObj.get("totalAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("totalAmount").toString()));
        }
        if ((jsonObj.get("rewardAsset") != null && !jsonObj.get("rewardAsset").isJsonNull())
                && !jsonObj.get("rewardAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `rewardAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("rewardAsset").toString()));
        }
        if ((jsonObj.get("airDropAsset") != null && !jsonObj.get("airDropAsset").isJsonNull())
                && !jsonObj.get("airDropAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `airDropAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("airDropAsset").toString()));
        }
        if ((jsonObj.get("estDailyBonusRewards") != null
                        && !jsonObj.get("estDailyBonusRewards").isJsonNull())
                && !jsonObj.get("estDailyBonusRewards").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `estDailyBonusRewards` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("estDailyBonusRewards").toString()));
        }
        if ((jsonObj.get("estDailyRealTimeRewards") != null
                        && !jsonObj.get("estDailyRealTimeRewards").isJsonNull())
                && !jsonObj.get("estDailyRealTimeRewards").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `estDailyRealTimeRewards` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("estDailyRealTimeRewards").toString()));
        }
        if ((jsonObj.get("estDailyAirdropRewards") != null
                        && !jsonObj.get("estDailyAirdropRewards").isJsonNull())
                && !jsonObj.get("estDailyAirdropRewards").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `estDailyAirdropRewards` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("estDailyAirdropRewards").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFlexibleSubscriptionPreviewResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetFlexibleSubscriptionPreviewResponse'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetFlexibleSubscriptionPreviewResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetFlexibleSubscriptionPreviewResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetFlexibleSubscriptionPreviewResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, GetFlexibleSubscriptionPreviewResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetFlexibleSubscriptionPreviewResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFlexibleSubscriptionPreviewResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFlexibleSubscriptionPreviewResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFlexibleSubscriptionPreviewResponse
     */
    public static GetFlexibleSubscriptionPreviewResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetFlexibleSubscriptionPreviewResponse.class);
    }

    /**
     * Convert an instance of GetFlexibleSubscriptionPreviewResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
