/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.model;

import com.binance.connector.client.simple_earn.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFlexibleRedemptionRecordResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFlexibleRedemptionRecordResponseRowsInner {
    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";

    @SerializedName(SERIALIZED_NAME_PROJECT_ID)
    @jakarta.annotation.Nullable
    private String projectId;

    public static final String SERIALIZED_NAME_REDEEM_ID = "redeemId";

    @SerializedName(SERIALIZED_NAME_REDEEM_ID)
    @jakarta.annotation.Nullable
    private Long redeemId;

    public static final String SERIALIZED_NAME_DEST_ACCOUNT = "destAccount";

    @SerializedName(SERIALIZED_NAME_DEST_ACCOUNT)
    @jakarta.annotation.Nullable
    private String destAccount;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public GetFlexibleRedemptionRecordResponseRowsInner() {}

    public GetFlexibleRedemptionRecordResponseRowsInner amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public GetFlexibleRedemptionRecordResponseRowsInner asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public GetFlexibleRedemptionRecordResponseRowsInner time(
            @jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public GetFlexibleRedemptionRecordResponseRowsInner projectId(
            @jakarta.annotation.Nullable String projectId) {
        this.projectId = projectId;
        return this;
    }

    /**
     * Get projectId
     *
     * @return projectId
     */
    @jakarta.annotation.Nullable
    public String getProjectId() {
        return projectId;
    }

    public void setProjectId(@jakarta.annotation.Nullable String projectId) {
        this.projectId = projectId;
    }

    public GetFlexibleRedemptionRecordResponseRowsInner redeemId(
            @jakarta.annotation.Nullable Long redeemId) {
        this.redeemId = redeemId;
        return this;
    }

    /**
     * Get redeemId
     *
     * @return redeemId
     */
    @jakarta.annotation.Nullable
    public Long getRedeemId() {
        return redeemId;
    }

    public void setRedeemId(@jakarta.annotation.Nullable Long redeemId) {
        this.redeemId = redeemId;
    }

    public GetFlexibleRedemptionRecordResponseRowsInner destAccount(
            @jakarta.annotation.Nullable String destAccount) {
        this.destAccount = destAccount;
        return this;
    }

    /**
     * Get destAccount
     *
     * @return destAccount
     */
    @jakarta.annotation.Nullable
    public String getDestAccount() {
        return destAccount;
    }

    public void setDestAccount(@jakarta.annotation.Nullable String destAccount) {
        this.destAccount = destAccount;
    }

    public GetFlexibleRedemptionRecordResponseRowsInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFlexibleRedemptionRecordResponseRowsInner getFlexibleRedemptionRecordResponseRowsInner =
                (GetFlexibleRedemptionRecordResponseRowsInner) o;
        return Objects.equals(this.amount, getFlexibleRedemptionRecordResponseRowsInner.amount)
                && Objects.equals(this.asset, getFlexibleRedemptionRecordResponseRowsInner.asset)
                && Objects.equals(this.time, getFlexibleRedemptionRecordResponseRowsInner.time)
                && Objects.equals(
                        this.projectId, getFlexibleRedemptionRecordResponseRowsInner.projectId)
                && Objects.equals(
                        this.redeemId, getFlexibleRedemptionRecordResponseRowsInner.redeemId)
                && Objects.equals(
                        this.destAccount, getFlexibleRedemptionRecordResponseRowsInner.destAccount)
                && Objects.equals(this.status, getFlexibleRedemptionRecordResponseRowsInner.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(amount, asset, time, projectId, redeemId, destAccount, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetFlexibleRedemptionRecordResponseRowsInner {\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		projectId: ").append(toIndentedString(projectId)).append("\n");
        sb.append("		redeemId: ").append(toIndentedString(redeemId)).append("\n");
        sb.append("		destAccount: ").append(toIndentedString(destAccount)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        Object projectIdValue = getProjectId();
        String projectIdValueAsString = "";
        projectIdValueAsString = projectIdValue.toString();
        sb.append("projectId=").append(urlEncode(projectIdValueAsString)).append("");
        Object redeemIdValue = getRedeemId();
        String redeemIdValueAsString = "";
        redeemIdValueAsString = redeemIdValue.toString();
        sb.append("redeemId=").append(urlEncode(redeemIdValueAsString)).append("");
        Object destAccountValue = getDestAccount();
        String destAccountValueAsString = "";
        destAccountValueAsString = destAccountValue.toString();
        sb.append("destAccount=").append(urlEncode(destAccountValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("amount");
        openapiFields.add("asset");
        openapiFields.add("time");
        openapiFields.add("projectId");
        openapiFields.add("redeemId");
        openapiFields.add("destAccount");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFlexibleRedemptionRecordResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFlexibleRedemptionRecordResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetFlexibleRedemptionRecordResponseRowsInner is not found"
                                    + " in the empty JSON string",
                                GetFlexibleRedemptionRecordResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFlexibleRedemptionRecordResponseRowsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetFlexibleRedemptionRecordResponseRowsInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull())
                && !jsonObj.get("projectId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `projectId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("projectId").toString()));
        }
        if ((jsonObj.get("destAccount") != null && !jsonObj.get("destAccount").isJsonNull())
                && !jsonObj.get("destAccount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `destAccount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("destAccount").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFlexibleRedemptionRecordResponseRowsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetFlexibleRedemptionRecordResponseRowsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetFlexibleRedemptionRecordResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(GetFlexibleRedemptionRecordResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetFlexibleRedemptionRecordResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetFlexibleRedemptionRecordResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetFlexibleRedemptionRecordResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFlexibleRedemptionRecordResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFlexibleRedemptionRecordResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFlexibleRedemptionRecordResponseRowsInner
     */
    public static GetFlexibleRedemptionRecordResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetFlexibleRedemptionRecordResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetFlexibleRedemptionRecordResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
