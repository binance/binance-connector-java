/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.simple_earn.rest.model.GetBfusdAccountResponse;
import com.binance.connector.client.simple_earn.rest.model.GetBfusdQuotaDetailsResponse;
import com.binance.connector.client.simple_earn.rest.model.GetBfusdRateHistoryResponse;
import com.binance.connector.client.simple_earn.rest.model.GetBfusdRedemptionHistoryResponse;
import com.binance.connector.client.simple_earn.rest.model.GetBfusdRewardsHistoryResponse;
import com.binance.connector.client.simple_earn.rest.model.GetBfusdSubscriptionHistoryResponse;
import com.binance.connector.client.simple_earn.rest.model.RedeemBfusdRequest;
import com.binance.connector.client.simple_earn.rest.model.RedeemBfusdResponse;
import com.binance.connector.client.simple_earn.rest.model.SubscribeBfusdRequest;
import com.binance.connector.client.simple_earn.rest.model.SubscribeBfusdResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class BfusdApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-simple-earn/4.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public BfusdApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public BfusdApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBfusdAccount
     *
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/simple_earn/bfusd/account/">Get BFUSD
     *     Account (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getBfusdAccountCall(Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/bfusd/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBfusdAccountValidateBeforeCall(Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method = this.getClass().getMethod("getBfusdAccount", Long.class);
            Set<ConstraintViolation<BfusdApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getBfusdAccountCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get BFUSD Account (USER_DATA) Get BFUSD account information. Weight: 150
     *
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return ApiResponse&lt;GetBfusdAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/simple_earn/bfusd/account/">Get BFUSD
     *     Account (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetBfusdAccountResponse> getBfusdAccount(Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall = getBfusdAccountValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetBfusdAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getBfusdQuotaDetails
     *
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Quota Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/account/Get-BFUSD-Quota-Details">Get
     *     BFUSD Quota Details (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getBfusdQuotaDetailsCall(Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/bfusd/quota";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBfusdQuotaDetailsValidateBeforeCall(Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method = this.getClass().getMethod("getBfusdQuotaDetails", Long.class);
            Set<ConstraintViolation<BfusdApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getBfusdQuotaDetailsCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get BFUSD Quota Details (USER_DATA) Get BFUSD quota details including fast redemption quota
     * and standard redemption quota. Weight: 150
     *
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return ApiResponse&lt;GetBfusdQuotaDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Quota Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/account/Get-BFUSD-Quota-Details">Get
     *     BFUSD Quota Details (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetBfusdQuotaDetailsResponse> getBfusdQuotaDetails(Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall = getBfusdQuotaDetailsValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetBfusdQuotaDetailsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getBfusdRateHistory
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Starts from 1. Default: 1 (optional)
     * @param size Number of results per page. Default: 10, Max: 100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Rate History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-Rate-History">Get
     *     BFUSD Rate History (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getBfusdRateHistoryCall(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/bfusd/history/rateHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBfusdRateHistoryValidateBeforeCall(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {startTime, endTime, current, size, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getBfusdRateHistory",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<BfusdApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getBfusdRateHistoryCall(startTime, endTime, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get BFUSD Rate History (USER_DATA) Get BFUSD rate history sorted by descending order. * The
     * time between &#x60;startTime&#x60; and &#x60;endTime&#x60; cannot be longer than 6 months. *
     * If &#x60;startTime&#x60; and &#x60;endTime&#x60; are both not sent, then the last 30
     * days&#39; data will be returned. * If &#x60;startTime&#x60; is sent but &#x60;endTime&#x60;
     * is not sent, &#x60;endTime&#x60; will default to current time, and results from
     * &#x60;startTime&#x60; onward will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, &#x60;startTime&#x60; defaults to the current time minus
     * one month, and data between &#x60;startTime&#x60; and &#x60;endTime&#x60; will be returned.
     * Weight: 150
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Starts from 1. Default: 1 (optional)
     * @param size Number of results per page. Default: 10, Max: 100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return ApiResponse&lt;GetBfusdRateHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Rate History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-Rate-History">Get
     *     BFUSD Rate History (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetBfusdRateHistoryResponse> getBfusdRateHistory(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getBfusdRateHistoryValidateBeforeCall(
                        startTime, endTime, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetBfusdRateHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getBfusdRedemptionHistory
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Starts from 1. Default: 1 (optional)
     * @param size Number of results per page. Default: 10, Max: 100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Redemption History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-Redemption-History">Get
     *     BFUSD Redemption History (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getBfusdRedemptionHistoryCall(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/bfusd/history/redemptionHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBfusdRedemptionHistoryValidateBeforeCall(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {startTime, endTime, current, size, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getBfusdRedemptionHistory",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<BfusdApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getBfusdRedemptionHistoryCall(startTime, endTime, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get BFUSD Redemption History (USER_DATA) Get BFUSD redemption history. * The time between
     * &#x60;startTime&#x60; and &#x60;endTime&#x60; cannot be longer than 6 months. * If
     * &#x60;startTime&#x60; and &#x60;endTime&#x60; are both not sent, then the last 30 days&#39;
     * data will be returned. * If &#x60;startTime&#x60; is sent but &#x60;endTime&#x60; is not
     * sent, &#x60;endTime&#x60; will default to current time, and results from
     * &#x60;startTime&#x60; onward will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, &#x60;startTime&#x60; defaults to the current time minus
     * one month, and data between &#x60;startTime&#x60; and &#x60;endTime&#x60; will be returned.
     * Weight: 150
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Starts from 1. Default: 1 (optional)
     * @param size Number of results per page. Default: 10, Max: 100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return ApiResponse&lt;GetBfusdRedemptionHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Redemption History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-Redemption-History">Get
     *     BFUSD Redemption History (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetBfusdRedemptionHistoryResponse> getBfusdRedemptionHistory(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getBfusdRedemptionHistoryValidateBeforeCall(
                        startTime, endTime, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetBfusdRedemptionHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getBfusdRewardsHistory
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Starts from 1. Default: 1 (optional)
     * @param size Number of results per page. Default: 10, Max: 100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Rewards History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-Rewards-History">Get
     *     BFUSD Rewards History (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getBfusdRewardsHistoryCall(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/bfusd/history/rewardsHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBfusdRewardsHistoryValidateBeforeCall(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {startTime, endTime, current, size, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getBfusdRewardsHistory",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<BfusdApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getBfusdRewardsHistoryCall(startTime, endTime, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get BFUSD Rewards History (USER_DATA) Get BFUSD rewards history. * The time between
     * &#x60;startTime&#x60; and &#x60;endTime&#x60; cannot be longer than 6 months. * If
     * &#x60;startTime&#x60; and &#x60;endTime&#x60; are both not sent, then the last 30 days&#39;
     * data will be returned. * If &#x60;startTime&#x60; is sent but &#x60;endTime&#x60; is not
     * sent, &#x60;endTime&#x60; will default to current time, and results from
     * &#x60;startTime&#x60; onward will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, &#x60;startTime&#x60; defaults to the current time minus
     * one month, and data between &#x60;startTime&#x60; and &#x60;endTime&#x60; will be returned.
     * Weight: 150
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Starts from 1. Default: 1 (optional)
     * @param size Number of results per page. Default: 10, Max: 100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return ApiResponse&lt;GetBfusdRewardsHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD Rewards History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-Rewards-History">Get
     *     BFUSD Rewards History (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetBfusdRewardsHistoryResponse> getBfusdRewardsHistory(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getBfusdRewardsHistoryValidateBeforeCall(
                        startTime, endTime, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetBfusdRewardsHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getBfusdSubscriptionHistory
     *
     * @param asset USDC or USDT (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Starts from 1. Default: 1 (optional)
     * @param size Number of results per page. Default: 10, Max: 100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD subscription history </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-subscription-history">Get
     *     BFUSD subscription history(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getBfusdSubscriptionHistoryCall(
            String asset, Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/bfusd/history/subscriptionHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBfusdSubscriptionHistoryValidateBeforeCall(
            String asset, Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {asset, startTime, endTime, current, size, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getBfusdSubscriptionHistory",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<BfusdApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getBfusdSubscriptionHistoryCall(
                        asset, startTime, endTime, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get BFUSD subscription history(USER_DATA) Get BFUSD subscription history * The time between
     * &#x60;startTime&#x60; and &#x60;endTime&#x60; cannot be longer than 6 months. * If
     * &#x60;startTime&#x60; and &#x60;endTime&#x60; are both not sent, then the last 30 days&#39;
     * data will be returned. * If &#x60;startTime&#x60; is sent but &#x60;endTime&#x60; is not
     * sent, &#x60;endTime&#x60; will default to current time, and results from
     * &#x60;startTime&#x60; onward will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, &#x60;startTime&#x60; defaults to the current time
     * advanced by one month, and data between &#x60;startTime&#x60; and &#x60;endTime&#x60; will be
     * returned. Weight: 150
     *
     * @param asset USDC or USDT (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Starts from 1. Default: 1 (optional)
     * @param size Number of results per page. Default: 10, Max: 100 (optional)
     * @param recvWindow The value cannot be greater than 60000 (ms) (optional)
     * @return ApiResponse&lt;GetBfusdSubscriptionHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get BFUSD subscription history </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/history/Get-BFUSD-subscription-history">Get
     *     BFUSD subscription history(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetBfusdSubscriptionHistoryResponse> getBfusdSubscriptionHistory(
            String asset, Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getBfusdSubscriptionHistoryValidateBeforeCall(
                        asset, startTime, endTime, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetBfusdSubscriptionHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for redeemBfusd
     *
     * @param redeemBfusdRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem BFUSD </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/simple_earn/bfusd/earn/Redeem-BFUSD">Redeem
     *     BFUSD(TRADE) Documentation</a>
     */
    private okhttp3.Call redeemBfusdCall(RedeemBfusdRequest redeemBfusdRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/bfusd/redeem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redeemBfusdRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter().format(redeemBfusdRequest.getAmount()));
        }

        if (redeemBfusdRequest.getType() != null) {
            localVarFormParams.put("type", redeemBfusdRequest.getType());
        }

        if (redeemBfusdRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", redeemBfusdRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemBfusdValidateBeforeCall(RedeemBfusdRequest redeemBfusdRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {redeemBfusdRequest};
            Method method = this.getClass().getMethod("redeemBfusd", RedeemBfusdRequest.class);
            Set<ConstraintViolation<BfusdApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return redeemBfusdCall(redeemBfusdRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Redeem BFUSD(TRADE) Redeem BFUSD to USDT * You need to open Enable Spot &amp; Margin Trading
     * permission for the API Key which requests this endpoint. Weight: 150
     *
     * @param redeemBfusdRequest (required)
     * @return ApiResponse&lt;RedeemBfusdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem BFUSD </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/simple_earn/bfusd/earn/Redeem-BFUSD">Redeem
     *     BFUSD(TRADE) Documentation</a>
     */
    public ApiResponse<RedeemBfusdResponse> redeemBfusd(
            @Valid @NotNull RedeemBfusdRequest redeemBfusdRequest) throws ApiException {
        okhttp3.Call localVarCall = redeemBfusdValidateBeforeCall(redeemBfusdRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<RedeemBfusdResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for subscribeBfusd
     *
     * @param subscribeBfusdRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe BFUSD </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/earn/Subscribe-BFUSD">Subscribe
     *     BFUSD(TRADE) Documentation</a>
     */
    private okhttp3.Call subscribeBfusdCall(SubscribeBfusdRequest subscribeBfusdRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/bfusd/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscribeBfusdRequest.getAsset() != null) {
            localVarFormParams.put("asset", subscribeBfusdRequest.getAsset());
        }

        if (subscribeBfusdRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter().format(subscribeBfusdRequest.getAmount()));
        }

        if (subscribeBfusdRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", subscribeBfusdRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeBfusdValidateBeforeCall(
            SubscribeBfusdRequest subscribeBfusdRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {subscribeBfusdRequest};
            Method method =
                    this.getClass().getMethod("subscribeBfusd", SubscribeBfusdRequest.class);
            Set<ConstraintViolation<BfusdApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return subscribeBfusdCall(subscribeBfusdRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Subscribe BFUSD(TRADE) Subscribe BFUSD * You need to open Enable Spot &amp; Margin Trading
     * permission for the API Key which requests this endpoint. Weight: 150
     *
     * @param subscribeBfusdRequest (required)
     * @return ApiResponse&lt;SubscribeBfusdResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe BFUSD </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/bfusd/earn/Subscribe-BFUSD">Subscribe
     *     BFUSD(TRADE) Documentation</a>
     */
    public ApiResponse<SubscribeBfusdResponse> subscribeBfusd(
            @Valid @NotNull SubscribeBfusdRequest subscribeBfusdRequest) throws ApiException {
        okhttp3.Call localVarCall = subscribeBfusdValidateBeforeCall(subscribeBfusdRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SubscribeBfusdResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
