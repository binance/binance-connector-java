/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.model;

import com.binance.connector.client.simple_earn.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFlexibleSubscriptionRecordResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFlexibleSubscriptionRecordResponseRowsInner {
    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_PURCHASE_ID = "purchaseId";

    @SerializedName(SERIALIZED_NAME_PURCHASE_ID)
    @jakarta.annotation.Nullable
    private Long purchaseId;

    public static final String SERIALIZED_NAME_PRODUCT_ID = "productId";

    @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
    @jakarta.annotation.Nullable
    private String productId;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_SOURCE_ACCOUNT = "sourceAccount";

    @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT)
    @jakarta.annotation.Nullable
    private String sourceAccount;

    public static final String SERIALIZED_NAME_AMT_FROM_SPOT = "amtFromSpot";

    @SerializedName(SERIALIZED_NAME_AMT_FROM_SPOT)
    @jakarta.annotation.Nullable
    private String amtFromSpot;

    public static final String SERIALIZED_NAME_AMT_FROM_FUNDING = "amtFromFunding";

    @SerializedName(SERIALIZED_NAME_AMT_FROM_FUNDING)
    @jakarta.annotation.Nullable
    private String amtFromFunding;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public GetFlexibleSubscriptionRecordResponseRowsInner() {}

    public GetFlexibleSubscriptionRecordResponseRowsInner amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public GetFlexibleSubscriptionRecordResponseRowsInner asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public GetFlexibleSubscriptionRecordResponseRowsInner time(
            @jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public GetFlexibleSubscriptionRecordResponseRowsInner purchaseId(
            @jakarta.annotation.Nullable Long purchaseId) {
        this.purchaseId = purchaseId;
        return this;
    }

    /**
     * Get purchaseId
     *
     * @return purchaseId
     */
    @jakarta.annotation.Nullable
    public Long getPurchaseId() {
        return purchaseId;
    }

    public void setPurchaseId(@jakarta.annotation.Nullable Long purchaseId) {
        this.purchaseId = purchaseId;
    }

    public GetFlexibleSubscriptionRecordResponseRowsInner productId(
            @jakarta.annotation.Nullable String productId) {
        this.productId = productId;
        return this;
    }

    /**
     * Get productId
     *
     * @return productId
     */
    @jakarta.annotation.Nullable
    public String getProductId() {
        return productId;
    }

    public void setProductId(@jakarta.annotation.Nullable String productId) {
        this.productId = productId;
    }

    public GetFlexibleSubscriptionRecordResponseRowsInner type(
            @jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public GetFlexibleSubscriptionRecordResponseRowsInner sourceAccount(
            @jakarta.annotation.Nullable String sourceAccount) {
        this.sourceAccount = sourceAccount;
        return this;
    }

    /**
     * Get sourceAccount
     *
     * @return sourceAccount
     */
    @jakarta.annotation.Nullable
    public String getSourceAccount() {
        return sourceAccount;
    }

    public void setSourceAccount(@jakarta.annotation.Nullable String sourceAccount) {
        this.sourceAccount = sourceAccount;
    }

    public GetFlexibleSubscriptionRecordResponseRowsInner amtFromSpot(
            @jakarta.annotation.Nullable String amtFromSpot) {
        this.amtFromSpot = amtFromSpot;
        return this;
    }

    /**
     * Get amtFromSpot
     *
     * @return amtFromSpot
     */
    @jakarta.annotation.Nullable
    public String getAmtFromSpot() {
        return amtFromSpot;
    }

    public void setAmtFromSpot(@jakarta.annotation.Nullable String amtFromSpot) {
        this.amtFromSpot = amtFromSpot;
    }

    public GetFlexibleSubscriptionRecordResponseRowsInner amtFromFunding(
            @jakarta.annotation.Nullable String amtFromFunding) {
        this.amtFromFunding = amtFromFunding;
        return this;
    }

    /**
     * Get amtFromFunding
     *
     * @return amtFromFunding
     */
    @jakarta.annotation.Nullable
    public String getAmtFromFunding() {
        return amtFromFunding;
    }

    public void setAmtFromFunding(@jakarta.annotation.Nullable String amtFromFunding) {
        this.amtFromFunding = amtFromFunding;
    }

    public GetFlexibleSubscriptionRecordResponseRowsInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFlexibleSubscriptionRecordResponseRowsInner
                getFlexibleSubscriptionRecordResponseRowsInner =
                        (GetFlexibleSubscriptionRecordResponseRowsInner) o;
        return Objects.equals(this.amount, getFlexibleSubscriptionRecordResponseRowsInner.amount)
                && Objects.equals(this.asset, getFlexibleSubscriptionRecordResponseRowsInner.asset)
                && Objects.equals(this.time, getFlexibleSubscriptionRecordResponseRowsInner.time)
                && Objects.equals(
                        this.purchaseId, getFlexibleSubscriptionRecordResponseRowsInner.purchaseId)
                && Objects.equals(
                        this.productId, getFlexibleSubscriptionRecordResponseRowsInner.productId)
                && Objects.equals(this.type, getFlexibleSubscriptionRecordResponseRowsInner.type)
                && Objects.equals(
                        this.sourceAccount,
                        getFlexibleSubscriptionRecordResponseRowsInner.sourceAccount)
                && Objects.equals(
                        this.amtFromSpot,
                        getFlexibleSubscriptionRecordResponseRowsInner.amtFromSpot)
                && Objects.equals(
                        this.amtFromFunding,
                        getFlexibleSubscriptionRecordResponseRowsInner.amtFromFunding)
                && Objects.equals(
                        this.status, getFlexibleSubscriptionRecordResponseRowsInner.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                amount,
                asset,
                time,
                purchaseId,
                productId,
                type,
                sourceAccount,
                amtFromSpot,
                amtFromFunding,
                status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetFlexibleSubscriptionRecordResponseRowsInner {\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		purchaseId: ").append(toIndentedString(purchaseId)).append("\n");
        sb.append("		productId: ").append(toIndentedString(productId)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		sourceAccount: ").append(toIndentedString(sourceAccount)).append("\n");
        sb.append("		amtFromSpot: ").append(toIndentedString(amtFromSpot)).append("\n");
        sb.append("		amtFromFunding: ").append(toIndentedString(amtFromFunding)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        Object purchaseIdValue = getPurchaseId();
        String purchaseIdValueAsString = "";
        purchaseIdValueAsString = purchaseIdValue.toString();
        sb.append("purchaseId=").append(urlEncode(purchaseIdValueAsString)).append("");
        Object productIdValue = getProductId();
        String productIdValueAsString = "";
        productIdValueAsString = productIdValue.toString();
        sb.append("productId=").append(urlEncode(productIdValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object sourceAccountValue = getSourceAccount();
        String sourceAccountValueAsString = "";
        sourceAccountValueAsString = sourceAccountValue.toString();
        sb.append("sourceAccount=").append(urlEncode(sourceAccountValueAsString)).append("");
        Object amtFromSpotValue = getAmtFromSpot();
        String amtFromSpotValueAsString = "";
        amtFromSpotValueAsString = amtFromSpotValue.toString();
        sb.append("amtFromSpot=").append(urlEncode(amtFromSpotValueAsString)).append("");
        Object amtFromFundingValue = getAmtFromFunding();
        String amtFromFundingValueAsString = "";
        amtFromFundingValueAsString = amtFromFundingValue.toString();
        sb.append("amtFromFunding=").append(urlEncode(amtFromFundingValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("amount");
        openapiFields.add("asset");
        openapiFields.add("time");
        openapiFields.add("purchaseId");
        openapiFields.add("productId");
        openapiFields.add("type");
        openapiFields.add("sourceAccount");
        openapiFields.add("amtFromSpot");
        openapiFields.add("amtFromFunding");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFlexibleSubscriptionRecordResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFlexibleSubscriptionRecordResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetFlexibleSubscriptionRecordResponseRowsInner is not found"
                                    + " in the empty JSON string",
                                GetFlexibleSubscriptionRecordResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFlexibleSubscriptionRecordResponseRowsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetFlexibleSubscriptionRecordResponseRowsInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("productId") != null && !jsonObj.get("productId").isJsonNull())
                && !jsonObj.get("productId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `productId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("productId").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("sourceAccount") != null && !jsonObj.get("sourceAccount").isJsonNull())
                && !jsonObj.get("sourceAccount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceAccount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceAccount").toString()));
        }
        if ((jsonObj.get("amtFromSpot") != null && !jsonObj.get("amtFromSpot").isJsonNull())
                && !jsonObj.get("amtFromSpot").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amtFromSpot` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("amtFromSpot").toString()));
        }
        if ((jsonObj.get("amtFromFunding") != null && !jsonObj.get("amtFromFunding").isJsonNull())
                && !jsonObj.get("amtFromFunding").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amtFromFunding` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("amtFromFunding").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFlexibleSubscriptionRecordResponseRowsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetFlexibleSubscriptionRecordResponseRowsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetFlexibleSubscriptionRecordResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(GetFlexibleSubscriptionRecordResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetFlexibleSubscriptionRecordResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetFlexibleSubscriptionRecordResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetFlexibleSubscriptionRecordResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFlexibleSubscriptionRecordResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFlexibleSubscriptionRecordResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFlexibleSubscriptionRecordResponseRowsInner
     */
    public static GetFlexibleSubscriptionRecordResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetFlexibleSubscriptionRecordResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetFlexibleSubscriptionRecordResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
