/*
 * Binance Simple Earn REST API
 * OpenAPI Specification for the Binance Simple Earn REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.simple_earn.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.simple_earn.rest.model.GetFlexibleSubscriptionPreviewResponse;
import com.binance.connector.client.simple_earn.rest.model.GetLockedSubscriptionPreviewResponse;
import com.binance.connector.client.simple_earn.rest.model.RedeemFlexibleProductRequest;
import com.binance.connector.client.simple_earn.rest.model.RedeemFlexibleProductResponse;
import com.binance.connector.client.simple_earn.rest.model.RedeemLockedProductRequest;
import com.binance.connector.client.simple_earn.rest.model.RedeemLockedProductResponse;
import com.binance.connector.client.simple_earn.rest.model.SetFlexibleAutoSubscribeRequest;
import com.binance.connector.client.simple_earn.rest.model.SetFlexibleAutoSubscribeResponse;
import com.binance.connector.client.simple_earn.rest.model.SetLockedAutoSubscribeRequest;
import com.binance.connector.client.simple_earn.rest.model.SetLockedAutoSubscribeResponse;
import com.binance.connector.client.simple_earn.rest.model.SetLockedProductRedeemOptionRequest;
import com.binance.connector.client.simple_earn.rest.model.SetLockedProductRedeemOptionResponse;
import com.binance.connector.client.simple_earn.rest.model.SubscribeFlexibleProductRequest;
import com.binance.connector.client.simple_earn.rest.model.SubscribeFlexibleProductResponse;
import com.binance.connector.client.simple_earn.rest.model.SubscribeLockedProductRequest;
import com.binance.connector.client.simple_earn.rest.model.SubscribeLockedProductResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class EarnApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-simple-earn/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public EarnApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public EarnApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFlexibleSubscriptionPreview
     *
     * @param productId (required)
     * @param amount (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Subscription Preview </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Get-Flexible-Subscription-Preview">Get
     *     Flexible Subscription Preview(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getFlexibleSubscriptionPreviewCall(
            String productId, Double amount, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/simple-earn/flexible/subscriptionPreview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("productId", productId));
        }

        if (amount != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "amount", DecimalFormatter.getFormatter().format(amount)));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlexibleSubscriptionPreviewValidateBeforeCall(
            String productId, Double amount, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {productId, amount, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getFlexibleSubscriptionPreview",
                                    String.class,
                                    Double.class,
                                    Long.class);
            Set<ConstraintViolation<EarnApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFlexibleSubscriptionPreviewCall(productId, amount, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Flexible Subscription Preview(USER_DATA) Get Flexible Subscription Preview Weight: 150
     *
     * @param productId (required)
     * @param amount (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFlexibleSubscriptionPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Subscription Preview </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Get-Flexible-Subscription-Preview">Get
     *     Flexible Subscription Preview(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetFlexibleSubscriptionPreviewResponse> getFlexibleSubscriptionPreview(
            @NotNull String productId, @NotNull Double amount, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getFlexibleSubscriptionPreviewValidateBeforeCall(productId, amount, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFlexibleSubscriptionPreviewResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getLockedSubscriptionPreview
     *
     * @param projectId (required)
     * @param amount (required)
     * @param autoSubscribe true or false, default true. (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Locked Subscription Preview </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Get-Locked-Subscription-Preview">Get
     *     Locked Subscription Preview(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getLockedSubscriptionPreviewCall(
            String projectId, Double amount, Boolean autoSubscribe, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/simple-earn/locked/subscriptionPreview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (amount != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "amount", DecimalFormatter.getFormatter().format(amount)));
        }

        if (autoSubscribe != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("autoSubscribe", autoSubscribe));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLockedSubscriptionPreviewValidateBeforeCall(
            String projectId, Double amount, Boolean autoSubscribe, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {projectId, amount, autoSubscribe, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getLockedSubscriptionPreview",
                                    String.class,
                                    Double.class,
                                    Boolean.class,
                                    Long.class);
            Set<ConstraintViolation<EarnApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getLockedSubscriptionPreviewCall(
                        projectId, amount, autoSubscribe, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Locked Subscription Preview(USER_DATA) Get Locked Subscription Preview Weight: 150
     *
     * @param projectId (required)
     * @param amount (required)
     * @param autoSubscribe true or false, default true. (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetLockedSubscriptionPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Locked Subscription Preview </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Get-Locked-Subscription-Preview">Get
     *     Locked Subscription Preview(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetLockedSubscriptionPreviewResponse> getLockedSubscriptionPreview(
            @NotNull String projectId,
            @NotNull Double amount,
            Boolean autoSubscribe,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getLockedSubscriptionPreviewValidateBeforeCall(
                        projectId, amount, autoSubscribe, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetLockedSubscriptionPreviewResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for redeemFlexibleProduct
     *
     * @param redeemFlexibleProductRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem Flexible Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Redeem-Flexible-Product">Redeem
     *     Flexible Product(TRADE) Documentation</a>
     */
    private okhttp3.Call redeemFlexibleProductCall(
            RedeemFlexibleProductRequest redeemFlexibleProductRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/simple-earn/flexible/redeem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redeemFlexibleProductRequest.getProductId() != null) {
            localVarFormParams.put("productId", redeemFlexibleProductRequest.getProductId());
        }

        if (redeemFlexibleProductRequest.getRedeemAll() != null) {
            localVarFormParams.put("redeemAll", redeemFlexibleProductRequest.getRedeemAll());
        }

        if (redeemFlexibleProductRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(redeemFlexibleProductRequest.getAmount()));
        }

        if (redeemFlexibleProductRequest.getDestAccount() != null) {
            localVarFormParams.put("destAccount", redeemFlexibleProductRequest.getDestAccount());
        }

        if (redeemFlexibleProductRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", redeemFlexibleProductRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemFlexibleProductValidateBeforeCall(
            RedeemFlexibleProductRequest redeemFlexibleProductRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {redeemFlexibleProductRequest};
            Method method =
                    this.getClass()
                            .getMethod("redeemFlexibleProduct", RedeemFlexibleProductRequest.class);
            Set<ConstraintViolation<EarnApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return redeemFlexibleProductCall(redeemFlexibleProductRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Redeem Flexible Product(TRADE) Redeem Flexible Product * You need to open &#x60;Enable Spot
     * &amp; Margin Trading&#x60; permission for the API Key which requests this endpoint. Weight: 1
     *
     * @param redeemFlexibleProductRequest (required)
     * @return ApiResponse&lt;RedeemFlexibleProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem Flexible Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Redeem-Flexible-Product">Redeem
     *     Flexible Product(TRADE) Documentation</a>
     */
    public ApiResponse<RedeemFlexibleProductResponse> redeemFlexibleProduct(
            @Valid @NotNull RedeemFlexibleProductRequest redeemFlexibleProductRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                redeemFlexibleProductValidateBeforeCall(redeemFlexibleProductRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<RedeemFlexibleProductResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for redeemLockedProduct
     *
     * @param redeemLockedProductRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem Locked Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Redeem-Locked-Product">Redeem
     *     Locked Product(TRADE) Documentation</a>
     */
    private okhttp3.Call redeemLockedProductCall(
            RedeemLockedProductRequest redeemLockedProductRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/simple-earn/locked/redeem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redeemLockedProductRequest.getPositionId() != null) {
            localVarFormParams.put("positionId", redeemLockedProductRequest.getPositionId());
        }

        if (redeemLockedProductRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", redeemLockedProductRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemLockedProductValidateBeforeCall(
            RedeemLockedProductRequest redeemLockedProductRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {redeemLockedProductRequest};
            Method method =
                    this.getClass()
                            .getMethod("redeemLockedProduct", RedeemLockedProductRequest.class);
            Set<ConstraintViolation<EarnApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return redeemLockedProductCall(redeemLockedProductRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Redeem Locked Product(TRADE) Redeem Locked Product * You need to open &#x60;Enable Spot &amp;
     * Margin Trading&#x60; permission for the API Key which requests this endpoint. Weight: 1/3s
     * per account
     *
     * @param redeemLockedProductRequest (required)
     * @return ApiResponse&lt;RedeemLockedProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem Locked Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Redeem-Locked-Product">Redeem
     *     Locked Product(TRADE) Documentation</a>
     */
    public ApiResponse<RedeemLockedProductResponse> redeemLockedProduct(
            @Valid @NotNull RedeemLockedProductRequest redeemLockedProductRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                redeemLockedProductValidateBeforeCall(redeemLockedProductRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<RedeemLockedProductResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for setFlexibleAutoSubscribe
     *
     * @param setFlexibleAutoSubscribeRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Flexible Auto Subscribe </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Set-Flexible-Auto-Subscribe">Set
     *     Flexible Auto Subscribe(USER_DATA) Documentation</a>
     */
    private okhttp3.Call setFlexibleAutoSubscribeCall(
            SetFlexibleAutoSubscribeRequest setFlexibleAutoSubscribeRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/simple-earn/flexible/setAutoSubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (setFlexibleAutoSubscribeRequest.getProductId() != null) {
            localVarFormParams.put("productId", setFlexibleAutoSubscribeRequest.getProductId());
        }

        if (setFlexibleAutoSubscribeRequest.getAutoSubscribe() != null) {
            localVarFormParams.put(
                    "autoSubscribe", setFlexibleAutoSubscribeRequest.getAutoSubscribe());
        }

        if (setFlexibleAutoSubscribeRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", setFlexibleAutoSubscribeRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setFlexibleAutoSubscribeValidateBeforeCall(
            SetFlexibleAutoSubscribeRequest setFlexibleAutoSubscribeRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {setFlexibleAutoSubscribeRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "setFlexibleAutoSubscribe",
                                    SetFlexibleAutoSubscribeRequest.class);
            Set<ConstraintViolation<EarnApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return setFlexibleAutoSubscribeCall(setFlexibleAutoSubscribeRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Set Flexible Auto Subscribe(USER_DATA) Set Flexible Auto Subscribe Weight: 150
     *
     * @param setFlexibleAutoSubscribeRequest (required)
     * @return ApiResponse&lt;SetFlexibleAutoSubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Flexible Auto Subscribe </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Set-Flexible-Auto-Subscribe">Set
     *     Flexible Auto Subscribe(USER_DATA) Documentation</a>
     */
    public ApiResponse<SetFlexibleAutoSubscribeResponse> setFlexibleAutoSubscribe(
            @Valid @NotNull SetFlexibleAutoSubscribeRequest setFlexibleAutoSubscribeRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                setFlexibleAutoSubscribeValidateBeforeCall(setFlexibleAutoSubscribeRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SetFlexibleAutoSubscribeResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for setLockedAutoSubscribe
     *
     * @param setLockedAutoSubscribeRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Locked Auto Subscribe </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Auto-Subscribe">Set
     *     Locked Auto Subscribe(USER_DATA) Documentation</a>
     */
    private okhttp3.Call setLockedAutoSubscribeCall(
            SetLockedAutoSubscribeRequest setLockedAutoSubscribeRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/simple-earn/locked/setAutoSubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (setLockedAutoSubscribeRequest.getPositionId() != null) {
            localVarFormParams.put("positionId", setLockedAutoSubscribeRequest.getPositionId());
        }

        if (setLockedAutoSubscribeRequest.getAutoSubscribe() != null) {
            localVarFormParams.put(
                    "autoSubscribe", setLockedAutoSubscribeRequest.getAutoSubscribe());
        }

        if (setLockedAutoSubscribeRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", setLockedAutoSubscribeRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setLockedAutoSubscribeValidateBeforeCall(
            SetLockedAutoSubscribeRequest setLockedAutoSubscribeRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {setLockedAutoSubscribeRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "setLockedAutoSubscribe", SetLockedAutoSubscribeRequest.class);
            Set<ConstraintViolation<EarnApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return setLockedAutoSubscribeCall(setLockedAutoSubscribeRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Set Locked Auto Subscribe(USER_DATA) Set locked auto subscribe Weight: 150
     *
     * @param setLockedAutoSubscribeRequest (required)
     * @return ApiResponse&lt;SetLockedAutoSubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Locked Auto Subscribe </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Auto-Subscribe">Set
     *     Locked Auto Subscribe(USER_DATA) Documentation</a>
     */
    public ApiResponse<SetLockedAutoSubscribeResponse> setLockedAutoSubscribe(
            @Valid @NotNull SetLockedAutoSubscribeRequest setLockedAutoSubscribeRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                setLockedAutoSubscribeValidateBeforeCall(setLockedAutoSubscribeRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SetLockedAutoSubscribeResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for setLockedProductRedeemOption
     *
     * @param setLockedProductRedeemOptionRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Locked Product Redeem Option </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Redeem-Option">Set
     *     Locked Product Redeem Option(USER_DATA) Documentation</a>
     */
    private okhttp3.Call setLockedProductRedeemOptionCall(
            SetLockedProductRedeemOptionRequest setLockedProductRedeemOptionRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/simple-earn/locked/setRedeemOption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (setLockedProductRedeemOptionRequest.getPositionId() != null) {
            localVarFormParams.put(
                    "positionId", setLockedProductRedeemOptionRequest.getPositionId());
        }

        if (setLockedProductRedeemOptionRequest.getRedeemTo() != null) {
            localVarFormParams.put("redeemTo", setLockedProductRedeemOptionRequest.getRedeemTo());
        }

        if (setLockedProductRedeemOptionRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", setLockedProductRedeemOptionRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setLockedProductRedeemOptionValidateBeforeCall(
            SetLockedProductRedeemOptionRequest setLockedProductRedeemOptionRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {setLockedProductRedeemOptionRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "setLockedProductRedeemOption",
                                    SetLockedProductRedeemOptionRequest.class);
            Set<ConstraintViolation<EarnApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return setLockedProductRedeemOptionCall(setLockedProductRedeemOptionRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Set Locked Product Redeem Option(USER_DATA) Set redeem option for Locked product Weight: 50
     *
     * @param setLockedProductRedeemOptionRequest (required)
     * @return ApiResponse&lt;SetLockedProductRedeemOptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Locked Product Redeem Option </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Set-Locked-Redeem-Option">Set
     *     Locked Product Redeem Option(USER_DATA) Documentation</a>
     */
    public ApiResponse<SetLockedProductRedeemOptionResponse> setLockedProductRedeemOption(
            @Valid @NotNull SetLockedProductRedeemOptionRequest setLockedProductRedeemOptionRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                setLockedProductRedeemOptionValidateBeforeCall(setLockedProductRedeemOptionRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SetLockedProductRedeemOptionResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for subscribeFlexibleProduct
     *
     * @param subscribeFlexibleProductRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe Flexible Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Subscribe-Flexible-Product">Subscribe
     *     Flexible Product(TRADE) Documentation</a>
     */
    private okhttp3.Call subscribeFlexibleProductCall(
            SubscribeFlexibleProductRequest subscribeFlexibleProductRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/simple-earn/flexible/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscribeFlexibleProductRequest.getProductId() != null) {
            localVarFormParams.put("productId", subscribeFlexibleProductRequest.getProductId());
        }

        if (subscribeFlexibleProductRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(subscribeFlexibleProductRequest.getAmount()));
        }

        if (subscribeFlexibleProductRequest.getAutoSubscribe() != null) {
            localVarFormParams.put(
                    "autoSubscribe", subscribeFlexibleProductRequest.getAutoSubscribe());
        }

        if (subscribeFlexibleProductRequest.getSourceAccount() != null) {
            localVarFormParams.put(
                    "sourceAccount", subscribeFlexibleProductRequest.getSourceAccount());
        }

        if (subscribeFlexibleProductRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", subscribeFlexibleProductRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeFlexibleProductValidateBeforeCall(
            SubscribeFlexibleProductRequest subscribeFlexibleProductRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {subscribeFlexibleProductRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "subscribeFlexibleProduct",
                                    SubscribeFlexibleProductRequest.class);
            Set<ConstraintViolation<EarnApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return subscribeFlexibleProductCall(subscribeFlexibleProductRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Subscribe Flexible Product(TRADE) Subscribe Flexible Product * You need to open &#x60;Enable
     * Spot &amp; Margin Trading&#x60; permission for the API Key which requests this endpoint.
     * Weight: 1
     *
     * @param subscribeFlexibleProductRequest (required)
     * @return ApiResponse&lt;SubscribeFlexibleProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe Flexible Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Subscribe-Flexible-Product">Subscribe
     *     Flexible Product(TRADE) Documentation</a>
     */
    public ApiResponse<SubscribeFlexibleProductResponse> subscribeFlexibleProduct(
            @Valid @NotNull SubscribeFlexibleProductRequest subscribeFlexibleProductRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                subscribeFlexibleProductValidateBeforeCall(subscribeFlexibleProductRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SubscribeFlexibleProductResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for subscribeLockedProduct
     *
     * @param subscribeLockedProductRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe Locked Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Subscribe-Locked-Product">Subscribe
     *     Locked Product(TRADE) Documentation</a>
     */
    private okhttp3.Call subscribeLockedProductCall(
            SubscribeLockedProductRequest subscribeLockedProductRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/simple-earn/locked/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscribeLockedProductRequest.getProjectId() != null) {
            localVarFormParams.put("projectId", subscribeLockedProductRequest.getProjectId());
        }

        if (subscribeLockedProductRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(subscribeLockedProductRequest.getAmount()));
        }

        if (subscribeLockedProductRequest.getAutoSubscribe() != null) {
            localVarFormParams.put(
                    "autoSubscribe", subscribeLockedProductRequest.getAutoSubscribe());
        }

        if (subscribeLockedProductRequest.getSourceAccount() != null) {
            localVarFormParams.put(
                    "sourceAccount", subscribeLockedProductRequest.getSourceAccount());
        }

        if (subscribeLockedProductRequest.getRedeemTo() != null) {
            localVarFormParams.put("redeemTo", subscribeLockedProductRequest.getRedeemTo());
        }

        if (subscribeLockedProductRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", subscribeLockedProductRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeLockedProductValidateBeforeCall(
            SubscribeLockedProductRequest subscribeLockedProductRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {subscribeLockedProductRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "subscribeLockedProduct", SubscribeLockedProductRequest.class);
            Set<ConstraintViolation<EarnApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return subscribeLockedProductCall(subscribeLockedProductRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Subscribe Locked Product(TRADE) Subscribe Locked Product * You need to open &#x60;Enable Spot
     * &amp; Margin Trading&#x60; permission for the API Key which requests this endpoint. Weight: 1
     *
     * @param subscribeLockedProductRequest (required)
     * @return ApiResponse&lt;SubscribeLockedProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe Locked Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/simple_earn/earn/Subscribe-Locked-Product">Subscribe
     *     Locked Product(TRADE) Documentation</a>
     */
    public ApiResponse<SubscribeLockedProductResponse> subscribeLockedProduct(
            @Valid @NotNull SubscribeLockedProductRequest subscribeLockedProductRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                subscribeLockedProductValidateBeforeCall(subscribeLockedProductRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SubscribeLockedProductResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
