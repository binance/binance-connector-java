/*
 * Binance Gift Card REST API
 * OpenAPI Specification for the Binance Gift Card REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.gift_card.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.gift_card.rest.model.CreateADualTokenGiftCardRequest;
import com.binance.connector.client.gift_card.rest.model.CreateADualTokenGiftCardResponse;
import com.binance.connector.client.gift_card.rest.model.CreateASingleTokenGiftCardRequest;
import com.binance.connector.client.gift_card.rest.model.CreateASingleTokenGiftCardResponse;
import com.binance.connector.client.gift_card.rest.model.FetchRsaPublicKeyResponse;
import com.binance.connector.client.gift_card.rest.model.FetchTokenLimitResponse;
import com.binance.connector.client.gift_card.rest.model.RedeemABinanceGiftCardRequest;
import com.binance.connector.client.gift_card.rest.model.RedeemABinanceGiftCardResponse;
import com.binance.connector.client.gift_card.rest.model.VerifyBinanceGiftCardByGiftCardNumberResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class MarketDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-gift-card/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public MarketDataApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public MarketDataApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createADualTokenGiftCard
     *
     * @param createADualTokenGiftCardRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Create a dual-token gift card </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Create-a-dual-token-gift-card">Create
     *     a dual-token gift card(fixed value, discount feature)(TRADE) Documentation</a>
     */
    private okhttp3.Call createADualTokenGiftCardCall(
            CreateADualTokenGiftCardRequest createADualTokenGiftCardRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/giftcard/buyCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createADualTokenGiftCardRequest.getBaseToken() != null) {
            localVarFormParams.put("baseToken", createADualTokenGiftCardRequest.getBaseToken());
        }

        if (createADualTokenGiftCardRequest.getFaceToken() != null) {
            localVarFormParams.put("faceToken", createADualTokenGiftCardRequest.getFaceToken());
        }

        if (createADualTokenGiftCardRequest.getBaseTokenAmount() != null) {
            localVarFormParams.put(
                    "baseTokenAmount",
                    DecimalFormatter.getFormatter()
                            .format(createADualTokenGiftCardRequest.getBaseTokenAmount()));
        }

        if (createADualTokenGiftCardRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", createADualTokenGiftCardRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createADualTokenGiftCardValidateBeforeCall(
            CreateADualTokenGiftCardRequest createADualTokenGiftCardRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {createADualTokenGiftCardRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "createADualTokenGiftCard",
                                    CreateADualTokenGiftCardRequest.class);
            Set<ConstraintViolation<MarketDataApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return createADualTokenGiftCardCall(createADualTokenGiftCardRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Create a dual-token gift card(fixed value, discount feature)(TRADE) * This API is for
     * creating a dual-token ( stablecoin-denominated) Binance Gift Card. You may create a gift card
     * using USDT as baseToken, that is redeemable to another designated token (faceToken). For
     * example, you can create a fixed-value BTC gift card and pay with 100 USDT plus 1 USDT fee.
     * This gift card can keep the value fixed at 100 USDT before redemption, and will be redeemable
     * to BTC equivalent to 100 USDT upon redemption. * Once successfully created, the amount of
     * baseToken (e.g. USDT) in the fixed-value gift card along with the fee would be deducted from
     * your funding wallet. * To get started with, please make sure: * You have a Binance account *
     * You have passed KYB * You have a sufÔ¨Åcient balance(Gift Card amount and fee amount) in your
     * Binance funding wallet * You need Enable Withdrawals for the API Key which requests this
     * endpoint. Weight: 1 * Monthly creation volume: 4,200,000 USDC / month / account * Monthly
     * creation quantity: 6,000 Gift Cards / month / account
     *
     * @param createADualTokenGiftCardRequest (required)
     * @return ApiResponse&lt;CreateADualTokenGiftCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Create a dual-token gift card </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Create-a-dual-token-gift-card">Create
     *     a dual-token gift card(fixed value, discount feature)(TRADE) Documentation</a>
     */
    public ApiResponse<CreateADualTokenGiftCardResponse> createADualTokenGiftCard(
            @Valid @NotNull CreateADualTokenGiftCardRequest createADualTokenGiftCardRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                createADualTokenGiftCardValidateBeforeCall(createADualTokenGiftCardRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<CreateADualTokenGiftCardResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for createASingleTokenGiftCard
     *
     * @param createASingleTokenGiftCardRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Create a single-token gift card </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Create-a-single-token-gift-card">Create
     *     a single-token gift card (USER_DATA) Documentation</a>
     */
    private okhttp3.Call createASingleTokenGiftCardCall(
            CreateASingleTokenGiftCardRequest createASingleTokenGiftCardRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/giftcard/createCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createASingleTokenGiftCardRequest.getToken() != null) {
            localVarFormParams.put("token", createASingleTokenGiftCardRequest.getToken());
        }

        if (createASingleTokenGiftCardRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(createASingleTokenGiftCardRequest.getAmount()));
        }

        if (createASingleTokenGiftCardRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", createASingleTokenGiftCardRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createASingleTokenGiftCardValidateBeforeCall(
            CreateASingleTokenGiftCardRequest createASingleTokenGiftCardRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {createASingleTokenGiftCardRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "createASingleTokenGiftCard",
                                    CreateASingleTokenGiftCardRequest.class);
            Set<ConstraintViolation<MarketDataApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return createASingleTokenGiftCardCall(createASingleTokenGiftCardRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Create a single-token gift card (USER_DATA) This API is for creating a Binance Gift Card. To
     * get started with, please make sure: * You have a Binance account * You have passed KYB * You
     * have a sufÔ¨Åcient balance(Gift Card amount and fee amount) in your Binance funding wallet *
     * You need &#x60;Enable Withdrawals&#x60; for the API Key which requests this endpoint. Weight:
     * 1 * Monthly creation volume: 4,200,000 USDC / month / account * Monthly creation quantity:
     * 6,000 Gift Cards / month / account
     *
     * @param createASingleTokenGiftCardRequest (required)
     * @return ApiResponse&lt;CreateASingleTokenGiftCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Create a single-token gift card </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Create-a-single-token-gift-card">Create
     *     a single-token gift card (USER_DATA) Documentation</a>
     */
    public ApiResponse<CreateASingleTokenGiftCardResponse> createASingleTokenGiftCard(
            @Valid @NotNull CreateASingleTokenGiftCardRequest createASingleTokenGiftCardRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                createASingleTokenGiftCardValidateBeforeCall(createASingleTokenGiftCardRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<CreateASingleTokenGiftCardResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for fetchRsaPublicKey
     *
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Fetch RSA Public Key </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Fetch-RSA-Public-Key">Fetch
     *     RSA Public Key(USER_DATA) Documentation</a>
     */
    private okhttp3.Call fetchRsaPublicKeyCall(Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/giftcard/cryptography/rsa-public-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchRsaPublicKeyValidateBeforeCall(Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method = this.getClass().getMethod("fetchRsaPublicKey", Long.class);
            Set<ConstraintViolation<MarketDataApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return fetchRsaPublicKeyCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Fetch RSA Public Key(USER_DATA) This API is for fetching the RSA Public Key. This RSA Public
     * key will be used to encrypt the card code. **Please note that the RSA Public key fetched is
     * valid only for the current day.** Weight: 1
     *
     * @param recvWindow (optional)
     * @return ApiResponse&lt;FetchRsaPublicKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Fetch RSA Public Key </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Fetch-RSA-Public-Key">Fetch
     *     RSA Public Key(USER_DATA) Documentation</a>
     */
    public ApiResponse<FetchRsaPublicKeyResponse> fetchRsaPublicKey(Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall = fetchRsaPublicKeyValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FetchRsaPublicKeyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for fetchTokenLimit
     *
     * @param baseToken The token you want to pay, example: BUSD (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Fetch Token Limit </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Fetch-Token-Limit">Fetch
     *     Token Limit(USER_DATA) Documentation</a>
     */
    private okhttp3.Call fetchTokenLimitCall(String baseToken, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/giftcard/buyCode/token-limit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (baseToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("baseToken", baseToken));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchTokenLimitValidateBeforeCall(String baseToken, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {baseToken, recvWindow};
            Method method = this.getClass().getMethod("fetchTokenLimit", String.class, Long.class);
            Set<ConstraintViolation<MarketDataApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return fetchTokenLimitCall(baseToken, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Fetch Token Limit(USER_DATA) This API is to help you verify which tokens are available for
     * you to create Stablecoin-Denominated gift cards as mentioned in section 2 and its‚Äô
     * limitation. Weight: 1
     *
     * @param baseToken The token you want to pay, example: BUSD (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;FetchTokenLimitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Fetch Token Limit </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Fetch-Token-Limit">Fetch
     *     Token Limit(USER_DATA) Documentation</a>
     */
    public ApiResponse<FetchTokenLimitResponse> fetchTokenLimit(
            @NotNull String baseToken, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall = fetchTokenLimitValidateBeforeCall(baseToken, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FetchTokenLimitResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for redeemABinanceGiftCard
     *
     * @param redeemABinanceGiftCardRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem a Binance Gift Card </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Redeem-a-Binance-Gift-Card">Redeem
     *     a Binance Gift Card(USER_DATA) Documentation</a>
     */
    private okhttp3.Call redeemABinanceGiftCardCall(
            RedeemABinanceGiftCardRequest redeemABinanceGiftCardRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/giftcard/redeemCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redeemABinanceGiftCardRequest.getCode() != null) {
            localVarFormParams.put("code", redeemABinanceGiftCardRequest.getCode());
        }

        if (redeemABinanceGiftCardRequest.getExternalUid() != null) {
            localVarFormParams.put("externalUid", redeemABinanceGiftCardRequest.getExternalUid());
        }

        if (redeemABinanceGiftCardRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", redeemABinanceGiftCardRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemABinanceGiftCardValidateBeforeCall(
            RedeemABinanceGiftCardRequest redeemABinanceGiftCardRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {redeemABinanceGiftCardRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "redeemABinanceGiftCard", RedeemABinanceGiftCardRequest.class);
            Set<ConstraintViolation<MarketDataApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return redeemABinanceGiftCardCall(redeemABinanceGiftCardRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Redeem a Binance Gift Card(USER_DATA) This API is for redeeming a Binance Gift Card Once
     * redeemed, the coins will be deposited in your funding wallet. * Parameter code can be sent in
     * two formats: * Plaintext * Encrypted * Sending code in Encrypted format provides more
     * security than sending it as a plaintext. To send card code in encrypted format the following
     * steps must be followed: * Fetch RSA public key from api stated below. * Use the below
     * algorithm to encrypt the card code using the RSA public key fetched above:
     * &#x60;RSA/ECB/OAEPWithSHA-256AndMGF1Padding&#x60; **A sample code snippet (JAVA) is stated
     * below for reference, the same approach can be used for different languages like C#, PERL,
     * PYTHON, SHELL etc.:** Weight: 1
     *
     * @param redeemABinanceGiftCardRequest (required)
     * @return ApiResponse&lt;RedeemABinanceGiftCardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem a Binance Gift Card </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Redeem-a-Binance-Gift-Card">Redeem
     *     a Binance Gift Card(USER_DATA) Documentation</a>
     */
    public ApiResponse<RedeemABinanceGiftCardResponse> redeemABinanceGiftCard(
            @Valid @NotNull RedeemABinanceGiftCardRequest redeemABinanceGiftCardRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                redeemABinanceGiftCardValidateBeforeCall(redeemABinanceGiftCardRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<RedeemABinanceGiftCardResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for verifyBinanceGiftCardByGiftCardNumber
     *
     * @param referenceNo Enter the Gift Card Number (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Verify Binance Gift Card by Gift Card Number </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Verify-Binance-Gift-Card-by-Gift-Card-Number">Verify
     *     Binance Gift Card by Gift Card Number(USER_DATA) Documentation</a>
     */
    private okhttp3.Call verifyBinanceGiftCardByGiftCardNumberCall(
            String referenceNo, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/giftcard/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (referenceNo != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("referenceNo", referenceNo));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyBinanceGiftCardByGiftCardNumberValidateBeforeCall(
            String referenceNo, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {referenceNo, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "verifyBinanceGiftCardByGiftCardNumber",
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<MarketDataApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return verifyBinanceGiftCardByGiftCardNumberCall(referenceNo, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Verify Binance Gift Card by Gift Card Number(USER_DATA) This API is for verifying whether the
     * Binance Gift Card is valid or not by entering Gift Card Number. **Please note that if you
     * enter the wrong Gift Card Number 5 times within an hour, you will no longer be able to verify
     * any Gift Card Number for that hour.** Weight: 1
     *
     * @param referenceNo Enter the Gift Card Number (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;VerifyBinanceGiftCardByGiftCardNumberResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Verify Binance Gift Card by Gift Card Number </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/gift_card/market-data/Verify-Binance-Gift-Card-by-Gift-Card-Number">Verify
     *     Binance Gift Card by Gift Card Number(USER_DATA) Documentation</a>
     */
    public ApiResponse<VerifyBinanceGiftCardByGiftCardNumberResponse>
            verifyBinanceGiftCardByGiftCardNumber(@NotNull String referenceNo, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                verifyBinanceGiftCardByGiftCardNumberValidateBeforeCall(referenceNo, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<VerifyBinanceGiftCardByGiftCardNumberResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
