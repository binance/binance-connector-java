/*
 * Binance Gift Card REST API
 * OpenAPI Specification for the Binance Gift Card REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.gift_card.rest.model;

import com.binance.connector.client.gift_card.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** FetchTokenLimitResponseDataInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FetchTokenLimitResponseDataInner {
    public static final String SERIALIZED_NAME_COIN = "coin";

    @SerializedName(SERIALIZED_NAME_COIN)
    @jakarta.annotation.Nullable
    private String coin;

    public static final String SERIALIZED_NAME_FROM_MIN = "fromMin";

    @SerializedName(SERIALIZED_NAME_FROM_MIN)
    @jakarta.annotation.Nullable
    private String fromMin;

    public static final String SERIALIZED_NAME_FROM_MAX = "fromMax";

    @SerializedName(SERIALIZED_NAME_FROM_MAX)
    @jakarta.annotation.Nullable
    private String fromMax;

    public FetchTokenLimitResponseDataInner() {}

    public FetchTokenLimitResponseDataInner coin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
        return this;
    }

    /**
     * Get coin
     *
     * @return coin
     */
    @jakarta.annotation.Nullable
    public String getCoin() {
        return coin;
    }

    public void setCoin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
    }

    public FetchTokenLimitResponseDataInner fromMin(@jakarta.annotation.Nullable String fromMin) {
        this.fromMin = fromMin;
        return this;
    }

    /**
     * Get fromMin
     *
     * @return fromMin
     */
    @jakarta.annotation.Nullable
    public String getFromMin() {
        return fromMin;
    }

    public void setFromMin(@jakarta.annotation.Nullable String fromMin) {
        this.fromMin = fromMin;
    }

    public FetchTokenLimitResponseDataInner fromMax(@jakarta.annotation.Nullable String fromMax) {
        this.fromMax = fromMax;
        return this;
    }

    /**
     * Get fromMax
     *
     * @return fromMax
     */
    @jakarta.annotation.Nullable
    public String getFromMax() {
        return fromMax;
    }

    public void setFromMax(@jakarta.annotation.Nullable String fromMax) {
        this.fromMax = fromMax;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FetchTokenLimitResponseDataInner fetchTokenLimitResponseDataInner =
                (FetchTokenLimitResponseDataInner) o;
        return Objects.equals(this.coin, fetchTokenLimitResponseDataInner.coin)
                && Objects.equals(this.fromMin, fetchTokenLimitResponseDataInner.fromMin)
                && Objects.equals(this.fromMax, fetchTokenLimitResponseDataInner.fromMax);
    }

    @Override
    public int hashCode() {
        return Objects.hash(coin, fromMin, fromMax);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FetchTokenLimitResponseDataInner {\n");
        sb.append("		coin: ").append(toIndentedString(coin)).append("\n");
        sb.append("		fromMin: ").append(toIndentedString(fromMin)).append("\n");
        sb.append("		fromMax: ").append(toIndentedString(fromMax)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object coinValue = getCoin();
        String coinValueAsString = "";
        coinValueAsString = coinValue.toString();
        sb.append("coin=").append(urlEncode(coinValueAsString)).append("");
        Object fromMinValue = getFromMin();
        String fromMinValueAsString = "";
        fromMinValueAsString = fromMinValue.toString();
        sb.append("fromMin=").append(urlEncode(fromMinValueAsString)).append("");
        Object fromMaxValue = getFromMax();
        String fromMaxValueAsString = "";
        fromMaxValueAsString = fromMaxValue.toString();
        sb.append("fromMax=").append(urlEncode(fromMaxValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("coin");
        openapiFields.add("fromMin");
        openapiFields.add("fromMax");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FetchTokenLimitResponseDataInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FetchTokenLimitResponseDataInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FetchTokenLimitResponseDataInner is"
                                        + " not found in the empty JSON string",
                                FetchTokenLimitResponseDataInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FetchTokenLimitResponseDataInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `FetchTokenLimitResponseDataInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull())
                && !jsonObj.get("coin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("coin").toString()));
        }
        if ((jsonObj.get("fromMin") != null && !jsonObj.get("fromMin").isJsonNull())
                && !jsonObj.get("fromMin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromMin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("fromMin").toString()));
        }
        if ((jsonObj.get("fromMax") != null && !jsonObj.get("fromMax").isJsonNull())
                && !jsonObj.get("fromMax").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromMax` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("fromMax").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FetchTokenLimitResponseDataInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FetchTokenLimitResponseDataInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FetchTokenLimitResponseDataInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(FetchTokenLimitResponseDataInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FetchTokenLimitResponseDataInner>() {
                        @Override
                        public void write(JsonWriter out, FetchTokenLimitResponseDataInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FetchTokenLimitResponseDataInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FetchTokenLimitResponseDataInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FetchTokenLimitResponseDataInner
     * @throws IOException if the JSON string is invalid with respect to
     *     FetchTokenLimitResponseDataInner
     */
    public static FetchTokenLimitResponseDataInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FetchTokenLimitResponseDataInner.class);
    }

    /**
     * Convert an instance of FetchTokenLimitResponseDataInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
