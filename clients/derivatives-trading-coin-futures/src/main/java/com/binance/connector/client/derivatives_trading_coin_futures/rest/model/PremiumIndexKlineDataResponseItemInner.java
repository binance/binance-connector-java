/*
 * Binance Derivatives Trading COIN Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.rest.model;

import com.binance.connector.client.common.AbstractOpenApiSchema;
import com.binance.connector.client.derivatives_trading_coin_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.validator.constraints.*;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class PremiumIndexKlineDataResponseItemInner extends AbstractOpenApiSchema {
    private static final Logger log =
            Logger.getLogger(PremiumIndexKlineDataResponseItemInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PremiumIndexKlineDataResponseItemInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'PremiumIndexKlineDataResponseItemInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Long> adapterLong =
                    gson.getDelegateAdapter(this, TypeToken.get(Long.class));
            final TypeAdapter<String> adapterString =
                    gson.getDelegateAdapter(this, TypeToken.get(String.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<PremiumIndexKlineDataResponseItemInner>() {
                        @Override
                        public void write(
                                JsonWriter out, PremiumIndexKlineDataResponseItemInner value)
                                throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type `Long`
                            if (value.getActualInstance() instanceof Long) {
                                JsonPrimitive primitive =
                                        adapterLong
                                                .toJsonTree((Long) value.getActualInstance())
                                                .getAsJsonPrimitive();
                                elementAdapter.write(out, primitive);
                                return;
                            }
                            // check if the actual instance is of the type `String`
                            if (value.getActualInstance() instanceof String) {
                                JsonPrimitive primitive =
                                        adapterString
                                                .toJsonTree((String) value.getActualInstance())
                                                .getAsJsonPrimitive();
                                elementAdapter.write(out, primitive);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas:"
                                            + " Long, String");
                        }

                        @Override
                        public PremiumIndexKlineDataResponseItemInner read(JsonReader in)
                                throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize Long
                            try {
                                // validate the JSON object to see if any exception is thrown
                                if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                                    throw new IllegalArgumentException(
                                            String.format(
                                                    "Expected json element to be of type Number in"
                                                            + " the JSON string but got `%s`",
                                                    jsonElement.toString()));
                                }
                                actualAdapter = adapterLong;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'Long'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for Long failed with `%s`.",
                                                e.getMessage()));
                                log.log(Level.FINER, "Input data does not match schema 'Long'", e);
                            }
                            // deserialize String
                            try {
                                // validate the JSON object to see if any exception is thrown
                                if (!jsonElement.getAsJsonPrimitive().isString()) {
                                    throw new IllegalArgumentException(
                                            String.format(
                                                    "Expected json element to be of type String in"
                                                            + " the JSON string but got `%s`",
                                                    jsonElement.toString()));
                                }
                                actualAdapter = adapterString;
                                match++;
                                log.log(Level.FINER, "Input data matches schema 'String'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for String failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema 'String'",
                                        e);
                            }

                            if (match == 1) {
                                PremiumIndexKlineDataResponseItemInner ret =
                                        new PremiumIndexKlineDataResponseItemInner();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for"
                                                + " PremiumIndexKlineDataResponseItemInner: %d"
                                                + " classes match result, expected 1. Detailed"
                                                + " failure message for oneOf schemas: %s. JSON:"
                                                + " %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public PremiumIndexKlineDataResponseItemInner() {
        super("oneOf", Boolean.FALSE);
    }

    public PremiumIndexKlineDataResponseItemInner(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("Long", Long.class);
        schemas.put("String", String.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return PremiumIndexKlineDataResponseItemInner.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: Long, String
     *
     * <p>It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof Long) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof String) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be Long, String");
    }

    /**
     * Get the actual instance, which can be the following: Long, String
     *
     * @return The actual instance (Long, String)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `Long`. If the actual instance is not `Long`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `Long`
     * @throws ClassCastException if the instance is not `Long`
     */
    public Long getLong() throws ClassCastException {
        return (Long) super.getActualInstance();
    }

    /**
     * Get the actual instance of `String`. If the actual instance is not `String`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `String`
     * @throws ClassCastException if the instance is not `String`
     */
    public String getString() throws ClassCastException {
        return (String) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     PremiumIndexKlineDataResponseItemInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with Long
        try {
            if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                throw new IllegalArgumentException(
                        String.format(
                                "Expected json element to be of type Number in the JSON string but"
                                        + " got `%s`",
                                jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format("Deserialization for Long failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with String
        try {
            if (!jsonElement.getAsJsonPrimitive().isString()) {
                throw new IllegalArgumentException(
                        String.format(
                                "Expected json element to be of type String in the JSON string but"
                                        + " got `%s`",
                                jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format("Deserialization for String failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for PremiumIndexKlineDataResponseItemInner"
                                + " with oneOf schemas: Long, String. %d class(es) match the"
                                + " result, expected 1. Detailed failure message for oneOf schemas:"
                                + " %s. JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of PremiumIndexKlineDataResponseItemInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PremiumIndexKlineDataResponseItemInner
     * @throws IOException if the JSON string is invalid with respect to
     *     PremiumIndexKlineDataResponseItemInner
     */
    public static PremiumIndexKlineDataResponseItemInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, PremiumIndexKlineDataResponseItemInner.class);
    }

    /**
     * Convert an instance of PremiumIndexKlineDataResponseItemInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
