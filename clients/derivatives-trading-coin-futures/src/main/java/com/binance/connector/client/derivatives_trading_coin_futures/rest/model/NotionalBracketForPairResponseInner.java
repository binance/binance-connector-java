/*
 * Binance Derivatives Trading COIN Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.rest.model;

import com.binance.connector.client.derivatives_trading_coin_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** NotionalBracketForPairResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class NotionalBracketForPairResponseInner {
    public static final String SERIALIZED_NAME_PAIR = "pair";

    @SerializedName(SERIALIZED_NAME_PAIR)
    @jakarta.annotation.Nullable
    private String pair;

    public static final String SERIALIZED_NAME_BRACKETS = "brackets";

    @SerializedName(SERIALIZED_NAME_BRACKETS)
    @jakarta.annotation.Nullable
    private List<@Valid NotionalBracketForPairResponseInnerBracketsInner> brackets;

    public NotionalBracketForPairResponseInner() {}

    public NotionalBracketForPairResponseInner pair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
        return this;
    }

    /**
     * Get pair
     *
     * @return pair
     */
    @jakarta.annotation.Nullable
    public String getPair() {
        return pair;
    }

    public void setPair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
    }

    public NotionalBracketForPairResponseInner brackets(
            @jakarta.annotation.Nullable
                    List<@Valid NotionalBracketForPairResponseInnerBracketsInner> brackets) {
        this.brackets = brackets;
        return this;
    }

    public NotionalBracketForPairResponseInner addBracketsItem(
            NotionalBracketForPairResponseInnerBracketsInner bracketsItem) {
        if (this.brackets == null) {
            this.brackets = new ArrayList<>();
        }
        this.brackets.add(bracketsItem);
        return this;
    }

    /**
     * Get brackets
     *
     * @return brackets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid NotionalBracketForPairResponseInnerBracketsInner> getBrackets() {
        return brackets;
    }

    public void setBrackets(
            @jakarta.annotation.Nullable
                    List<@Valid NotionalBracketForPairResponseInnerBracketsInner> brackets) {
        this.brackets = brackets;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotionalBracketForPairResponseInner notionalBracketForPairResponseInner =
                (NotionalBracketForPairResponseInner) o;
        return Objects.equals(this.pair, notionalBracketForPairResponseInner.pair)
                && Objects.equals(this.brackets, notionalBracketForPairResponseInner.brackets);
    }

    @Override
    public int hashCode() {
        return Objects.hash(pair, brackets);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NotionalBracketForPairResponseInner {\n");
        sb.append("		pair: ").append(toIndentedString(pair)).append("\n");
        sb.append("		brackets: ").append(toIndentedString(brackets)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object pairValue = getPair();
        String pairValueAsString = "";
        pairValueAsString = pairValue.toString();
        sb.append("pair=").append(urlEncode(pairValueAsString)).append("");
        Object bracketsValue = getBrackets();
        String bracketsValueAsString = "";
        bracketsValueAsString =
                (String)
                        ((Collection) bracketsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("brackets=").append(urlEncode(bracketsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("pair");
        openapiFields.add("brackets");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     NotionalBracketForPairResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!NotionalBracketForPairResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in NotionalBracketForPairResponseInner is"
                                        + " not found in the empty JSON string",
                                NotionalBracketForPairResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!NotionalBracketForPairResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `NotionalBracketForPairResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("pair") != null && !jsonObj.get("pair").isJsonNull())
                && !jsonObj.get("pair").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pair` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("pair").toString()));
        }
        if (jsonObj.get("brackets") != null && !jsonObj.get("brackets").isJsonNull()) {
            JsonArray jsonArraybrackets = jsonObj.getAsJsonArray("brackets");
            if (jsonArraybrackets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("brackets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `brackets` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("brackets").toString()));
                }

                // validate the optional field `brackets` (array)
                for (int i = 0; i < jsonArraybrackets.size(); i++) {
                    NotionalBracketForPairResponseInnerBracketsInner.validateJsonElement(
                            jsonArraybrackets.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NotionalBracketForPairResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NotionalBracketForPairResponseInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NotionalBracketForPairResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(NotionalBracketForPairResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<NotionalBracketForPairResponseInner>() {
                        @Override
                        public void write(JsonWriter out, NotionalBracketForPairResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public NotionalBracketForPairResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of NotionalBracketForPairResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NotionalBracketForPairResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     NotionalBracketForPairResponseInner
     */
    public static NotionalBracketForPairResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, NotionalBracketForPairResponseInner.class);
    }

    /**
     * Convert an instance of NotionalBracketForPairResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
