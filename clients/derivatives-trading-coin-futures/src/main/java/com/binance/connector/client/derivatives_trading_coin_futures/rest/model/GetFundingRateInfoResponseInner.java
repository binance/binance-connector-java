/*
 * Binance Derivatives Trading COIN Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.rest.model;

import com.binance.connector.client.derivatives_trading_coin_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFundingRateInfoResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFundingRateInfoResponseInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_ADJUSTED_FUNDING_RATE_CAP = "adjustedFundingRateCap";

    @SerializedName(SERIALIZED_NAME_ADJUSTED_FUNDING_RATE_CAP)
    @jakarta.annotation.Nullable
    private String adjustedFundingRateCap;

    public static final String SERIALIZED_NAME_ADJUSTED_FUNDING_RATE_FLOOR =
            "adjustedFundingRateFloor";

    @SerializedName(SERIALIZED_NAME_ADJUSTED_FUNDING_RATE_FLOOR)
    @jakarta.annotation.Nullable
    private String adjustedFundingRateFloor;

    public static final String SERIALIZED_NAME_FUNDING_INTERVAL_HOURS = "fundingIntervalHours";

    @SerializedName(SERIALIZED_NAME_FUNDING_INTERVAL_HOURS)
    @jakarta.annotation.Nullable
    private Long fundingIntervalHours;

    public static final String SERIALIZED_NAME_DISCLAIMER = "disclaimer";

    @SerializedName(SERIALIZED_NAME_DISCLAIMER)
    @jakarta.annotation.Nullable
    private Boolean disclaimer;

    public GetFundingRateInfoResponseInner() {}

    public GetFundingRateInfoResponseInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public GetFundingRateInfoResponseInner adjustedFundingRateCap(
            @jakarta.annotation.Nullable String adjustedFundingRateCap) {
        this.adjustedFundingRateCap = adjustedFundingRateCap;
        return this;
    }

    /**
     * Get adjustedFundingRateCap
     *
     * @return adjustedFundingRateCap
     */
    @jakarta.annotation.Nullable
    public String getAdjustedFundingRateCap() {
        return adjustedFundingRateCap;
    }

    public void setAdjustedFundingRateCap(
            @jakarta.annotation.Nullable String adjustedFundingRateCap) {
        this.adjustedFundingRateCap = adjustedFundingRateCap;
    }

    public GetFundingRateInfoResponseInner adjustedFundingRateFloor(
            @jakarta.annotation.Nullable String adjustedFundingRateFloor) {
        this.adjustedFundingRateFloor = adjustedFundingRateFloor;
        return this;
    }

    /**
     * Get adjustedFundingRateFloor
     *
     * @return adjustedFundingRateFloor
     */
    @jakarta.annotation.Nullable
    public String getAdjustedFundingRateFloor() {
        return adjustedFundingRateFloor;
    }

    public void setAdjustedFundingRateFloor(
            @jakarta.annotation.Nullable String adjustedFundingRateFloor) {
        this.adjustedFundingRateFloor = adjustedFundingRateFloor;
    }

    public GetFundingRateInfoResponseInner fundingIntervalHours(
            @jakarta.annotation.Nullable Long fundingIntervalHours) {
        this.fundingIntervalHours = fundingIntervalHours;
        return this;
    }

    /**
     * Get fundingIntervalHours
     *
     * @return fundingIntervalHours
     */
    @jakarta.annotation.Nullable
    public Long getFundingIntervalHours() {
        return fundingIntervalHours;
    }

    public void setFundingIntervalHours(@jakarta.annotation.Nullable Long fundingIntervalHours) {
        this.fundingIntervalHours = fundingIntervalHours;
    }

    public GetFundingRateInfoResponseInner disclaimer(
            @jakarta.annotation.Nullable Boolean disclaimer) {
        this.disclaimer = disclaimer;
        return this;
    }

    /**
     * Get disclaimer
     *
     * @return disclaimer
     */
    @jakarta.annotation.Nullable
    public Boolean getDisclaimer() {
        return disclaimer;
    }

    public void setDisclaimer(@jakarta.annotation.Nullable Boolean disclaimer) {
        this.disclaimer = disclaimer;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFundingRateInfoResponseInner getFundingRateInfoResponseInner =
                (GetFundingRateInfoResponseInner) o;
        return Objects.equals(this.symbol, getFundingRateInfoResponseInner.symbol)
                && Objects.equals(
                        this.adjustedFundingRateCap,
                        getFundingRateInfoResponseInner.adjustedFundingRateCap)
                && Objects.equals(
                        this.adjustedFundingRateFloor,
                        getFundingRateInfoResponseInner.adjustedFundingRateFloor)
                && Objects.equals(
                        this.fundingIntervalHours,
                        getFundingRateInfoResponseInner.fundingIntervalHours)
                && Objects.equals(this.disclaimer, getFundingRateInfoResponseInner.disclaimer);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                adjustedFundingRateCap,
                adjustedFundingRateFloor,
                fundingIntervalHours,
                disclaimer);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetFundingRateInfoResponseInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		adjustedFundingRateCap: ")
                .append(toIndentedString(adjustedFundingRateCap))
                .append("\n");
        sb.append("		adjustedFundingRateFloor: ")
                .append(toIndentedString(adjustedFundingRateFloor))
                .append("\n");
        sb.append("		fundingIntervalHours: ")
                .append(toIndentedString(fundingIntervalHours))
                .append("\n");
        sb.append("		disclaimer: ").append(toIndentedString(disclaimer)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object adjustedFundingRateCapValue = getAdjustedFundingRateCap();
        String adjustedFundingRateCapValueAsString = "";
        adjustedFundingRateCapValueAsString = adjustedFundingRateCapValue.toString();
        sb.append("adjustedFundingRateCap=")
                .append(urlEncode(adjustedFundingRateCapValueAsString))
                .append("");
        Object adjustedFundingRateFloorValue = getAdjustedFundingRateFloor();
        String adjustedFundingRateFloorValueAsString = "";
        adjustedFundingRateFloorValueAsString = adjustedFundingRateFloorValue.toString();
        sb.append("adjustedFundingRateFloor=")
                .append(urlEncode(adjustedFundingRateFloorValueAsString))
                .append("");
        Object fundingIntervalHoursValue = getFundingIntervalHours();
        String fundingIntervalHoursValueAsString = "";
        fundingIntervalHoursValueAsString = fundingIntervalHoursValue.toString();
        sb.append("fundingIntervalHours=")
                .append(urlEncode(fundingIntervalHoursValueAsString))
                .append("");
        Object disclaimerValue = getDisclaimer();
        String disclaimerValueAsString = "";
        disclaimerValueAsString = disclaimerValue.toString();
        sb.append("disclaimer=").append(urlEncode(disclaimerValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("adjustedFundingRateCap");
        openapiFields.add("adjustedFundingRateFloor");
        openapiFields.add("fundingIntervalHours");
        openapiFields.add("disclaimer");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFundingRateInfoResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFundingRateInfoResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetFundingRateInfoResponseInner is not"
                                        + " found in the empty JSON string",
                                GetFundingRateInfoResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFundingRateInfoResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetFundingRateInfoResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("adjustedFundingRateCap") != null
                        && !jsonObj.get("adjustedFundingRateCap").isJsonNull())
                && !jsonObj.get("adjustedFundingRateCap").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `adjustedFundingRateCap` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("adjustedFundingRateCap").toString()));
        }
        if ((jsonObj.get("adjustedFundingRateFloor") != null
                        && !jsonObj.get("adjustedFundingRateFloor").isJsonNull())
                && !jsonObj.get("adjustedFundingRateFloor").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `adjustedFundingRateFloor` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("adjustedFundingRateFloor").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFundingRateInfoResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetFundingRateInfoResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetFundingRateInfoResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetFundingRateInfoResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetFundingRateInfoResponseInner>() {
                        @Override
                        public void write(JsonWriter out, GetFundingRateInfoResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetFundingRateInfoResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFundingRateInfoResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFundingRateInfoResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFundingRateInfoResponseInner
     */
    public static GetFundingRateInfoResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetFundingRateInfoResponseInner.class);
    }

    /**
     * Convert an instance of GetFundingRateInfoResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
