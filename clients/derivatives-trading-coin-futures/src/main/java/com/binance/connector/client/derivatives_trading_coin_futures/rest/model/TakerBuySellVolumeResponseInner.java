/*
 * Binance Derivatives Trading COIN Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.rest.model;

import com.binance.connector.client.derivatives_trading_coin_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** TakerBuySellVolumeResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class TakerBuySellVolumeResponseInner {
    public static final String SERIALIZED_NAME_PAIR = "pair";

    @SerializedName(SERIALIZED_NAME_PAIR)
    @jakarta.annotation.Nullable
    private String pair;

    public static final String SERIALIZED_NAME_CONTRACT_TYPE = "contractType";

    @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
    @jakarta.annotation.Nullable
    private String contractType;

    public static final String SERIALIZED_NAME_TAKER_BUY_VOL = "takerBuyVol";

    @SerializedName(SERIALIZED_NAME_TAKER_BUY_VOL)
    @jakarta.annotation.Nullable
    private String takerBuyVol;

    public static final String SERIALIZED_NAME_TAKER_SELL_VOL = "takerSellVol";

    @SerializedName(SERIALIZED_NAME_TAKER_SELL_VOL)
    @jakarta.annotation.Nullable
    private String takerSellVol;

    public static final String SERIALIZED_NAME_TAKER_BUY_VOL_VALUE = "takerBuyVolValue";

    @SerializedName(SERIALIZED_NAME_TAKER_BUY_VOL_VALUE)
    @jakarta.annotation.Nullable
    private String takerBuyVolValue;

    public static final String SERIALIZED_NAME_TAKER_SELL_VOL_VALUE = "takerSellVolValue";

    @SerializedName(SERIALIZED_NAME_TAKER_SELL_VOL_VALUE)
    @jakarta.annotation.Nullable
    private String takerSellVolValue;

    public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";

    @SerializedName(SERIALIZED_NAME_TIMESTAMP)
    @jakarta.annotation.Nullable
    private Long timestamp;

    public TakerBuySellVolumeResponseInner() {}

    public TakerBuySellVolumeResponseInner pair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
        return this;
    }

    /**
     * Get pair
     *
     * @return pair
     */
    @jakarta.annotation.Nullable
    public String getPair() {
        return pair;
    }

    public void setPair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
    }

    public TakerBuySellVolumeResponseInner contractType(
            @jakarta.annotation.Nullable String contractType) {
        this.contractType = contractType;
        return this;
    }

    /**
     * Get contractType
     *
     * @return contractType
     */
    @jakarta.annotation.Nullable
    public String getContractType() {
        return contractType;
    }

    public void setContractType(@jakarta.annotation.Nullable String contractType) {
        this.contractType = contractType;
    }

    public TakerBuySellVolumeResponseInner takerBuyVol(
            @jakarta.annotation.Nullable String takerBuyVol) {
        this.takerBuyVol = takerBuyVol;
        return this;
    }

    /**
     * Get takerBuyVol
     *
     * @return takerBuyVol
     */
    @jakarta.annotation.Nullable
    public String getTakerBuyVol() {
        return takerBuyVol;
    }

    public void setTakerBuyVol(@jakarta.annotation.Nullable String takerBuyVol) {
        this.takerBuyVol = takerBuyVol;
    }

    public TakerBuySellVolumeResponseInner takerSellVol(
            @jakarta.annotation.Nullable String takerSellVol) {
        this.takerSellVol = takerSellVol;
        return this;
    }

    /**
     * Get takerSellVol
     *
     * @return takerSellVol
     */
    @jakarta.annotation.Nullable
    public String getTakerSellVol() {
        return takerSellVol;
    }

    public void setTakerSellVol(@jakarta.annotation.Nullable String takerSellVol) {
        this.takerSellVol = takerSellVol;
    }

    public TakerBuySellVolumeResponseInner takerBuyVolValue(
            @jakarta.annotation.Nullable String takerBuyVolValue) {
        this.takerBuyVolValue = takerBuyVolValue;
        return this;
    }

    /**
     * Get takerBuyVolValue
     *
     * @return takerBuyVolValue
     */
    @jakarta.annotation.Nullable
    public String getTakerBuyVolValue() {
        return takerBuyVolValue;
    }

    public void setTakerBuyVolValue(@jakarta.annotation.Nullable String takerBuyVolValue) {
        this.takerBuyVolValue = takerBuyVolValue;
    }

    public TakerBuySellVolumeResponseInner takerSellVolValue(
            @jakarta.annotation.Nullable String takerSellVolValue) {
        this.takerSellVolValue = takerSellVolValue;
        return this;
    }

    /**
     * Get takerSellVolValue
     *
     * @return takerSellVolValue
     */
    @jakarta.annotation.Nullable
    public String getTakerSellVolValue() {
        return takerSellVolValue;
    }

    public void setTakerSellVolValue(@jakarta.annotation.Nullable String takerSellVolValue) {
        this.takerSellVolValue = takerSellVolValue;
    }

    public TakerBuySellVolumeResponseInner timestamp(@jakarta.annotation.Nullable Long timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get timestamp
     *
     * @return timestamp
     */
    @jakarta.annotation.Nullable
    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(@jakarta.annotation.Nullable Long timestamp) {
        this.timestamp = timestamp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TakerBuySellVolumeResponseInner takerBuySellVolumeResponseInner =
                (TakerBuySellVolumeResponseInner) o;
        return Objects.equals(this.pair, takerBuySellVolumeResponseInner.pair)
                && Objects.equals(this.contractType, takerBuySellVolumeResponseInner.contractType)
                && Objects.equals(this.takerBuyVol, takerBuySellVolumeResponseInner.takerBuyVol)
                && Objects.equals(this.takerSellVol, takerBuySellVolumeResponseInner.takerSellVol)
                && Objects.equals(
                        this.takerBuyVolValue, takerBuySellVolumeResponseInner.takerBuyVolValue)
                && Objects.equals(
                        this.takerSellVolValue, takerBuySellVolumeResponseInner.takerSellVolValue)
                && Objects.equals(this.timestamp, takerBuySellVolumeResponseInner.timestamp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                pair,
                contractType,
                takerBuyVol,
                takerSellVol,
                takerBuyVolValue,
                takerSellVolValue,
                timestamp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TakerBuySellVolumeResponseInner {\n");
        sb.append("		pair: ").append(toIndentedString(pair)).append("\n");
        sb.append("		contractType: ").append(toIndentedString(contractType)).append("\n");
        sb.append("		takerBuyVol: ").append(toIndentedString(takerBuyVol)).append("\n");
        sb.append("		takerSellVol: ").append(toIndentedString(takerSellVol)).append("\n");
        sb.append("		takerBuyVolValue: ").append(toIndentedString(takerBuyVolValue)).append("\n");
        sb.append("		takerSellVolValue: ").append(toIndentedString(takerSellVolValue)).append("\n");
        sb.append("		timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object pairValue = getPair();
        String pairValueAsString = "";
        pairValueAsString = pairValue.toString();
        sb.append("pair=").append(urlEncode(pairValueAsString)).append("");
        Object contractTypeValue = getContractType();
        String contractTypeValueAsString = "";
        contractTypeValueAsString = contractTypeValue.toString();
        sb.append("contractType=").append(urlEncode(contractTypeValueAsString)).append("");
        Object takerBuyVolValue = getTakerBuyVol();
        String takerBuyVolValueAsString = "";
        takerBuyVolValueAsString = takerBuyVolValue.toString();
        sb.append("takerBuyVol=").append(urlEncode(takerBuyVolValueAsString)).append("");
        Object takerSellVolValue = getTakerSellVol();
        String takerSellVolValueAsString = "";
        takerSellVolValueAsString = takerSellVolValue.toString();
        sb.append("takerSellVol=").append(urlEncode(takerSellVolValueAsString)).append("");
        Object takerBuyVolValueValue = getTakerBuyVolValue();
        String takerBuyVolValueValueAsString = "";
        takerBuyVolValueValueAsString = takerBuyVolValueValue.toString();
        sb.append("takerBuyVolValue=").append(urlEncode(takerBuyVolValueValueAsString)).append("");
        Object takerSellVolValueValue = getTakerSellVolValue();
        String takerSellVolValueValueAsString = "";
        takerSellVolValueValueAsString = takerSellVolValueValue.toString();
        sb.append("takerSellVolValue=")
                .append(urlEncode(takerSellVolValueValueAsString))
                .append("");
        Object timestampValue = getTimestamp();
        String timestampValueAsString = "";
        timestampValueAsString = timestampValue.toString();
        sb.append("timestamp=").append(urlEncode(timestampValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("pair");
        openapiFields.add("contractType");
        openapiFields.add("takerBuyVol");
        openapiFields.add("takerSellVol");
        openapiFields.add("takerBuyVolValue");
        openapiFields.add("takerSellVolValue");
        openapiFields.add("timestamp");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     TakerBuySellVolumeResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!TakerBuySellVolumeResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in TakerBuySellVolumeResponseInner is not"
                                        + " found in the empty JSON string",
                                TakerBuySellVolumeResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!TakerBuySellVolumeResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `TakerBuySellVolumeResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("pair") != null && !jsonObj.get("pair").isJsonNull())
                && !jsonObj.get("pair").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pair` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("pair").toString()));
        }
        if ((jsonObj.get("contractType") != null && !jsonObj.get("contractType").isJsonNull())
                && !jsonObj.get("contractType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `contractType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("contractType").toString()));
        }
        if ((jsonObj.get("takerBuyVol") != null && !jsonObj.get("takerBuyVol").isJsonNull())
                && !jsonObj.get("takerBuyVol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `takerBuyVol` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("takerBuyVol").toString()));
        }
        if ((jsonObj.get("takerSellVol") != null && !jsonObj.get("takerSellVol").isJsonNull())
                && !jsonObj.get("takerSellVol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `takerSellVol` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("takerSellVol").toString()));
        }
        if ((jsonObj.get("takerBuyVolValue") != null
                        && !jsonObj.get("takerBuyVolValue").isJsonNull())
                && !jsonObj.get("takerBuyVolValue").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `takerBuyVolValue` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("takerBuyVolValue").toString()));
        }
        if ((jsonObj.get("takerSellVolValue") != null
                        && !jsonObj.get("takerSellVolValue").isJsonNull())
                && !jsonObj.get("takerSellVolValue").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `takerSellVolValue` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("takerSellVolValue").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TakerBuySellVolumeResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TakerBuySellVolumeResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<TakerBuySellVolumeResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(TakerBuySellVolumeResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<TakerBuySellVolumeResponseInner>() {
                        @Override
                        public void write(JsonWriter out, TakerBuySellVolumeResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public TakerBuySellVolumeResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of TakerBuySellVolumeResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TakerBuySellVolumeResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     TakerBuySellVolumeResponseInner
     */
    public static TakerBuySellVolumeResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TakerBuySellVolumeResponseInner.class);
    }

    /**
     * Convert an instance of TakerBuySellVolumeResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
