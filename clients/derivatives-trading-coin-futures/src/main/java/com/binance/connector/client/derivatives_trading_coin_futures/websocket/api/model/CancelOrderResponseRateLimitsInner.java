/*
 * Binance Derivatives Trading COIN Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** CancelOrderResponseRateLimitsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class CancelOrderResponseRateLimitsInner extends BaseDTO {
    public static final String SERIALIZED_NAME_RATE_LIMIT_TYPE = "rateLimitType";

    @SerializedName(SERIALIZED_NAME_RATE_LIMIT_TYPE)
    @jakarta.annotation.Nullable
    private String rateLimitType;

    public static final String SERIALIZED_NAME_INTERVAL = "interval";

    @SerializedName(SERIALIZED_NAME_INTERVAL)
    @jakarta.annotation.Nullable
    private String interval;

    public static final String SERIALIZED_NAME_INTERVAL_NUM = "intervalNum";

    @SerializedName(SERIALIZED_NAME_INTERVAL_NUM)
    @jakarta.annotation.Nullable
    private Long intervalNum;

    public static final String SERIALIZED_NAME_LIMIT = "limit";

    @SerializedName(SERIALIZED_NAME_LIMIT)
    @jakarta.annotation.Nullable
    private Long limit;

    public static final String SERIALIZED_NAME_COUNT = "count";

    @SerializedName(SERIALIZED_NAME_COUNT)
    @jakarta.annotation.Nullable
    private Long count;

    public CancelOrderResponseRateLimitsInner() {}

    public CancelOrderResponseRateLimitsInner rateLimitType(
            @jakarta.annotation.Nullable String rateLimitType) {
        this.rateLimitType = rateLimitType;
        return this;
    }

    /**
     * Get rateLimitType
     *
     * @return rateLimitType
     */
    @jakarta.annotation.Nullable
    public String getRateLimitType() {
        return rateLimitType;
    }

    public void setRateLimitType(@jakarta.annotation.Nullable String rateLimitType) {
        this.rateLimitType = rateLimitType;
    }

    public CancelOrderResponseRateLimitsInner interval(
            @jakarta.annotation.Nullable String interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get interval
     *
     * @return interval
     */
    @jakarta.annotation.Nullable
    public String getInterval() {
        return interval;
    }

    public void setInterval(@jakarta.annotation.Nullable String interval) {
        this.interval = interval;
    }

    public CancelOrderResponseRateLimitsInner intervalNum(
            @jakarta.annotation.Nullable Long intervalNum) {
        this.intervalNum = intervalNum;
        return this;
    }

    /**
     * Get intervalNum
     *
     * @return intervalNum
     */
    @jakarta.annotation.Nullable
    public Long getIntervalNum() {
        return intervalNum;
    }

    public void setIntervalNum(@jakarta.annotation.Nullable Long intervalNum) {
        this.intervalNum = intervalNum;
    }

    public CancelOrderResponseRateLimitsInner limit(@jakarta.annotation.Nullable Long limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get limit
     *
     * @return limit
     */
    @jakarta.annotation.Nullable
    public Long getLimit() {
        return limit;
    }

    public void setLimit(@jakarta.annotation.Nullable Long limit) {
        this.limit = limit;
    }

    public CancelOrderResponseRateLimitsInner count(@jakarta.annotation.Nullable Long count) {
        this.count = count;
        return this;
    }

    /**
     * Get count
     *
     * @return count
     */
    @jakarta.annotation.Nullable
    public Long getCount() {
        return count;
    }

    public void setCount(@jakarta.annotation.Nullable Long count) {
        this.count = count;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CancelOrderResponseRateLimitsInner cancelOrderResponseRateLimitsInner =
                (CancelOrderResponseRateLimitsInner) o;
        return Objects.equals(this.rateLimitType, cancelOrderResponseRateLimitsInner.rateLimitType)
                && Objects.equals(this.interval, cancelOrderResponseRateLimitsInner.interval)
                && Objects.equals(this.intervalNum, cancelOrderResponseRateLimitsInner.intervalNum)
                && Objects.equals(this.limit, cancelOrderResponseRateLimitsInner.limit)
                && Objects.equals(this.count, cancelOrderResponseRateLimitsInner.count);
    }

    @Override
    public int hashCode() {
        return Objects.hash(rateLimitType, interval, intervalNum, limit, count);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CancelOrderResponseRateLimitsInner {\n");
        sb.append("		rateLimitType: ").append(toIndentedString(rateLimitType)).append("\n");
        sb.append("		interval: ").append(toIndentedString(interval)).append("\n");
        sb.append("		intervalNum: ").append(toIndentedString(intervalNum)).append("\n");
        sb.append("		limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("		count: ").append(toIndentedString(count)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String rateLimitTypeValue = getRateLimitType();
        if (rateLimitTypeValue != null) {
            String rateLimitTypeValueAsString = rateLimitTypeValue.toString();
            valMap.put("rateLimitType", rateLimitTypeValueAsString);
        }
        String intervalValue = getInterval();
        if (intervalValue != null) {
            String intervalValueAsString = intervalValue.toString();
            valMap.put("interval", intervalValueAsString);
        }
        Long intervalNumValue = getIntervalNum();
        if (intervalNumValue != null) {
            String intervalNumValueAsString = intervalNumValue.toString();
            valMap.put("intervalNum", intervalNumValueAsString);
        }
        Long limitValue = getLimit();
        if (limitValue != null) {
            String limitValueAsString = limitValue.toString();
            valMap.put("limit", limitValueAsString);
        }
        Long countValue = getCount();
        if (countValue != null) {
            String countValueAsString = countValue.toString();
            valMap.put("count", countValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object rateLimitTypeValue = getRateLimitType();
        if (rateLimitTypeValue != null) {
            valMap.put("rateLimitType", rateLimitTypeValue);
        }
        Object intervalValue = getInterval();
        if (intervalValue != null) {
            valMap.put("interval", intervalValue);
        }
        Object intervalNumValue = getIntervalNum();
        if (intervalNumValue != null) {
            valMap.put("intervalNum", intervalNumValue);
        }
        Object limitValue = getLimit();
        if (limitValue != null) {
            valMap.put("limit", limitValue);
        }
        Object countValue = getCount();
        if (countValue != null) {
            valMap.put("count", countValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("rateLimitType");
        openapiFields.add("interval");
        openapiFields.add("intervalNum");
        openapiFields.add("limit");
        openapiFields.add("count");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     CancelOrderResponseRateLimitsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CancelOrderResponseRateLimitsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CancelOrderResponseRateLimitsInner is"
                                        + " not found in the empty JSON string",
                                CancelOrderResponseRateLimitsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CancelOrderResponseRateLimitsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `CancelOrderResponseRateLimitsInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("rateLimitType") != null && !jsonObj.get("rateLimitType").isJsonNull())
                && !jsonObj.get("rateLimitType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `rateLimitType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("rateLimitType").toString()));
        }
        if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull())
                && !jsonObj.get("interval").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `interval` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("interval").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CancelOrderResponseRateLimitsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CancelOrderResponseRateLimitsInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CancelOrderResponseRateLimitsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(CancelOrderResponseRateLimitsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CancelOrderResponseRateLimitsInner>() {
                        @Override
                        public void write(JsonWriter out, CancelOrderResponseRateLimitsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CancelOrderResponseRateLimitsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CancelOrderResponseRateLimitsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CancelOrderResponseRateLimitsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     CancelOrderResponseRateLimitsInner
     */
    public static CancelOrderResponseRateLimitsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, CancelOrderResponseRateLimitsInner.class);
    }

    /**
     * Convert an instance of CancelOrderResponseRateLimitsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
