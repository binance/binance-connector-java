/*
 * Binance Derivatives Trading COIN Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** CancelOrderResponseResult */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class CancelOrderResponseResult extends BaseDTO {
    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_PAIR = "pair";

    @SerializedName(SERIALIZED_NAME_PAIR)
    @jakarta.annotation.Nullable
    private String pair;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "clientOrderId";

    @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String clientOrderId;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_AVG_PRICE = "avgPrice";

    @SerializedName(SERIALIZED_NAME_AVG_PRICE)
    @jakarta.annotation.Nullable
    private String avgPrice;

    public static final String SERIALIZED_NAME_ORIG_QTY = "origQty";

    @SerializedName(SERIALIZED_NAME_ORIG_QTY)
    @jakarta.annotation.Nullable
    private String origQty;

    public static final String SERIALIZED_NAME_EXECUTED_QTY = "executedQty";

    @SerializedName(SERIALIZED_NAME_EXECUTED_QTY)
    @jakarta.annotation.Nullable
    private String executedQty;

    public static final String SERIALIZED_NAME_CUM_QTY = "cumQty";

    @SerializedName(SERIALIZED_NAME_CUM_QTY)
    @jakarta.annotation.Nullable
    private String cumQty;

    public static final String SERIALIZED_NAME_CUM_BASE = "cumBase";

    @SerializedName(SERIALIZED_NAME_CUM_BASE)
    @jakarta.annotation.Nullable
    private String cumBase;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String timeInForce;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_REDUCE_ONLY = "reduceOnly";

    @SerializedName(SERIALIZED_NAME_REDUCE_ONLY)
    @jakarta.annotation.Nullable
    private Boolean reduceOnly;

    public static final String SERIALIZED_NAME_CLOSE_POSITION = "closePosition";

    @SerializedName(SERIALIZED_NAME_CLOSE_POSITION)
    @jakarta.annotation.Nullable
    private Boolean closePosition;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private String positionSide;

    public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";

    @SerializedName(SERIALIZED_NAME_STOP_PRICE)
    @jakarta.annotation.Nullable
    private String stopPrice;

    public static final String SERIALIZED_NAME_WORKING_TYPE = "workingType";

    @SerializedName(SERIALIZED_NAME_WORKING_TYPE)
    @jakarta.annotation.Nullable
    private String workingType;

    public static final String SERIALIZED_NAME_PRICE_PROTECT = "priceProtect";

    @SerializedName(SERIALIZED_NAME_PRICE_PROTECT)
    @jakarta.annotation.Nullable
    private Boolean priceProtect;

    public static final String SERIALIZED_NAME_ORIG_TYPE = "origType";

    @SerializedName(SERIALIZED_NAME_ORIG_TYPE)
    @jakarta.annotation.Nullable
    private String origType;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public CancelOrderResponseResult() {}

    public CancelOrderResponseResult orderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public CancelOrderResponseResult symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public CancelOrderResponseResult pair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
        return this;
    }

    /**
     * Get pair
     *
     * @return pair
     */
    @jakarta.annotation.Nullable
    public String getPair() {
        return pair;
    }

    public void setPair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
    }

    public CancelOrderResponseResult status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public CancelOrderResponseResult clientOrderId(
            @jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
        return this;
    }

    /**
     * Get clientOrderId
     *
     * @return clientOrderId
     */
    @jakarta.annotation.Nullable
    public String getClientOrderId() {
        return clientOrderId;
    }

    public void setClientOrderId(@jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }

    public CancelOrderResponseResult price(@jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public CancelOrderResponseResult avgPrice(@jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
        return this;
    }

    /**
     * Get avgPrice
     *
     * @return avgPrice
     */
    @jakarta.annotation.Nullable
    public String getAvgPrice() {
        return avgPrice;
    }

    public void setAvgPrice(@jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
    }

    public CancelOrderResponseResult origQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
        return this;
    }

    /**
     * Get origQty
     *
     * @return origQty
     */
    @jakarta.annotation.Nullable
    public String getOrigQty() {
        return origQty;
    }

    public void setOrigQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
    }

    public CancelOrderResponseResult executedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
        return this;
    }

    /**
     * Get executedQty
     *
     * @return executedQty
     */
    @jakarta.annotation.Nullable
    public String getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
    }

    public CancelOrderResponseResult cumQty(@jakarta.annotation.Nullable String cumQty) {
        this.cumQty = cumQty;
        return this;
    }

    /**
     * Get cumQty
     *
     * @return cumQty
     */
    @jakarta.annotation.Nullable
    public String getCumQty() {
        return cumQty;
    }

    public void setCumQty(@jakarta.annotation.Nullable String cumQty) {
        this.cumQty = cumQty;
    }

    public CancelOrderResponseResult cumBase(@jakarta.annotation.Nullable String cumBase) {
        this.cumBase = cumBase;
        return this;
    }

    /**
     * Get cumBase
     *
     * @return cumBase
     */
    @jakarta.annotation.Nullable
    public String getCumBase() {
        return cumBase;
    }

    public void setCumBase(@jakarta.annotation.Nullable String cumBase) {
        this.cumBase = cumBase;
    }

    public CancelOrderResponseResult timeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public String getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
    }

    public CancelOrderResponseResult type(@jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public CancelOrderResponseResult reduceOnly(@jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
        return this;
    }

    /**
     * Get reduceOnly
     *
     * @return reduceOnly
     */
    @jakarta.annotation.Nullable
    public Boolean getReduceOnly() {
        return reduceOnly;
    }

    public void setReduceOnly(@jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
    }

    public CancelOrderResponseResult closePosition(
            @jakarta.annotation.Nullable Boolean closePosition) {
        this.closePosition = closePosition;
        return this;
    }

    /**
     * Get closePosition
     *
     * @return closePosition
     */
    @jakarta.annotation.Nullable
    public Boolean getClosePosition() {
        return closePosition;
    }

    public void setClosePosition(@jakarta.annotation.Nullable Boolean closePosition) {
        this.closePosition = closePosition;
    }

    public CancelOrderResponseResult side(@jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public CancelOrderResponseResult positionSide(
            @jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    public String getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
    }

    public CancelOrderResponseResult stopPrice(@jakarta.annotation.Nullable String stopPrice) {
        this.stopPrice = stopPrice;
        return this;
    }

    /**
     * Get stopPrice
     *
     * @return stopPrice
     */
    @jakarta.annotation.Nullable
    public String getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(@jakarta.annotation.Nullable String stopPrice) {
        this.stopPrice = stopPrice;
    }

    public CancelOrderResponseResult workingType(@jakarta.annotation.Nullable String workingType) {
        this.workingType = workingType;
        return this;
    }

    /**
     * Get workingType
     *
     * @return workingType
     */
    @jakarta.annotation.Nullable
    public String getWorkingType() {
        return workingType;
    }

    public void setWorkingType(@jakarta.annotation.Nullable String workingType) {
        this.workingType = workingType;
    }

    public CancelOrderResponseResult priceProtect(
            @jakarta.annotation.Nullable Boolean priceProtect) {
        this.priceProtect = priceProtect;
        return this;
    }

    /**
     * Get priceProtect
     *
     * @return priceProtect
     */
    @jakarta.annotation.Nullable
    public Boolean getPriceProtect() {
        return priceProtect;
    }

    public void setPriceProtect(@jakarta.annotation.Nullable Boolean priceProtect) {
        this.priceProtect = priceProtect;
    }

    public CancelOrderResponseResult origType(@jakarta.annotation.Nullable String origType) {
        this.origType = origType;
        return this;
    }

    /**
     * Get origType
     *
     * @return origType
     */
    @jakarta.annotation.Nullable
    public String getOrigType() {
        return origType;
    }

    public void setOrigType(@jakarta.annotation.Nullable String origType) {
        this.origType = origType;
    }

    public CancelOrderResponseResult updateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CancelOrderResponseResult cancelOrderResponseResult = (CancelOrderResponseResult) o;
        return Objects.equals(this.orderId, cancelOrderResponseResult.orderId)
                && Objects.equals(this.symbol, cancelOrderResponseResult.symbol)
                && Objects.equals(this.pair, cancelOrderResponseResult.pair)
                && Objects.equals(this.status, cancelOrderResponseResult.status)
                && Objects.equals(this.clientOrderId, cancelOrderResponseResult.clientOrderId)
                && Objects.equals(this.price, cancelOrderResponseResult.price)
                && Objects.equals(this.avgPrice, cancelOrderResponseResult.avgPrice)
                && Objects.equals(this.origQty, cancelOrderResponseResult.origQty)
                && Objects.equals(this.executedQty, cancelOrderResponseResult.executedQty)
                && Objects.equals(this.cumQty, cancelOrderResponseResult.cumQty)
                && Objects.equals(this.cumBase, cancelOrderResponseResult.cumBase)
                && Objects.equals(this.timeInForce, cancelOrderResponseResult.timeInForce)
                && Objects.equals(this.type, cancelOrderResponseResult.type)
                && Objects.equals(this.reduceOnly, cancelOrderResponseResult.reduceOnly)
                && Objects.equals(this.closePosition, cancelOrderResponseResult.closePosition)
                && Objects.equals(this.side, cancelOrderResponseResult.side)
                && Objects.equals(this.positionSide, cancelOrderResponseResult.positionSide)
                && Objects.equals(this.stopPrice, cancelOrderResponseResult.stopPrice)
                && Objects.equals(this.workingType, cancelOrderResponseResult.workingType)
                && Objects.equals(this.priceProtect, cancelOrderResponseResult.priceProtect)
                && Objects.equals(this.origType, cancelOrderResponseResult.origType)
                && Objects.equals(this.updateTime, cancelOrderResponseResult.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                orderId,
                symbol,
                pair,
                status,
                clientOrderId,
                price,
                avgPrice,
                origQty,
                executedQty,
                cumQty,
                cumBase,
                timeInForce,
                type,
                reduceOnly,
                closePosition,
                side,
                positionSide,
                stopPrice,
                workingType,
                priceProtect,
                origType,
                updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CancelOrderResponseResult {\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		pair: ").append(toIndentedString(pair)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		avgPrice: ").append(toIndentedString(avgPrice)).append("\n");
        sb.append("		origQty: ").append(toIndentedString(origQty)).append("\n");
        sb.append("		executedQty: ").append(toIndentedString(executedQty)).append("\n");
        sb.append("		cumQty: ").append(toIndentedString(cumQty)).append("\n");
        sb.append("		cumBase: ").append(toIndentedString(cumBase)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		reduceOnly: ").append(toIndentedString(reduceOnly)).append("\n");
        sb.append("		closePosition: ").append(toIndentedString(closePosition)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
        sb.append("		workingType: ").append(toIndentedString(workingType)).append("\n");
        sb.append("		priceProtect: ").append(toIndentedString(priceProtect)).append("\n");
        sb.append("		origType: ").append(toIndentedString(origType)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long orderIdValue = getOrderId();
        if (orderIdValue != null) {
            String orderIdValueAsString = orderIdValue.toString();
            valMap.put("orderId", orderIdValueAsString);
        }
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        String pairValue = getPair();
        if (pairValue != null) {
            String pairValueAsString = pairValue.toString();
            valMap.put("pair", pairValueAsString);
        }
        String statusValue = getStatus();
        if (statusValue != null) {
            String statusValueAsString = statusValue.toString();
            valMap.put("status", statusValueAsString);
        }
        String clientOrderIdValue = getClientOrderId();
        if (clientOrderIdValue != null) {
            String clientOrderIdValueAsString = clientOrderIdValue.toString();
            valMap.put("clientOrderId", clientOrderIdValueAsString);
        }
        String priceValue = getPrice();
        if (priceValue != null) {
            String priceValueAsString = priceValue.toString();
            valMap.put("price", priceValueAsString);
        }
        String avgPriceValue = getAvgPrice();
        if (avgPriceValue != null) {
            String avgPriceValueAsString = avgPriceValue.toString();
            valMap.put("avgPrice", avgPriceValueAsString);
        }
        String origQtyValue = getOrigQty();
        if (origQtyValue != null) {
            String origQtyValueAsString = origQtyValue.toString();
            valMap.put("origQty", origQtyValueAsString);
        }
        String executedQtyValue = getExecutedQty();
        if (executedQtyValue != null) {
            String executedQtyValueAsString = executedQtyValue.toString();
            valMap.put("executedQty", executedQtyValueAsString);
        }
        String cumQtyValue = getCumQty();
        if (cumQtyValue != null) {
            String cumQtyValueAsString = cumQtyValue.toString();
            valMap.put("cumQty", cumQtyValueAsString);
        }
        String cumBaseValue = getCumBase();
        if (cumBaseValue != null) {
            String cumBaseValueAsString = cumBaseValue.toString();
            valMap.put("cumBase", cumBaseValueAsString);
        }
        String timeInForceValue = getTimeInForce();
        if (timeInForceValue != null) {
            String timeInForceValueAsString = timeInForceValue.toString();
            valMap.put("timeInForce", timeInForceValueAsString);
        }
        String typeValue = getType();
        if (typeValue != null) {
            String typeValueAsString = typeValue.toString();
            valMap.put("type", typeValueAsString);
        }
        Boolean reduceOnlyValue = getReduceOnly();
        if (reduceOnlyValue != null) {
            String reduceOnlyValueAsString = reduceOnlyValue.toString();
            valMap.put("reduceOnly", reduceOnlyValueAsString);
        }
        Boolean closePositionValue = getClosePosition();
        if (closePositionValue != null) {
            String closePositionValueAsString = closePositionValue.toString();
            valMap.put("closePosition", closePositionValueAsString);
        }
        String sideValue = getSide();
        if (sideValue != null) {
            String sideValueAsString = sideValue.toString();
            valMap.put("side", sideValueAsString);
        }
        String positionSideValue = getPositionSide();
        if (positionSideValue != null) {
            String positionSideValueAsString = positionSideValue.toString();
            valMap.put("positionSide", positionSideValueAsString);
        }
        String stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            String stopPriceValueAsString = stopPriceValue.toString();
            valMap.put("stopPrice", stopPriceValueAsString);
        }
        String workingTypeValue = getWorkingType();
        if (workingTypeValue != null) {
            String workingTypeValueAsString = workingTypeValue.toString();
            valMap.put("workingType", workingTypeValueAsString);
        }
        Boolean priceProtectValue = getPriceProtect();
        if (priceProtectValue != null) {
            String priceProtectValueAsString = priceProtectValue.toString();
            valMap.put("priceProtect", priceProtectValueAsString);
        }
        String origTypeValue = getOrigType();
        if (origTypeValue != null) {
            String origTypeValueAsString = origTypeValue.toString();
            valMap.put("origType", origTypeValueAsString);
        }
        Long updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            String updateTimeValueAsString = updateTimeValue.toString();
            valMap.put("updateTime", updateTimeValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object orderIdValue = getOrderId();
        if (orderIdValue != null) {
            valMap.put("orderId", orderIdValue);
        }
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object pairValue = getPair();
        if (pairValue != null) {
            valMap.put("pair", pairValue);
        }
        Object statusValue = getStatus();
        if (statusValue != null) {
            valMap.put("status", statusValue);
        }
        Object clientOrderIdValue = getClientOrderId();
        if (clientOrderIdValue != null) {
            valMap.put("clientOrderId", clientOrderIdValue);
        }
        Object priceValue = getPrice();
        if (priceValue != null) {
            valMap.put("price", priceValue);
        }
        Object avgPriceValue = getAvgPrice();
        if (avgPriceValue != null) {
            valMap.put("avgPrice", avgPriceValue);
        }
        Object origQtyValue = getOrigQty();
        if (origQtyValue != null) {
            valMap.put("origQty", origQtyValue);
        }
        Object executedQtyValue = getExecutedQty();
        if (executedQtyValue != null) {
            valMap.put("executedQty", executedQtyValue);
        }
        Object cumQtyValue = getCumQty();
        if (cumQtyValue != null) {
            valMap.put("cumQty", cumQtyValue);
        }
        Object cumBaseValue = getCumBase();
        if (cumBaseValue != null) {
            valMap.put("cumBase", cumBaseValue);
        }
        Object timeInForceValue = getTimeInForce();
        if (timeInForceValue != null) {
            valMap.put("timeInForce", timeInForceValue);
        }
        Object typeValue = getType();
        if (typeValue != null) {
            valMap.put("type", typeValue);
        }
        Object reduceOnlyValue = getReduceOnly();
        if (reduceOnlyValue != null) {
            valMap.put("reduceOnly", reduceOnlyValue);
        }
        Object closePositionValue = getClosePosition();
        if (closePositionValue != null) {
            valMap.put("closePosition", closePositionValue);
        }
        Object sideValue = getSide();
        if (sideValue != null) {
            valMap.put("side", sideValue);
        }
        Object positionSideValue = getPositionSide();
        if (positionSideValue != null) {
            valMap.put("positionSide", positionSideValue);
        }
        Object stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            valMap.put("stopPrice", stopPriceValue);
        }
        Object workingTypeValue = getWorkingType();
        if (workingTypeValue != null) {
            valMap.put("workingType", workingTypeValue);
        }
        Object priceProtectValue = getPriceProtect();
        if (priceProtectValue != null) {
            valMap.put("priceProtect", priceProtectValue);
        }
        Object origTypeValue = getOrigType();
        if (origTypeValue != null) {
            valMap.put("origType", origTypeValue);
        }
        Object updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            valMap.put("updateTime", updateTimeValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderId");
        openapiFields.add("symbol");
        openapiFields.add("pair");
        openapiFields.add("status");
        openapiFields.add("clientOrderId");
        openapiFields.add("price");
        openapiFields.add("avgPrice");
        openapiFields.add("origQty");
        openapiFields.add("executedQty");
        openapiFields.add("cumQty");
        openapiFields.add("cumBase");
        openapiFields.add("timeInForce");
        openapiFields.add("type");
        openapiFields.add("reduceOnly");
        openapiFields.add("closePosition");
        openapiFields.add("side");
        openapiFields.add("positionSide");
        openapiFields.add("stopPrice");
        openapiFields.add("workingType");
        openapiFields.add("priceProtect");
        openapiFields.add("origType");
        openapiFields.add("updateTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to CancelOrderResponseResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CancelOrderResponseResult.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in CancelOrderResponseResult is not found"
                                        + " in the empty JSON string",
                                CancelOrderResponseResult.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CancelOrderResponseResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CancelOrderResponseResult` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("pair") != null && !jsonObj.get("pair").isJsonNull())
                && !jsonObj.get("pair").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pair` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("pair").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("clientOrderId") != null && !jsonObj.get("clientOrderId").isJsonNull())
                && !jsonObj.get("clientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `clientOrderId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("clientOrderId").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("avgPrice") != null && !jsonObj.get("avgPrice").isJsonNull())
                && !jsonObj.get("avgPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `avgPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("avgPrice").toString()));
        }
        if ((jsonObj.get("origQty") != null && !jsonObj.get("origQty").isJsonNull())
                && !jsonObj.get("origQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("origQty").toString()));
        }
        if ((jsonObj.get("executedQty") != null && !jsonObj.get("executedQty").isJsonNull())
                && !jsonObj.get("executedQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedQty").toString()));
        }
        if ((jsonObj.get("cumQty") != null && !jsonObj.get("cumQty").isJsonNull())
                && !jsonObj.get("cumQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cumQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("cumQty").toString()));
        }
        if ((jsonObj.get("cumBase") != null && !jsonObj.get("cumBase").isJsonNull())
                && !jsonObj.get("cumBase").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cumBase` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("cumBase").toString()));
        }
        if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull())
                && !jsonObj.get("timeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull())
                && !jsonObj.get("positionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionSide").toString()));
        }
        if ((jsonObj.get("stopPrice") != null && !jsonObj.get("stopPrice").isJsonNull())
                && !jsonObj.get("stopPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `stopPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("stopPrice").toString()));
        }
        if ((jsonObj.get("workingType") != null && !jsonObj.get("workingType").isJsonNull())
                && !jsonObj.get("workingType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workingType").toString()));
        }
        if ((jsonObj.get("origType") != null && !jsonObj.get("origType").isJsonNull())
                && !jsonObj.get("origType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("origType").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CancelOrderResponseResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'CancelOrderResponseResult' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CancelOrderResponseResult> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(CancelOrderResponseResult.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CancelOrderResponseResult>() {
                        @Override
                        public void write(JsonWriter out, CancelOrderResponseResult value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CancelOrderResponseResult read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CancelOrderResponseResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CancelOrderResponseResult
     * @throws IOException if the JSON string is invalid with respect to CancelOrderResponseResult
     */
    public static CancelOrderResponseResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, CancelOrderResponseResult.class);
    }

    /**
     * Convert an instance of CancelOrderResponseResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
