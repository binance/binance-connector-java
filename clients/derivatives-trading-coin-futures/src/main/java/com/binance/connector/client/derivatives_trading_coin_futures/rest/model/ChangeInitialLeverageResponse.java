/*
 * Binance Derivatives Trading COIN Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.rest.model;

import com.binance.connector.client.derivatives_trading_coin_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** ChangeInitialLeverageResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ChangeInitialLeverageResponse {
    public static final String SERIALIZED_NAME_LEVERAGE = "leverage";

    @SerializedName(SERIALIZED_NAME_LEVERAGE)
    @jakarta.annotation.Nullable
    private Long leverage;

    public static final String SERIALIZED_NAME_MAX_QTY = "maxQty";

    @SerializedName(SERIALIZED_NAME_MAX_QTY)
    @jakarta.annotation.Nullable
    private String maxQty;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public ChangeInitialLeverageResponse() {}

    public ChangeInitialLeverageResponse leverage(@jakarta.annotation.Nullable Long leverage) {
        this.leverage = leverage;
        return this;
    }

    /**
     * Get leverage
     *
     * @return leverage
     */
    @jakarta.annotation.Nullable
    public Long getLeverage() {
        return leverage;
    }

    public void setLeverage(@jakarta.annotation.Nullable Long leverage) {
        this.leverage = leverage;
    }

    public ChangeInitialLeverageResponse maxQty(@jakarta.annotation.Nullable String maxQty) {
        this.maxQty = maxQty;
        return this;
    }

    /**
     * Get maxQty
     *
     * @return maxQty
     */
    @jakarta.annotation.Nullable
    public String getMaxQty() {
        return maxQty;
    }

    public void setMaxQty(@jakarta.annotation.Nullable String maxQty) {
        this.maxQty = maxQty;
    }

    public ChangeInitialLeverageResponse symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChangeInitialLeverageResponse changeInitialLeverageResponse =
                (ChangeInitialLeverageResponse) o;
        return Objects.equals(this.leverage, changeInitialLeverageResponse.leverage)
                && Objects.equals(this.maxQty, changeInitialLeverageResponse.maxQty)
                && Objects.equals(this.symbol, changeInitialLeverageResponse.symbol);
    }

    @Override
    public int hashCode() {
        return Objects.hash(leverage, maxQty, symbol);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ChangeInitialLeverageResponse {\n");
        sb.append("		leverage: ").append(toIndentedString(leverage)).append("\n");
        sb.append("		maxQty: ").append(toIndentedString(maxQty)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object leverageValue = getLeverage();
        String leverageValueAsString = "";
        leverageValueAsString = leverageValue.toString();
        sb.append("leverage=").append(urlEncode(leverageValueAsString)).append("");
        Object maxQtyValue = getMaxQty();
        String maxQtyValueAsString = "";
        maxQtyValueAsString = maxQtyValue.toString();
        sb.append("maxQty=").append(urlEncode(maxQtyValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("leverage");
        openapiFields.add("maxQty");
        openapiFields.add("symbol");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ChangeInitialLeverageResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ChangeInitialLeverageResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ChangeInitialLeverageResponse is not"
                                        + " found in the empty JSON string",
                                ChangeInitialLeverageResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ChangeInitialLeverageResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ChangeInitialLeverageResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("maxQty") != null && !jsonObj.get("maxQty").isJsonNull())
                && !jsonObj.get("maxQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("maxQty").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ChangeInitialLeverageResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ChangeInitialLeverageResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ChangeInitialLeverageResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ChangeInitialLeverageResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ChangeInitialLeverageResponse>() {
                        @Override
                        public void write(JsonWriter out, ChangeInitialLeverageResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ChangeInitialLeverageResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ChangeInitialLeverageResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ChangeInitialLeverageResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     ChangeInitialLeverageResponse
     */
    public static ChangeInitialLeverageResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ChangeInitialLeverageResponse.class);
    }

    /**
     * Convert an instance of ChangeInitialLeverageResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
