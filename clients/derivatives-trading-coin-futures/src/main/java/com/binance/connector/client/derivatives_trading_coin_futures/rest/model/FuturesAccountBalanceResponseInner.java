/*
 * Binance Derivatives Trading COIN Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.rest.model;

import com.binance.connector.client.derivatives_trading_coin_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** FuturesAccountBalanceResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FuturesAccountBalanceResponseInner {
    public static final String SERIALIZED_NAME_ACCOUNT_ALIAS = "accountAlias";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_ALIAS)
    @jakarta.annotation.Nullable
    private String accountAlias;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_BALANCE = "balance";

    @SerializedName(SERIALIZED_NAME_BALANCE)
    @jakarta.annotation.Nullable
    private String balance;

    public static final String SERIALIZED_NAME_WITHDRAW_AVAILABLE = "withdrawAvailable";

    @SerializedName(SERIALIZED_NAME_WITHDRAW_AVAILABLE)
    @jakarta.annotation.Nullable
    private String withdrawAvailable;

    public static final String SERIALIZED_NAME_CROSS_WALLET_BALANCE = "crossWalletBalance";

    @SerializedName(SERIALIZED_NAME_CROSS_WALLET_BALANCE)
    @jakarta.annotation.Nullable
    private String crossWalletBalance;

    public static final String SERIALIZED_NAME_CROSS_UN_PNL = "crossUnPnl";

    @SerializedName(SERIALIZED_NAME_CROSS_UN_PNL)
    @jakarta.annotation.Nullable
    private String crossUnPnl;

    public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";

    @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
    @jakarta.annotation.Nullable
    private String availableBalance;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public FuturesAccountBalanceResponseInner() {}

    public FuturesAccountBalanceResponseInner accountAlias(
            @jakarta.annotation.Nullable String accountAlias) {
        this.accountAlias = accountAlias;
        return this;
    }

    /**
     * Get accountAlias
     *
     * @return accountAlias
     */
    @jakarta.annotation.Nullable
    public String getAccountAlias() {
        return accountAlias;
    }

    public void setAccountAlias(@jakarta.annotation.Nullable String accountAlias) {
        this.accountAlias = accountAlias;
    }

    public FuturesAccountBalanceResponseInner asset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public FuturesAccountBalanceResponseInner balance(@jakarta.annotation.Nullable String balance) {
        this.balance = balance;
        return this;
    }

    /**
     * Get balance
     *
     * @return balance
     */
    @jakarta.annotation.Nullable
    public String getBalance() {
        return balance;
    }

    public void setBalance(@jakarta.annotation.Nullable String balance) {
        this.balance = balance;
    }

    public FuturesAccountBalanceResponseInner withdrawAvailable(
            @jakarta.annotation.Nullable String withdrawAvailable) {
        this.withdrawAvailable = withdrawAvailable;
        return this;
    }

    /**
     * Get withdrawAvailable
     *
     * @return withdrawAvailable
     */
    @jakarta.annotation.Nullable
    public String getWithdrawAvailable() {
        return withdrawAvailable;
    }

    public void setWithdrawAvailable(@jakarta.annotation.Nullable String withdrawAvailable) {
        this.withdrawAvailable = withdrawAvailable;
    }

    public FuturesAccountBalanceResponseInner crossWalletBalance(
            @jakarta.annotation.Nullable String crossWalletBalance) {
        this.crossWalletBalance = crossWalletBalance;
        return this;
    }

    /**
     * Get crossWalletBalance
     *
     * @return crossWalletBalance
     */
    @jakarta.annotation.Nullable
    public String getCrossWalletBalance() {
        return crossWalletBalance;
    }

    public void setCrossWalletBalance(@jakarta.annotation.Nullable String crossWalletBalance) {
        this.crossWalletBalance = crossWalletBalance;
    }

    public FuturesAccountBalanceResponseInner crossUnPnl(
            @jakarta.annotation.Nullable String crossUnPnl) {
        this.crossUnPnl = crossUnPnl;
        return this;
    }

    /**
     * Get crossUnPnl
     *
     * @return crossUnPnl
     */
    @jakarta.annotation.Nullable
    public String getCrossUnPnl() {
        return crossUnPnl;
    }

    public void setCrossUnPnl(@jakarta.annotation.Nullable String crossUnPnl) {
        this.crossUnPnl = crossUnPnl;
    }

    public FuturesAccountBalanceResponseInner availableBalance(
            @jakarta.annotation.Nullable String availableBalance) {
        this.availableBalance = availableBalance;
        return this;
    }

    /**
     * Get availableBalance
     *
     * @return availableBalance
     */
    @jakarta.annotation.Nullable
    public String getAvailableBalance() {
        return availableBalance;
    }

    public void setAvailableBalance(@jakarta.annotation.Nullable String availableBalance) {
        this.availableBalance = availableBalance;
    }

    public FuturesAccountBalanceResponseInner updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FuturesAccountBalanceResponseInner futuresAccountBalanceResponseInner =
                (FuturesAccountBalanceResponseInner) o;
        return Objects.equals(this.accountAlias, futuresAccountBalanceResponseInner.accountAlias)
                && Objects.equals(this.asset, futuresAccountBalanceResponseInner.asset)
                && Objects.equals(this.balance, futuresAccountBalanceResponseInner.balance)
                && Objects.equals(
                        this.withdrawAvailable,
                        futuresAccountBalanceResponseInner.withdrawAvailable)
                && Objects.equals(
                        this.crossWalletBalance,
                        futuresAccountBalanceResponseInner.crossWalletBalance)
                && Objects.equals(this.crossUnPnl, futuresAccountBalanceResponseInner.crossUnPnl)
                && Objects.equals(
                        this.availableBalance, futuresAccountBalanceResponseInner.availableBalance)
                && Objects.equals(this.updateTime, futuresAccountBalanceResponseInner.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                accountAlias,
                asset,
                balance,
                withdrawAvailable,
                crossWalletBalance,
                crossUnPnl,
                availableBalance,
                updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FuturesAccountBalanceResponseInner {\n");
        sb.append("		accountAlias: ").append(toIndentedString(accountAlias)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		balance: ").append(toIndentedString(balance)).append("\n");
        sb.append("		withdrawAvailable: ").append(toIndentedString(withdrawAvailable)).append("\n");
        sb.append("		crossWalletBalance: ")
                .append(toIndentedString(crossWalletBalance))
                .append("\n");
        sb.append("		crossUnPnl: ").append(toIndentedString(crossUnPnl)).append("\n");
        sb.append("		availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object accountAliasValue = getAccountAlias();
        String accountAliasValueAsString = "";
        accountAliasValueAsString = accountAliasValue.toString();
        sb.append("accountAlias=").append(urlEncode(accountAliasValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object balanceValue = getBalance();
        String balanceValueAsString = "";
        balanceValueAsString = balanceValue.toString();
        sb.append("balance=").append(urlEncode(balanceValueAsString)).append("");
        Object withdrawAvailableValue = getWithdrawAvailable();
        String withdrawAvailableValueAsString = "";
        withdrawAvailableValueAsString = withdrawAvailableValue.toString();
        sb.append("withdrawAvailable=")
                .append(urlEncode(withdrawAvailableValueAsString))
                .append("");
        Object crossWalletBalanceValue = getCrossWalletBalance();
        String crossWalletBalanceValueAsString = "";
        crossWalletBalanceValueAsString = crossWalletBalanceValue.toString();
        sb.append("crossWalletBalance=")
                .append(urlEncode(crossWalletBalanceValueAsString))
                .append("");
        Object crossUnPnlValue = getCrossUnPnl();
        String crossUnPnlValueAsString = "";
        crossUnPnlValueAsString = crossUnPnlValue.toString();
        sb.append("crossUnPnl=").append(urlEncode(crossUnPnlValueAsString)).append("");
        Object availableBalanceValue = getAvailableBalance();
        String availableBalanceValueAsString = "";
        availableBalanceValueAsString = availableBalanceValue.toString();
        sb.append("availableBalance=").append(urlEncode(availableBalanceValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("accountAlias");
        openapiFields.add("asset");
        openapiFields.add("balance");
        openapiFields.add("withdrawAvailable");
        openapiFields.add("crossWalletBalance");
        openapiFields.add("crossUnPnl");
        openapiFields.add("availableBalance");
        openapiFields.add("updateTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FuturesAccountBalanceResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FuturesAccountBalanceResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FuturesAccountBalanceResponseInner is"
                                        + " not found in the empty JSON string",
                                FuturesAccountBalanceResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FuturesAccountBalanceResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `FuturesAccountBalanceResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("accountAlias") != null && !jsonObj.get("accountAlias").isJsonNull())
                && !jsonObj.get("accountAlias").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `accountAlias` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("accountAlias").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("balance") != null && !jsonObj.get("balance").isJsonNull())
                && !jsonObj.get("balance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `balance` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("balance").toString()));
        }
        if ((jsonObj.get("withdrawAvailable") != null
                        && !jsonObj.get("withdrawAvailable").isJsonNull())
                && !jsonObj.get("withdrawAvailable").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `withdrawAvailable` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("withdrawAvailable").toString()));
        }
        if ((jsonObj.get("crossWalletBalance") != null
                        && !jsonObj.get("crossWalletBalance").isJsonNull())
                && !jsonObj.get("crossWalletBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossWalletBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("crossWalletBalance").toString()));
        }
        if ((jsonObj.get("crossUnPnl") != null && !jsonObj.get("crossUnPnl").isJsonNull())
                && !jsonObj.get("crossUnPnl").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossUnPnl` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("crossUnPnl").toString()));
        }
        if ((jsonObj.get("availableBalance") != null
                        && !jsonObj.get("availableBalance").isJsonNull())
                && !jsonObj.get("availableBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `availableBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("availableBalance").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FuturesAccountBalanceResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FuturesAccountBalanceResponseInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FuturesAccountBalanceResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(FuturesAccountBalanceResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FuturesAccountBalanceResponseInner>() {
                        @Override
                        public void write(JsonWriter out, FuturesAccountBalanceResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FuturesAccountBalanceResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FuturesAccountBalanceResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FuturesAccountBalanceResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     FuturesAccountBalanceResponseInner
     */
    public static FuturesAccountBalanceResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, FuturesAccountBalanceResponseInner.class);
    }

    /**
     * Convert an instance of FuturesAccountBalanceResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
