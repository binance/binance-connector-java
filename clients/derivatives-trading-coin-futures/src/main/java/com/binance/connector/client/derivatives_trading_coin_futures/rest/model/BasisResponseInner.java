/*
 * Binance Derivatives Trading COIN Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.rest.model;

import com.binance.connector.client.derivatives_trading_coin_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** BasisResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class BasisResponseInner {
    public static final String SERIALIZED_NAME_INDEX_PRICE = "indexPrice";

    @SerializedName(SERIALIZED_NAME_INDEX_PRICE)
    @jakarta.annotation.Nullable
    private String indexPrice;

    public static final String SERIALIZED_NAME_CONTRACT_TYPE = "contractType";

    @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
    @jakarta.annotation.Nullable
    private String contractType;

    public static final String SERIALIZED_NAME_BASIS_RATE = "basisRate";

    @SerializedName(SERIALIZED_NAME_BASIS_RATE)
    @jakarta.annotation.Nullable
    private String basisRate;

    public static final String SERIALIZED_NAME_FUTURES_PRICE = "futuresPrice";

    @SerializedName(SERIALIZED_NAME_FUTURES_PRICE)
    @jakarta.annotation.Nullable
    private String futuresPrice;

    public static final String SERIALIZED_NAME_ANNUALIZED_BASIS_RATE = "annualizedBasisRate";

    @SerializedName(SERIALIZED_NAME_ANNUALIZED_BASIS_RATE)
    @jakarta.annotation.Nullable
    private String annualizedBasisRate;

    public static final String SERIALIZED_NAME_BASIS = "basis";

    @SerializedName(SERIALIZED_NAME_BASIS)
    @jakarta.annotation.Nullable
    private String basis;

    public static final String SERIALIZED_NAME_PAIR = "pair";

    @SerializedName(SERIALIZED_NAME_PAIR)
    @jakarta.annotation.Nullable
    private String pair;

    public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";

    @SerializedName(SERIALIZED_NAME_TIMESTAMP)
    @jakarta.annotation.Nullable
    private Long timestamp;

    public BasisResponseInner() {}

    public BasisResponseInner indexPrice(@jakarta.annotation.Nullable String indexPrice) {
        this.indexPrice = indexPrice;
        return this;
    }

    /**
     * Get indexPrice
     *
     * @return indexPrice
     */
    @jakarta.annotation.Nullable
    public String getIndexPrice() {
        return indexPrice;
    }

    public void setIndexPrice(@jakarta.annotation.Nullable String indexPrice) {
        this.indexPrice = indexPrice;
    }

    public BasisResponseInner contractType(@jakarta.annotation.Nullable String contractType) {
        this.contractType = contractType;
        return this;
    }

    /**
     * Get contractType
     *
     * @return contractType
     */
    @jakarta.annotation.Nullable
    public String getContractType() {
        return contractType;
    }

    public void setContractType(@jakarta.annotation.Nullable String contractType) {
        this.contractType = contractType;
    }

    public BasisResponseInner basisRate(@jakarta.annotation.Nullable String basisRate) {
        this.basisRate = basisRate;
        return this;
    }

    /**
     * Get basisRate
     *
     * @return basisRate
     */
    @jakarta.annotation.Nullable
    public String getBasisRate() {
        return basisRate;
    }

    public void setBasisRate(@jakarta.annotation.Nullable String basisRate) {
        this.basisRate = basisRate;
    }

    public BasisResponseInner futuresPrice(@jakarta.annotation.Nullable String futuresPrice) {
        this.futuresPrice = futuresPrice;
        return this;
    }

    /**
     * Get futuresPrice
     *
     * @return futuresPrice
     */
    @jakarta.annotation.Nullable
    public String getFuturesPrice() {
        return futuresPrice;
    }

    public void setFuturesPrice(@jakarta.annotation.Nullable String futuresPrice) {
        this.futuresPrice = futuresPrice;
    }

    public BasisResponseInner annualizedBasisRate(
            @jakarta.annotation.Nullable String annualizedBasisRate) {
        this.annualizedBasisRate = annualizedBasisRate;
        return this;
    }

    /**
     * Get annualizedBasisRate
     *
     * @return annualizedBasisRate
     */
    @jakarta.annotation.Nullable
    public String getAnnualizedBasisRate() {
        return annualizedBasisRate;
    }

    public void setAnnualizedBasisRate(@jakarta.annotation.Nullable String annualizedBasisRate) {
        this.annualizedBasisRate = annualizedBasisRate;
    }

    public BasisResponseInner basis(@jakarta.annotation.Nullable String basis) {
        this.basis = basis;
        return this;
    }

    /**
     * Get basis
     *
     * @return basis
     */
    @jakarta.annotation.Nullable
    public String getBasis() {
        return basis;
    }

    public void setBasis(@jakarta.annotation.Nullable String basis) {
        this.basis = basis;
    }

    public BasisResponseInner pair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
        return this;
    }

    /**
     * Get pair
     *
     * @return pair
     */
    @jakarta.annotation.Nullable
    public String getPair() {
        return pair;
    }

    public void setPair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
    }

    public BasisResponseInner timestamp(@jakarta.annotation.Nullable Long timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get timestamp
     *
     * @return timestamp
     */
    @jakarta.annotation.Nullable
    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(@jakarta.annotation.Nullable Long timestamp) {
        this.timestamp = timestamp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BasisResponseInner basisResponseInner = (BasisResponseInner) o;
        return Objects.equals(this.indexPrice, basisResponseInner.indexPrice)
                && Objects.equals(this.contractType, basisResponseInner.contractType)
                && Objects.equals(this.basisRate, basisResponseInner.basisRate)
                && Objects.equals(this.futuresPrice, basisResponseInner.futuresPrice)
                && Objects.equals(this.annualizedBasisRate, basisResponseInner.annualizedBasisRate)
                && Objects.equals(this.basis, basisResponseInner.basis)
                && Objects.equals(this.pair, basisResponseInner.pair)
                && Objects.equals(this.timestamp, basisResponseInner.timestamp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                indexPrice,
                contractType,
                basisRate,
                futuresPrice,
                annualizedBasisRate,
                basis,
                pair,
                timestamp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class BasisResponseInner {\n");
        sb.append("		indexPrice: ").append(toIndentedString(indexPrice)).append("\n");
        sb.append("		contractType: ").append(toIndentedString(contractType)).append("\n");
        sb.append("		basisRate: ").append(toIndentedString(basisRate)).append("\n");
        sb.append("		futuresPrice: ").append(toIndentedString(futuresPrice)).append("\n");
        sb.append("		annualizedBasisRate: ")
                .append(toIndentedString(annualizedBasisRate))
                .append("\n");
        sb.append("		basis: ").append(toIndentedString(basis)).append("\n");
        sb.append("		pair: ").append(toIndentedString(pair)).append("\n");
        sb.append("		timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object indexPriceValue = getIndexPrice();
        String indexPriceValueAsString = "";
        indexPriceValueAsString = indexPriceValue.toString();
        sb.append("indexPrice=").append(urlEncode(indexPriceValueAsString)).append("");
        Object contractTypeValue = getContractType();
        String contractTypeValueAsString = "";
        contractTypeValueAsString = contractTypeValue.toString();
        sb.append("contractType=").append(urlEncode(contractTypeValueAsString)).append("");
        Object basisRateValue = getBasisRate();
        String basisRateValueAsString = "";
        basisRateValueAsString = basisRateValue.toString();
        sb.append("basisRate=").append(urlEncode(basisRateValueAsString)).append("");
        Object futuresPriceValue = getFuturesPrice();
        String futuresPriceValueAsString = "";
        futuresPriceValueAsString = futuresPriceValue.toString();
        sb.append("futuresPrice=").append(urlEncode(futuresPriceValueAsString)).append("");
        Object annualizedBasisRateValue = getAnnualizedBasisRate();
        String annualizedBasisRateValueAsString = "";
        annualizedBasisRateValueAsString = annualizedBasisRateValue.toString();
        sb.append("annualizedBasisRate=")
                .append(urlEncode(annualizedBasisRateValueAsString))
                .append("");
        Object basisValue = getBasis();
        String basisValueAsString = "";
        basisValueAsString = basisValue.toString();
        sb.append("basis=").append(urlEncode(basisValueAsString)).append("");
        Object pairValue = getPair();
        String pairValueAsString = "";
        pairValueAsString = pairValue.toString();
        sb.append("pair=").append(urlEncode(pairValueAsString)).append("");
        Object timestampValue = getTimestamp();
        String timestampValueAsString = "";
        timestampValueAsString = timestampValue.toString();
        sb.append("timestamp=").append(urlEncode(timestampValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("indexPrice");
        openapiFields.add("contractType");
        openapiFields.add("basisRate");
        openapiFields.add("futuresPrice");
        openapiFields.add("annualizedBasisRate");
        openapiFields.add("basis");
        openapiFields.add("pair");
        openapiFields.add("timestamp");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to BasisResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!BasisResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in BasisResponseInner is not found in the"
                                        + " empty JSON string",
                                BasisResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!BasisResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `BasisResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("indexPrice") != null && !jsonObj.get("indexPrice").isJsonNull())
                && !jsonObj.get("indexPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `indexPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("indexPrice").toString()));
        }
        if ((jsonObj.get("contractType") != null && !jsonObj.get("contractType").isJsonNull())
                && !jsonObj.get("contractType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `contractType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("contractType").toString()));
        }
        if ((jsonObj.get("basisRate") != null && !jsonObj.get("basisRate").isJsonNull())
                && !jsonObj.get("basisRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `basisRate` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("basisRate").toString()));
        }
        if ((jsonObj.get("futuresPrice") != null && !jsonObj.get("futuresPrice").isJsonNull())
                && !jsonObj.get("futuresPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `futuresPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("futuresPrice").toString()));
        }
        if ((jsonObj.get("annualizedBasisRate") != null
                        && !jsonObj.get("annualizedBasisRate").isJsonNull())
                && !jsonObj.get("annualizedBasisRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `annualizedBasisRate` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("annualizedBasisRate").toString()));
        }
        if ((jsonObj.get("basis") != null && !jsonObj.get("basis").isJsonNull())
                && !jsonObj.get("basis").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `basis` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("basis").toString()));
        }
        if ((jsonObj.get("pair") != null && !jsonObj.get("pair").isJsonNull())
                && !jsonObj.get("pair").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pair` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("pair").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!BasisResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'BasisResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<BasisResponseInner> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(BasisResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<BasisResponseInner>() {
                        @Override
                        public void write(JsonWriter out, BasisResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public BasisResponseInner read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of BasisResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of BasisResponseInner
     * @throws IOException if the JSON string is invalid with respect to BasisResponseInner
     */
    public static BasisResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, BasisResponseInner.class);
    }

    /**
     * Convert an instance of BasisResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
