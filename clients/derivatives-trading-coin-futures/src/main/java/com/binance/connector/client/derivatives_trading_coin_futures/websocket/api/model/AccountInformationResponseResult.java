/*
 * Binance Derivatives Trading COIN Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading COIN Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_coin_futures.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AccountInformationResponseResult */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountInformationResponseResult extends BaseDTO {
    public static final String SERIALIZED_NAME_FEE_TIER = "feeTier";

    @SerializedName(SERIALIZED_NAME_FEE_TIER)
    @jakarta.annotation.Nullable
    private Long feeTier;

    public static final String SERIALIZED_NAME_CAN_TRADE = "canTrade";

    @SerializedName(SERIALIZED_NAME_CAN_TRADE)
    @jakarta.annotation.Nullable
    private Boolean canTrade;

    public static final String SERIALIZED_NAME_CAN_DEPOSIT = "canDeposit";

    @SerializedName(SERIALIZED_NAME_CAN_DEPOSIT)
    @jakarta.annotation.Nullable
    private Boolean canDeposit;

    public static final String SERIALIZED_NAME_CAN_WITHDRAW = "canWithdraw";

    @SerializedName(SERIALIZED_NAME_CAN_WITHDRAW)
    @jakarta.annotation.Nullable
    private Boolean canWithdraw;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public static final String SERIALIZED_NAME_ASSETS = "assets";

    @SerializedName(SERIALIZED_NAME_ASSETS)
    @jakarta.annotation.Nullable
    private List<@Valid AccountInformationResponseResultAssetsInner> assets;

    public static final String SERIALIZED_NAME_POSITIONS = "positions";

    @SerializedName(SERIALIZED_NAME_POSITIONS)
    @jakarta.annotation.Nullable
    private List<@Valid AccountInformationResponseResultPositionsInner> positions;

    public AccountInformationResponseResult() {}

    public AccountInformationResponseResult feeTier(@jakarta.annotation.Nullable Long feeTier) {
        this.feeTier = feeTier;
        return this;
    }

    /**
     * Get feeTier
     *
     * @return feeTier
     */
    @jakarta.annotation.Nullable
    public Long getFeeTier() {
        return feeTier;
    }

    public void setFeeTier(@jakarta.annotation.Nullable Long feeTier) {
        this.feeTier = feeTier;
    }

    public AccountInformationResponseResult canTrade(
            @jakarta.annotation.Nullable Boolean canTrade) {
        this.canTrade = canTrade;
        return this;
    }

    /**
     * Get canTrade
     *
     * @return canTrade
     */
    @jakarta.annotation.Nullable
    public Boolean getCanTrade() {
        return canTrade;
    }

    public void setCanTrade(@jakarta.annotation.Nullable Boolean canTrade) {
        this.canTrade = canTrade;
    }

    public AccountInformationResponseResult canDeposit(
            @jakarta.annotation.Nullable Boolean canDeposit) {
        this.canDeposit = canDeposit;
        return this;
    }

    /**
     * Get canDeposit
     *
     * @return canDeposit
     */
    @jakarta.annotation.Nullable
    public Boolean getCanDeposit() {
        return canDeposit;
    }

    public void setCanDeposit(@jakarta.annotation.Nullable Boolean canDeposit) {
        this.canDeposit = canDeposit;
    }

    public AccountInformationResponseResult canWithdraw(
            @jakarta.annotation.Nullable Boolean canWithdraw) {
        this.canWithdraw = canWithdraw;
        return this;
    }

    /**
     * Get canWithdraw
     *
     * @return canWithdraw
     */
    @jakarta.annotation.Nullable
    public Boolean getCanWithdraw() {
        return canWithdraw;
    }

    public void setCanWithdraw(@jakarta.annotation.Nullable Boolean canWithdraw) {
        this.canWithdraw = canWithdraw;
    }

    public AccountInformationResponseResult updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    public AccountInformationResponseResult assets(
            @jakarta.annotation.Nullable
                    List<@Valid AccountInformationResponseResultAssetsInner> assets) {
        this.assets = assets;
        return this;
    }

    public AccountInformationResponseResult addAssetsItem(
            AccountInformationResponseResultAssetsInner assetsItem) {
        if (this.assets == null) {
            this.assets = new ArrayList<>();
        }
        this.assets.add(assetsItem);
        return this;
    }

    /**
     * Get assets
     *
     * @return assets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid AccountInformationResponseResultAssetsInner> getAssets() {
        return assets;
    }

    public void setAssets(
            @jakarta.annotation.Nullable
                    List<@Valid AccountInformationResponseResultAssetsInner> assets) {
        this.assets = assets;
    }

    public AccountInformationResponseResult positions(
            @jakarta.annotation.Nullable
                    List<@Valid AccountInformationResponseResultPositionsInner> positions) {
        this.positions = positions;
        return this;
    }

    public AccountInformationResponseResult addPositionsItem(
            AccountInformationResponseResultPositionsInner positionsItem) {
        if (this.positions == null) {
            this.positions = new ArrayList<>();
        }
        this.positions.add(positionsItem);
        return this;
    }

    /**
     * Get positions
     *
     * @return positions
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid AccountInformationResponseResultPositionsInner> getPositions() {
        return positions;
    }

    public void setPositions(
            @jakarta.annotation.Nullable
                    List<@Valid AccountInformationResponseResultPositionsInner> positions) {
        this.positions = positions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountInformationResponseResult accountInformationResponseResult =
                (AccountInformationResponseResult) o;
        return Objects.equals(this.feeTier, accountInformationResponseResult.feeTier)
                && Objects.equals(this.canTrade, accountInformationResponseResult.canTrade)
                && Objects.equals(this.canDeposit, accountInformationResponseResult.canDeposit)
                && Objects.equals(this.canWithdraw, accountInformationResponseResult.canWithdraw)
                && Objects.equals(this.updateTime, accountInformationResponseResult.updateTime)
                && Objects.equals(this.assets, accountInformationResponseResult.assets)
                && Objects.equals(this.positions, accountInformationResponseResult.positions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                feeTier, canTrade, canDeposit, canWithdraw, updateTime, assets, positions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountInformationResponseResult {\n");
        sb.append("		feeTier: ").append(toIndentedString(feeTier)).append("\n");
        sb.append("		canTrade: ").append(toIndentedString(canTrade)).append("\n");
        sb.append("		canDeposit: ").append(toIndentedString(canDeposit)).append("\n");
        sb.append("		canWithdraw: ").append(toIndentedString(canWithdraw)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("		assets: ").append(toIndentedString(assets)).append("\n");
        sb.append("		positions: ").append(toIndentedString(positions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long feeTierValue = getFeeTier();
        if (feeTierValue != null) {
            String feeTierValueAsString = feeTierValue.toString();
            valMap.put("feeTier", feeTierValueAsString);
        }
        Boolean canTradeValue = getCanTrade();
        if (canTradeValue != null) {
            String canTradeValueAsString = canTradeValue.toString();
            valMap.put("canTrade", canTradeValueAsString);
        }
        Boolean canDepositValue = getCanDeposit();
        if (canDepositValue != null) {
            String canDepositValueAsString = canDepositValue.toString();
            valMap.put("canDeposit", canDepositValueAsString);
        }
        Boolean canWithdrawValue = getCanWithdraw();
        if (canWithdrawValue != null) {
            String canWithdrawValueAsString = canWithdrawValue.toString();
            valMap.put("canWithdraw", canWithdrawValueAsString);
        }
        Long updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            String updateTimeValueAsString = updateTimeValue.toString();
            valMap.put("updateTime", updateTimeValueAsString);
        }
        List<@Valid AccountInformationResponseResultAssetsInner> assetsValue = getAssets();
        if (assetsValue != null) {
            String assetsValueAsString = JSON.getGson().toJson(assetsValue);
            valMap.put("assets", assetsValueAsString);
        }
        List<@Valid AccountInformationResponseResultPositionsInner> positionsValue = getPositions();
        if (positionsValue != null) {
            String positionsValueAsString = JSON.getGson().toJson(positionsValue);
            valMap.put("positions", positionsValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object feeTierValue = getFeeTier();
        if (feeTierValue != null) {
            valMap.put("feeTier", feeTierValue);
        }
        Object canTradeValue = getCanTrade();
        if (canTradeValue != null) {
            valMap.put("canTrade", canTradeValue);
        }
        Object canDepositValue = getCanDeposit();
        if (canDepositValue != null) {
            valMap.put("canDeposit", canDepositValue);
        }
        Object canWithdrawValue = getCanWithdraw();
        if (canWithdrawValue != null) {
            valMap.put("canWithdraw", canWithdrawValue);
        }
        Object updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            valMap.put("updateTime", updateTimeValue);
        }
        Object assetsValue = getAssets();
        if (assetsValue != null) {
            valMap.put("assets", assetsValue);
        }
        Object positionsValue = getPositions();
        if (positionsValue != null) {
            valMap.put("positions", positionsValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("feeTier");
        openapiFields.add("canTrade");
        openapiFields.add("canDeposit");
        openapiFields.add("canWithdraw");
        openapiFields.add("updateTime");
        openapiFields.add("assets");
        openapiFields.add("positions");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AccountInformationResponseResult
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountInformationResponseResult.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountInformationResponseResult is"
                                        + " not found in the empty JSON string",
                                AccountInformationResponseResult.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountInformationResponseResult.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AccountInformationResponseResult` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
            JsonArray jsonArrayassets = jsonObj.getAsJsonArray("assets");
            if (jsonArrayassets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("assets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `assets` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("assets").toString()));
                }

                // validate the optional field `assets` (array)
                for (int i = 0; i < jsonArrayassets.size(); i++) {
                    AccountInformationResponseResultAssetsInner.validateJsonElement(
                            jsonArrayassets.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("positions") != null && !jsonObj.get("positions").isJsonNull()) {
            JsonArray jsonArraypositions = jsonObj.getAsJsonArray("positions");
            if (jsonArraypositions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("positions").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `positions` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("positions").toString()));
                }

                // validate the optional field `positions` (array)
                for (int i = 0; i < jsonArraypositions.size(); i++) {
                    AccountInformationResponseResultPositionsInner.validateJsonElement(
                            jsonArraypositions.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountInformationResponseResult.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountInformationResponseResult' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountInformationResponseResult> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AccountInformationResponseResult.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountInformationResponseResult>() {
                        @Override
                        public void write(JsonWriter out, AccountInformationResponseResult value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountInformationResponseResult read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountInformationResponseResult given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountInformationResponseResult
     * @throws IOException if the JSON string is invalid with respect to
     *     AccountInformationResponseResult
     */
    public static AccountInformationResponseResult fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountInformationResponseResult.class);
    }

    /**
     * Convert an instance of AccountInformationResponseResult to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
