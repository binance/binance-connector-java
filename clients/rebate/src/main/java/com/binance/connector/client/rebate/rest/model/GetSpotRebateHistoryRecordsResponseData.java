/*
 * Binance Rebate REST API
 * OpenAPI Specification for the Binance Rebate REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.rebate.rest.model;

import com.binance.connector.client.rebate.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetSpotRebateHistoryRecordsResponseData */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetSpotRebateHistoryRecordsResponseData {
    public static final String SERIALIZED_NAME_PAGE = "page";

    @SerializedName(SERIALIZED_NAME_PAGE)
    @jakarta.annotation.Nullable
    private Long page;

    public static final String SERIALIZED_NAME_TOTAL_RECORDS = "totalRecords";

    @SerializedName(SERIALIZED_NAME_TOTAL_RECORDS)
    @jakarta.annotation.Nullable
    private Long totalRecords;

    public static final String SERIALIZED_NAME_TOTAL_PAGE_NUM = "totalPageNum";

    @SerializedName(SERIALIZED_NAME_TOTAL_PAGE_NUM)
    @jakarta.annotation.Nullable
    private Long totalPageNum;

    public static final String SERIALIZED_NAME_DATA = "data";

    @SerializedName(SERIALIZED_NAME_DATA)
    @jakarta.annotation.Nullable
    private List<@Valid GetSpotRebateHistoryRecordsResponseDataDataInner> data;

    public GetSpotRebateHistoryRecordsResponseData() {}

    public GetSpotRebateHistoryRecordsResponseData page(@jakarta.annotation.Nullable Long page) {
        this.page = page;
        return this;
    }

    /**
     * Get page
     *
     * @return page
     */
    @jakarta.annotation.Nullable
    public Long getPage() {
        return page;
    }

    public void setPage(@jakarta.annotation.Nullable Long page) {
        this.page = page;
    }

    public GetSpotRebateHistoryRecordsResponseData totalRecords(
            @jakarta.annotation.Nullable Long totalRecords) {
        this.totalRecords = totalRecords;
        return this;
    }

    /**
     * Get totalRecords
     *
     * @return totalRecords
     */
    @jakarta.annotation.Nullable
    public Long getTotalRecords() {
        return totalRecords;
    }

    public void setTotalRecords(@jakarta.annotation.Nullable Long totalRecords) {
        this.totalRecords = totalRecords;
    }

    public GetSpotRebateHistoryRecordsResponseData totalPageNum(
            @jakarta.annotation.Nullable Long totalPageNum) {
        this.totalPageNum = totalPageNum;
        return this;
    }

    /**
     * Get totalPageNum
     *
     * @return totalPageNum
     */
    @jakarta.annotation.Nullable
    public Long getTotalPageNum() {
        return totalPageNum;
    }

    public void setTotalPageNum(@jakarta.annotation.Nullable Long totalPageNum) {
        this.totalPageNum = totalPageNum;
    }

    public GetSpotRebateHistoryRecordsResponseData data(
            @jakarta.annotation.Nullable
                    List<@Valid GetSpotRebateHistoryRecordsResponseDataDataInner> data) {
        this.data = data;
        return this;
    }

    public GetSpotRebateHistoryRecordsResponseData addDataItem(
            GetSpotRebateHistoryRecordsResponseDataDataInner dataItem) {
        if (this.data == null) {
            this.data = new ArrayList<>();
        }
        this.data.add(dataItem);
        return this;
    }

    /**
     * Get data
     *
     * @return data
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid GetSpotRebateHistoryRecordsResponseDataDataInner> getData() {
        return data;
    }

    public void setData(
            @jakarta.annotation.Nullable
                    List<@Valid GetSpotRebateHistoryRecordsResponseDataDataInner> data) {
        this.data = data;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSpotRebateHistoryRecordsResponseData getSpotRebateHistoryRecordsResponseData =
                (GetSpotRebateHistoryRecordsResponseData) o;
        return Objects.equals(this.page, getSpotRebateHistoryRecordsResponseData.page)
                && Objects.equals(
                        this.totalRecords, getSpotRebateHistoryRecordsResponseData.totalRecords)
                && Objects.equals(
                        this.totalPageNum, getSpotRebateHistoryRecordsResponseData.totalPageNum)
                && Objects.equals(this.data, getSpotRebateHistoryRecordsResponseData.data);
    }

    @Override
    public int hashCode() {
        return Objects.hash(page, totalRecords, totalPageNum, data);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetSpotRebateHistoryRecordsResponseData {\n");
        sb.append("		page: ").append(toIndentedString(page)).append("\n");
        sb.append("		totalRecords: ").append(toIndentedString(totalRecords)).append("\n");
        sb.append("		totalPageNum: ").append(toIndentedString(totalPageNum)).append("\n");
        sb.append("		data: ").append(toIndentedString(data)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object pageValue = getPage();
        String pageValueAsString = "";
        pageValueAsString = pageValue.toString();
        sb.append("page=").append(urlEncode(pageValueAsString)).append("");
        Object totalRecordsValue = getTotalRecords();
        String totalRecordsValueAsString = "";
        totalRecordsValueAsString = totalRecordsValue.toString();
        sb.append("totalRecords=").append(urlEncode(totalRecordsValueAsString)).append("");
        Object totalPageNumValue = getTotalPageNum();
        String totalPageNumValueAsString = "";
        totalPageNumValueAsString = totalPageNumValue.toString();
        sb.append("totalPageNum=").append(urlEncode(totalPageNumValueAsString)).append("");
        Object dataValue = getData();
        String dataValueAsString = "";
        dataValueAsString =
                (String)
                        ((Collection) dataValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("data=").append(urlEncode(dataValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("page");
        openapiFields.add("totalRecords");
        openapiFields.add("totalPageNum");
        openapiFields.add("data");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetSpotRebateHistoryRecordsResponseData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetSpotRebateHistoryRecordsResponseData.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetSpotRebateHistoryRecordsResponseData is not found in the"
                                    + " empty JSON string",
                                GetSpotRebateHistoryRecordsResponseData.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetSpotRebateHistoryRecordsResponseData.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetSpotRebateHistoryRecordsResponseData` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull()) {
            JsonArray jsonArraydata = jsonObj.getAsJsonArray("data");
            if (jsonArraydata != null) {
                // ensure the json data is an array
                if (!jsonObj.get("data").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `data` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("data").toString()));
                }

                // validate the optional field `data` (array)
                for (int i = 0; i < jsonArraydata.size(); i++) {
                    GetSpotRebateHistoryRecordsResponseDataDataInner.validateJsonElement(
                            jsonArraydata.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetSpotRebateHistoryRecordsResponseData.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'GetSpotRebateHistoryRecordsResponseData'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetSpotRebateHistoryRecordsResponseData> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetSpotRebateHistoryRecordsResponseData.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetSpotRebateHistoryRecordsResponseData>() {
                        @Override
                        public void write(
                                JsonWriter out, GetSpotRebateHistoryRecordsResponseData value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetSpotRebateHistoryRecordsResponseData read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetSpotRebateHistoryRecordsResponseData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetSpotRebateHistoryRecordsResponseData
     * @throws IOException if the JSON string is invalid with respect to
     *     GetSpotRebateHistoryRecordsResponseData
     */
    public static GetSpotRebateHistoryRecordsResponseData fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetSpotRebateHistoryRecordsResponseData.class);
    }

    /**
     * Convert an instance of GetSpotRebateHistoryRecordsResponseData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
