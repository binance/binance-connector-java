/*
 * Binance NFT REST API
 * OpenAPI Specification for the Binance NFT REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.nft.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.nft.rest.model.GetNFTAssetResponse;
import com.binance.connector.client.nft.rest.model.GetNFTDepositHistoryResponse;
import com.binance.connector.client.nft.rest.model.GetNFTTransactionHistoryResponse;
import com.binance.connector.client.nft.rest.model.GetNFTWithdrawHistoryResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for NftApi */
public class NftApiTest {

    private NftApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new NftApi(apiClientSpy);
    }

    /**
     * Get NFT Asset(USER_DATA)
     *
     * <p>Get NFT Asset Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNFTAssetTest() throws ApiException, CryptoException {
        Long limit = 50L;
        Long page = 1L;
        Long recvWindow = 5000L;
        ApiResponse<GetNFTAssetResponse> response = api.getNFTAsset(limit, page, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "limit=50&page=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "5111b91bf27f3938e85071b5d76e42dc08a8c10ea7c9201b0236b1f3cc50a948",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/nft/user/getAsset", actualRequest.url().encodedPath());
    }

    /**
     * Get NFT Deposit History(USER_DATA)
     *
     * <p>et NFT Deposit History * The max interval between startTime and endTime is 90 days. * If
     * startTime and endTime are not sent, the recent 7 days&#39; data will be returned. Weight:
     * 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNFTDepositHistoryTest() throws ApiException, CryptoException {
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long limit = 50L;
        Long page = 1L;
        Long recvWindow = 5000L;
        ApiResponse<GetNFTDepositHistoryResponse> response =
                api.getNFTDepositHistory(startTime, endTime, limit, page, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "startTime=1623319461670&endTime=1641782889000&limit=50&page=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "a4d596d527181ed42d35b1ac58fcc2e9ccef2cc02eb1391766771b74ad107cad",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/nft/history/deposit", actualRequest.url().encodedPath());
    }

    /**
     * Get NFT Transaction History(USER_DATA)
     *
     * <p>Get NFT Transaction History * The max interval between startTime and endTime is 90 days. *
     * If startTime and endTime are not sent, the recent 7 days&#39; data will be returned. Weight:
     * 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNFTTransactionHistoryTest() throws ApiException, CryptoException {
        Long orderType = 0L;
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long limit = 50L;
        Long page = 1L;
        Long recvWindow = 5000L;
        ApiResponse<GetNFTTransactionHistoryResponse> response =
                api.getNFTTransactionHistory(
                        orderType, startTime, endTime, limit, page, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "orderType=0&startTime=1623319461670&endTime=1641782889000&limit=50&page=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "fc895dc30c73da0e233617fe27ea2b42147507e942ff2c038db7188764459721",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/nft/history/transactions", actualRequest.url().encodedPath());
    }

    /**
     * Get NFT Withdraw History(USER_DATA)
     *
     * <p>Get NFT Withdraw History * The max interval between startTime and endTime is 90 days. * If
     * startTime and endTime are not sent, the recent 7 days&#39; data will be returned. Weight:
     * 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNFTWithdrawHistoryTest() throws ApiException, CryptoException {
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long limit = 50L;
        Long page = 1L;
        Long recvWindow = 5000L;
        ApiResponse<GetNFTWithdrawHistoryResponse> response =
                api.getNFTWithdrawHistory(startTime, endTime, limit, page, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "startTime=1623319461670&endTime=1641782889000&limit=50&page=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "a4d596d527181ed42d35b1ac58fcc2e9ccef2cc02eb1391766771b74ad107cad",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/nft/history/withdraw", actualRequest.url().encodedPath());
    }
}
