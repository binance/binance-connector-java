/*
 * Binance NFT REST API
 * OpenAPI Specification for the Binance NFT REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.nft.rest.model;

import com.binance.connector.client.nft.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetNFTTransactionHistoryResponseListInnerTokensInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetNFTTransactionHistoryResponseListInnerTokensInner {
    public static final String SERIALIZED_NAME_NETWORK = "network";

    @SerializedName(SERIALIZED_NAME_NETWORK)
    @jakarta.annotation.Nullable
    private String network;

    public static final String SERIALIZED_NAME_TOKEN_ID = "tokenId";

    @SerializedName(SERIALIZED_NAME_TOKEN_ID)
    @jakarta.annotation.Nullable
    private String tokenId;

    public static final String SERIALIZED_NAME_CONTRACT_ADDRESS = "contractAddress";

    @SerializedName(SERIALIZED_NAME_CONTRACT_ADDRESS)
    @jakarta.annotation.Nullable
    private String contractAddress;

    public GetNFTTransactionHistoryResponseListInnerTokensInner() {}

    public GetNFTTransactionHistoryResponseListInnerTokensInner network(
            @jakarta.annotation.Nullable String network) {
        this.network = network;
        return this;
    }

    /**
     * Get network
     *
     * @return network
     */
    @jakarta.annotation.Nullable
    public String getNetwork() {
        return network;
    }

    public void setNetwork(@jakarta.annotation.Nullable String network) {
        this.network = network;
    }

    public GetNFTTransactionHistoryResponseListInnerTokensInner tokenId(
            @jakarta.annotation.Nullable String tokenId) {
        this.tokenId = tokenId;
        return this;
    }

    /**
     * Get tokenId
     *
     * @return tokenId
     */
    @jakarta.annotation.Nullable
    public String getTokenId() {
        return tokenId;
    }

    public void setTokenId(@jakarta.annotation.Nullable String tokenId) {
        this.tokenId = tokenId;
    }

    public GetNFTTransactionHistoryResponseListInnerTokensInner contractAddress(
            @jakarta.annotation.Nullable String contractAddress) {
        this.contractAddress = contractAddress;
        return this;
    }

    /**
     * Get contractAddress
     *
     * @return contractAddress
     */
    @jakarta.annotation.Nullable
    public String getContractAddress() {
        return contractAddress;
    }

    public void setContractAddress(@jakarta.annotation.Nullable String contractAddress) {
        this.contractAddress = contractAddress;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetNFTTransactionHistoryResponseListInnerTokensInner
                getNFTTransactionHistoryResponseListInnerTokensInner =
                        (GetNFTTransactionHistoryResponseListInnerTokensInner) o;
        return Objects.equals(
                        this.network, getNFTTransactionHistoryResponseListInnerTokensInner.network)
                && Objects.equals(
                        this.tokenId, getNFTTransactionHistoryResponseListInnerTokensInner.tokenId)
                && Objects.equals(
                        this.contractAddress,
                        getNFTTransactionHistoryResponseListInnerTokensInner.contractAddress);
    }

    @Override
    public int hashCode() {
        return Objects.hash(network, tokenId, contractAddress);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetNFTTransactionHistoryResponseListInnerTokensInner {\n");
        sb.append("		network: ").append(toIndentedString(network)).append("\n");
        sb.append("		tokenId: ").append(toIndentedString(tokenId)).append("\n");
        sb.append("		contractAddress: ").append(toIndentedString(contractAddress)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object networkValue = getNetwork();
        String networkValueAsString = "";
        networkValueAsString = networkValue.toString();
        sb.append("network=").append(urlEncode(networkValueAsString)).append("");
        Object tokenIdValue = getTokenId();
        String tokenIdValueAsString = "";
        tokenIdValueAsString = tokenIdValue.toString();
        sb.append("tokenId=").append(urlEncode(tokenIdValueAsString)).append("");
        Object contractAddressValue = getContractAddress();
        String contractAddressValueAsString = "";
        contractAddressValueAsString = contractAddressValue.toString();
        sb.append("contractAddress=").append(urlEncode(contractAddressValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("network");
        openapiFields.add("tokenId");
        openapiFields.add("contractAddress");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetNFTTransactionHistoryResponseListInnerTokensInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetNFTTransactionHistoryResponseListInnerTokensInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetNFTTransactionHistoryResponseListInnerTokensInner is not"
                                    + " found in the empty JSON string",
                                GetNFTTransactionHistoryResponseListInnerTokensInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetNFTTransactionHistoryResponseListInnerTokensInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetNFTTransactionHistoryResponseListInnerTokensInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull())
                && !jsonObj.get("network").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `network` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("network").toString()));
        }
        if ((jsonObj.get("tokenId") != null && !jsonObj.get("tokenId").isJsonNull())
                && !jsonObj.get("tokenId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `tokenId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("tokenId").toString()));
        }
        if ((jsonObj.get("contractAddress") != null && !jsonObj.get("contractAddress").isJsonNull())
                && !jsonObj.get("contractAddress").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `contractAddress` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("contractAddress").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetNFTTransactionHistoryResponseListInnerTokensInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetNFTTransactionHistoryResponseListInnerTokensInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetNFTTransactionHistoryResponseListInnerTokensInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    GetNFTTransactionHistoryResponseListInnerTokensInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetNFTTransactionHistoryResponseListInnerTokensInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetNFTTransactionHistoryResponseListInnerTokensInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetNFTTransactionHistoryResponseListInnerTokensInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetNFTTransactionHistoryResponseListInnerTokensInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of GetNFTTransactionHistoryResponseListInnerTokensInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetNFTTransactionHistoryResponseListInnerTokensInner
     */
    public static GetNFTTransactionHistoryResponseListInnerTokensInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetNFTTransactionHistoryResponseListInnerTokensInner.class);
    }

    /**
     * Convert an instance of GetNFTTransactionHistoryResponseListInnerTokensInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
