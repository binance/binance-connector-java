/*
 * Binance NFT REST API
 * OpenAPI Specification for the Binance NFT REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.nft.rest.model;

import com.binance.connector.client.nft.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetNFTTransactionHistoryResponseListInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetNFTTransactionHistoryResponseListInner {
    public static final String SERIALIZED_NAME_ORDER_NO = "orderNo";

    @SerializedName(SERIALIZED_NAME_ORDER_NO)
    @jakarta.annotation.Nullable
    private String orderNo;

    public static final String SERIALIZED_NAME_TOKENS = "tokens";

    @SerializedName(SERIALIZED_NAME_TOKENS)
    @jakarta.annotation.Nullable
    private List<@Valid GetNFTTransactionHistoryResponseListInnerTokensInner> tokens;

    public static final String SERIALIZED_NAME_TRADE_TIME = "tradeTime";

    @SerializedName(SERIALIZED_NAME_TRADE_TIME)
    @jakarta.annotation.Nullable
    private Long tradeTime;

    public static final String SERIALIZED_NAME_TRADE_AMOUNT = "tradeAmount";

    @SerializedName(SERIALIZED_NAME_TRADE_AMOUNT)
    @jakarta.annotation.Nullable
    private String tradeAmount;

    public static final String SERIALIZED_NAME_TRADE_CURRENCY = "tradeCurrency";

    @SerializedName(SERIALIZED_NAME_TRADE_CURRENCY)
    @jakarta.annotation.Nullable
    private String tradeCurrency;

    public GetNFTTransactionHistoryResponseListInner() {}

    public GetNFTTransactionHistoryResponseListInner orderNo(
            @jakarta.annotation.Nullable String orderNo) {
        this.orderNo = orderNo;
        return this;
    }

    /**
     * Get orderNo
     *
     * @return orderNo
     */
    @jakarta.annotation.Nullable
    public String getOrderNo() {
        return orderNo;
    }

    public void setOrderNo(@jakarta.annotation.Nullable String orderNo) {
        this.orderNo = orderNo;
    }

    public GetNFTTransactionHistoryResponseListInner tokens(
            @jakarta.annotation.Nullable
                    List<@Valid GetNFTTransactionHistoryResponseListInnerTokensInner> tokens) {
        this.tokens = tokens;
        return this;
    }

    public GetNFTTransactionHistoryResponseListInner addTokensItem(
            GetNFTTransactionHistoryResponseListInnerTokensInner tokensItem) {
        if (this.tokens == null) {
            this.tokens = new ArrayList<>();
        }
        this.tokens.add(tokensItem);
        return this;
    }

    /**
     * Get tokens
     *
     * @return tokens
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid GetNFTTransactionHistoryResponseListInnerTokensInner> getTokens() {
        return tokens;
    }

    public void setTokens(
            @jakarta.annotation.Nullable
                    List<@Valid GetNFTTransactionHistoryResponseListInnerTokensInner> tokens) {
        this.tokens = tokens;
    }

    public GetNFTTransactionHistoryResponseListInner tradeTime(
            @jakarta.annotation.Nullable Long tradeTime) {
        this.tradeTime = tradeTime;
        return this;
    }

    /**
     * Get tradeTime
     *
     * @return tradeTime
     */
    @jakarta.annotation.Nullable
    public Long getTradeTime() {
        return tradeTime;
    }

    public void setTradeTime(@jakarta.annotation.Nullable Long tradeTime) {
        this.tradeTime = tradeTime;
    }

    public GetNFTTransactionHistoryResponseListInner tradeAmount(
            @jakarta.annotation.Nullable String tradeAmount) {
        this.tradeAmount = tradeAmount;
        return this;
    }

    /**
     * Get tradeAmount
     *
     * @return tradeAmount
     */
    @jakarta.annotation.Nullable
    public String getTradeAmount() {
        return tradeAmount;
    }

    public void setTradeAmount(@jakarta.annotation.Nullable String tradeAmount) {
        this.tradeAmount = tradeAmount;
    }

    public GetNFTTransactionHistoryResponseListInner tradeCurrency(
            @jakarta.annotation.Nullable String tradeCurrency) {
        this.tradeCurrency = tradeCurrency;
        return this;
    }

    /**
     * Get tradeCurrency
     *
     * @return tradeCurrency
     */
    @jakarta.annotation.Nullable
    public String getTradeCurrency() {
        return tradeCurrency;
    }

    public void setTradeCurrency(@jakarta.annotation.Nullable String tradeCurrency) {
        this.tradeCurrency = tradeCurrency;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetNFTTransactionHistoryResponseListInner getNFTTransactionHistoryResponseListInner =
                (GetNFTTransactionHistoryResponseListInner) o;
        return Objects.equals(this.orderNo, getNFTTransactionHistoryResponseListInner.orderNo)
                && Objects.equals(this.tokens, getNFTTransactionHistoryResponseListInner.tokens)
                && Objects.equals(
                        this.tradeTime, getNFTTransactionHistoryResponseListInner.tradeTime)
                && Objects.equals(
                        this.tradeAmount, getNFTTransactionHistoryResponseListInner.tradeAmount)
                && Objects.equals(
                        this.tradeCurrency,
                        getNFTTransactionHistoryResponseListInner.tradeCurrency);
    }

    @Override
    public int hashCode() {
        return Objects.hash(orderNo, tokens, tradeTime, tradeAmount, tradeCurrency);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetNFTTransactionHistoryResponseListInner {\n");
        sb.append("		orderNo: ").append(toIndentedString(orderNo)).append("\n");
        sb.append("		tokens: ").append(toIndentedString(tokens)).append("\n");
        sb.append("		tradeTime: ").append(toIndentedString(tradeTime)).append("\n");
        sb.append("		tradeAmount: ").append(toIndentedString(tradeAmount)).append("\n");
        sb.append("		tradeCurrency: ").append(toIndentedString(tradeCurrency)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object orderNoValue = getOrderNo();
        String orderNoValueAsString = "";
        orderNoValueAsString = orderNoValue.toString();
        sb.append("orderNo=").append(urlEncode(orderNoValueAsString)).append("");
        Object tokensValue = getTokens();
        String tokensValueAsString = "";
        tokensValueAsString =
                (String)
                        ((Collection) tokensValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("tokens=").append(urlEncode(tokensValueAsString)).append("");
        Object tradeTimeValue = getTradeTime();
        String tradeTimeValueAsString = "";
        tradeTimeValueAsString = tradeTimeValue.toString();
        sb.append("tradeTime=").append(urlEncode(tradeTimeValueAsString)).append("");
        Object tradeAmountValue = getTradeAmount();
        String tradeAmountValueAsString = "";
        tradeAmountValueAsString = tradeAmountValue.toString();
        sb.append("tradeAmount=").append(urlEncode(tradeAmountValueAsString)).append("");
        Object tradeCurrencyValue = getTradeCurrency();
        String tradeCurrencyValueAsString = "";
        tradeCurrencyValueAsString = tradeCurrencyValue.toString();
        sb.append("tradeCurrency=").append(urlEncode(tradeCurrencyValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderNo");
        openapiFields.add("tokens");
        openapiFields.add("tradeTime");
        openapiFields.add("tradeAmount");
        openapiFields.add("tradeCurrency");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetNFTTransactionHistoryResponseListInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetNFTTransactionHistoryResponseListInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetNFTTransactionHistoryResponseListInner is not found in"
                                    + " the empty JSON string",
                                GetNFTTransactionHistoryResponseListInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetNFTTransactionHistoryResponseListInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetNFTTransactionHistoryResponseListInner` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("orderNo") != null && !jsonObj.get("orderNo").isJsonNull())
                && !jsonObj.get("orderNo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderNo` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("orderNo").toString()));
        }
        if (jsonObj.get("tokens") != null && !jsonObj.get("tokens").isJsonNull()) {
            JsonArray jsonArraytokens = jsonObj.getAsJsonArray("tokens");
            if (jsonArraytokens != null) {
                // ensure the json data is an array
                if (!jsonObj.get("tokens").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `tokens` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("tokens").toString()));
                }

                // validate the optional field `tokens` (array)
                for (int i = 0; i < jsonArraytokens.size(); i++) {
                    GetNFTTransactionHistoryResponseListInnerTokensInner.validateJsonElement(
                            jsonArraytokens.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("tradeAmount") != null && !jsonObj.get("tradeAmount").isJsonNull())
                && !jsonObj.get("tradeAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `tradeAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("tradeAmount").toString()));
        }
        if ((jsonObj.get("tradeCurrency") != null && !jsonObj.get("tradeCurrency").isJsonNull())
                && !jsonObj.get("tradeCurrency").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `tradeCurrency` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("tradeCurrency").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetNFTTransactionHistoryResponseListInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetNFTTransactionHistoryResponseListInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetNFTTransactionHistoryResponseListInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetNFTTransactionHistoryResponseListInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetNFTTransactionHistoryResponseListInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetNFTTransactionHistoryResponseListInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetNFTTransactionHistoryResponseListInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetNFTTransactionHistoryResponseListInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetNFTTransactionHistoryResponseListInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetNFTTransactionHistoryResponseListInner
     */
    public static GetNFTTransactionHistoryResponseListInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetNFTTransactionHistoryResponseListInner.class);
    }

    /**
     * Convert an instance of GetNFTTransactionHistoryResponseListInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
