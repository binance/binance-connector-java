/*
 * Binance Pay REST API
 * OpenAPI Specification for the Binance Pay REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.pay.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.pay.rest.model.GetPayTradeHistoryResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for PayApi */
public class PayApiTest {

    private PayApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new PayApi(apiClientSpy);
    }

    /**
     * Get Pay Trade History
     *
     * <p>Get Pay Trade History * If startTime and endTime are not sent, the recent 90 days&#39;
     * data will be returned. * The max interval between startTime and endTime is 90 days. * Support
     * for querying orders within the last 18 months. * For payerInfo and receiverInfoï¼Œthere are
     * different return values in different orderTypes. * Sender&#39;s perspective when orderType is
     * C2C * payerInfo : binanceId * receiverInfo : name,
     * binanceId/accountId/email/countryCode/phoneNumber/mobileCode (based on user input) *
     * Receiver&#39;s perspective when orderType is C2C * payerInfo : name, accountId * receiverInfo
     * : binanceId * Sender&#39;s perspective when orderType is CRYPTO_BOX * payerInfo : binanceId *
     * receiverInfo : name(the value is always \&quot;Crypto Box\&quot;) * Receiver&#39;s
     * perspective when orderType is CRYPTO_BOX * payerInfo : name, accountId * receiverInfo :
     * binanceId * Sender&#39;s perspective when orderType is PAY * payerInfo : binanceId *
     * receiverInfo : name * Receiver&#39;s perspective when orderType is PAY * payerInfo : name,
     * accountId * receiverInfo : binanceId, name * Sender&#39;s perspective when orderType is
     * PAY_REFUND * payerInfo : binanceId, name * receiverInfo : name, accountId * Receiver&#39;s
     * perspective when orderType is PAY_REFUND * payerInfo : name * receiverInfo : binanceId *
     * Sender&#39;s perspective when orderType is PAYOUT * payerInfo : binanceId, name *
     * receiverInfo : name, accountId * Receiver&#39;s perspective when orderType is PAYOUT *
     * payerInfo : name * receiverInfo : binanceId * Receiver&#39;s perspective when orderType is
     * CRYPTO_BOX_RF * payerInfo : name(the value is always \&quot;Crypto Box\&quot;) * receiverInfo
     * : binanceId * Sender&#39;s perspective when orderType is REMITTANCE * payerInfo : binanceId *
     * receiverInfo : name, institutionName, cardNumber, digitalWalletId Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPayTradeHistoryTest() throws ApiException, CryptoException {
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long limit = 100L;
        Long recvWindow = 5000L;
        ApiResponse<GetPayTradeHistoryResponse> response =
                api.getPayTradeHistory(startTime, endTime, limit, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/pay/transactions", actualRequest.url().encodedPath());
    }
}
