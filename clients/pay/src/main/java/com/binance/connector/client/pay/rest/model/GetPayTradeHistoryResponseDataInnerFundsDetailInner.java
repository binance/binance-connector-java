/*
 * Binance Pay REST API
 * OpenAPI Specification for the Binance Pay REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.pay.rest.model;

import com.binance.connector.client.pay.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetPayTradeHistoryResponseDataInnerFundsDetailInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetPayTradeHistoryResponseDataInnerFundsDetailInner {
    public static final String SERIALIZED_NAME_CURRENCY = "currency";

    @SerializedName(SERIALIZED_NAME_CURRENCY)
    @jakarta.annotation.Nullable
    private String currency;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_WALLET_ASSET_COST = "walletAssetCost";

    @SerializedName(SERIALIZED_NAME_WALLET_ASSET_COST)
    @jakarta.annotation.Nullable
    private List<@Valid GetPayTradeHistoryResponseDataInnerFundsDetailInnerWalletAssetCostInner>
            walletAssetCost;

    public GetPayTradeHistoryResponseDataInnerFundsDetailInner() {}

    public GetPayTradeHistoryResponseDataInnerFundsDetailInner currency(
            @jakarta.annotation.Nullable String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get currency
     *
     * @return currency
     */
    @jakarta.annotation.Nullable
    public String getCurrency() {
        return currency;
    }

    public void setCurrency(@jakarta.annotation.Nullable String currency) {
        this.currency = currency;
    }

    public GetPayTradeHistoryResponseDataInnerFundsDetailInner amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public GetPayTradeHistoryResponseDataInnerFundsDetailInner walletAssetCost(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    GetPayTradeHistoryResponseDataInnerFundsDetailInnerWalletAssetCostInner>
                            walletAssetCost) {
        this.walletAssetCost = walletAssetCost;
        return this;
    }

    public GetPayTradeHistoryResponseDataInnerFundsDetailInner addWalletAssetCostItem(
            GetPayTradeHistoryResponseDataInnerFundsDetailInnerWalletAssetCostInner
                    walletAssetCostItem) {
        if (this.walletAssetCost == null) {
            this.walletAssetCost = new ArrayList<>();
        }
        this.walletAssetCost.add(walletAssetCostItem);
        return this;
    }

    /**
     * Get walletAssetCost
     *
     * @return walletAssetCost
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid GetPayTradeHistoryResponseDataInnerFundsDetailInnerWalletAssetCostInner>
            getWalletAssetCost() {
        return walletAssetCost;
    }

    public void setWalletAssetCost(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    GetPayTradeHistoryResponseDataInnerFundsDetailInnerWalletAssetCostInner>
                            walletAssetCost) {
        this.walletAssetCost = walletAssetCost;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPayTradeHistoryResponseDataInnerFundsDetailInner
                getPayTradeHistoryResponseDataInnerFundsDetailInner =
                        (GetPayTradeHistoryResponseDataInnerFundsDetailInner) o;
        return Objects.equals(
                        this.currency, getPayTradeHistoryResponseDataInnerFundsDetailInner.currency)
                && Objects.equals(
                        this.amount, getPayTradeHistoryResponseDataInnerFundsDetailInner.amount)
                && Objects.equals(
                        this.walletAssetCost,
                        getPayTradeHistoryResponseDataInnerFundsDetailInner.walletAssetCost);
    }

    @Override
    public int hashCode() {
        return Objects.hash(currency, amount, walletAssetCost);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetPayTradeHistoryResponseDataInnerFundsDetailInner {\n");
        sb.append("		currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		walletAssetCost: ").append(toIndentedString(walletAssetCost)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object currencyValue = getCurrency();
        String currencyValueAsString = "";
        currencyValueAsString = currencyValue.toString();
        sb.append("currency=").append(urlEncode(currencyValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object walletAssetCostValue = getWalletAssetCost();
        String walletAssetCostValueAsString = "";
        walletAssetCostValueAsString =
                (String)
                        ((Collection) walletAssetCostValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("walletAssetCost=").append(urlEncode(walletAssetCostValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("currency");
        openapiFields.add("amount");
        openapiFields.add("walletAssetCost");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetPayTradeHistoryResponseDataInnerFundsDetailInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetPayTradeHistoryResponseDataInnerFundsDetailInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetPayTradeHistoryResponseDataInnerFundsDetailInner is not"
                                    + " found in the empty JSON string",
                                GetPayTradeHistoryResponseDataInnerFundsDetailInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetPayTradeHistoryResponseDataInnerFundsDetailInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetPayTradeHistoryResponseDataInnerFundsDetailInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull())
                && !jsonObj.get("currency").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `currency` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("currency").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if (jsonObj.get("walletAssetCost") != null
                && !jsonObj.get("walletAssetCost").isJsonNull()) {
            JsonArray jsonArraywalletAssetCost = jsonObj.getAsJsonArray("walletAssetCost");
            if (jsonArraywalletAssetCost != null) {
                // ensure the json data is an array
                if (!jsonObj.get("walletAssetCost").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `walletAssetCost` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("walletAssetCost").toString()));
                }

                // validate the optional field `walletAssetCost` (array)
                for (int i = 0; i < jsonArraywalletAssetCost.size(); i++) {
                    GetPayTradeHistoryResponseDataInnerFundsDetailInnerWalletAssetCostInner
                            .validateJsonElement(jsonArraywalletAssetCost.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetPayTradeHistoryResponseDataInnerFundsDetailInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetPayTradeHistoryResponseDataInnerFundsDetailInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetPayTradeHistoryResponseDataInnerFundsDetailInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    GetPayTradeHistoryResponseDataInnerFundsDetailInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetPayTradeHistoryResponseDataInnerFundsDetailInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetPayTradeHistoryResponseDataInnerFundsDetailInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetPayTradeHistoryResponseDataInnerFundsDetailInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetPayTradeHistoryResponseDataInnerFundsDetailInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of GetPayTradeHistoryResponseDataInnerFundsDetailInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetPayTradeHistoryResponseDataInnerFundsDetailInner
     */
    public static GetPayTradeHistoryResponseDataInnerFundsDetailInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetPayTradeHistoryResponseDataInnerFundsDetailInner.class);
    }

    /**
     * Convert an instance of GetPayTradeHistoryResponseDataInnerFundsDetailInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
