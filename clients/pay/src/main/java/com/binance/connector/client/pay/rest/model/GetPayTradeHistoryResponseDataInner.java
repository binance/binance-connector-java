/*
 * Binance Pay REST API
 * OpenAPI Specification for the Binance Pay REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.pay.rest.model;

import com.binance.connector.client.pay.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetPayTradeHistoryResponseDataInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetPayTradeHistoryResponseDataInner {
    public static final String SERIALIZED_NAME_ORDER_TYPE = "orderType";

    @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
    @jakarta.annotation.Nullable
    private String orderType;

    public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
    @jakarta.annotation.Nullable
    private String transactionId;

    public static final String SERIALIZED_NAME_TRANSACTION_TIME = "transactionTime";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_TIME)
    @jakarta.annotation.Nullable
    private Long transactionTime;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_CURRENCY = "currency";

    @SerializedName(SERIALIZED_NAME_CURRENCY)
    @jakarta.annotation.Nullable
    private String currency;

    public static final String SERIALIZED_NAME_WALLET_TYPE = "walletType";

    @SerializedName(SERIALIZED_NAME_WALLET_TYPE)
    @jakarta.annotation.Nullable
    private Long walletType;

    public static final String SERIALIZED_NAME_WALLET_TYPES = "walletTypes";

    @SerializedName(SERIALIZED_NAME_WALLET_TYPES)
    @jakarta.annotation.Nullable
    private List<Long> walletTypes;

    public static final String SERIALIZED_NAME_FUNDS_DETAIL = "fundsDetail";

    @SerializedName(SERIALIZED_NAME_FUNDS_DETAIL)
    @jakarta.annotation.Nullable
    private List<@Valid GetPayTradeHistoryResponseDataInnerFundsDetailInner> fundsDetail;

    public static final String SERIALIZED_NAME_PAYER_INFO = "payerInfo";

    @SerializedName(SERIALIZED_NAME_PAYER_INFO)
    @jakarta.annotation.Nullable
    private GetPayTradeHistoryResponseDataInnerPayerInfo payerInfo;

    public static final String SERIALIZED_NAME_RECEIVER_INFO = "receiverInfo";

    @SerializedName(SERIALIZED_NAME_RECEIVER_INFO)
    @jakarta.annotation.Nullable
    private GetPayTradeHistoryResponseDataInnerReceiverInfo receiverInfo;

    public GetPayTradeHistoryResponseDataInner() {}

    public GetPayTradeHistoryResponseDataInner orderType(
            @jakarta.annotation.Nullable String orderType) {
        this.orderType = orderType;
        return this;
    }

    /**
     * Get orderType
     *
     * @return orderType
     */
    @jakarta.annotation.Nullable
    public String getOrderType() {
        return orderType;
    }

    public void setOrderType(@jakarta.annotation.Nullable String orderType) {
        this.orderType = orderType;
    }

    public GetPayTradeHistoryResponseDataInner transactionId(
            @jakarta.annotation.Nullable String transactionId) {
        this.transactionId = transactionId;
        return this;
    }

    /**
     * Get transactionId
     *
     * @return transactionId
     */
    @jakarta.annotation.Nullable
    public String getTransactionId() {
        return transactionId;
    }

    public void setTransactionId(@jakarta.annotation.Nullable String transactionId) {
        this.transactionId = transactionId;
    }

    public GetPayTradeHistoryResponseDataInner transactionTime(
            @jakarta.annotation.Nullable Long transactionTime) {
        this.transactionTime = transactionTime;
        return this;
    }

    /**
     * Get transactionTime
     *
     * @return transactionTime
     */
    @jakarta.annotation.Nullable
    public Long getTransactionTime() {
        return transactionTime;
    }

    public void setTransactionTime(@jakarta.annotation.Nullable Long transactionTime) {
        this.transactionTime = transactionTime;
    }

    public GetPayTradeHistoryResponseDataInner amount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public GetPayTradeHistoryResponseDataInner currency(
            @jakarta.annotation.Nullable String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get currency
     *
     * @return currency
     */
    @jakarta.annotation.Nullable
    public String getCurrency() {
        return currency;
    }

    public void setCurrency(@jakarta.annotation.Nullable String currency) {
        this.currency = currency;
    }

    public GetPayTradeHistoryResponseDataInner walletType(
            @jakarta.annotation.Nullable Long walletType) {
        this.walletType = walletType;
        return this;
    }

    /**
     * Get walletType
     *
     * @return walletType
     */
    @jakarta.annotation.Nullable
    public Long getWalletType() {
        return walletType;
    }

    public void setWalletType(@jakarta.annotation.Nullable Long walletType) {
        this.walletType = walletType;
    }

    public GetPayTradeHistoryResponseDataInner walletTypes(
            @jakarta.annotation.Nullable List<Long> walletTypes) {
        this.walletTypes = walletTypes;
        return this;
    }

    public GetPayTradeHistoryResponseDataInner addWalletTypesItem(Long walletTypesItem) {
        if (this.walletTypes == null) {
            this.walletTypes = new ArrayList<>();
        }
        this.walletTypes.add(walletTypesItem);
        return this;
    }

    /**
     * Get walletTypes
     *
     * @return walletTypes
     */
    @jakarta.annotation.Nullable
    public List<Long> getWalletTypes() {
        return walletTypes;
    }

    public void setWalletTypes(@jakarta.annotation.Nullable List<Long> walletTypes) {
        this.walletTypes = walletTypes;
    }

    public GetPayTradeHistoryResponseDataInner fundsDetail(
            @jakarta.annotation.Nullable
                    List<@Valid GetPayTradeHistoryResponseDataInnerFundsDetailInner> fundsDetail) {
        this.fundsDetail = fundsDetail;
        return this;
    }

    public GetPayTradeHistoryResponseDataInner addFundsDetailItem(
            GetPayTradeHistoryResponseDataInnerFundsDetailInner fundsDetailItem) {
        if (this.fundsDetail == null) {
            this.fundsDetail = new ArrayList<>();
        }
        this.fundsDetail.add(fundsDetailItem);
        return this;
    }

    /**
     * Get fundsDetail
     *
     * @return fundsDetail
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid GetPayTradeHistoryResponseDataInnerFundsDetailInner> getFundsDetail() {
        return fundsDetail;
    }

    public void setFundsDetail(
            @jakarta.annotation.Nullable
                    List<@Valid GetPayTradeHistoryResponseDataInnerFundsDetailInner> fundsDetail) {
        this.fundsDetail = fundsDetail;
    }

    public GetPayTradeHistoryResponseDataInner payerInfo(
            @jakarta.annotation.Nullable GetPayTradeHistoryResponseDataInnerPayerInfo payerInfo) {
        this.payerInfo = payerInfo;
        return this;
    }

    /**
     * Get payerInfo
     *
     * @return payerInfo
     */
    @jakarta.annotation.Nullable
    @Valid
    public GetPayTradeHistoryResponseDataInnerPayerInfo getPayerInfo() {
        return payerInfo;
    }

    public void setPayerInfo(
            @jakarta.annotation.Nullable GetPayTradeHistoryResponseDataInnerPayerInfo payerInfo) {
        this.payerInfo = payerInfo;
    }

    public GetPayTradeHistoryResponseDataInner receiverInfo(
            @jakarta.annotation.Nullable
                    GetPayTradeHistoryResponseDataInnerReceiverInfo receiverInfo) {
        this.receiverInfo = receiverInfo;
        return this;
    }

    /**
     * Get receiverInfo
     *
     * @return receiverInfo
     */
    @jakarta.annotation.Nullable
    @Valid
    public GetPayTradeHistoryResponseDataInnerReceiverInfo getReceiverInfo() {
        return receiverInfo;
    }

    public void setReceiverInfo(
            @jakarta.annotation.Nullable
                    GetPayTradeHistoryResponseDataInnerReceiverInfo receiverInfo) {
        this.receiverInfo = receiverInfo;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPayTradeHistoryResponseDataInner getPayTradeHistoryResponseDataInner =
                (GetPayTradeHistoryResponseDataInner) o;
        return Objects.equals(this.orderType, getPayTradeHistoryResponseDataInner.orderType)
                && Objects.equals(
                        this.transactionId, getPayTradeHistoryResponseDataInner.transactionId)
                && Objects.equals(
                        this.transactionTime, getPayTradeHistoryResponseDataInner.transactionTime)
                && Objects.equals(this.amount, getPayTradeHistoryResponseDataInner.amount)
                && Objects.equals(this.currency, getPayTradeHistoryResponseDataInner.currency)
                && Objects.equals(this.walletType, getPayTradeHistoryResponseDataInner.walletType)
                && Objects.equals(this.walletTypes, getPayTradeHistoryResponseDataInner.walletTypes)
                && Objects.equals(this.fundsDetail, getPayTradeHistoryResponseDataInner.fundsDetail)
                && Objects.equals(this.payerInfo, getPayTradeHistoryResponseDataInner.payerInfo)
                && Objects.equals(
                        this.receiverInfo, getPayTradeHistoryResponseDataInner.receiverInfo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                orderType,
                transactionId,
                transactionTime,
                amount,
                currency,
                walletType,
                walletTypes,
                fundsDetail,
                payerInfo,
                receiverInfo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetPayTradeHistoryResponseDataInner {\n");
        sb.append("		orderType: ").append(toIndentedString(orderType)).append("\n");
        sb.append("		transactionId: ").append(toIndentedString(transactionId)).append("\n");
        sb.append("		transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("		walletType: ").append(toIndentedString(walletType)).append("\n");
        sb.append("		walletTypes: ").append(toIndentedString(walletTypes)).append("\n");
        sb.append("		fundsDetail: ").append(toIndentedString(fundsDetail)).append("\n");
        sb.append("		payerInfo: ").append(toIndentedString(payerInfo)).append("\n");
        sb.append("		receiverInfo: ").append(toIndentedString(receiverInfo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object orderTypeValue = getOrderType();
        String orderTypeValueAsString = "";
        orderTypeValueAsString = orderTypeValue.toString();
        sb.append("orderType=").append(urlEncode(orderTypeValueAsString)).append("");
        Object transactionIdValue = getTransactionId();
        String transactionIdValueAsString = "";
        transactionIdValueAsString = transactionIdValue.toString();
        sb.append("transactionId=").append(urlEncode(transactionIdValueAsString)).append("");
        Object transactionTimeValue = getTransactionTime();
        String transactionTimeValueAsString = "";
        transactionTimeValueAsString = transactionTimeValue.toString();
        sb.append("transactionTime=").append(urlEncode(transactionTimeValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object currencyValue = getCurrency();
        String currencyValueAsString = "";
        currencyValueAsString = currencyValue.toString();
        sb.append("currency=").append(urlEncode(currencyValueAsString)).append("");
        Object walletTypeValue = getWalletType();
        String walletTypeValueAsString = "";
        walletTypeValueAsString = walletTypeValue.toString();
        sb.append("walletType=").append(urlEncode(walletTypeValueAsString)).append("");
        Object walletTypesValue = getWalletTypes();
        String walletTypesValueAsString = "";
        walletTypesValueAsString =
                (String)
                        ((Collection) walletTypesValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("walletTypes=").append(urlEncode(walletTypesValueAsString)).append("");
        Object fundsDetailValue = getFundsDetail();
        String fundsDetailValueAsString = "";
        fundsDetailValueAsString =
                (String)
                        ((Collection) fundsDetailValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("fundsDetail=").append(urlEncode(fundsDetailValueAsString)).append("");
        Object payerInfoValue = getPayerInfo();
        String payerInfoValueAsString = "";
        payerInfoValueAsString = payerInfoValue.toString();
        sb.append("payerInfo=").append(urlEncode(payerInfoValueAsString)).append("");
        Object receiverInfoValue = getReceiverInfo();
        String receiverInfoValueAsString = "";
        receiverInfoValueAsString = receiverInfoValue.toString();
        sb.append("receiverInfo=").append(urlEncode(receiverInfoValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderType");
        openapiFields.add("transactionId");
        openapiFields.add("transactionTime");
        openapiFields.add("amount");
        openapiFields.add("currency");
        openapiFields.add("walletType");
        openapiFields.add("walletTypes");
        openapiFields.add("fundsDetail");
        openapiFields.add("payerInfo");
        openapiFields.add("receiverInfo");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetPayTradeHistoryResponseDataInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetPayTradeHistoryResponseDataInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetPayTradeHistoryResponseDataInner is"
                                        + " not found in the empty JSON string",
                                GetPayTradeHistoryResponseDataInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetPayTradeHistoryResponseDataInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetPayTradeHistoryResponseDataInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("orderType") != null && !jsonObj.get("orderType").isJsonNull())
                && !jsonObj.get("orderType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("orderType").toString()));
        }
        if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull())
                && !jsonObj.get("transactionId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `transactionId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("transactionId").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull())
                && !jsonObj.get("currency").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `currency` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("currency").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("walletTypes") != null
                && !jsonObj.get("walletTypes").isJsonNull()
                && !jsonObj.get("walletTypes").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `walletTypes` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("walletTypes").toString()));
        }
        if (jsonObj.get("fundsDetail") != null && !jsonObj.get("fundsDetail").isJsonNull()) {
            JsonArray jsonArrayfundsDetail = jsonObj.getAsJsonArray("fundsDetail");
            if (jsonArrayfundsDetail != null) {
                // ensure the json data is an array
                if (!jsonObj.get("fundsDetail").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `fundsDetail` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("fundsDetail").toString()));
                }

                // validate the optional field `fundsDetail` (array)
                for (int i = 0; i < jsonArrayfundsDetail.size(); i++) {
                    GetPayTradeHistoryResponseDataInnerFundsDetailInner.validateJsonElement(
                            jsonArrayfundsDetail.get(i));
                }
                ;
            }
        }
        // validate the optional field `payerInfo`
        if (jsonObj.get("payerInfo") != null && !jsonObj.get("payerInfo").isJsonNull()) {
            GetPayTradeHistoryResponseDataInnerPayerInfo.validateJsonElement(
                    jsonObj.get("payerInfo"));
        }
        // validate the optional field `receiverInfo`
        if (jsonObj.get("receiverInfo") != null && !jsonObj.get("receiverInfo").isJsonNull()) {
            GetPayTradeHistoryResponseDataInnerReceiverInfo.validateJsonElement(
                    jsonObj.get("receiverInfo"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetPayTradeHistoryResponseDataInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetPayTradeHistoryResponseDataInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetPayTradeHistoryResponseDataInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetPayTradeHistoryResponseDataInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetPayTradeHistoryResponseDataInner>() {
                        @Override
                        public void write(JsonWriter out, GetPayTradeHistoryResponseDataInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetPayTradeHistoryResponseDataInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetPayTradeHistoryResponseDataInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetPayTradeHistoryResponseDataInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetPayTradeHistoryResponseDataInner
     */
    public static GetPayTradeHistoryResponseDataInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetPayTradeHistoryResponseDataInner.class);
    }

    /**
     * Convert an instance of GetPayTradeHistoryResponseDataInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
