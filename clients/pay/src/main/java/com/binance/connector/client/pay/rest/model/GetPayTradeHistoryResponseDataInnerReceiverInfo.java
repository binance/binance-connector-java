/*
 * Binance Pay REST API
 * OpenAPI Specification for the Binance Pay REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.pay.rest.model;

import com.binance.connector.client.pay.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetPayTradeHistoryResponseDataInnerReceiverInfo */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetPayTradeHistoryResponseDataInnerReceiverInfo {
    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    @jakarta.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_EMAIL = "email";

    @SerializedName(SERIALIZED_NAME_EMAIL)
    @jakarta.annotation.Nullable
    private String email;

    public static final String SERIALIZED_NAME_BINANCE_ID = "binanceId";

    @SerializedName(SERIALIZED_NAME_BINANCE_ID)
    @jakarta.annotation.Nullable
    private String binanceId;

    public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
    @jakarta.annotation.Nullable
    private String accountId;

    public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";

    @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
    @jakarta.annotation.Nullable
    private String countryCode;

    public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";

    @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
    @jakarta.annotation.Nullable
    private String phoneNumber;

    public static final String SERIALIZED_NAME_MOBILE_CODE = "mobileCode";

    @SerializedName(SERIALIZED_NAME_MOBILE_CODE)
    @jakarta.annotation.Nullable
    private String mobileCode;

    public static final String SERIALIZED_NAME_EXTEND = "extend";

    @SerializedName(SERIALIZED_NAME_EXTEND)
    @jakarta.annotation.Nullable
    private GetPayTradeHistoryResponseDataInnerReceiverInfoExtend extend;

    public GetPayTradeHistoryResponseDataInnerReceiverInfo() {}

    public GetPayTradeHistoryResponseDataInnerReceiverInfo name(
            @jakarta.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @jakarta.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@jakarta.annotation.Nullable String name) {
        this.name = name;
    }

    public GetPayTradeHistoryResponseDataInnerReceiverInfo type(
            @jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public GetPayTradeHistoryResponseDataInnerReceiverInfo email(
            @jakarta.annotation.Nullable String email) {
        this.email = email;
        return this;
    }

    /**
     * Get email
     *
     * @return email
     */
    @jakarta.annotation.Nullable
    public String getEmail() {
        return email;
    }

    public void setEmail(@jakarta.annotation.Nullable String email) {
        this.email = email;
    }

    public GetPayTradeHistoryResponseDataInnerReceiverInfo binanceId(
            @jakarta.annotation.Nullable String binanceId) {
        this.binanceId = binanceId;
        return this;
    }

    /**
     * Get binanceId
     *
     * @return binanceId
     */
    @jakarta.annotation.Nullable
    public String getBinanceId() {
        return binanceId;
    }

    public void setBinanceId(@jakarta.annotation.Nullable String binanceId) {
        this.binanceId = binanceId;
    }

    public GetPayTradeHistoryResponseDataInnerReceiverInfo accountId(
            @jakarta.annotation.Nullable String accountId) {
        this.accountId = accountId;
        return this;
    }

    /**
     * Get accountId
     *
     * @return accountId
     */
    @jakarta.annotation.Nullable
    public String getAccountId() {
        return accountId;
    }

    public void setAccountId(@jakarta.annotation.Nullable String accountId) {
        this.accountId = accountId;
    }

    public GetPayTradeHistoryResponseDataInnerReceiverInfo countryCode(
            @jakarta.annotation.Nullable String countryCode) {
        this.countryCode = countryCode;
        return this;
    }

    /**
     * Get countryCode
     *
     * @return countryCode
     */
    @jakarta.annotation.Nullable
    public String getCountryCode() {
        return countryCode;
    }

    public void setCountryCode(@jakarta.annotation.Nullable String countryCode) {
        this.countryCode = countryCode;
    }

    public GetPayTradeHistoryResponseDataInnerReceiverInfo phoneNumber(
            @jakarta.annotation.Nullable String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Get phoneNumber
     *
     * @return phoneNumber
     */
    @jakarta.annotation.Nullable
    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(@jakarta.annotation.Nullable String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public GetPayTradeHistoryResponseDataInnerReceiverInfo mobileCode(
            @jakarta.annotation.Nullable String mobileCode) {
        this.mobileCode = mobileCode;
        return this;
    }

    /**
     * Get mobileCode
     *
     * @return mobileCode
     */
    @jakarta.annotation.Nullable
    public String getMobileCode() {
        return mobileCode;
    }

    public void setMobileCode(@jakarta.annotation.Nullable String mobileCode) {
        this.mobileCode = mobileCode;
    }

    public GetPayTradeHistoryResponseDataInnerReceiverInfo extend(
            @jakarta.annotation.Nullable
                    GetPayTradeHistoryResponseDataInnerReceiverInfoExtend extend) {
        this.extend = extend;
        return this;
    }

    /**
     * Get extend
     *
     * @return extend
     */
    @jakarta.annotation.Nullable
    @Valid
    public GetPayTradeHistoryResponseDataInnerReceiverInfoExtend getExtend() {
        return extend;
    }

    public void setExtend(
            @jakarta.annotation.Nullable
                    GetPayTradeHistoryResponseDataInnerReceiverInfoExtend extend) {
        this.extend = extend;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetPayTradeHistoryResponseDataInnerReceiverInfo
                getPayTradeHistoryResponseDataInnerReceiverInfo =
                        (GetPayTradeHistoryResponseDataInnerReceiverInfo) o;
        return Objects.equals(this.name, getPayTradeHistoryResponseDataInnerReceiverInfo.name)
                && Objects.equals(this.type, getPayTradeHistoryResponseDataInnerReceiverInfo.type)
                && Objects.equals(this.email, getPayTradeHistoryResponseDataInnerReceiverInfo.email)
                && Objects.equals(
                        this.binanceId, getPayTradeHistoryResponseDataInnerReceiverInfo.binanceId)
                && Objects.equals(
                        this.accountId, getPayTradeHistoryResponseDataInnerReceiverInfo.accountId)
                && Objects.equals(
                        this.countryCode,
                        getPayTradeHistoryResponseDataInnerReceiverInfo.countryCode)
                && Objects.equals(
                        this.phoneNumber,
                        getPayTradeHistoryResponseDataInnerReceiverInfo.phoneNumber)
                && Objects.equals(
                        this.mobileCode, getPayTradeHistoryResponseDataInnerReceiverInfo.mobileCode)
                && Objects.equals(
                        this.extend, getPayTradeHistoryResponseDataInnerReceiverInfo.extend);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                name,
                type,
                email,
                binanceId,
                accountId,
                countryCode,
                phoneNumber,
                mobileCode,
                extend);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetPayTradeHistoryResponseDataInnerReceiverInfo {\n");
        sb.append("		name: ").append(toIndentedString(name)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		email: ").append(toIndentedString(email)).append("\n");
        sb.append("		binanceId: ").append(toIndentedString(binanceId)).append("\n");
        sb.append("		accountId: ").append(toIndentedString(accountId)).append("\n");
        sb.append("		countryCode: ").append(toIndentedString(countryCode)).append("\n");
        sb.append("		phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
        sb.append("		mobileCode: ").append(toIndentedString(mobileCode)).append("\n");
        sb.append("		extend: ").append(toIndentedString(extend)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object nameValue = getName();
        String nameValueAsString = "";
        nameValueAsString = nameValue.toString();
        sb.append("name=").append(urlEncode(nameValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object emailValue = getEmail();
        String emailValueAsString = "";
        emailValueAsString = emailValue.toString();
        sb.append("email=").append(urlEncode(emailValueAsString)).append("");
        Object binanceIdValue = getBinanceId();
        String binanceIdValueAsString = "";
        binanceIdValueAsString = binanceIdValue.toString();
        sb.append("binanceId=").append(urlEncode(binanceIdValueAsString)).append("");
        Object accountIdValue = getAccountId();
        String accountIdValueAsString = "";
        accountIdValueAsString = accountIdValue.toString();
        sb.append("accountId=").append(urlEncode(accountIdValueAsString)).append("");
        Object countryCodeValue = getCountryCode();
        String countryCodeValueAsString = "";
        countryCodeValueAsString = countryCodeValue.toString();
        sb.append("countryCode=").append(urlEncode(countryCodeValueAsString)).append("");
        Object phoneNumberValue = getPhoneNumber();
        String phoneNumberValueAsString = "";
        phoneNumberValueAsString = phoneNumberValue.toString();
        sb.append("phoneNumber=").append(urlEncode(phoneNumberValueAsString)).append("");
        Object mobileCodeValue = getMobileCode();
        String mobileCodeValueAsString = "";
        mobileCodeValueAsString = mobileCodeValue.toString();
        sb.append("mobileCode=").append(urlEncode(mobileCodeValueAsString)).append("");
        Object extendValue = getExtend();
        String extendValueAsString = "";
        extendValueAsString = extendValue.toString();
        sb.append("extend=").append(urlEncode(extendValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("name");
        openapiFields.add("type");
        openapiFields.add("email");
        openapiFields.add("binanceId");
        openapiFields.add("accountId");
        openapiFields.add("countryCode");
        openapiFields.add("phoneNumber");
        openapiFields.add("mobileCode");
        openapiFields.add("extend");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetPayTradeHistoryResponseDataInnerReceiverInfo
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetPayTradeHistoryResponseDataInnerReceiverInfo.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " GetPayTradeHistoryResponseDataInnerReceiverInfo is not"
                                        + " found in the empty JSON string",
                                GetPayTradeHistoryResponseDataInnerReceiverInfo
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetPayTradeHistoryResponseDataInnerReceiverInfo.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetPayTradeHistoryResponseDataInnerReceiverInfo`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull())
                && !jsonObj.get("email").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `email` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("email").toString()));
        }
        if ((jsonObj.get("binanceId") != null && !jsonObj.get("binanceId").isJsonNull())
                && !jsonObj.get("binanceId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `binanceId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("binanceId").toString()));
        }
        if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull())
                && !jsonObj.get("accountId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `accountId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("accountId").toString()));
        }
        if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull())
                && !jsonObj.get("countryCode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `countryCode` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("countryCode").toString()));
        }
        if ((jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull())
                && !jsonObj.get("phoneNumber").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `phoneNumber` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("phoneNumber").toString()));
        }
        if ((jsonObj.get("mobileCode") != null && !jsonObj.get("mobileCode").isJsonNull())
                && !jsonObj.get("mobileCode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `mobileCode` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("mobileCode").toString()));
        }
        // validate the optional field `extend`
        if (jsonObj.get("extend") != null && !jsonObj.get("extend").isJsonNull()) {
            GetPayTradeHistoryResponseDataInnerReceiverInfoExtend.validateJsonElement(
                    jsonObj.get("extend"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetPayTradeHistoryResponseDataInnerReceiverInfo.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetPayTradeHistoryResponseDataInnerReceiverInfo' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetPayTradeHistoryResponseDataInnerReceiverInfo> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(GetPayTradeHistoryResponseDataInnerReceiverInfo.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetPayTradeHistoryResponseDataInnerReceiverInfo>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetPayTradeHistoryResponseDataInnerReceiverInfo value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetPayTradeHistoryResponseDataInnerReceiverInfo read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetPayTradeHistoryResponseDataInnerReceiverInfo given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetPayTradeHistoryResponseDataInnerReceiverInfo
     * @throws IOException if the JSON string is invalid with respect to
     *     GetPayTradeHistoryResponseDataInnerReceiverInfo
     */
    public static GetPayTradeHistoryResponseDataInnerReceiverInfo fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetPayTradeHistoryResponseDataInnerReceiverInfo.class);
    }

    /**
     * Convert an instance of GetPayTradeHistoryResponseDataInnerReceiverInfo to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
