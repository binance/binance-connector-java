/*
 * Binance VIP Loan REST API
 * OpenAPI Specification for the Binance VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.vip_loan.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.vip_loan.rest.model.VipLoanBorrowRequest;
import com.binance.connector.client.vip_loan.rest.model.VipLoanBorrowResponse;
import com.binance.connector.client.vip_loan.rest.model.VipLoanRenewRequest;
import com.binance.connector.client.vip_loan.rest.model.VipLoanRenewResponse;
import com.binance.connector.client.vip_loan.rest.model.VipLoanRepayRequest;
import com.binance.connector.client.vip_loan.rest.model.VipLoanRepayResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class TradeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-vip-loan/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public TradeApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public TradeApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for vipLoanBorrow
     *
     * @param vipLoanBorrowRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> VIP Loan Borrow </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Borrow">VIP Loan
     *     Borrow(TRADE) Documentation</a>
     */
    private okhttp3.Call vipLoanBorrowCall(VipLoanBorrowRequest vipLoanBorrowRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/loan/vip/borrow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vipLoanBorrowRequest.getLoanAccountId() != null) {
            localVarFormParams.put("loanAccountId", vipLoanBorrowRequest.getLoanAccountId());
        }

        if (vipLoanBorrowRequest.getLoanCoin() != null) {
            localVarFormParams.put("loanCoin", vipLoanBorrowRequest.getLoanCoin());
        }

        if (vipLoanBorrowRequest.getLoanAmount() != null) {
            localVarFormParams.put(
                    "loanAmount",
                    DecimalFormatter.getFormatter().format(vipLoanBorrowRequest.getLoanAmount()));
        }

        if (vipLoanBorrowRequest.getCollateralAccountId() != null) {
            localVarFormParams.put(
                    "collateralAccountId", vipLoanBorrowRequest.getCollateralAccountId());
        }

        if (vipLoanBorrowRequest.getCollateralCoin() != null) {
            localVarFormParams.put("collateralCoin", vipLoanBorrowRequest.getCollateralCoin());
        }

        if (vipLoanBorrowRequest.getIsFlexibleRate() != null) {
            localVarFormParams.put("isFlexibleRate", vipLoanBorrowRequest.getIsFlexibleRate());
        }

        if (vipLoanBorrowRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", vipLoanBorrowRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vipLoanBorrowValidateBeforeCall(VipLoanBorrowRequest vipLoanBorrowRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {vipLoanBorrowRequest};
            Method method = this.getClass().getMethod("vipLoanBorrow", VipLoanBorrowRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return vipLoanBorrowCall(vipLoanBorrowRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * VIP Loan Borrow(TRADE) VIP loan is available for VIP users only. * loanAccountId refer to
     * loan receiving account * Only master account applications are supported * loanAccountId and
     * collateralAccountId under same master account * loanTerm is mandatory if user choose stable
     * rate Weight: 0
     *
     * @param vipLoanBorrowRequest (required)
     * @return ApiResponse&lt;VipLoanBorrowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> VIP Loan Borrow </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Borrow">VIP Loan
     *     Borrow(TRADE) Documentation</a>
     */
    public ApiResponse<VipLoanBorrowResponse> vipLoanBorrow(
            @Valid @NotNull VipLoanBorrowRequest vipLoanBorrowRequest) throws ApiException {
        okhttp3.Call localVarCall = vipLoanBorrowValidateBeforeCall(vipLoanBorrowRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<VipLoanBorrowResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for vipLoanRenew
     *
     * @param vipLoanRenewRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> VIP Loan Renew </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Renew">VIP Loan
     *     Renew(TRADE) Documentation</a>
     */
    private okhttp3.Call vipLoanRenewCall(VipLoanRenewRequest vipLoanRenewRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/loan/vip/renew";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vipLoanRenewRequest.getOrderId() != null) {
            localVarFormParams.put("orderId", vipLoanRenewRequest.getOrderId());
        }

        if (vipLoanRenewRequest.getLoanTerm() != null) {
            localVarFormParams.put("loanTerm", vipLoanRenewRequest.getLoanTerm());
        }

        if (vipLoanRenewRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", vipLoanRenewRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vipLoanRenewValidateBeforeCall(VipLoanRenewRequest vipLoanRenewRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {vipLoanRenewRequest};
            Method method = this.getClass().getMethod("vipLoanRenew", VipLoanRenewRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return vipLoanRenewCall(vipLoanRenewRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * VIP Loan Renew(TRADE) VIP loan is available for VIP users only. Weight: 6000
     *
     * @param vipLoanRenewRequest (required)
     * @return ApiResponse&lt;VipLoanRenewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> VIP Loan Renew </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Renew">VIP Loan
     *     Renew(TRADE) Documentation</a>
     */
    public ApiResponse<VipLoanRenewResponse> vipLoanRenew(
            @Valid @NotNull VipLoanRenewRequest vipLoanRenewRequest) throws ApiException {
        okhttp3.Call localVarCall = vipLoanRenewValidateBeforeCall(vipLoanRenewRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<VipLoanRenewResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for vipLoanRepay
     *
     * @param vipLoanRepayRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> VIP Loan Repay </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Repay">VIP Loan
     *     Repay(TRADE) Documentation</a>
     */
    private okhttp3.Call vipLoanRepayCall(VipLoanRepayRequest vipLoanRepayRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/loan/vip/repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (vipLoanRepayRequest.getOrderId() != null) {
            localVarFormParams.put("orderId", vipLoanRepayRequest.getOrderId());
        }

        if (vipLoanRepayRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter().format(vipLoanRepayRequest.getAmount()));
        }

        if (vipLoanRepayRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", vipLoanRepayRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call vipLoanRepayValidateBeforeCall(VipLoanRepayRequest vipLoanRepayRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {vipLoanRepayRequest};
            Method method = this.getClass().getMethod("vipLoanRepay", VipLoanRepayRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return vipLoanRepayCall(vipLoanRepayRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * VIP Loan Repay(TRADE) VIP loan is available for VIP users only. Weight: 6000
     *
     * @param vipLoanRepayRequest (required)
     * @return ApiResponse&lt;VipLoanRepayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> VIP Loan Repay </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/vip_loan/trade/VIP-Loan-Repay">VIP Loan
     *     Repay(TRADE) Documentation</a>
     */
    public ApiResponse<VipLoanRepayResponse> vipLoanRepay(
            @Valid @NotNull VipLoanRepayRequest vipLoanRepayRequest) throws ApiException {
        okhttp3.Call localVarCall = vipLoanRepayValidateBeforeCall(vipLoanRepayRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<VipLoanRepayResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
