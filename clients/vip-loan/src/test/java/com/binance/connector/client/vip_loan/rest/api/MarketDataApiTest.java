/*
 * Binance VIP Loan REST API
 * OpenAPI Specification for the Binance VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.vip_loan.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.vip_loan.rest.model.GetBorrowInterestRateResponse;
import com.binance.connector.client.vip_loan.rest.model.GetCollateralAssetDataResponse;
import com.binance.connector.client.vip_loan.rest.model.GetLoanableAssetsDataResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for MarketDataApi */
public class MarketDataApiTest {

    private MarketDataApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new MarketDataApi(apiClientSpy);
    }

    /**
     * Get Borrow Interest Rate(USER_DATA)
     *
     * <p>Get Borrow Interest Rate Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBorrowInterestRateTest() throws ApiException, CryptoException {
        String loanCoin = "";
        Long recvWindow = 5000L;
        ApiResponse<GetBorrowInterestRateResponse> response =
                api.getBorrowInterestRate(loanCoin, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&recvWindow=5000&timestamp=1736393892000", signInputCaptor.getValue());
        assertEquals(
                "2a09517b57df001aaf35228b8642b62271321de1e3714ccb1f56606355218630",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/vip/request/interestRate", actualRequest.url().encodedPath());
    }

    /**
     * Get Collateral Asset Data(USER_DATA)
     *
     * <p>Get Collateral Asset Data Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollateralAssetDataTest() throws ApiException, CryptoException {
        String collateralCoin = "";
        Long recvWindow = 5000L;
        ApiResponse<GetCollateralAssetDataResponse> response =
                api.getCollateralAssetData(collateralCoin, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "collateralCoin=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "55075b58719a54df8f08bc09d0797b888e135d419c7e19dfe4987b5f83354c8e",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/vip/collateral/data", actualRequest.url().encodedPath());
    }

    /**
     * Get Loanable Assets Data(USER_DATA)
     *
     * <p>Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD
     * value. Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLoanableAssetsDataTest() throws ApiException, CryptoException {
        String loanCoin = "";
        Long vipLevel = 1L;
        Long recvWindow = 5000L;
        ApiResponse<GetLoanableAssetsDataResponse> response =
                api.getLoanableAssetsData(loanCoin, vipLevel, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&vipLevel=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "af7c373de8e0d92e5598d25b5891312de4a5d5f936d893524354a27ca60952d2",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/vip/loanable/data", actualRequest.url().encodedPath());
    }
}
