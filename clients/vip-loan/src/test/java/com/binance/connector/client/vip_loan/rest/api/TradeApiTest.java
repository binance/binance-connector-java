/*
 * Binance VIP Loan REST API
 * OpenAPI Specification for the Binance VIP Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.vip_loan.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.vip_loan.rest.model.VipLoanBorrowRequest;
import com.binance.connector.client.vip_loan.rest.model.VipLoanBorrowResponse;
import com.binance.connector.client.vip_loan.rest.model.VipLoanRenewRequest;
import com.binance.connector.client.vip_loan.rest.model.VipLoanRenewResponse;
import com.binance.connector.client.vip_loan.rest.model.VipLoanRepayRequest;
import com.binance.connector.client.vip_loan.rest.model.VipLoanRepayResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for TradeApi */
public class TradeApiTest {

    private TradeApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new TradeApi(apiClientSpy);
    }

    /**
     * VIP Loan Borrow(TRADE)
     *
     * <p>VIP loan is available for VIP users only. * loanAccountId refer to loan receiving account
     * * Only master account applications are supported * loanAccountId and collateralAccountId
     * under same master account * loanTerm is mandatory if user choose stable rate Weight: 0
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vipLoanBorrowTest() throws ApiException, CryptoException {
        VipLoanBorrowRequest vipLoanBorrowRequest = new VipLoanBorrowRequest();

        vipLoanBorrowRequest.loanAccountId(1L);
        vipLoanBorrowRequest.loanCoin("");
        vipLoanBorrowRequest.loanAmount(1d);
        vipLoanBorrowRequest.collateralAccountId(1L);
        vipLoanBorrowRequest.collateralCoin("");
        vipLoanBorrowRequest.isFlexibleRate(true);

        ApiResponse<VipLoanBorrowResponse> response = api.vipLoanBorrow(vipLoanBorrowRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000collateralCoin=&collateralAccountId=1&loanAccountId=1&loanCoin=&isFlexibleRate=true&loanAmount=1",
                signInputCaptor.getValue());
        assertEquals(
                "69452f0036610ef01a7af7050eb1363f515110a778f3f4c67ea6ca5e91279705",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/vip/borrow", actualRequest.url().encodedPath());
    }

    /**
     * VIP Loan Renew(TRADE)
     *
     * <p>VIP loan is available for VIP users only. Weight: 6000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vipLoanRenewTest() throws ApiException, CryptoException {
        VipLoanRenewRequest vipLoanRenewRequest = new VipLoanRenewRequest();

        vipLoanRenewRequest.orderId(1L);
        vipLoanRenewRequest.loanTerm(0L);

        ApiResponse<VipLoanRenewResponse> response = api.vipLoanRenew(vipLoanRenewRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000loanTerm=0&orderId=1", signInputCaptor.getValue());
        assertEquals(
                "4c2f7c6679438a09acf96db4e1389b9d73ed86c0a76563de8618cd98f615f721",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/vip/renew", actualRequest.url().encodedPath());
    }

    /**
     * VIP Loan Repay(TRADE)
     *
     * <p>VIP loan is available for VIP users only. Weight: 6000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void vipLoanRepayTest() throws ApiException, CryptoException {
        VipLoanRepayRequest vipLoanRepayRequest = new VipLoanRepayRequest();

        vipLoanRepayRequest.orderId(1L);
        vipLoanRepayRequest.amount(1d);

        ApiResponse<VipLoanRepayResponse> response = api.vipLoanRepay(vipLoanRepayRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000amount=1&orderId=1", signInputCaptor.getValue());
        assertEquals(
                "63a2bd291c903ff313203c537ae5664fa19322a1cd812a2a5267fc7f3c10ef2f",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/loan/vip/repay", actualRequest.url().encodedPath());
    }
}
