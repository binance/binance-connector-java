/*
 * Binance Dual Investment REST API
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.dual_investment.rest.model;

import com.binance.connector.client.dual_investment.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** SubscribeDualInvestmentProductsResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SubscribeDualInvestmentProductsResponse {
    public static final String SERIALIZED_NAME_POSITION_ID = "positionId";

    @SerializedName(SERIALIZED_NAME_POSITION_ID)
    @jakarta.annotation.Nullable
    private Long positionId;

    public static final String SERIALIZED_NAME_INVEST_COIN = "investCoin";

    @SerializedName(SERIALIZED_NAME_INVEST_COIN)
    @jakarta.annotation.Nullable
    private String investCoin;

    public static final String SERIALIZED_NAME_EXERCISED_COIN = "exercisedCoin";

    @SerializedName(SERIALIZED_NAME_EXERCISED_COIN)
    @jakarta.annotation.Nullable
    private String exercisedCoin;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_AMOUNT = "subscriptionAmount";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_AMOUNT)
    @jakarta.annotation.Nullable
    private String subscriptionAmount;

    public static final String SERIALIZED_NAME_DURATION = "duration";

    @SerializedName(SERIALIZED_NAME_DURATION)
    @jakarta.annotation.Nullable
    private Long duration;

    public static final String SERIALIZED_NAME_AUTO_COMPOUND_PLAN = "autoCompoundPlan";

    @SerializedName(SERIALIZED_NAME_AUTO_COMPOUND_PLAN)
    @jakarta.annotation.Nullable
    private String autoCompoundPlan;

    public static final String SERIALIZED_NAME_STRIKE_PRICE = "strikePrice";

    @SerializedName(SERIALIZED_NAME_STRIKE_PRICE)
    @jakarta.annotation.Nullable
    private String strikePrice;

    public static final String SERIALIZED_NAME_SETTLE_DATE = "settleDate";

    @SerializedName(SERIALIZED_NAME_SETTLE_DATE)
    @jakarta.annotation.Nullable
    private Long settleDate;

    public static final String SERIALIZED_NAME_PURCHASE_STATUS = "purchaseStatus";

    @SerializedName(SERIALIZED_NAME_PURCHASE_STATUS)
    @jakarta.annotation.Nullable
    private String purchaseStatus;

    public static final String SERIALIZED_NAME_APR = "apr";

    @SerializedName(SERIALIZED_NAME_APR)
    @jakarta.annotation.Nullable
    private String apr;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_PURCHASE_TIME = "purchaseTime";

    @SerializedName(SERIALIZED_NAME_PURCHASE_TIME)
    @jakarta.annotation.Nullable
    private Long purchaseTime;

    public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";

    @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
    @jakarta.annotation.Nullable
    private String optionType;

    public SubscribeDualInvestmentProductsResponse() {}

    public SubscribeDualInvestmentProductsResponse positionId(
            @jakarta.annotation.Nullable Long positionId) {
        this.positionId = positionId;
        return this;
    }

    /**
     * Get positionId
     *
     * @return positionId
     */
    @jakarta.annotation.Nullable
    public Long getPositionId() {
        return positionId;
    }

    public void setPositionId(@jakarta.annotation.Nullable Long positionId) {
        this.positionId = positionId;
    }

    public SubscribeDualInvestmentProductsResponse investCoin(
            @jakarta.annotation.Nullable String investCoin) {
        this.investCoin = investCoin;
        return this;
    }

    /**
     * Get investCoin
     *
     * @return investCoin
     */
    @jakarta.annotation.Nullable
    public String getInvestCoin() {
        return investCoin;
    }

    public void setInvestCoin(@jakarta.annotation.Nullable String investCoin) {
        this.investCoin = investCoin;
    }

    public SubscribeDualInvestmentProductsResponse exercisedCoin(
            @jakarta.annotation.Nullable String exercisedCoin) {
        this.exercisedCoin = exercisedCoin;
        return this;
    }

    /**
     * Get exercisedCoin
     *
     * @return exercisedCoin
     */
    @jakarta.annotation.Nullable
    public String getExercisedCoin() {
        return exercisedCoin;
    }

    public void setExercisedCoin(@jakarta.annotation.Nullable String exercisedCoin) {
        this.exercisedCoin = exercisedCoin;
    }

    public SubscribeDualInvestmentProductsResponse subscriptionAmount(
            @jakarta.annotation.Nullable String subscriptionAmount) {
        this.subscriptionAmount = subscriptionAmount;
        return this;
    }

    /**
     * Get subscriptionAmount
     *
     * @return subscriptionAmount
     */
    @jakarta.annotation.Nullable
    public String getSubscriptionAmount() {
        return subscriptionAmount;
    }

    public void setSubscriptionAmount(@jakarta.annotation.Nullable String subscriptionAmount) {
        this.subscriptionAmount = subscriptionAmount;
    }

    public SubscribeDualInvestmentProductsResponse duration(
            @jakarta.annotation.Nullable Long duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get duration
     *
     * @return duration
     */
    @jakarta.annotation.Nullable
    public Long getDuration() {
        return duration;
    }

    public void setDuration(@jakarta.annotation.Nullable Long duration) {
        this.duration = duration;
    }

    public SubscribeDualInvestmentProductsResponse autoCompoundPlan(
            @jakarta.annotation.Nullable String autoCompoundPlan) {
        this.autoCompoundPlan = autoCompoundPlan;
        return this;
    }

    /**
     * Get autoCompoundPlan
     *
     * @return autoCompoundPlan
     */
    @jakarta.annotation.Nullable
    public String getAutoCompoundPlan() {
        return autoCompoundPlan;
    }

    public void setAutoCompoundPlan(@jakarta.annotation.Nullable String autoCompoundPlan) {
        this.autoCompoundPlan = autoCompoundPlan;
    }

    public SubscribeDualInvestmentProductsResponse strikePrice(
            @jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
        return this;
    }

    /**
     * Get strikePrice
     *
     * @return strikePrice
     */
    @jakarta.annotation.Nullable
    public String getStrikePrice() {
        return strikePrice;
    }

    public void setStrikePrice(@jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
    }

    public SubscribeDualInvestmentProductsResponse settleDate(
            @jakarta.annotation.Nullable Long settleDate) {
        this.settleDate = settleDate;
        return this;
    }

    /**
     * Get settleDate
     *
     * @return settleDate
     */
    @jakarta.annotation.Nullable
    public Long getSettleDate() {
        return settleDate;
    }

    public void setSettleDate(@jakarta.annotation.Nullable Long settleDate) {
        this.settleDate = settleDate;
    }

    public SubscribeDualInvestmentProductsResponse purchaseStatus(
            @jakarta.annotation.Nullable String purchaseStatus) {
        this.purchaseStatus = purchaseStatus;
        return this;
    }

    /**
     * Get purchaseStatus
     *
     * @return purchaseStatus
     */
    @jakarta.annotation.Nullable
    public String getPurchaseStatus() {
        return purchaseStatus;
    }

    public void setPurchaseStatus(@jakarta.annotation.Nullable String purchaseStatus) {
        this.purchaseStatus = purchaseStatus;
    }

    public SubscribeDualInvestmentProductsResponse apr(@jakarta.annotation.Nullable String apr) {
        this.apr = apr;
        return this;
    }

    /**
     * Get apr
     *
     * @return apr
     */
    @jakarta.annotation.Nullable
    public String getApr() {
        return apr;
    }

    public void setApr(@jakarta.annotation.Nullable String apr) {
        this.apr = apr;
    }

    public SubscribeDualInvestmentProductsResponse orderId(
            @jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public SubscribeDualInvestmentProductsResponse purchaseTime(
            @jakarta.annotation.Nullable Long purchaseTime) {
        this.purchaseTime = purchaseTime;
        return this;
    }

    /**
     * Get purchaseTime
     *
     * @return purchaseTime
     */
    @jakarta.annotation.Nullable
    public Long getPurchaseTime() {
        return purchaseTime;
    }

    public void setPurchaseTime(@jakarta.annotation.Nullable Long purchaseTime) {
        this.purchaseTime = purchaseTime;
    }

    public SubscribeDualInvestmentProductsResponse optionType(
            @jakarta.annotation.Nullable String optionType) {
        this.optionType = optionType;
        return this;
    }

    /**
     * Get optionType
     *
     * @return optionType
     */
    @jakarta.annotation.Nullable
    public String getOptionType() {
        return optionType;
    }

    public void setOptionType(@jakarta.annotation.Nullable String optionType) {
        this.optionType = optionType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubscribeDualInvestmentProductsResponse subscribeDualInvestmentProductsResponse =
                (SubscribeDualInvestmentProductsResponse) o;
        return Objects.equals(this.positionId, subscribeDualInvestmentProductsResponse.positionId)
                && Objects.equals(
                        this.investCoin, subscribeDualInvestmentProductsResponse.investCoin)
                && Objects.equals(
                        this.exercisedCoin, subscribeDualInvestmentProductsResponse.exercisedCoin)
                && Objects.equals(
                        this.subscriptionAmount,
                        subscribeDualInvestmentProductsResponse.subscriptionAmount)
                && Objects.equals(this.duration, subscribeDualInvestmentProductsResponse.duration)
                && Objects.equals(
                        this.autoCompoundPlan,
                        subscribeDualInvestmentProductsResponse.autoCompoundPlan)
                && Objects.equals(
                        this.strikePrice, subscribeDualInvestmentProductsResponse.strikePrice)
                && Objects.equals(
                        this.settleDate, subscribeDualInvestmentProductsResponse.settleDate)
                && Objects.equals(
                        this.purchaseStatus, subscribeDualInvestmentProductsResponse.purchaseStatus)
                && Objects.equals(this.apr, subscribeDualInvestmentProductsResponse.apr)
                && Objects.equals(this.orderId, subscribeDualInvestmentProductsResponse.orderId)
                && Objects.equals(
                        this.purchaseTime, subscribeDualInvestmentProductsResponse.purchaseTime)
                && Objects.equals(
                        this.optionType, subscribeDualInvestmentProductsResponse.optionType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                positionId,
                investCoin,
                exercisedCoin,
                subscriptionAmount,
                duration,
                autoCompoundPlan,
                strikePrice,
                settleDate,
                purchaseStatus,
                apr,
                orderId,
                purchaseTime,
                optionType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubscribeDualInvestmentProductsResponse {\n");
        sb.append("		positionId: ").append(toIndentedString(positionId)).append("\n");
        sb.append("		investCoin: ").append(toIndentedString(investCoin)).append("\n");
        sb.append("		exercisedCoin: ").append(toIndentedString(exercisedCoin)).append("\n");
        sb.append("		subscriptionAmount: ")
                .append(toIndentedString(subscriptionAmount))
                .append("\n");
        sb.append("		duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("		autoCompoundPlan: ").append(toIndentedString(autoCompoundPlan)).append("\n");
        sb.append("		strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
        sb.append("		settleDate: ").append(toIndentedString(settleDate)).append("\n");
        sb.append("		purchaseStatus: ").append(toIndentedString(purchaseStatus)).append("\n");
        sb.append("		apr: ").append(toIndentedString(apr)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		purchaseTime: ").append(toIndentedString(purchaseTime)).append("\n");
        sb.append("		optionType: ").append(toIndentedString(optionType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object positionIdValue = getPositionId();
        String positionIdValueAsString = "";
        positionIdValueAsString = positionIdValue.toString();
        sb.append("positionId=").append(urlEncode(positionIdValueAsString)).append("");
        Object investCoinValue = getInvestCoin();
        String investCoinValueAsString = "";
        investCoinValueAsString = investCoinValue.toString();
        sb.append("investCoin=").append(urlEncode(investCoinValueAsString)).append("");
        Object exercisedCoinValue = getExercisedCoin();
        String exercisedCoinValueAsString = "";
        exercisedCoinValueAsString = exercisedCoinValue.toString();
        sb.append("exercisedCoin=").append(urlEncode(exercisedCoinValueAsString)).append("");
        Object subscriptionAmountValue = getSubscriptionAmount();
        String subscriptionAmountValueAsString = "";
        subscriptionAmountValueAsString = subscriptionAmountValue.toString();
        sb.append("subscriptionAmount=")
                .append(urlEncode(subscriptionAmountValueAsString))
                .append("");
        Object durationValue = getDuration();
        String durationValueAsString = "";
        durationValueAsString = durationValue.toString();
        sb.append("duration=").append(urlEncode(durationValueAsString)).append("");
        Object autoCompoundPlanValue = getAutoCompoundPlan();
        String autoCompoundPlanValueAsString = "";
        autoCompoundPlanValueAsString = autoCompoundPlanValue.toString();
        sb.append("autoCompoundPlan=").append(urlEncode(autoCompoundPlanValueAsString)).append("");
        Object strikePriceValue = getStrikePrice();
        String strikePriceValueAsString = "";
        strikePriceValueAsString = strikePriceValue.toString();
        sb.append("strikePrice=").append(urlEncode(strikePriceValueAsString)).append("");
        Object settleDateValue = getSettleDate();
        String settleDateValueAsString = "";
        settleDateValueAsString = settleDateValue.toString();
        sb.append("settleDate=").append(urlEncode(settleDateValueAsString)).append("");
        Object purchaseStatusValue = getPurchaseStatus();
        String purchaseStatusValueAsString = "";
        purchaseStatusValueAsString = purchaseStatusValue.toString();
        sb.append("purchaseStatus=").append(urlEncode(purchaseStatusValueAsString)).append("");
        Object aprValue = getApr();
        String aprValueAsString = "";
        aprValueAsString = aprValue.toString();
        sb.append("apr=").append(urlEncode(aprValueAsString)).append("");
        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object purchaseTimeValue = getPurchaseTime();
        String purchaseTimeValueAsString = "";
        purchaseTimeValueAsString = purchaseTimeValue.toString();
        sb.append("purchaseTime=").append(urlEncode(purchaseTimeValueAsString)).append("");
        Object optionTypeValue = getOptionType();
        String optionTypeValueAsString = "";
        optionTypeValueAsString = optionTypeValue.toString();
        sb.append("optionType=").append(urlEncode(optionTypeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("positionId");
        openapiFields.add("investCoin");
        openapiFields.add("exercisedCoin");
        openapiFields.add("subscriptionAmount");
        openapiFields.add("duration");
        openapiFields.add("autoCompoundPlan");
        openapiFields.add("strikePrice");
        openapiFields.add("settleDate");
        openapiFields.add("purchaseStatus");
        openapiFields.add("apr");
        openapiFields.add("orderId");
        openapiFields.add("purchaseTime");
        openapiFields.add("optionType");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     SubscribeDualInvestmentProductsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SubscribeDualInvestmentProductsResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " SubscribeDualInvestmentProductsResponse is not found in the"
                                    + " empty JSON string",
                                SubscribeDualInvestmentProductsResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SubscribeDualInvestmentProductsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `SubscribeDualInvestmentProductsResponse` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("investCoin") != null && !jsonObj.get("investCoin").isJsonNull())
                && !jsonObj.get("investCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `investCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("investCoin").toString()));
        }
        if ((jsonObj.get("exercisedCoin") != null && !jsonObj.get("exercisedCoin").isJsonNull())
                && !jsonObj.get("exercisedCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `exercisedCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("exercisedCoin").toString()));
        }
        if ((jsonObj.get("subscriptionAmount") != null
                        && !jsonObj.get("subscriptionAmount").isJsonNull())
                && !jsonObj.get("subscriptionAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subscriptionAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("subscriptionAmount").toString()));
        }
        if ((jsonObj.get("autoCompoundPlan") != null
                        && !jsonObj.get("autoCompoundPlan").isJsonNull())
                && !jsonObj.get("autoCompoundPlan").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `autoCompoundPlan` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("autoCompoundPlan").toString()));
        }
        if ((jsonObj.get("strikePrice") != null && !jsonObj.get("strikePrice").isJsonNull())
                && !jsonObj.get("strikePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strikePrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strikePrice").toString()));
        }
        if ((jsonObj.get("purchaseStatus") != null && !jsonObj.get("purchaseStatus").isJsonNull())
                && !jsonObj.get("purchaseStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `purchaseStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("purchaseStatus").toString()));
        }
        if ((jsonObj.get("apr") != null && !jsonObj.get("apr").isJsonNull())
                && !jsonObj.get("apr").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `apr` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("apr").toString()));
        }
        if ((jsonObj.get("optionType") != null && !jsonObj.get("optionType").isJsonNull())
                && !jsonObj.get("optionType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `optionType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("optionType").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SubscribeDualInvestmentProductsResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'SubscribeDualInvestmentProductsResponse'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SubscribeDualInvestmentProductsResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(SubscribeDualInvestmentProductsResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SubscribeDualInvestmentProductsResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, SubscribeDualInvestmentProductsResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SubscribeDualInvestmentProductsResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SubscribeDualInvestmentProductsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SubscribeDualInvestmentProductsResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     SubscribeDualInvestmentProductsResponse
     */
    public static SubscribeDualInvestmentProductsResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, SubscribeDualInvestmentProductsResponse.class);
    }

    /**
     * Convert an instance of SubscribeDualInvestmentProductsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
