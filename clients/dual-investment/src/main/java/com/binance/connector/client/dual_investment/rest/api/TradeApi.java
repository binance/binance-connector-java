/*
 * Binance Dual Investment REST API
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.dual_investment.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.dual_investment.rest.model.ChangeAutoCompoundStatusRequest;
import com.binance.connector.client.dual_investment.rest.model.ChangeAutoCompoundStatusResponse;
import com.binance.connector.client.dual_investment.rest.model.CheckDualInvestmentAccountsResponse;
import com.binance.connector.client.dual_investment.rest.model.GetDualInvestmentPositionsResponse;
import com.binance.connector.client.dual_investment.rest.model.SubscribeDualInvestmentProductsRequest;
import com.binance.connector.client.dual_investment.rest.model.SubscribeDualInvestmentProductsResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class TradeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-dual-investment/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public TradeApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public TradeApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changeAutoCompoundStatus
     *
     * @param changeAutoCompoundStatusRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Change Auto-Compound status </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/dual_investment/trade/Change-Auto-Compound-status">Change
     *     Auto-Compound status(USER_DATA) Documentation</a>
     */
    private okhttp3.Call changeAutoCompoundStatusCall(
            ChangeAutoCompoundStatusRequest changeAutoCompoundStatusRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/dci/product/auto_compound/edit-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (changeAutoCompoundStatusRequest.getPositionId() != null) {
            localVarFormParams.put("positionId", changeAutoCompoundStatusRequest.getPositionId());
        }

        if (changeAutoCompoundStatusRequest.getAutoCompoundPlan() != null) {
            localVarFormParams.put(
                    "AutoCompoundPlan", changeAutoCompoundStatusRequest.getAutoCompoundPlan());
        }

        if (changeAutoCompoundStatusRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", changeAutoCompoundStatusRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeAutoCompoundStatusValidateBeforeCall(
            ChangeAutoCompoundStatusRequest changeAutoCompoundStatusRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {changeAutoCompoundStatusRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "changeAutoCompoundStatus",
                                    ChangeAutoCompoundStatusRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return changeAutoCompoundStatusCall(changeAutoCompoundStatusRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Change Auto-Compound status(USER_DATA) Change Auto-Compound status Weight: 1(IP)
     *
     * @param changeAutoCompoundStatusRequest (required)
     * @return ApiResponse&lt;ChangeAutoCompoundStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Change Auto-Compound status </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/dual_investment/trade/Change-Auto-Compound-status">Change
     *     Auto-Compound status(USER_DATA) Documentation</a>
     */
    public ApiResponse<ChangeAutoCompoundStatusResponse> changeAutoCompoundStatus(
            @Valid @NotNull ChangeAutoCompoundStatusRequest changeAutoCompoundStatusRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                changeAutoCompoundStatusValidateBeforeCall(changeAutoCompoundStatusRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<ChangeAutoCompoundStatusResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for checkDualInvestmentAccounts
     *
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Check Dual Investment accounts </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/dual_investment/trade/Check-Dual-Investment-accounts">Check
     *     Dual Investment accounts(USER_DATA) Documentation</a>
     */
    private okhttp3.Call checkDualInvestmentAccountsCall(Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/dci/product/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkDualInvestmentAccountsValidateBeforeCall(Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method = this.getClass().getMethod("checkDualInvestmentAccounts", Long.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return checkDualInvestmentAccountsCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Check Dual Investment accounts(USER_DATA) Check Dual Investment accounts Weight: 1(IP)
     *
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;CheckDualInvestmentAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Check Dual Investment accounts </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/dual_investment/trade/Check-Dual-Investment-accounts">Check
     *     Dual Investment accounts(USER_DATA) Documentation</a>
     */
    public ApiResponse<CheckDualInvestmentAccountsResponse> checkDualInvestmentAccounts(
            Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall = checkDualInvestmentAccountsValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<CheckDualInvestmentAccountsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getDualInvestmentPositions
     *
     * @param status &#x60;PENDING&#x60;:Products are purchasing, will give results
     *     later;&#x60;PURCHASE_SUCCESS&#x60;:purchase successfully;&#x60;SETTLED&#x60;: Products
     *     are finish settling;&#x60;PURCHASE_FAIL&#x60;:fail to
     *     purchase;&#x60;REFUNDING&#x60;:refund ongoing;&#x60;REFUND_SUCCESS&#x60;:refund to spot
     *     account successfully; &#x60;SETTLING&#x60;:Products are settling. If don&#39;t fill this
     *     field, will response all the position status. (optional)
     * @param pageSize Default: 10, Maximum: 100 (optional)
     * @param pageIndex Default: 1 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Dual Investment positions </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/dual_investment/trade/Get-Dual-Investment-positions">Get
     *     Dual Investment positions(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getDualInvestmentPositionsCall(
            String status, Long pageSize, Long pageIndex, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/dci/product/positions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageIndex", pageIndex));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDualInvestmentPositionsValidateBeforeCall(
            String status, Long pageSize, Long pageIndex, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {status, pageSize, pageIndex, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getDualInvestmentPositions",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getDualInvestmentPositionsCall(status, pageSize, pageIndex, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Dual Investment positions(USER_DATA) Get Dual Investment positions (batch) Weight: 1(IP)
     *
     * @param status &#x60;PENDING&#x60;:Products are purchasing, will give results
     *     later;&#x60;PURCHASE_SUCCESS&#x60;:purchase successfully;&#x60;SETTLED&#x60;: Products
     *     are finish settling;&#x60;PURCHASE_FAIL&#x60;:fail to
     *     purchase;&#x60;REFUNDING&#x60;:refund ongoing;&#x60;REFUND_SUCCESS&#x60;:refund to spot
     *     account successfully; &#x60;SETTLING&#x60;:Products are settling. If don&#39;t fill this
     *     field, will response all the position status. (optional)
     * @param pageSize Default: 10, Maximum: 100 (optional)
     * @param pageIndex Default: 1 (optional)
     * @param recvWindow The value cannot be greater than 60000 (optional)
     * @return ApiResponse&lt;GetDualInvestmentPositionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Dual Investment positions </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/dual_investment/trade/Get-Dual-Investment-positions">Get
     *     Dual Investment positions(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetDualInvestmentPositionsResponse> getDualInvestmentPositions(
            String status, Long pageSize, Long pageIndex, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                getDualInvestmentPositionsValidateBeforeCall(
                        status, pageSize, pageIndex, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetDualInvestmentPositionsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for subscribeDualInvestmentProducts
     *
     * @param subscribeDualInvestmentProductsRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe Dual Investment products </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/dual_investment/trade/Subscribe-Dual-Investment-products">Subscribe
     *     Dual Investment products(USER_DATA) Documentation</a>
     */
    private okhttp3.Call subscribeDualInvestmentProductsCall(
            SubscribeDualInvestmentProductsRequest subscribeDualInvestmentProductsRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/dci/product/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscribeDualInvestmentProductsRequest.getId() != null) {
            localVarFormParams.put("id", subscribeDualInvestmentProductsRequest.getId());
        }

        if (subscribeDualInvestmentProductsRequest.getOrderId() != null) {
            localVarFormParams.put("orderId", subscribeDualInvestmentProductsRequest.getOrderId());
        }

        if (subscribeDualInvestmentProductsRequest.getDepositAmount() != null) {
            localVarFormParams.put(
                    "depositAmount",
                    DecimalFormatter.getFormatter()
                            .format(subscribeDualInvestmentProductsRequest.getDepositAmount()));
        }

        if (subscribeDualInvestmentProductsRequest.getAutoCompoundPlan() != null) {
            localVarFormParams.put(
                    "autoCompoundPlan",
                    subscribeDualInvestmentProductsRequest.getAutoCompoundPlan());
        }

        if (subscribeDualInvestmentProductsRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", subscribeDualInvestmentProductsRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeDualInvestmentProductsValidateBeforeCall(
            SubscribeDualInvestmentProductsRequest subscribeDualInvestmentProductsRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {subscribeDualInvestmentProductsRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "subscribeDualInvestmentProducts",
                                    SubscribeDualInvestmentProductsRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return subscribeDualInvestmentProductsCall(subscribeDualInvestmentProductsRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Subscribe Dual Investment products(USER_DATA) Subscribe Dual Investment products * Products
     * are not available. // this means APR changes to lower value, or orders are not unavailable. *
     * Failed. This means System or network errors. Weight: 1(IP)
     *
     * @param subscribeDualInvestmentProductsRequest (required)
     * @return ApiResponse&lt;SubscribeDualInvestmentProductsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe Dual Investment products </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/dual_investment/trade/Subscribe-Dual-Investment-products">Subscribe
     *     Dual Investment products(USER_DATA) Documentation</a>
     */
    public ApiResponse<SubscribeDualInvestmentProductsResponse> subscribeDualInvestmentProducts(
            @Valid @NotNull
                    SubscribeDualInvestmentProductsRequest subscribeDualInvestmentProductsRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                subscribeDualInvestmentProductsValidateBeforeCall(
                        subscribeDualInvestmentProductsRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SubscribeDualInvestmentProductsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
