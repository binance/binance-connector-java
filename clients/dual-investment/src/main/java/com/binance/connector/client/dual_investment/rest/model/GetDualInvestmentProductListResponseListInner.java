/*
 * Binance Dual Investment REST API
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.dual_investment.rest.model;

import com.binance.connector.client.dual_investment.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetDualInvestmentProductListResponseListInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetDualInvestmentProductListResponseListInner {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private String id;

    public static final String SERIALIZED_NAME_INVEST_COIN = "investCoin";

    @SerializedName(SERIALIZED_NAME_INVEST_COIN)
    @jakarta.annotation.Nullable
    private String investCoin;

    public static final String SERIALIZED_NAME_EXERCISED_COIN = "exercisedCoin";

    @SerializedName(SERIALIZED_NAME_EXERCISED_COIN)
    @jakarta.annotation.Nullable
    private String exercisedCoin;

    public static final String SERIALIZED_NAME_STRIKE_PRICE = "strikePrice";

    @SerializedName(SERIALIZED_NAME_STRIKE_PRICE)
    @jakarta.annotation.Nullable
    private String strikePrice;

    public static final String SERIALIZED_NAME_DURATION = "duration";

    @SerializedName(SERIALIZED_NAME_DURATION)
    @jakarta.annotation.Nullable
    private Long duration;

    public static final String SERIALIZED_NAME_SETTLE_DATE = "settleDate";

    @SerializedName(SERIALIZED_NAME_SETTLE_DATE)
    @jakarta.annotation.Nullable
    private Long settleDate;

    public static final String SERIALIZED_NAME_PURCHASE_DECIMAL = "purchaseDecimal";

    @SerializedName(SERIALIZED_NAME_PURCHASE_DECIMAL)
    @jakarta.annotation.Nullable
    private Long purchaseDecimal;

    public static final String SERIALIZED_NAME_PURCHASE_END_TIME = "purchaseEndTime";

    @SerializedName(SERIALIZED_NAME_PURCHASE_END_TIME)
    @jakarta.annotation.Nullable
    private Long purchaseEndTime;

    public static final String SERIALIZED_NAME_CAN_PURCHASE = "canPurchase";

    @SerializedName(SERIALIZED_NAME_CAN_PURCHASE)
    @jakarta.annotation.Nullable
    private Boolean canPurchase;

    public static final String SERIALIZED_NAME_APR = "apr";

    @SerializedName(SERIALIZED_NAME_APR)
    @jakarta.annotation.Nullable
    private String apr;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_MIN_AMOUNT = "minAmount";

    @SerializedName(SERIALIZED_NAME_MIN_AMOUNT)
    @jakarta.annotation.Nullable
    private String minAmount;

    public static final String SERIALIZED_NAME_MAX_AMOUNT = "maxAmount";

    @SerializedName(SERIALIZED_NAME_MAX_AMOUNT)
    @jakarta.annotation.Nullable
    private String maxAmount;

    public static final String SERIALIZED_NAME_CREATE_TIMESTAMP = "createTimestamp";

    @SerializedName(SERIALIZED_NAME_CREATE_TIMESTAMP)
    @jakarta.annotation.Nullable
    private Long createTimestamp;

    public static final String SERIALIZED_NAME_OPTION_TYPE = "optionType";

    @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
    @jakarta.annotation.Nullable
    private String optionType;

    public static final String SERIALIZED_NAME_IS_AUTO_COMPOUND_ENABLE = "isAutoCompoundEnable";

    @SerializedName(SERIALIZED_NAME_IS_AUTO_COMPOUND_ENABLE)
    @jakarta.annotation.Nullable
    private Boolean isAutoCompoundEnable;

    public static final String SERIALIZED_NAME_AUTO_COMPOUND_PLAN_LIST = "autoCompoundPlanList";

    @SerializedName(SERIALIZED_NAME_AUTO_COMPOUND_PLAN_LIST)
    @jakarta.annotation.Nullable
    private List<String> autoCompoundPlanList;

    public GetDualInvestmentProductListResponseListInner() {}

    public GetDualInvestmentProductListResponseListInner id(
            @jakarta.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable String id) {
        this.id = id;
    }

    public GetDualInvestmentProductListResponseListInner investCoin(
            @jakarta.annotation.Nullable String investCoin) {
        this.investCoin = investCoin;
        return this;
    }

    /**
     * Get investCoin
     *
     * @return investCoin
     */
    @jakarta.annotation.Nullable
    public String getInvestCoin() {
        return investCoin;
    }

    public void setInvestCoin(@jakarta.annotation.Nullable String investCoin) {
        this.investCoin = investCoin;
    }

    public GetDualInvestmentProductListResponseListInner exercisedCoin(
            @jakarta.annotation.Nullable String exercisedCoin) {
        this.exercisedCoin = exercisedCoin;
        return this;
    }

    /**
     * Get exercisedCoin
     *
     * @return exercisedCoin
     */
    @jakarta.annotation.Nullable
    public String getExercisedCoin() {
        return exercisedCoin;
    }

    public void setExercisedCoin(@jakarta.annotation.Nullable String exercisedCoin) {
        this.exercisedCoin = exercisedCoin;
    }

    public GetDualInvestmentProductListResponseListInner strikePrice(
            @jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
        return this;
    }

    /**
     * Get strikePrice
     *
     * @return strikePrice
     */
    @jakarta.annotation.Nullable
    public String getStrikePrice() {
        return strikePrice;
    }

    public void setStrikePrice(@jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
    }

    public GetDualInvestmentProductListResponseListInner duration(
            @jakarta.annotation.Nullable Long duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get duration
     *
     * @return duration
     */
    @jakarta.annotation.Nullable
    public Long getDuration() {
        return duration;
    }

    public void setDuration(@jakarta.annotation.Nullable Long duration) {
        this.duration = duration;
    }

    public GetDualInvestmentProductListResponseListInner settleDate(
            @jakarta.annotation.Nullable Long settleDate) {
        this.settleDate = settleDate;
        return this;
    }

    /**
     * Get settleDate
     *
     * @return settleDate
     */
    @jakarta.annotation.Nullable
    public Long getSettleDate() {
        return settleDate;
    }

    public void setSettleDate(@jakarta.annotation.Nullable Long settleDate) {
        this.settleDate = settleDate;
    }

    public GetDualInvestmentProductListResponseListInner purchaseDecimal(
            @jakarta.annotation.Nullable Long purchaseDecimal) {
        this.purchaseDecimal = purchaseDecimal;
        return this;
    }

    /**
     * Get purchaseDecimal
     *
     * @return purchaseDecimal
     */
    @jakarta.annotation.Nullable
    public Long getPurchaseDecimal() {
        return purchaseDecimal;
    }

    public void setPurchaseDecimal(@jakarta.annotation.Nullable Long purchaseDecimal) {
        this.purchaseDecimal = purchaseDecimal;
    }

    public GetDualInvestmentProductListResponseListInner purchaseEndTime(
            @jakarta.annotation.Nullable Long purchaseEndTime) {
        this.purchaseEndTime = purchaseEndTime;
        return this;
    }

    /**
     * Get purchaseEndTime
     *
     * @return purchaseEndTime
     */
    @jakarta.annotation.Nullable
    public Long getPurchaseEndTime() {
        return purchaseEndTime;
    }

    public void setPurchaseEndTime(@jakarta.annotation.Nullable Long purchaseEndTime) {
        this.purchaseEndTime = purchaseEndTime;
    }

    public GetDualInvestmentProductListResponseListInner canPurchase(
            @jakarta.annotation.Nullable Boolean canPurchase) {
        this.canPurchase = canPurchase;
        return this;
    }

    /**
     * Get canPurchase
     *
     * @return canPurchase
     */
    @jakarta.annotation.Nullable
    public Boolean getCanPurchase() {
        return canPurchase;
    }

    public void setCanPurchase(@jakarta.annotation.Nullable Boolean canPurchase) {
        this.canPurchase = canPurchase;
    }

    public GetDualInvestmentProductListResponseListInner apr(
            @jakarta.annotation.Nullable String apr) {
        this.apr = apr;
        return this;
    }

    /**
     * Get apr
     *
     * @return apr
     */
    @jakarta.annotation.Nullable
    public String getApr() {
        return apr;
    }

    public void setApr(@jakarta.annotation.Nullable String apr) {
        this.apr = apr;
    }

    public GetDualInvestmentProductListResponseListInner orderId(
            @jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public GetDualInvestmentProductListResponseListInner minAmount(
            @jakarta.annotation.Nullable String minAmount) {
        this.minAmount = minAmount;
        return this;
    }

    /**
     * Get minAmount
     *
     * @return minAmount
     */
    @jakarta.annotation.Nullable
    public String getMinAmount() {
        return minAmount;
    }

    public void setMinAmount(@jakarta.annotation.Nullable String minAmount) {
        this.minAmount = minAmount;
    }

    public GetDualInvestmentProductListResponseListInner maxAmount(
            @jakarta.annotation.Nullable String maxAmount) {
        this.maxAmount = maxAmount;
        return this;
    }

    /**
     * Get maxAmount
     *
     * @return maxAmount
     */
    @jakarta.annotation.Nullable
    public String getMaxAmount() {
        return maxAmount;
    }

    public void setMaxAmount(@jakarta.annotation.Nullable String maxAmount) {
        this.maxAmount = maxAmount;
    }

    public GetDualInvestmentProductListResponseListInner createTimestamp(
            @jakarta.annotation.Nullable Long createTimestamp) {
        this.createTimestamp = createTimestamp;
        return this;
    }

    /**
     * Get createTimestamp
     *
     * @return createTimestamp
     */
    @jakarta.annotation.Nullable
    public Long getCreateTimestamp() {
        return createTimestamp;
    }

    public void setCreateTimestamp(@jakarta.annotation.Nullable Long createTimestamp) {
        this.createTimestamp = createTimestamp;
    }

    public GetDualInvestmentProductListResponseListInner optionType(
            @jakarta.annotation.Nullable String optionType) {
        this.optionType = optionType;
        return this;
    }

    /**
     * Get optionType
     *
     * @return optionType
     */
    @jakarta.annotation.Nullable
    public String getOptionType() {
        return optionType;
    }

    public void setOptionType(@jakarta.annotation.Nullable String optionType) {
        this.optionType = optionType;
    }

    public GetDualInvestmentProductListResponseListInner isAutoCompoundEnable(
            @jakarta.annotation.Nullable Boolean isAutoCompoundEnable) {
        this.isAutoCompoundEnable = isAutoCompoundEnable;
        return this;
    }

    /**
     * Get isAutoCompoundEnable
     *
     * @return isAutoCompoundEnable
     */
    @jakarta.annotation.Nullable
    public Boolean getIsAutoCompoundEnable() {
        return isAutoCompoundEnable;
    }

    public void setIsAutoCompoundEnable(@jakarta.annotation.Nullable Boolean isAutoCompoundEnable) {
        this.isAutoCompoundEnable = isAutoCompoundEnable;
    }

    public GetDualInvestmentProductListResponseListInner autoCompoundPlanList(
            @jakarta.annotation.Nullable List<String> autoCompoundPlanList) {
        this.autoCompoundPlanList = autoCompoundPlanList;
        return this;
    }

    public GetDualInvestmentProductListResponseListInner addAutoCompoundPlanListItem(
            String autoCompoundPlanListItem) {
        if (this.autoCompoundPlanList == null) {
            this.autoCompoundPlanList = new ArrayList<>();
        }
        this.autoCompoundPlanList.add(autoCompoundPlanListItem);
        return this;
    }

    /**
     * Get autoCompoundPlanList
     *
     * @return autoCompoundPlanList
     */
    @jakarta.annotation.Nullable
    public List<String> getAutoCompoundPlanList() {
        return autoCompoundPlanList;
    }

    public void setAutoCompoundPlanList(
            @jakarta.annotation.Nullable List<String> autoCompoundPlanList) {
        this.autoCompoundPlanList = autoCompoundPlanList;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDualInvestmentProductListResponseListInner
                getDualInvestmentProductListResponseListInner =
                        (GetDualInvestmentProductListResponseListInner) o;
        return Objects.equals(this.id, getDualInvestmentProductListResponseListInner.id)
                && Objects.equals(
                        this.investCoin, getDualInvestmentProductListResponseListInner.investCoin)
                && Objects.equals(
                        this.exercisedCoin,
                        getDualInvestmentProductListResponseListInner.exercisedCoin)
                && Objects.equals(
                        this.strikePrice, getDualInvestmentProductListResponseListInner.strikePrice)
                && Objects.equals(
                        this.duration, getDualInvestmentProductListResponseListInner.duration)
                && Objects.equals(
                        this.settleDate, getDualInvestmentProductListResponseListInner.settleDate)
                && Objects.equals(
                        this.purchaseDecimal,
                        getDualInvestmentProductListResponseListInner.purchaseDecimal)
                && Objects.equals(
                        this.purchaseEndTime,
                        getDualInvestmentProductListResponseListInner.purchaseEndTime)
                && Objects.equals(
                        this.canPurchase, getDualInvestmentProductListResponseListInner.canPurchase)
                && Objects.equals(this.apr, getDualInvestmentProductListResponseListInner.apr)
                && Objects.equals(
                        this.orderId, getDualInvestmentProductListResponseListInner.orderId)
                && Objects.equals(
                        this.minAmount, getDualInvestmentProductListResponseListInner.minAmount)
                && Objects.equals(
                        this.maxAmount, getDualInvestmentProductListResponseListInner.maxAmount)
                && Objects.equals(
                        this.createTimestamp,
                        getDualInvestmentProductListResponseListInner.createTimestamp)
                && Objects.equals(
                        this.optionType, getDualInvestmentProductListResponseListInner.optionType)
                && Objects.equals(
                        this.isAutoCompoundEnable,
                        getDualInvestmentProductListResponseListInner.isAutoCompoundEnable)
                && Objects.equals(
                        this.autoCompoundPlanList,
                        getDualInvestmentProductListResponseListInner.autoCompoundPlanList);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                investCoin,
                exercisedCoin,
                strikePrice,
                duration,
                settleDate,
                purchaseDecimal,
                purchaseEndTime,
                canPurchase,
                apr,
                orderId,
                minAmount,
                maxAmount,
                createTimestamp,
                optionType,
                isAutoCompoundEnable,
                autoCompoundPlanList);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetDualInvestmentProductListResponseListInner {\n");
        sb.append("		id: ").append(toIndentedString(id)).append("\n");
        sb.append("		investCoin: ").append(toIndentedString(investCoin)).append("\n");
        sb.append("		exercisedCoin: ").append(toIndentedString(exercisedCoin)).append("\n");
        sb.append("		strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
        sb.append("		duration: ").append(toIndentedString(duration)).append("\n");
        sb.append("		settleDate: ").append(toIndentedString(settleDate)).append("\n");
        sb.append("		purchaseDecimal: ").append(toIndentedString(purchaseDecimal)).append("\n");
        sb.append("		purchaseEndTime: ").append(toIndentedString(purchaseEndTime)).append("\n");
        sb.append("		canPurchase: ").append(toIndentedString(canPurchase)).append("\n");
        sb.append("		apr: ").append(toIndentedString(apr)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		minAmount: ").append(toIndentedString(minAmount)).append("\n");
        sb.append("		maxAmount: ").append(toIndentedString(maxAmount)).append("\n");
        sb.append("		createTimestamp: ").append(toIndentedString(createTimestamp)).append("\n");
        sb.append("		optionType: ").append(toIndentedString(optionType)).append("\n");
        sb.append("		isAutoCompoundEnable: ")
                .append(toIndentedString(isAutoCompoundEnable))
                .append("\n");
        sb.append("		autoCompoundPlanList: ")
                .append(toIndentedString(autoCompoundPlanList))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object idValue = getId();
        String idValueAsString = "";
        idValueAsString = idValue.toString();
        sb.append("id=").append(urlEncode(idValueAsString)).append("");
        Object investCoinValue = getInvestCoin();
        String investCoinValueAsString = "";
        investCoinValueAsString = investCoinValue.toString();
        sb.append("investCoin=").append(urlEncode(investCoinValueAsString)).append("");
        Object exercisedCoinValue = getExercisedCoin();
        String exercisedCoinValueAsString = "";
        exercisedCoinValueAsString = exercisedCoinValue.toString();
        sb.append("exercisedCoin=").append(urlEncode(exercisedCoinValueAsString)).append("");
        Object strikePriceValue = getStrikePrice();
        String strikePriceValueAsString = "";
        strikePriceValueAsString = strikePriceValue.toString();
        sb.append("strikePrice=").append(urlEncode(strikePriceValueAsString)).append("");
        Object durationValue = getDuration();
        String durationValueAsString = "";
        durationValueAsString = durationValue.toString();
        sb.append("duration=").append(urlEncode(durationValueAsString)).append("");
        Object settleDateValue = getSettleDate();
        String settleDateValueAsString = "";
        settleDateValueAsString = settleDateValue.toString();
        sb.append("settleDate=").append(urlEncode(settleDateValueAsString)).append("");
        Object purchaseDecimalValue = getPurchaseDecimal();
        String purchaseDecimalValueAsString = "";
        purchaseDecimalValueAsString = purchaseDecimalValue.toString();
        sb.append("purchaseDecimal=").append(urlEncode(purchaseDecimalValueAsString)).append("");
        Object purchaseEndTimeValue = getPurchaseEndTime();
        String purchaseEndTimeValueAsString = "";
        purchaseEndTimeValueAsString = purchaseEndTimeValue.toString();
        sb.append("purchaseEndTime=").append(urlEncode(purchaseEndTimeValueAsString)).append("");
        Object canPurchaseValue = getCanPurchase();
        String canPurchaseValueAsString = "";
        canPurchaseValueAsString = canPurchaseValue.toString();
        sb.append("canPurchase=").append(urlEncode(canPurchaseValueAsString)).append("");
        Object aprValue = getApr();
        String aprValueAsString = "";
        aprValueAsString = aprValue.toString();
        sb.append("apr=").append(urlEncode(aprValueAsString)).append("");
        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object minAmountValue = getMinAmount();
        String minAmountValueAsString = "";
        minAmountValueAsString = minAmountValue.toString();
        sb.append("minAmount=").append(urlEncode(minAmountValueAsString)).append("");
        Object maxAmountValue = getMaxAmount();
        String maxAmountValueAsString = "";
        maxAmountValueAsString = maxAmountValue.toString();
        sb.append("maxAmount=").append(urlEncode(maxAmountValueAsString)).append("");
        Object createTimestampValue = getCreateTimestamp();
        String createTimestampValueAsString = "";
        createTimestampValueAsString = createTimestampValue.toString();
        sb.append("createTimestamp=").append(urlEncode(createTimestampValueAsString)).append("");
        Object optionTypeValue = getOptionType();
        String optionTypeValueAsString = "";
        optionTypeValueAsString = optionTypeValue.toString();
        sb.append("optionType=").append(urlEncode(optionTypeValueAsString)).append("");
        Object isAutoCompoundEnableValue = getIsAutoCompoundEnable();
        String isAutoCompoundEnableValueAsString = "";
        isAutoCompoundEnableValueAsString = isAutoCompoundEnableValue.toString();
        sb.append("isAutoCompoundEnable=")
                .append(urlEncode(isAutoCompoundEnableValueAsString))
                .append("");
        Object autoCompoundPlanListValue = getAutoCompoundPlanList();
        String autoCompoundPlanListValueAsString = "";
        autoCompoundPlanListValueAsString =
                (String)
                        ((Collection) autoCompoundPlanListValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("autoCompoundPlanList=")
                .append(urlEncode(autoCompoundPlanListValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("investCoin");
        openapiFields.add("exercisedCoin");
        openapiFields.add("strikePrice");
        openapiFields.add("duration");
        openapiFields.add("settleDate");
        openapiFields.add("purchaseDecimal");
        openapiFields.add("purchaseEndTime");
        openapiFields.add("canPurchase");
        openapiFields.add("apr");
        openapiFields.add("orderId");
        openapiFields.add("minAmount");
        openapiFields.add("maxAmount");
        openapiFields.add("createTimestamp");
        openapiFields.add("optionType");
        openapiFields.add("isAutoCompoundEnable");
        openapiFields.add("autoCompoundPlanList");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetDualInvestmentProductListResponseListInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetDualInvestmentProductListResponseListInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetDualInvestmentProductListResponseListInner is not found"
                                    + " in the empty JSON string",
                                GetDualInvestmentProductListResponseListInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetDualInvestmentProductListResponseListInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetDualInvestmentProductListResponseListInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
                && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("investCoin") != null && !jsonObj.get("investCoin").isJsonNull())
                && !jsonObj.get("investCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `investCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("investCoin").toString()));
        }
        if ((jsonObj.get("exercisedCoin") != null && !jsonObj.get("exercisedCoin").isJsonNull())
                && !jsonObj.get("exercisedCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `exercisedCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("exercisedCoin").toString()));
        }
        if ((jsonObj.get("strikePrice") != null && !jsonObj.get("strikePrice").isJsonNull())
                && !jsonObj.get("strikePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strikePrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strikePrice").toString()));
        }
        if ((jsonObj.get("apr") != null && !jsonObj.get("apr").isJsonNull())
                && !jsonObj.get("apr").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `apr` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("apr").toString()));
        }
        if ((jsonObj.get("minAmount") != null && !jsonObj.get("minAmount").isJsonNull())
                && !jsonObj.get("minAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("minAmount").toString()));
        }
        if ((jsonObj.get("maxAmount") != null && !jsonObj.get("maxAmount").isJsonNull())
                && !jsonObj.get("maxAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maxAmount").toString()));
        }
        if ((jsonObj.get("optionType") != null && !jsonObj.get("optionType").isJsonNull())
                && !jsonObj.get("optionType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `optionType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("optionType").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("autoCompoundPlanList") != null
                && !jsonObj.get("autoCompoundPlanList").isJsonNull()
                && !jsonObj.get("autoCompoundPlanList").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `autoCompoundPlanList` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("autoCompoundPlanList").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetDualInvestmentProductListResponseListInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetDualInvestmentProductListResponseListInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetDualInvestmentProductListResponseListInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(GetDualInvestmentProductListResponseListInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetDualInvestmentProductListResponseListInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetDualInvestmentProductListResponseListInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetDualInvestmentProductListResponseListInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetDualInvestmentProductListResponseListInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetDualInvestmentProductListResponseListInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetDualInvestmentProductListResponseListInner
     */
    public static GetDualInvestmentProductListResponseListInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetDualInvestmentProductListResponseListInner.class);
    }

    /**
     * Convert an instance of GetDualInvestmentProductListResponseListInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
