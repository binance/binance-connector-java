/*
 * Binance Dual Investment REST API
 * OpenAPI Specification for the Binance Dual Investment REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.dual_investment.rest.model;

import com.binance.connector.client.dual_investment.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** ChangeAutoCompoundStatusResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ChangeAutoCompoundStatusResponse {
    public static final String SERIALIZED_NAME_POSITION_ID = "positionId";

    @SerializedName(SERIALIZED_NAME_POSITION_ID)
    @jakarta.annotation.Nullable
    private String positionId;

    public static final String SERIALIZED_NAME_AUTO_COMPOUND_PLAN = "autoCompoundPlan";

    @SerializedName(SERIALIZED_NAME_AUTO_COMPOUND_PLAN)
    @jakarta.annotation.Nullable
    private String autoCompoundPlan;

    public ChangeAutoCompoundStatusResponse() {}

    public ChangeAutoCompoundStatusResponse positionId(
            @jakarta.annotation.Nullable String positionId) {
        this.positionId = positionId;
        return this;
    }

    /**
     * Get positionId
     *
     * @return positionId
     */
    @jakarta.annotation.Nullable
    public String getPositionId() {
        return positionId;
    }

    public void setPositionId(@jakarta.annotation.Nullable String positionId) {
        this.positionId = positionId;
    }

    public ChangeAutoCompoundStatusResponse autoCompoundPlan(
            @jakarta.annotation.Nullable String autoCompoundPlan) {
        this.autoCompoundPlan = autoCompoundPlan;
        return this;
    }

    /**
     * Get autoCompoundPlan
     *
     * @return autoCompoundPlan
     */
    @jakarta.annotation.Nullable
    public String getAutoCompoundPlan() {
        return autoCompoundPlan;
    }

    public void setAutoCompoundPlan(@jakarta.annotation.Nullable String autoCompoundPlan) {
        this.autoCompoundPlan = autoCompoundPlan;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChangeAutoCompoundStatusResponse changeAutoCompoundStatusResponse =
                (ChangeAutoCompoundStatusResponse) o;
        return Objects.equals(this.positionId, changeAutoCompoundStatusResponse.positionId)
                && Objects.equals(
                        this.autoCompoundPlan, changeAutoCompoundStatusResponse.autoCompoundPlan);
    }

    @Override
    public int hashCode() {
        return Objects.hash(positionId, autoCompoundPlan);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ChangeAutoCompoundStatusResponse {\n");
        sb.append("		positionId: ").append(toIndentedString(positionId)).append("\n");
        sb.append("		autoCompoundPlan: ").append(toIndentedString(autoCompoundPlan)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object positionIdValue = getPositionId();
        String positionIdValueAsString = "";
        positionIdValueAsString = positionIdValue.toString();
        sb.append("positionId=").append(urlEncode(positionIdValueAsString)).append("");
        Object autoCompoundPlanValue = getAutoCompoundPlan();
        String autoCompoundPlanValueAsString = "";
        autoCompoundPlanValueAsString = autoCompoundPlanValue.toString();
        sb.append("autoCompoundPlan=").append(urlEncode(autoCompoundPlanValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("positionId");
        openapiFields.add("autoCompoundPlan");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ChangeAutoCompoundStatusResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ChangeAutoCompoundStatusResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ChangeAutoCompoundStatusResponse is"
                                        + " not found in the empty JSON string",
                                ChangeAutoCompoundStatusResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ChangeAutoCompoundStatusResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ChangeAutoCompoundStatusResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("positionId") != null && !jsonObj.get("positionId").isJsonNull())
                && !jsonObj.get("positionId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionId").toString()));
        }
        if ((jsonObj.get("autoCompoundPlan") != null
                        && !jsonObj.get("autoCompoundPlan").isJsonNull())
                && !jsonObj.get("autoCompoundPlan").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `autoCompoundPlan` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("autoCompoundPlan").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ChangeAutoCompoundStatusResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ChangeAutoCompoundStatusResponse' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ChangeAutoCompoundStatusResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ChangeAutoCompoundStatusResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ChangeAutoCompoundStatusResponse>() {
                        @Override
                        public void write(JsonWriter out, ChangeAutoCompoundStatusResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ChangeAutoCompoundStatusResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ChangeAutoCompoundStatusResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ChangeAutoCompoundStatusResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     ChangeAutoCompoundStatusResponse
     */
    public static ChangeAutoCompoundStatusResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ChangeAutoCompoundStatusResponse.class);
    }

    /**
     * Convert an instance of ChangeAutoCompoundStatusResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
