/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.auto_invest.rest.model.ChangePlanStatusRequest;
import com.binance.connector.client.auto_invest.rest.model.ChangePlanStatusResponse;
import com.binance.connector.client.auto_invest.rest.model.Details;
import com.binance.connector.client.auto_invest.rest.model.IndexLinkedPlanRebalanceDetailsResponse;
import com.binance.connector.client.auto_invest.rest.model.IndexLinkedPlanRedemptionRequest;
import com.binance.connector.client.auto_invest.rest.model.IndexLinkedPlanRedemptionResponse;
import com.binance.connector.client.auto_invest.rest.model.IndexLinkedPlanRedemptionTradeResponse;
import com.binance.connector.client.auto_invest.rest.model.InvestmentPlanAdjustmentRequest;
import com.binance.connector.client.auto_invest.rest.model.InvestmentPlanAdjustmentResponse;
import com.binance.connector.client.auto_invest.rest.model.InvestmentPlanCreationRequest;
import com.binance.connector.client.auto_invest.rest.model.InvestmentPlanCreationResponse;
import com.binance.connector.client.auto_invest.rest.model.OneTimeTransactionRequest;
import com.binance.connector.client.auto_invest.rest.model.OneTimeTransactionResponse;
import com.binance.connector.client.auto_invest.rest.model.QueryHoldingDetailsOfThePlanResponse;
import com.binance.connector.client.auto_invest.rest.model.QueryIndexLinkedPlanPositionDetailsResponse;
import com.binance.connector.client.auto_invest.rest.model.QueryOneTimeTransactionStatusResponse;
import com.binance.connector.client.auto_invest.rest.model.QuerySubscriptionTransactionHistoryResponse;
import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for TradeApi */
public class TradeApiTest {

    private TradeApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new TradeApi(apiClientSpy);
    }

    /**
     * Change Plan Status(TRADE)
     *
     * <p>Change Plan Status * max one request every 3s per account Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void changePlanStatusTest() throws ApiException, CryptoException {
        ChangePlanStatusRequest changePlanStatusRequest = new ChangePlanStatusRequest();

        changePlanStatusRequest.planId(1L);
        changePlanStatusRequest.status("");

        ApiResponse<ChangePlanStatusResponse> response =
                api.changePlanStatus(changePlanStatusRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("timestamp=1736393892000planId=1&status=", signInputCaptor.getValue());
        assertEquals(
                "e91555a515d8a44caa038d28c90fbcd0462955c687fd5a0a67f5af6156c0061f",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/lending/auto-invest/plan/edit-status", actualRequest.url().encodedPath());
    }

    /**
     * Index Linked Plan Rebalance Details(USER_DATA)
     *
     * <p>Get the history of Index Linked Plan Redemption transactions * Max 30 day difference
     * between &#x60;startTime&#x60; and &#x60;endTime&#x60; * If no &#x60;startTime&#x60; and
     * &#x60;endTime&#x60;, default to show past 30 day records Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void indexLinkedPlanRebalanceDetailsTest() throws ApiException, CryptoException {
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long size = 8L;
        Long recvWindow = 5000L;
        ApiResponse<IndexLinkedPlanRebalanceDetailsResponse> response =
                api.indexLinkedPlanRebalanceDetails(startTime, endTime, current, size, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "startTime=1623319461670&endTime=1641782889000&current=1&size=8&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "7542cbab547a04dd9561523640a8a0248ec925f2970f0be027d5039f8ecfac02",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/lending/auto-invest/rebalance/history",
                actualRequest.url().encodedPath());
    }

    /**
     * Index Linked Plan Redemption(TRADE)
     *
     * <p>To redeem index-Linked plan holdings Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void indexLinkedPlanRedemptionTest() throws ApiException, CryptoException {
        IndexLinkedPlanRedemptionRequest indexLinkedPlanRedemptionRequest =
                new IndexLinkedPlanRedemptionRequest();

        indexLinkedPlanRedemptionRequest.indexId(1L);
        indexLinkedPlanRedemptionRequest.redemptionPercentage(0L);

        ApiResponse<IndexLinkedPlanRedemptionResponse> response =
                api.indexLinkedPlanRedemption(indexLinkedPlanRedemptionRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000redemptionPercentage=0&indexId=1",
                signInputCaptor.getValue());
        assertEquals(
                "4e3047c7fa3932aa3cd44bc5629dc236813ed073dc83cbb48df8558fdbeb0d55",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/lending/auto-invest/redeem", actualRequest.url().encodedPath());
    }

    /**
     * Index Linked Plan Redemption(USER_DATA)
     *
     * <p>Get the history of Index Linked Plan Redemption transactions * Max 30 day difference
     * between &#x60;startTime&#x60; and &#x60;endTime&#x60; * If no &#x60;startTime&#x60; and
     * &#x60;endTime&#x60;, default to show past 30 day records Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void indexLinkedPlanRedemptionTradeTest() throws ApiException, CryptoException {
        Long requestId = 1L;
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        String asset = "";
        Long size = 8L;
        Long recvWindow = 5000L;
        ApiResponse<IndexLinkedPlanRedemptionTradeResponse> response =
                api.indexLinkedPlanRedemptionTrade(
                        requestId, startTime, endTime, current, asset, size, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "requestId=1&startTime=1623319461670&endTime=1641782889000&current=1&asset=&size=8&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "203d5d13d945d28cdb1b090eb3564d1675e85c6b3e7ae176e890e1567a22efef",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/lending/auto-invest/redeem/history", actualRequest.url().encodedPath());
    }

    /**
     * Investment plan adjustment(TRADE)
     *
     * <p>Query Source Asset to be used for investment * max one request every 3s per account
     * Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void investmentPlanAdjustmentTest() throws ApiException, CryptoException {
        InvestmentPlanAdjustmentRequest investmentPlanAdjustmentRequest =
                new InvestmentPlanAdjustmentRequest();

        investmentPlanAdjustmentRequest.planId(1L);
        investmentPlanAdjustmentRequest.subscriptionAmount(1d);
        investmentPlanAdjustmentRequest.subscriptionCycle("");
        investmentPlanAdjustmentRequest.subscriptionStartTime(0L);
        investmentPlanAdjustmentRequest.sourceAsset("");
        investmentPlanAdjustmentRequest.details(new Details());

        ApiResponse<InvestmentPlanAdjustmentResponse> response =
                api.investmentPlanAdjustment(investmentPlanAdjustmentRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000subscriptionStartTime=0&subscriptionAmount=1&subscriptionCycle=&sourceAsset=&planId=1&details=%5B%5D",
                signInputCaptor.getValue());
        assertEquals(
                "c5fa30877e75e7ff68715db9bd1fc38cae75ca56a0f48479fb3686da53e00c6a",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/lending/auto-invest/plan/edit", actualRequest.url().encodedPath());
    }

    /**
     * Investment plan creation(USER_DATA)
     *
     * <p>Post an investment plan creation * max one request every 3s per account Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void investmentPlanCreationTest() throws ApiException, CryptoException {
        InvestmentPlanCreationRequest investmentPlanCreationRequest =
                new InvestmentPlanCreationRequest();

        investmentPlanCreationRequest.sourceType("");
        investmentPlanCreationRequest.planType("");
        investmentPlanCreationRequest.subscriptionAmount(1d);
        investmentPlanCreationRequest.subscriptionCycle("");
        investmentPlanCreationRequest.subscriptionStartTime(0L);
        investmentPlanCreationRequest.sourceAsset("");
        investmentPlanCreationRequest.details(new Details());

        ApiResponse<InvestmentPlanCreationResponse> response =
                api.investmentPlanCreation(investmentPlanCreationRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000planType=&sourceType=&subscriptionStartTime=0&subscriptionAmount=1&subscriptionCycle=&sourceAsset=&details=%5B%5D",
                signInputCaptor.getValue());
        assertEquals(
                "fb57533993497914e03a43f1c294687d015c3ff36b04bd774bc4a0db350f32c4",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/lending/auto-invest/plan/add", actualRequest.url().encodedPath());
    }

    /**
     * One Time Transaction(TRADE)
     *
     * <p>One time transaction * &#x60;planId&#x60;/&#x60;planId&#x60;/&#x60;details&#x60; must not
     * all be null Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void oneTimeTransactionTest() throws ApiException, CryptoException {
        OneTimeTransactionRequest oneTimeTransactionRequest = new OneTimeTransactionRequest();

        oneTimeTransactionRequest.sourceType("");
        oneTimeTransactionRequest.subscriptionAmount(1d);
        oneTimeTransactionRequest.sourceAsset("");
        oneTimeTransactionRequest.details(new Details());

        ApiResponse<OneTimeTransactionResponse> response =
                api.oneTimeTransaction(oneTimeTransactionRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000sourceType=&subscriptionAmount=1&sourceAsset=&details=%5B%5D",
                signInputCaptor.getValue());
        assertEquals(
                "d61f1d83cd98fea4384668bdf94fb7f750a1ec0c8a6d3cf1f49e7874d33a1614",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/lending/auto-invest/one-off", actualRequest.url().encodedPath());
    }

    /**
     * Query holding details of the plan(USER_DATA)
     *
     * <p>Query holding details of the plan Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryHoldingDetailsOfThePlanTest() throws ApiException, CryptoException {
        Long planId = 1L;
        String requestId = "1";
        Long recvWindow = 5000L;
        ApiResponse<QueryHoldingDetailsOfThePlanResponse> response =
                api.queryHoldingDetailsOfThePlan(planId, requestId, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "planId=1&requestId=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "4eb4cba1124a9c45b8076bfe11d7f7c8c9adef5aced09ed4ecf3e6e88169c456",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/lending/auto-invest/plan/id", actualRequest.url().encodedPath());
    }

    /**
     * Query Index Linked Plan Position Details(USER_DATA)
     *
     * <p>Details on users Index-Linked plan position details Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryIndexLinkedPlanPositionDetailsTest() throws ApiException, CryptoException {
        Long indexId = 1L;
        Long recvWindow = 5000L;
        ApiResponse<QueryIndexLinkedPlanPositionDetailsResponse> response =
                api.queryIndexLinkedPlanPositionDetails(indexId, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "indexId=1&recvWindow=5000&timestamp=1736393892000", signInputCaptor.getValue());
        assertEquals(
                "ca36fec333b635ceda65152b3c44a7e30c31c4e90a2ce138cef6ecb4c247e6b5",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/lending/auto-invest/index/user-summary",
                actualRequest.url().encodedPath());
    }

    /**
     * Query One-Time Transaction Status(USER_DATA)
     *
     * <p>Transaction status for one-time transaction Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryOneTimeTransactionStatusTest() throws ApiException, CryptoException {
        Long transactionId = 1L;
        String requestId = "1";
        Long recvWindow = 5000L;
        ApiResponse<QueryOneTimeTransactionStatusResponse> response =
                api.queryOneTimeTransactionStatus(transactionId, requestId, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "transactionId=1&requestId=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "085e15a3179eb89af08e4e5511dd957ac3cc0c46e241d80e95f12a5f4ca397e5",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/lending/auto-invest/one-off/status", actualRequest.url().encodedPath());
    }

    /**
     * Query subscription transaction history(USER_DATA)
     *
     * <p>Query subscription transaction history of a plan * Max span between startTime and endTime
     * is 30days * If both startTime and endTime are null，then default is 30days Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySubscriptionTransactionHistoryTest() throws ApiException, CryptoException {
        Long planId = 1L;
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long targetAsset = 0L;
        Long planType = 0L;
        Long size = 8L;
        Long current = 1L;
        Long recvWindow = 5000L;
        ApiResponse<QuerySubscriptionTransactionHistoryResponse> response =
                api.querySubscriptionTransactionHistory(
                        planId,
                        startTime,
                        endTime,
                        targetAsset,
                        planType,
                        size,
                        current,
                        recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "planId=1&startTime=1623319461670&endTime=1641782889000&targetAsset=0&planType=0&size=8&current=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "130a5c6d790c6eee3523eb68e787731f123273ff73c4c0c609cac7ea1de289f8",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/lending/auto-invest/history/list", actualRequest.url().encodedPath());
    }
}
