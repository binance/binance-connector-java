/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.auto_invest.rest.model.GetListOfPlansResponse;
import com.binance.connector.client.auto_invest.rest.model.GetTargetAssetListResponse;
import com.binance.connector.client.auto_invest.rest.model.GetTargetAssetRoiDataResponse;
import com.binance.connector.client.auto_invest.rest.model.QueryAllSourceAssetAndTargetAssetResponse;
import com.binance.connector.client.auto_invest.rest.model.QueryIndexDetailsResponse;
import com.binance.connector.client.auto_invest.rest.model.QuerySourceAssetListResponse;
import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for MarketDataApi */
public class MarketDataApiTest {

    private MarketDataApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new MarketDataApi(apiClientSpy);
    }

    /**
     * Get list of plans (USER_DATA)
     *
     * <p>Query plan lists * max one request every 3s per account Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getListOfPlansTest() throws ApiException, CryptoException {
        String planType = "";
        Long recvWindow = 5000L;
        ApiResponse<GetListOfPlansResponse> response = api.getListOfPlans(planType, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "planType=&recvWindow=5000&timestamp=1736393892000", signInputCaptor.getValue());
        assertEquals(
                "5de5a9073df925946fb4442f5f96ee73bc22fc522430a1502ffd79aac5c8efd3",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/lending/auto-invest/plan/list", actualRequest.url().encodedPath());
    }

    /**
     * Get target asset list(USER_DATA)
     *
     * <p>Get target asset list Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTargetAssetListTest() throws ApiException, CryptoException {
        Long targetAsset = 0L;
        Long size = 8L;
        Long current = 1L;
        Long recvWindow = 5000L;
        ApiResponse<GetTargetAssetListResponse> response =
                api.getTargetAssetList(targetAsset, size, current, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "targetAsset=0&size=8&current=1&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "a36d89d1eb2d5f8228428d9260f70141120c00bff6458617847c3e3852fc0321",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/lending/auto-invest/target-asset/list",
                actualRequest.url().encodedPath());
    }

    /**
     * Get target asset ROI data
     *
     * <p>ROI return list for target asset Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTargetAssetRoiDataTest() throws ApiException, CryptoException {
        String targetAsset = "";
        String hisRoiType = "";
        Long recvWindow = 5000L;
        ApiResponse<GetTargetAssetRoiDataResponse> response =
                api.getTargetAssetRoiData(targetAsset, hisRoiType, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/lending/auto-invest/target-asset/roi/list",
                actualRequest.url().encodedPath());
    }

    /**
     * Query all source asset and target asset(USER_DATA)
     *
     * <p>Query all source assets and target assets Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryAllSourceAssetAndTargetAssetTest() throws ApiException, CryptoException {
        Long recvWindow = 5000L;
        ApiResponse<QueryAllSourceAssetAndTargetAssetResponse> response =
                api.queryAllSourceAssetAndTargetAsset(recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("recvWindow=5000&timestamp=1736393892000", signInputCaptor.getValue());
        assertEquals(
                "2cdd1e484bce80021437bee6b762e6a276b1954c3a0c011a16f6f2f6a47aba75",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/lending/auto-invest/all/asset", actualRequest.url().encodedPath());
    }

    /**
     * Query Index Details(USER_DATA)
     *
     * <p>Query index details Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryIndexDetailsTest() throws ApiException, CryptoException {
        Long indexId = 1L;
        Long recvWindow = 5000L;
        ApiResponse<QueryIndexDetailsResponse> response =
                api.queryIndexDetails(indexId, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "indexId=1&recvWindow=5000&timestamp=1736393892000", signInputCaptor.getValue());
        assertEquals(
                "ca36fec333b635ceda65152b3c44a7e30c31c4e90a2ce138cef6ecb4c247e6b5",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/lending/auto-invest/index/info", actualRequest.url().encodedPath());
    }

    /**
     * Query source asset list(USER_DATA)
     *
     * <p>Query Source Asset to be used for investment Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void querySourceAssetListTest() throws ApiException, CryptoException {
        String usageType = "";
        Long targetAsset = 0L;
        Long indexId = 1L;
        Boolean flexibleAllowedToUse = true;
        String sourceType = "";
        Long recvWindow = 5000L;
        ApiResponse<QuerySourceAssetListResponse> response =
                api.querySourceAssetList(
                        usageType,
                        targetAsset,
                        indexId,
                        flexibleAllowedToUse,
                        sourceType,
                        recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "targetAsset=0&indexId=1&usageType=&flexibleAllowedToUse=true&sourceType=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "d6763190327d3ed9345f19c47c3bc145b3135abd5ee6555b4be0325fffe2bb8a",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/lending/auto-invest/source-asset/list",
                actualRequest.url().encodedPath());
    }
}
