/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryIndexLinkedPlanPositionDetailsResponseDetailsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryIndexLinkedPlanPositionDetailsResponseDetailsInner {
    public static final String SERIALIZED_NAME_TARGET_ASSET = "targetAsset";

    @SerializedName(SERIALIZED_NAME_TARGET_ASSET)
    @jakarta.annotation.Nullable
    private String targetAsset;

    public static final String SERIALIZED_NAME_AVERAGE_PRICE_IN_U_S_D = "averagePriceInUSD";

    @SerializedName(SERIALIZED_NAME_AVERAGE_PRICE_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String averagePriceInUSD;

    public static final String SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D = "totalInvestedInUSD";

    @SerializedName(SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String totalInvestedInUSD;

    public static final String SERIALIZED_NAME_CURRENT_INVESTED_IN_U_S_D = "currentInvestedInUSD";

    @SerializedName(SERIALIZED_NAME_CURRENT_INVESTED_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String currentInvestedInUSD;

    public static final String SERIALIZED_NAME_PURCHASED_AMOUNT = "purchasedAmount";

    @SerializedName(SERIALIZED_NAME_PURCHASED_AMOUNT)
    @jakarta.annotation.Nullable
    private String purchasedAmount;

    public static final String SERIALIZED_NAME_PNL_IN_U_S_D = "pnlInUSD";

    @SerializedName(SERIALIZED_NAME_PNL_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String pnlInUSD;

    public static final String SERIALIZED_NAME_ROI = "roi";

    @SerializedName(SERIALIZED_NAME_ROI)
    @jakarta.annotation.Nullable
    private String roi;

    public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";

    @SerializedName(SERIALIZED_NAME_PERCENTAGE)
    @jakarta.annotation.Nullable
    private String percentage;

    public static final String SERIALIZED_NAME_AVAILABLE_AMOUNT = "availableAmount";

    @SerializedName(SERIALIZED_NAME_AVAILABLE_AMOUNT)
    @jakarta.annotation.Nullable
    private String availableAmount;

    public static final String SERIALIZED_NAME_REDEEMED_AMOUNT = "redeemedAmount";

    @SerializedName(SERIALIZED_NAME_REDEEMED_AMOUNT)
    @jakarta.annotation.Nullable
    private String redeemedAmount;

    public static final String SERIALIZED_NAME_ASSET_VALUE_IN_U_S_D = "assetValueInUSD";

    @SerializedName(SERIALIZED_NAME_ASSET_VALUE_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String assetValueInUSD;

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner() {}

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner targetAsset(
            @jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
        return this;
    }

    /**
     * Get targetAsset
     *
     * @return targetAsset
     */
    @jakarta.annotation.Nullable
    public String getTargetAsset() {
        return targetAsset;
    }

    public void setTargetAsset(@jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner averagePriceInUSD(
            @jakarta.annotation.Nullable String averagePriceInUSD) {
        this.averagePriceInUSD = averagePriceInUSD;
        return this;
    }

    /**
     * Get averagePriceInUSD
     *
     * @return averagePriceInUSD
     */
    @jakarta.annotation.Nullable
    public String getAveragePriceInUSD() {
        return averagePriceInUSD;
    }

    public void setAveragePriceInUSD(@jakarta.annotation.Nullable String averagePriceInUSD) {
        this.averagePriceInUSD = averagePriceInUSD;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner totalInvestedInUSD(
            @jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
        return this;
    }

    /**
     * Get totalInvestedInUSD
     *
     * @return totalInvestedInUSD
     */
    @jakarta.annotation.Nullable
    public String getTotalInvestedInUSD() {
        return totalInvestedInUSD;
    }

    public void setTotalInvestedInUSD(@jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner currentInvestedInUSD(
            @jakarta.annotation.Nullable String currentInvestedInUSD) {
        this.currentInvestedInUSD = currentInvestedInUSD;
        return this;
    }

    /**
     * Get currentInvestedInUSD
     *
     * @return currentInvestedInUSD
     */
    @jakarta.annotation.Nullable
    public String getCurrentInvestedInUSD() {
        return currentInvestedInUSD;
    }

    public void setCurrentInvestedInUSD(@jakarta.annotation.Nullable String currentInvestedInUSD) {
        this.currentInvestedInUSD = currentInvestedInUSD;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner purchasedAmount(
            @jakarta.annotation.Nullable String purchasedAmount) {
        this.purchasedAmount = purchasedAmount;
        return this;
    }

    /**
     * Get purchasedAmount
     *
     * @return purchasedAmount
     */
    @jakarta.annotation.Nullable
    public String getPurchasedAmount() {
        return purchasedAmount;
    }

    public void setPurchasedAmount(@jakarta.annotation.Nullable String purchasedAmount) {
        this.purchasedAmount = purchasedAmount;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner pnlInUSD(
            @jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
        return this;
    }

    /**
     * Get pnlInUSD
     *
     * @return pnlInUSD
     */
    @jakarta.annotation.Nullable
    public String getPnlInUSD() {
        return pnlInUSD;
    }

    public void setPnlInUSD(@jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner roi(
            @jakarta.annotation.Nullable String roi) {
        this.roi = roi;
        return this;
    }

    /**
     * Get roi
     *
     * @return roi
     */
    @jakarta.annotation.Nullable
    public String getRoi() {
        return roi;
    }

    public void setRoi(@jakarta.annotation.Nullable String roi) {
        this.roi = roi;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner percentage(
            @jakarta.annotation.Nullable String percentage) {
        this.percentage = percentage;
        return this;
    }

    /**
     * Get percentage
     *
     * @return percentage
     */
    @jakarta.annotation.Nullable
    public String getPercentage() {
        return percentage;
    }

    public void setPercentage(@jakarta.annotation.Nullable String percentage) {
        this.percentage = percentage;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner availableAmount(
            @jakarta.annotation.Nullable String availableAmount) {
        this.availableAmount = availableAmount;
        return this;
    }

    /**
     * Get availableAmount
     *
     * @return availableAmount
     */
    @jakarta.annotation.Nullable
    public String getAvailableAmount() {
        return availableAmount;
    }

    public void setAvailableAmount(@jakarta.annotation.Nullable String availableAmount) {
        this.availableAmount = availableAmount;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner redeemedAmount(
            @jakarta.annotation.Nullable String redeemedAmount) {
        this.redeemedAmount = redeemedAmount;
        return this;
    }

    /**
     * Get redeemedAmount
     *
     * @return redeemedAmount
     */
    @jakarta.annotation.Nullable
    public String getRedeemedAmount() {
        return redeemedAmount;
    }

    public void setRedeemedAmount(@jakarta.annotation.Nullable String redeemedAmount) {
        this.redeemedAmount = redeemedAmount;
    }

    public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner assetValueInUSD(
            @jakarta.annotation.Nullable String assetValueInUSD) {
        this.assetValueInUSD = assetValueInUSD;
        return this;
    }

    /**
     * Get assetValueInUSD
     *
     * @return assetValueInUSD
     */
    @jakarta.annotation.Nullable
    public String getAssetValueInUSD() {
        return assetValueInUSD;
    }

    public void setAssetValueInUSD(@jakarta.annotation.Nullable String assetValueInUSD) {
        this.assetValueInUSD = assetValueInUSD;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryIndexLinkedPlanPositionDetailsResponseDetailsInner
                queryIndexLinkedPlanPositionDetailsResponseDetailsInner =
                        (QueryIndexLinkedPlanPositionDetailsResponseDetailsInner) o;
        return Objects.equals(
                        this.targetAsset,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner.targetAsset)
                && Objects.equals(
                        this.averagePriceInUSD,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner.averagePriceInUSD)
                && Objects.equals(
                        this.totalInvestedInUSD,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner.totalInvestedInUSD)
                && Objects.equals(
                        this.currentInvestedInUSD,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner
                                .currentInvestedInUSD)
                && Objects.equals(
                        this.purchasedAmount,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner.purchasedAmount)
                && Objects.equals(
                        this.pnlInUSD,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner.pnlInUSD)
                && Objects.equals(
                        this.roi, queryIndexLinkedPlanPositionDetailsResponseDetailsInner.roi)
                && Objects.equals(
                        this.percentage,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner.percentage)
                && Objects.equals(
                        this.availableAmount,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner.availableAmount)
                && Objects.equals(
                        this.redeemedAmount,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner.redeemedAmount)
                && Objects.equals(
                        this.assetValueInUSD,
                        queryIndexLinkedPlanPositionDetailsResponseDetailsInner.assetValueInUSD);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                targetAsset,
                averagePriceInUSD,
                totalInvestedInUSD,
                currentInvestedInUSD,
                purchasedAmount,
                pnlInUSD,
                roi,
                percentage,
                availableAmount,
                redeemedAmount,
                assetValueInUSD);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryIndexLinkedPlanPositionDetailsResponseDetailsInner {\n");
        sb.append("		targetAsset: ").append(toIndentedString(targetAsset)).append("\n");
        sb.append("		averagePriceInUSD: ").append(toIndentedString(averagePriceInUSD)).append("\n");
        sb.append("		totalInvestedInUSD: ")
                .append(toIndentedString(totalInvestedInUSD))
                .append("\n");
        sb.append("		currentInvestedInUSD: ")
                .append(toIndentedString(currentInvestedInUSD))
                .append("\n");
        sb.append("		purchasedAmount: ").append(toIndentedString(purchasedAmount)).append("\n");
        sb.append("		pnlInUSD: ").append(toIndentedString(pnlInUSD)).append("\n");
        sb.append("		roi: ").append(toIndentedString(roi)).append("\n");
        sb.append("		percentage: ").append(toIndentedString(percentage)).append("\n");
        sb.append("		availableAmount: ").append(toIndentedString(availableAmount)).append("\n");
        sb.append("		redeemedAmount: ").append(toIndentedString(redeemedAmount)).append("\n");
        sb.append("		assetValueInUSD: ").append(toIndentedString(assetValueInUSD)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object targetAssetValue = getTargetAsset();
        String targetAssetValueAsString = "";
        targetAssetValueAsString = targetAssetValue.toString();
        sb.append("targetAsset=").append(urlEncode(targetAssetValueAsString)).append("");
        Object averagePriceInUSDValue = getAveragePriceInUSD();
        String averagePriceInUSDValueAsString = "";
        averagePriceInUSDValueAsString = averagePriceInUSDValue.toString();
        sb.append("averagePriceInUSD=")
                .append(urlEncode(averagePriceInUSDValueAsString))
                .append("");
        Object totalInvestedInUSDValue = getTotalInvestedInUSD();
        String totalInvestedInUSDValueAsString = "";
        totalInvestedInUSDValueAsString = totalInvestedInUSDValue.toString();
        sb.append("totalInvestedInUSD=")
                .append(urlEncode(totalInvestedInUSDValueAsString))
                .append("");
        Object currentInvestedInUSDValue = getCurrentInvestedInUSD();
        String currentInvestedInUSDValueAsString = "";
        currentInvestedInUSDValueAsString = currentInvestedInUSDValue.toString();
        sb.append("currentInvestedInUSD=")
                .append(urlEncode(currentInvestedInUSDValueAsString))
                .append("");
        Object purchasedAmountValue = getPurchasedAmount();
        String purchasedAmountValueAsString = "";
        purchasedAmountValueAsString = purchasedAmountValue.toString();
        sb.append("purchasedAmount=").append(urlEncode(purchasedAmountValueAsString)).append("");
        Object pnlInUSDValue = getPnlInUSD();
        String pnlInUSDValueAsString = "";
        pnlInUSDValueAsString = pnlInUSDValue.toString();
        sb.append("pnlInUSD=").append(urlEncode(pnlInUSDValueAsString)).append("");
        Object roiValue = getRoi();
        String roiValueAsString = "";
        roiValueAsString = roiValue.toString();
        sb.append("roi=").append(urlEncode(roiValueAsString)).append("");
        Object percentageValue = getPercentage();
        String percentageValueAsString = "";
        percentageValueAsString = percentageValue.toString();
        sb.append("percentage=").append(urlEncode(percentageValueAsString)).append("");
        Object availableAmountValue = getAvailableAmount();
        String availableAmountValueAsString = "";
        availableAmountValueAsString = availableAmountValue.toString();
        sb.append("availableAmount=").append(urlEncode(availableAmountValueAsString)).append("");
        Object redeemedAmountValue = getRedeemedAmount();
        String redeemedAmountValueAsString = "";
        redeemedAmountValueAsString = redeemedAmountValue.toString();
        sb.append("redeemedAmount=").append(urlEncode(redeemedAmountValueAsString)).append("");
        Object assetValueInUSDValue = getAssetValueInUSD();
        String assetValueInUSDValueAsString = "";
        assetValueInUSDValueAsString = assetValueInUSDValue.toString();
        sb.append("assetValueInUSD=").append(urlEncode(assetValueInUSDValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("targetAsset");
        openapiFields.add("averagePriceInUSD");
        openapiFields.add("totalInvestedInUSD");
        openapiFields.add("currentInvestedInUSD");
        openapiFields.add("purchasedAmount");
        openapiFields.add("pnlInUSD");
        openapiFields.add("roi");
        openapiFields.add("percentage");
        openapiFields.add("availableAmount");
        openapiFields.add("redeemedAmount");
        openapiFields.add("assetValueInUSD");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryIndexLinkedPlanPositionDetailsResponseDetailsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryIndexLinkedPlanPositionDetailsResponseDetailsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryIndexLinkedPlanPositionDetailsResponseDetailsInner is"
                                    + " not found in the empty JSON string",
                                QueryIndexLinkedPlanPositionDetailsResponseDetailsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryIndexLinkedPlanPositionDetailsResponseDetailsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryIndexLinkedPlanPositionDetailsResponseDetailsInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("targetAsset") != null && !jsonObj.get("targetAsset").isJsonNull())
                && !jsonObj.get("targetAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `targetAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("targetAsset").toString()));
        }
        if ((jsonObj.get("averagePriceInUSD") != null
                        && !jsonObj.get("averagePriceInUSD").isJsonNull())
                && !jsonObj.get("averagePriceInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `averagePriceInUSD` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("averagePriceInUSD").toString()));
        }
        if ((jsonObj.get("totalInvestedInUSD") != null
                        && !jsonObj.get("totalInvestedInUSD").isJsonNull())
                && !jsonObj.get("totalInvestedInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalInvestedInUSD` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalInvestedInUSD").toString()));
        }
        if ((jsonObj.get("currentInvestedInUSD") != null
                        && !jsonObj.get("currentInvestedInUSD").isJsonNull())
                && !jsonObj.get("currentInvestedInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `currentInvestedInUSD` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("currentInvestedInUSD").toString()));
        }
        if ((jsonObj.get("purchasedAmount") != null && !jsonObj.get("purchasedAmount").isJsonNull())
                && !jsonObj.get("purchasedAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `purchasedAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("purchasedAmount").toString()));
        }
        if ((jsonObj.get("pnlInUSD") != null && !jsonObj.get("pnlInUSD").isJsonNull())
                && !jsonObj.get("pnlInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pnlInUSD` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("pnlInUSD").toString()));
        }
        if ((jsonObj.get("roi") != null && !jsonObj.get("roi").isJsonNull())
                && !jsonObj.get("roi").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `roi` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("roi").toString()));
        }
        if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull())
                && !jsonObj.get("percentage").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `percentage` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("percentage").toString()));
        }
        if ((jsonObj.get("availableAmount") != null && !jsonObj.get("availableAmount").isJsonNull())
                && !jsonObj.get("availableAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `availableAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("availableAmount").toString()));
        }
        if ((jsonObj.get("redeemedAmount") != null && !jsonObj.get("redeemedAmount").isJsonNull())
                && !jsonObj.get("redeemedAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `redeemedAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("redeemedAmount").toString()));
        }
        if ((jsonObj.get("assetValueInUSD") != null && !jsonObj.get("assetValueInUSD").isJsonNull())
                && !jsonObj.get("assetValueInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetValueInUSD` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("assetValueInUSD").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryIndexLinkedPlanPositionDetailsResponseDetailsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryIndexLinkedPlanPositionDetailsResponseDetailsInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryIndexLinkedPlanPositionDetailsResponseDetailsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    QueryIndexLinkedPlanPositionDetailsResponseDetailsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryIndexLinkedPlanPositionDetailsResponseDetailsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryIndexLinkedPlanPositionDetailsResponseDetailsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryIndexLinkedPlanPositionDetailsResponseDetailsInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryIndexLinkedPlanPositionDetailsResponseDetailsInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of QueryIndexLinkedPlanPositionDetailsResponseDetailsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryIndexLinkedPlanPositionDetailsResponseDetailsInner
     */
    public static QueryIndexLinkedPlanPositionDetailsResponseDetailsInner fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString, QueryIndexLinkedPlanPositionDetailsResponseDetailsInner.class);
    }

    /**
     * Convert an instance of QueryIndexLinkedPlanPositionDetailsResponseDetailsInner to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
