/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** IndexLinkedPlanRedemptionTradeResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class IndexLinkedPlanRedemptionTradeResponseInner {
    public static final String SERIALIZED_NAME_INDEX_ID = "indexId";

    @SerializedName(SERIALIZED_NAME_INDEX_ID)
    @jakarta.annotation.Nullable
    private Long indexId;

    public static final String SERIALIZED_NAME_INDEX_NAME = "indexName";

    @SerializedName(SERIALIZED_NAME_INDEX_NAME)
    @jakarta.annotation.Nullable
    private String indexName;

    public static final String SERIALIZED_NAME_REDEMPTION_ID = "redemptionId";

    @SerializedName(SERIALIZED_NAME_REDEMPTION_ID)
    @jakarta.annotation.Nullable
    private Long redemptionId;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_REDEMPTION_DATE_TIME = "redemptionDateTime";

    @SerializedName(SERIALIZED_NAME_REDEMPTION_DATE_TIME)
    @jakarta.annotation.Nullable
    private Long redemptionDateTime;

    public static final String SERIALIZED_NAME_TRANSACTION_FEE = "transactionFee";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_FEE)
    @jakarta.annotation.Nullable
    private String transactionFee;

    public static final String SERIALIZED_NAME_TRANSACTION_FEE_UNIT = "transactionFeeUnit";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_FEE_UNIT)
    @jakarta.annotation.Nullable
    private String transactionFeeUnit;

    public IndexLinkedPlanRedemptionTradeResponseInner() {}

    public IndexLinkedPlanRedemptionTradeResponseInner indexId(
            @jakarta.annotation.Nullable Long indexId) {
        this.indexId = indexId;
        return this;
    }

    /**
     * Get indexId
     *
     * @return indexId
     */
    @jakarta.annotation.Nullable
    public Long getIndexId() {
        return indexId;
    }

    public void setIndexId(@jakarta.annotation.Nullable Long indexId) {
        this.indexId = indexId;
    }

    public IndexLinkedPlanRedemptionTradeResponseInner indexName(
            @jakarta.annotation.Nullable String indexName) {
        this.indexName = indexName;
        return this;
    }

    /**
     * Get indexName
     *
     * @return indexName
     */
    @jakarta.annotation.Nullable
    public String getIndexName() {
        return indexName;
    }

    public void setIndexName(@jakarta.annotation.Nullable String indexName) {
        this.indexName = indexName;
    }

    public IndexLinkedPlanRedemptionTradeResponseInner redemptionId(
            @jakarta.annotation.Nullable Long redemptionId) {
        this.redemptionId = redemptionId;
        return this;
    }

    /**
     * Get redemptionId
     *
     * @return redemptionId
     */
    @jakarta.annotation.Nullable
    public Long getRedemptionId() {
        return redemptionId;
    }

    public void setRedemptionId(@jakarta.annotation.Nullable Long redemptionId) {
        this.redemptionId = redemptionId;
    }

    public IndexLinkedPlanRedemptionTradeResponseInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public IndexLinkedPlanRedemptionTradeResponseInner asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public IndexLinkedPlanRedemptionTradeResponseInner amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public IndexLinkedPlanRedemptionTradeResponseInner redemptionDateTime(
            @jakarta.annotation.Nullable Long redemptionDateTime) {
        this.redemptionDateTime = redemptionDateTime;
        return this;
    }

    /**
     * Get redemptionDateTime
     *
     * @return redemptionDateTime
     */
    @jakarta.annotation.Nullable
    public Long getRedemptionDateTime() {
        return redemptionDateTime;
    }

    public void setRedemptionDateTime(@jakarta.annotation.Nullable Long redemptionDateTime) {
        this.redemptionDateTime = redemptionDateTime;
    }

    public IndexLinkedPlanRedemptionTradeResponseInner transactionFee(
            @jakarta.annotation.Nullable String transactionFee) {
        this.transactionFee = transactionFee;
        return this;
    }

    /**
     * Get transactionFee
     *
     * @return transactionFee
     */
    @jakarta.annotation.Nullable
    public String getTransactionFee() {
        return transactionFee;
    }

    public void setTransactionFee(@jakarta.annotation.Nullable String transactionFee) {
        this.transactionFee = transactionFee;
    }

    public IndexLinkedPlanRedemptionTradeResponseInner transactionFeeUnit(
            @jakarta.annotation.Nullable String transactionFeeUnit) {
        this.transactionFeeUnit = transactionFeeUnit;
        return this;
    }

    /**
     * Get transactionFeeUnit
     *
     * @return transactionFeeUnit
     */
    @jakarta.annotation.Nullable
    public String getTransactionFeeUnit() {
        return transactionFeeUnit;
    }

    public void setTransactionFeeUnit(@jakarta.annotation.Nullable String transactionFeeUnit) {
        this.transactionFeeUnit = transactionFeeUnit;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndexLinkedPlanRedemptionTradeResponseInner indexLinkedPlanRedemptionTradeResponseInner =
                (IndexLinkedPlanRedemptionTradeResponseInner) o;
        return Objects.equals(this.indexId, indexLinkedPlanRedemptionTradeResponseInner.indexId)
                && Objects.equals(
                        this.indexName, indexLinkedPlanRedemptionTradeResponseInner.indexName)
                && Objects.equals(
                        this.redemptionId, indexLinkedPlanRedemptionTradeResponseInner.redemptionId)
                && Objects.equals(this.status, indexLinkedPlanRedemptionTradeResponseInner.status)
                && Objects.equals(this.asset, indexLinkedPlanRedemptionTradeResponseInner.asset)
                && Objects.equals(this.amount, indexLinkedPlanRedemptionTradeResponseInner.amount)
                && Objects.equals(
                        this.redemptionDateTime,
                        indexLinkedPlanRedemptionTradeResponseInner.redemptionDateTime)
                && Objects.equals(
                        this.transactionFee,
                        indexLinkedPlanRedemptionTradeResponseInner.transactionFee)
                && Objects.equals(
                        this.transactionFeeUnit,
                        indexLinkedPlanRedemptionTradeResponseInner.transactionFeeUnit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                indexId,
                indexName,
                redemptionId,
                status,
                asset,
                amount,
                redemptionDateTime,
                transactionFee,
                transactionFeeUnit);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class IndexLinkedPlanRedemptionTradeResponseInner {\n");
        sb.append("		indexId: ").append(toIndentedString(indexId)).append("\n");
        sb.append("		indexName: ").append(toIndentedString(indexName)).append("\n");
        sb.append("		redemptionId: ").append(toIndentedString(redemptionId)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		redemptionDateTime: ")
                .append(toIndentedString(redemptionDateTime))
                .append("\n");
        sb.append("		transactionFee: ").append(toIndentedString(transactionFee)).append("\n");
        sb.append("		transactionFeeUnit: ")
                .append(toIndentedString(transactionFeeUnit))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object indexIdValue = getIndexId();
        String indexIdValueAsString = "";
        indexIdValueAsString = indexIdValue.toString();
        sb.append("indexId=").append(urlEncode(indexIdValueAsString)).append("");
        Object indexNameValue = getIndexName();
        String indexNameValueAsString = "";
        indexNameValueAsString = indexNameValue.toString();
        sb.append("indexName=").append(urlEncode(indexNameValueAsString)).append("");
        Object redemptionIdValue = getRedemptionId();
        String redemptionIdValueAsString = "";
        redemptionIdValueAsString = redemptionIdValue.toString();
        sb.append("redemptionId=").append(urlEncode(redemptionIdValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object redemptionDateTimeValue = getRedemptionDateTime();
        String redemptionDateTimeValueAsString = "";
        redemptionDateTimeValueAsString = redemptionDateTimeValue.toString();
        sb.append("redemptionDateTime=")
                .append(urlEncode(redemptionDateTimeValueAsString))
                .append("");
        Object transactionFeeValue = getTransactionFee();
        String transactionFeeValueAsString = "";
        transactionFeeValueAsString = transactionFeeValue.toString();
        sb.append("transactionFee=").append(urlEncode(transactionFeeValueAsString)).append("");
        Object transactionFeeUnitValue = getTransactionFeeUnit();
        String transactionFeeUnitValueAsString = "";
        transactionFeeUnitValueAsString = transactionFeeUnitValue.toString();
        sb.append("transactionFeeUnit=")
                .append(urlEncode(transactionFeeUnitValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("indexId");
        openapiFields.add("indexName");
        openapiFields.add("redemptionId");
        openapiFields.add("status");
        openapiFields.add("asset");
        openapiFields.add("amount");
        openapiFields.add("redemptionDateTime");
        openapiFields.add("transactionFee");
        openapiFields.add("transactionFeeUnit");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     IndexLinkedPlanRedemptionTradeResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!IndexLinkedPlanRedemptionTradeResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " IndexLinkedPlanRedemptionTradeResponseInner is not found in"
                                    + " the empty JSON string",
                                IndexLinkedPlanRedemptionTradeResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!IndexLinkedPlanRedemptionTradeResponseInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `IndexLinkedPlanRedemptionTradeResponseInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("indexName") != null && !jsonObj.get("indexName").isJsonNull())
                && !jsonObj.get("indexName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `indexName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("indexName").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("transactionFee") != null && !jsonObj.get("transactionFee").isJsonNull())
                && !jsonObj.get("transactionFee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `transactionFee` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("transactionFee").toString()));
        }
        if ((jsonObj.get("transactionFeeUnit") != null
                        && !jsonObj.get("transactionFeeUnit").isJsonNull())
                && !jsonObj.get("transactionFeeUnit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `transactionFeeUnit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("transactionFeeUnit").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!IndexLinkedPlanRedemptionTradeResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'IndexLinkedPlanRedemptionTradeResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IndexLinkedPlanRedemptionTradeResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(IndexLinkedPlanRedemptionTradeResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<IndexLinkedPlanRedemptionTradeResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, IndexLinkedPlanRedemptionTradeResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public IndexLinkedPlanRedemptionTradeResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of IndexLinkedPlanRedemptionTradeResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of IndexLinkedPlanRedemptionTradeResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     IndexLinkedPlanRedemptionTradeResponseInner
     */
    public static IndexLinkedPlanRedemptionTradeResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, IndexLinkedPlanRedemptionTradeResponseInner.class);
    }

    /**
     * Convert an instance of IndexLinkedPlanRedemptionTradeResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
