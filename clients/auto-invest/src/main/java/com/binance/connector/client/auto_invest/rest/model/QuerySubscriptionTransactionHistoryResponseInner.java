/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QuerySubscriptionTransactionHistoryResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QuerySubscriptionTransactionHistoryResponseInner {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private Long id;

    public static final String SERIALIZED_NAME_TARGET_ASSET = "targetAsset";

    @SerializedName(SERIALIZED_NAME_TARGET_ASSET)
    @jakarta.annotation.Nullable
    private String targetAsset;

    public static final String SERIALIZED_NAME_PLAN_TYPE = "planType";

    @SerializedName(SERIALIZED_NAME_PLAN_TYPE)
    @jakarta.annotation.Nullable
    private String planType;

    public static final String SERIALIZED_NAME_PLAN_NAME = "planName";

    @SerializedName(SERIALIZED_NAME_PLAN_NAME)
    @jakarta.annotation.Nullable
    private String planName;

    public static final String SERIALIZED_NAME_PLAN_ID = "planId";

    @SerializedName(SERIALIZED_NAME_PLAN_ID)
    @jakarta.annotation.Nullable
    private Long planId;

    public static final String SERIALIZED_NAME_TRANSACTION_DATE_TIME = "transactionDateTime";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE_TIME)
    @jakarta.annotation.Nullable
    private Long transactionDateTime;

    public static final String SERIALIZED_NAME_TRANSACTION_STATUS = "transactionStatus";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_STATUS)
    @jakarta.annotation.Nullable
    private String transactionStatus;

    public static final String SERIALIZED_NAME_FAILED_TYPE = "failedType";

    @SerializedName(SERIALIZED_NAME_FAILED_TYPE)
    @jakarta.annotation.Nullable
    private String failedType;

    public static final String SERIALIZED_NAME_SOURCE_ASSET = "sourceAsset";

    @SerializedName(SERIALIZED_NAME_SOURCE_ASSET)
    @jakarta.annotation.Nullable
    private String sourceAsset;

    public static final String SERIALIZED_NAME_SOURCE_ASSET_AMOUNT = "sourceAssetAmount";

    @SerializedName(SERIALIZED_NAME_SOURCE_ASSET_AMOUNT)
    @jakarta.annotation.Nullable
    private String sourceAssetAmount;

    public static final String SERIALIZED_NAME_TARGET_ASSET_AMOUNT = "targetAssetAmount";

    @SerializedName(SERIALIZED_NAME_TARGET_ASSET_AMOUNT)
    @jakarta.annotation.Nullable
    private String targetAssetAmount;

    public static final String SERIALIZED_NAME_SOURCE_WALLET = "sourceWallet";

    @SerializedName(SERIALIZED_NAME_SOURCE_WALLET)
    @jakarta.annotation.Nullable
    private String sourceWallet;

    public static final String SERIALIZED_NAME_FLEXIBLE_USED = "flexibleUsed";

    @SerializedName(SERIALIZED_NAME_FLEXIBLE_USED)
    @jakarta.annotation.Nullable
    private String flexibleUsed;

    public static final String SERIALIZED_NAME_TRANSACTION_FEE = "transactionFee";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_FEE)
    @jakarta.annotation.Nullable
    private String transactionFee;

    public static final String SERIALIZED_NAME_TRANSACTION_FEE_UNIT = "transactionFeeUnit";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_FEE_UNIT)
    @jakarta.annotation.Nullable
    private String transactionFeeUnit;

    public static final String SERIALIZED_NAME_EXECUTION_PRICE = "executionPrice";

    @SerializedName(SERIALIZED_NAME_EXECUTION_PRICE)
    @jakarta.annotation.Nullable
    private String executionPrice;

    public static final String SERIALIZED_NAME_EXECUTION_TYPE = "executionType";

    @SerializedName(SERIALIZED_NAME_EXECUTION_TYPE)
    @jakarta.annotation.Nullable
    private String executionType;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_CYCLE = "subscriptionCycle";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_CYCLE)
    @jakarta.annotation.Nullable
    private String subscriptionCycle;

    public QuerySubscriptionTransactionHistoryResponseInner() {}

    public QuerySubscriptionTransactionHistoryResponseInner id(
            @jakarta.annotation.Nullable Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public Long getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable Long id) {
        this.id = id;
    }

    public QuerySubscriptionTransactionHistoryResponseInner targetAsset(
            @jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
        return this;
    }

    /**
     * Get targetAsset
     *
     * @return targetAsset
     */
    @jakarta.annotation.Nullable
    public String getTargetAsset() {
        return targetAsset;
    }

    public void setTargetAsset(@jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
    }

    public QuerySubscriptionTransactionHistoryResponseInner planType(
            @jakarta.annotation.Nullable String planType) {
        this.planType = planType;
        return this;
    }

    /**
     * Get planType
     *
     * @return planType
     */
    @jakarta.annotation.Nullable
    public String getPlanType() {
        return planType;
    }

    public void setPlanType(@jakarta.annotation.Nullable String planType) {
        this.planType = planType;
    }

    public QuerySubscriptionTransactionHistoryResponseInner planName(
            @jakarta.annotation.Nullable String planName) {
        this.planName = planName;
        return this;
    }

    /**
     * Get planName
     *
     * @return planName
     */
    @jakarta.annotation.Nullable
    public String getPlanName() {
        return planName;
    }

    public void setPlanName(@jakarta.annotation.Nullable String planName) {
        this.planName = planName;
    }

    public QuerySubscriptionTransactionHistoryResponseInner planId(
            @jakarta.annotation.Nullable Long planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get planId
     *
     * @return planId
     */
    @jakarta.annotation.Nullable
    public Long getPlanId() {
        return planId;
    }

    public void setPlanId(@jakarta.annotation.Nullable Long planId) {
        this.planId = planId;
    }

    public QuerySubscriptionTransactionHistoryResponseInner transactionDateTime(
            @jakarta.annotation.Nullable Long transactionDateTime) {
        this.transactionDateTime = transactionDateTime;
        return this;
    }

    /**
     * Get transactionDateTime
     *
     * @return transactionDateTime
     */
    @jakarta.annotation.Nullable
    public Long getTransactionDateTime() {
        return transactionDateTime;
    }

    public void setTransactionDateTime(@jakarta.annotation.Nullable Long transactionDateTime) {
        this.transactionDateTime = transactionDateTime;
    }

    public QuerySubscriptionTransactionHistoryResponseInner transactionStatus(
            @jakarta.annotation.Nullable String transactionStatus) {
        this.transactionStatus = transactionStatus;
        return this;
    }

    /**
     * Get transactionStatus
     *
     * @return transactionStatus
     */
    @jakarta.annotation.Nullable
    public String getTransactionStatus() {
        return transactionStatus;
    }

    public void setTransactionStatus(@jakarta.annotation.Nullable String transactionStatus) {
        this.transactionStatus = transactionStatus;
    }

    public QuerySubscriptionTransactionHistoryResponseInner failedType(
            @jakarta.annotation.Nullable String failedType) {
        this.failedType = failedType;
        return this;
    }

    /**
     * Get failedType
     *
     * @return failedType
     */
    @jakarta.annotation.Nullable
    public String getFailedType() {
        return failedType;
    }

    public void setFailedType(@jakarta.annotation.Nullable String failedType) {
        this.failedType = failedType;
    }

    public QuerySubscriptionTransactionHistoryResponseInner sourceAsset(
            @jakarta.annotation.Nullable String sourceAsset) {
        this.sourceAsset = sourceAsset;
        return this;
    }

    /**
     * Get sourceAsset
     *
     * @return sourceAsset
     */
    @jakarta.annotation.Nullable
    public String getSourceAsset() {
        return sourceAsset;
    }

    public void setSourceAsset(@jakarta.annotation.Nullable String sourceAsset) {
        this.sourceAsset = sourceAsset;
    }

    public QuerySubscriptionTransactionHistoryResponseInner sourceAssetAmount(
            @jakarta.annotation.Nullable String sourceAssetAmount) {
        this.sourceAssetAmount = sourceAssetAmount;
        return this;
    }

    /**
     * Get sourceAssetAmount
     *
     * @return sourceAssetAmount
     */
    @jakarta.annotation.Nullable
    public String getSourceAssetAmount() {
        return sourceAssetAmount;
    }

    public void setSourceAssetAmount(@jakarta.annotation.Nullable String sourceAssetAmount) {
        this.sourceAssetAmount = sourceAssetAmount;
    }

    public QuerySubscriptionTransactionHistoryResponseInner targetAssetAmount(
            @jakarta.annotation.Nullable String targetAssetAmount) {
        this.targetAssetAmount = targetAssetAmount;
        return this;
    }

    /**
     * Get targetAssetAmount
     *
     * @return targetAssetAmount
     */
    @jakarta.annotation.Nullable
    public String getTargetAssetAmount() {
        return targetAssetAmount;
    }

    public void setTargetAssetAmount(@jakarta.annotation.Nullable String targetAssetAmount) {
        this.targetAssetAmount = targetAssetAmount;
    }

    public QuerySubscriptionTransactionHistoryResponseInner sourceWallet(
            @jakarta.annotation.Nullable String sourceWallet) {
        this.sourceWallet = sourceWallet;
        return this;
    }

    /**
     * Get sourceWallet
     *
     * @return sourceWallet
     */
    @jakarta.annotation.Nullable
    public String getSourceWallet() {
        return sourceWallet;
    }

    public void setSourceWallet(@jakarta.annotation.Nullable String sourceWallet) {
        this.sourceWallet = sourceWallet;
    }

    public QuerySubscriptionTransactionHistoryResponseInner flexibleUsed(
            @jakarta.annotation.Nullable String flexibleUsed) {
        this.flexibleUsed = flexibleUsed;
        return this;
    }

    /**
     * Get flexibleUsed
     *
     * @return flexibleUsed
     */
    @jakarta.annotation.Nullable
    public String getFlexibleUsed() {
        return flexibleUsed;
    }

    public void setFlexibleUsed(@jakarta.annotation.Nullable String flexibleUsed) {
        this.flexibleUsed = flexibleUsed;
    }

    public QuerySubscriptionTransactionHistoryResponseInner transactionFee(
            @jakarta.annotation.Nullable String transactionFee) {
        this.transactionFee = transactionFee;
        return this;
    }

    /**
     * Get transactionFee
     *
     * @return transactionFee
     */
    @jakarta.annotation.Nullable
    public String getTransactionFee() {
        return transactionFee;
    }

    public void setTransactionFee(@jakarta.annotation.Nullable String transactionFee) {
        this.transactionFee = transactionFee;
    }

    public QuerySubscriptionTransactionHistoryResponseInner transactionFeeUnit(
            @jakarta.annotation.Nullable String transactionFeeUnit) {
        this.transactionFeeUnit = transactionFeeUnit;
        return this;
    }

    /**
     * Get transactionFeeUnit
     *
     * @return transactionFeeUnit
     */
    @jakarta.annotation.Nullable
    public String getTransactionFeeUnit() {
        return transactionFeeUnit;
    }

    public void setTransactionFeeUnit(@jakarta.annotation.Nullable String transactionFeeUnit) {
        this.transactionFeeUnit = transactionFeeUnit;
    }

    public QuerySubscriptionTransactionHistoryResponseInner executionPrice(
            @jakarta.annotation.Nullable String executionPrice) {
        this.executionPrice = executionPrice;
        return this;
    }

    /**
     * Get executionPrice
     *
     * @return executionPrice
     */
    @jakarta.annotation.Nullable
    public String getExecutionPrice() {
        return executionPrice;
    }

    public void setExecutionPrice(@jakarta.annotation.Nullable String executionPrice) {
        this.executionPrice = executionPrice;
    }

    public QuerySubscriptionTransactionHistoryResponseInner executionType(
            @jakarta.annotation.Nullable String executionType) {
        this.executionType = executionType;
        return this;
    }

    /**
     * Get executionType
     *
     * @return executionType
     */
    @jakarta.annotation.Nullable
    public String getExecutionType() {
        return executionType;
    }

    public void setExecutionType(@jakarta.annotation.Nullable String executionType) {
        this.executionType = executionType;
    }

    public QuerySubscriptionTransactionHistoryResponseInner subscriptionCycle(
            @jakarta.annotation.Nullable String subscriptionCycle) {
        this.subscriptionCycle = subscriptionCycle;
        return this;
    }

    /**
     * Get subscriptionCycle
     *
     * @return subscriptionCycle
     */
    @jakarta.annotation.Nullable
    public String getSubscriptionCycle() {
        return subscriptionCycle;
    }

    public void setSubscriptionCycle(@jakarta.annotation.Nullable String subscriptionCycle) {
        this.subscriptionCycle = subscriptionCycle;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuerySubscriptionTransactionHistoryResponseInner
                querySubscriptionTransactionHistoryResponseInner =
                        (QuerySubscriptionTransactionHistoryResponseInner) o;
        return Objects.equals(this.id, querySubscriptionTransactionHistoryResponseInner.id)
                && Objects.equals(
                        this.targetAsset,
                        querySubscriptionTransactionHistoryResponseInner.targetAsset)
                && Objects.equals(
                        this.planType, querySubscriptionTransactionHistoryResponseInner.planType)
                && Objects.equals(
                        this.planName, querySubscriptionTransactionHistoryResponseInner.planName)
                && Objects.equals(
                        this.planId, querySubscriptionTransactionHistoryResponseInner.planId)
                && Objects.equals(
                        this.transactionDateTime,
                        querySubscriptionTransactionHistoryResponseInner.transactionDateTime)
                && Objects.equals(
                        this.transactionStatus,
                        querySubscriptionTransactionHistoryResponseInner.transactionStatus)
                && Objects.equals(
                        this.failedType,
                        querySubscriptionTransactionHistoryResponseInner.failedType)
                && Objects.equals(
                        this.sourceAsset,
                        querySubscriptionTransactionHistoryResponseInner.sourceAsset)
                && Objects.equals(
                        this.sourceAssetAmount,
                        querySubscriptionTransactionHistoryResponseInner.sourceAssetAmount)
                && Objects.equals(
                        this.targetAssetAmount,
                        querySubscriptionTransactionHistoryResponseInner.targetAssetAmount)
                && Objects.equals(
                        this.sourceWallet,
                        querySubscriptionTransactionHistoryResponseInner.sourceWallet)
                && Objects.equals(
                        this.flexibleUsed,
                        querySubscriptionTransactionHistoryResponseInner.flexibleUsed)
                && Objects.equals(
                        this.transactionFee,
                        querySubscriptionTransactionHistoryResponseInner.transactionFee)
                && Objects.equals(
                        this.transactionFeeUnit,
                        querySubscriptionTransactionHistoryResponseInner.transactionFeeUnit)
                && Objects.equals(
                        this.executionPrice,
                        querySubscriptionTransactionHistoryResponseInner.executionPrice)
                && Objects.equals(
                        this.executionType,
                        querySubscriptionTransactionHistoryResponseInner.executionType)
                && Objects.equals(
                        this.subscriptionCycle,
                        querySubscriptionTransactionHistoryResponseInner.subscriptionCycle);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                targetAsset,
                planType,
                planName,
                planId,
                transactionDateTime,
                transactionStatus,
                failedType,
                sourceAsset,
                sourceAssetAmount,
                targetAssetAmount,
                sourceWallet,
                flexibleUsed,
                transactionFee,
                transactionFeeUnit,
                executionPrice,
                executionType,
                subscriptionCycle);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QuerySubscriptionTransactionHistoryResponseInner {\n");
        sb.append("		id: ").append(toIndentedString(id)).append("\n");
        sb.append("		targetAsset: ").append(toIndentedString(targetAsset)).append("\n");
        sb.append("		planType: ").append(toIndentedString(planType)).append("\n");
        sb.append("		planName: ").append(toIndentedString(planName)).append("\n");
        sb.append("		planId: ").append(toIndentedString(planId)).append("\n");
        sb.append("		transactionDateTime: ")
                .append(toIndentedString(transactionDateTime))
                .append("\n");
        sb.append("		transactionStatus: ").append(toIndentedString(transactionStatus)).append("\n");
        sb.append("		failedType: ").append(toIndentedString(failedType)).append("\n");
        sb.append("		sourceAsset: ").append(toIndentedString(sourceAsset)).append("\n");
        sb.append("		sourceAssetAmount: ").append(toIndentedString(sourceAssetAmount)).append("\n");
        sb.append("		targetAssetAmount: ").append(toIndentedString(targetAssetAmount)).append("\n");
        sb.append("		sourceWallet: ").append(toIndentedString(sourceWallet)).append("\n");
        sb.append("		flexibleUsed: ").append(toIndentedString(flexibleUsed)).append("\n");
        sb.append("		transactionFee: ").append(toIndentedString(transactionFee)).append("\n");
        sb.append("		transactionFeeUnit: ")
                .append(toIndentedString(transactionFeeUnit))
                .append("\n");
        sb.append("		executionPrice: ").append(toIndentedString(executionPrice)).append("\n");
        sb.append("		executionType: ").append(toIndentedString(executionType)).append("\n");
        sb.append("		subscriptionCycle: ").append(toIndentedString(subscriptionCycle)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object idValue = getId();
        String idValueAsString = "";
        idValueAsString = idValue.toString();
        sb.append("id=").append(urlEncode(idValueAsString)).append("");
        Object targetAssetValue = getTargetAsset();
        String targetAssetValueAsString = "";
        targetAssetValueAsString = targetAssetValue.toString();
        sb.append("targetAsset=").append(urlEncode(targetAssetValueAsString)).append("");
        Object planTypeValue = getPlanType();
        String planTypeValueAsString = "";
        planTypeValueAsString = planTypeValue.toString();
        sb.append("planType=").append(urlEncode(planTypeValueAsString)).append("");
        Object planNameValue = getPlanName();
        String planNameValueAsString = "";
        planNameValueAsString = planNameValue.toString();
        sb.append("planName=").append(urlEncode(planNameValueAsString)).append("");
        Object planIdValue = getPlanId();
        String planIdValueAsString = "";
        planIdValueAsString = planIdValue.toString();
        sb.append("planId=").append(urlEncode(planIdValueAsString)).append("");
        Object transactionDateTimeValue = getTransactionDateTime();
        String transactionDateTimeValueAsString = "";
        transactionDateTimeValueAsString = transactionDateTimeValue.toString();
        sb.append("transactionDateTime=")
                .append(urlEncode(transactionDateTimeValueAsString))
                .append("");
        Object transactionStatusValue = getTransactionStatus();
        String transactionStatusValueAsString = "";
        transactionStatusValueAsString = transactionStatusValue.toString();
        sb.append("transactionStatus=")
                .append(urlEncode(transactionStatusValueAsString))
                .append("");
        Object failedTypeValue = getFailedType();
        String failedTypeValueAsString = "";
        failedTypeValueAsString = failedTypeValue.toString();
        sb.append("failedType=").append(urlEncode(failedTypeValueAsString)).append("");
        Object sourceAssetValue = getSourceAsset();
        String sourceAssetValueAsString = "";
        sourceAssetValueAsString = sourceAssetValue.toString();
        sb.append("sourceAsset=").append(urlEncode(sourceAssetValueAsString)).append("");
        Object sourceAssetAmountValue = getSourceAssetAmount();
        String sourceAssetAmountValueAsString = "";
        sourceAssetAmountValueAsString = sourceAssetAmountValue.toString();
        sb.append("sourceAssetAmount=")
                .append(urlEncode(sourceAssetAmountValueAsString))
                .append("");
        Object targetAssetAmountValue = getTargetAssetAmount();
        String targetAssetAmountValueAsString = "";
        targetAssetAmountValueAsString = targetAssetAmountValue.toString();
        sb.append("targetAssetAmount=")
                .append(urlEncode(targetAssetAmountValueAsString))
                .append("");
        Object sourceWalletValue = getSourceWallet();
        String sourceWalletValueAsString = "";
        sourceWalletValueAsString = sourceWalletValue.toString();
        sb.append("sourceWallet=").append(urlEncode(sourceWalletValueAsString)).append("");
        Object flexibleUsedValue = getFlexibleUsed();
        String flexibleUsedValueAsString = "";
        flexibleUsedValueAsString = flexibleUsedValue.toString();
        sb.append("flexibleUsed=").append(urlEncode(flexibleUsedValueAsString)).append("");
        Object transactionFeeValue = getTransactionFee();
        String transactionFeeValueAsString = "";
        transactionFeeValueAsString = transactionFeeValue.toString();
        sb.append("transactionFee=").append(urlEncode(transactionFeeValueAsString)).append("");
        Object transactionFeeUnitValue = getTransactionFeeUnit();
        String transactionFeeUnitValueAsString = "";
        transactionFeeUnitValueAsString = transactionFeeUnitValue.toString();
        sb.append("transactionFeeUnit=")
                .append(urlEncode(transactionFeeUnitValueAsString))
                .append("");
        Object executionPriceValue = getExecutionPrice();
        String executionPriceValueAsString = "";
        executionPriceValueAsString = executionPriceValue.toString();
        sb.append("executionPrice=").append(urlEncode(executionPriceValueAsString)).append("");
        Object executionTypeValue = getExecutionType();
        String executionTypeValueAsString = "";
        executionTypeValueAsString = executionTypeValue.toString();
        sb.append("executionType=").append(urlEncode(executionTypeValueAsString)).append("");
        Object subscriptionCycleValue = getSubscriptionCycle();
        String subscriptionCycleValueAsString = "";
        subscriptionCycleValueAsString = subscriptionCycleValue.toString();
        sb.append("subscriptionCycle=")
                .append(urlEncode(subscriptionCycleValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("targetAsset");
        openapiFields.add("planType");
        openapiFields.add("planName");
        openapiFields.add("planId");
        openapiFields.add("transactionDateTime");
        openapiFields.add("transactionStatus");
        openapiFields.add("failedType");
        openapiFields.add("sourceAsset");
        openapiFields.add("sourceAssetAmount");
        openapiFields.add("targetAssetAmount");
        openapiFields.add("sourceWallet");
        openapiFields.add("flexibleUsed");
        openapiFields.add("transactionFee");
        openapiFields.add("transactionFeeUnit");
        openapiFields.add("executionPrice");
        openapiFields.add("executionType");
        openapiFields.add("subscriptionCycle");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QuerySubscriptionTransactionHistoryResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QuerySubscriptionTransactionHistoryResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " QuerySubscriptionTransactionHistoryResponseInner is not"
                                        + " found in the empty JSON string",
                                QuerySubscriptionTransactionHistoryResponseInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QuerySubscriptionTransactionHistoryResponseInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QuerySubscriptionTransactionHistoryResponseInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("targetAsset") != null && !jsonObj.get("targetAsset").isJsonNull())
                && !jsonObj.get("targetAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `targetAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("targetAsset").toString()));
        }
        if ((jsonObj.get("planType") != null && !jsonObj.get("planType").isJsonNull())
                && !jsonObj.get("planType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `planType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("planType").toString()));
        }
        if ((jsonObj.get("planName") != null && !jsonObj.get("planName").isJsonNull())
                && !jsonObj.get("planName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `planName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("planName").toString()));
        }
        if ((jsonObj.get("transactionStatus") != null
                        && !jsonObj.get("transactionStatus").isJsonNull())
                && !jsonObj.get("transactionStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `transactionStatus` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("transactionStatus").toString()));
        }
        if ((jsonObj.get("failedType") != null && !jsonObj.get("failedType").isJsonNull())
                && !jsonObj.get("failedType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `failedType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("failedType").toString()));
        }
        if ((jsonObj.get("sourceAsset") != null && !jsonObj.get("sourceAsset").isJsonNull())
                && !jsonObj.get("sourceAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceAsset").toString()));
        }
        if ((jsonObj.get("sourceAssetAmount") != null
                        && !jsonObj.get("sourceAssetAmount").isJsonNull())
                && !jsonObj.get("sourceAssetAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceAssetAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("sourceAssetAmount").toString()));
        }
        if ((jsonObj.get("targetAssetAmount") != null
                        && !jsonObj.get("targetAssetAmount").isJsonNull())
                && !jsonObj.get("targetAssetAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `targetAssetAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("targetAssetAmount").toString()));
        }
        if ((jsonObj.get("sourceWallet") != null && !jsonObj.get("sourceWallet").isJsonNull())
                && !jsonObj.get("sourceWallet").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceWallet` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceWallet").toString()));
        }
        if ((jsonObj.get("flexibleUsed") != null && !jsonObj.get("flexibleUsed").isJsonNull())
                && !jsonObj.get("flexibleUsed").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `flexibleUsed` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("flexibleUsed").toString()));
        }
        if ((jsonObj.get("transactionFee") != null && !jsonObj.get("transactionFee").isJsonNull())
                && !jsonObj.get("transactionFee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `transactionFee` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("transactionFee").toString()));
        }
        if ((jsonObj.get("transactionFeeUnit") != null
                        && !jsonObj.get("transactionFeeUnit").isJsonNull())
                && !jsonObj.get("transactionFeeUnit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `transactionFeeUnit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("transactionFeeUnit").toString()));
        }
        if ((jsonObj.get("executionPrice") != null && !jsonObj.get("executionPrice").isJsonNull())
                && !jsonObj.get("executionPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executionPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executionPrice").toString()));
        }
        if ((jsonObj.get("executionType") != null && !jsonObj.get("executionType").isJsonNull())
                && !jsonObj.get("executionType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executionType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executionType").toString()));
        }
        if ((jsonObj.get("subscriptionCycle") != null
                        && !jsonObj.get("subscriptionCycle").isJsonNull())
                && !jsonObj.get("subscriptionCycle").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subscriptionCycle` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("subscriptionCycle").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QuerySubscriptionTransactionHistoryResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QuerySubscriptionTransactionHistoryResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QuerySubscriptionTransactionHistoryResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(QuerySubscriptionTransactionHistoryResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QuerySubscriptionTransactionHistoryResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QuerySubscriptionTransactionHistoryResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QuerySubscriptionTransactionHistoryResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QuerySubscriptionTransactionHistoryResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QuerySubscriptionTransactionHistoryResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QuerySubscriptionTransactionHistoryResponseInner
     */
    public static QuerySubscriptionTransactionHistoryResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QuerySubscriptionTransactionHistoryResponseInner.class);
    }

    /**
     * Convert an instance of QuerySubscriptionTransactionHistoryResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
