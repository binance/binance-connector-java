/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryHoldingDetailsOfThePlanResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryHoldingDetailsOfThePlanResponse {
    public static final String SERIALIZED_NAME_PLAN_ID = "planId";

    @SerializedName(SERIALIZED_NAME_PLAN_ID)
    @jakarta.annotation.Nullable
    private Long planId;

    public static final String SERIALIZED_NAME_PLAN_TYPE = "planType";

    @SerializedName(SERIALIZED_NAME_PLAN_TYPE)
    @jakarta.annotation.Nullable
    private String planType;

    public static final String SERIALIZED_NAME_EDIT_ALLOWED = "editAllowed";

    @SerializedName(SERIALIZED_NAME_EDIT_ALLOWED)
    @jakarta.annotation.Nullable
    private String editAllowed;

    public static final String SERIALIZED_NAME_FLEXIBLE_ALLOWED_TO_USE = "flexibleAllowedToUse";

    @SerializedName(SERIALIZED_NAME_FLEXIBLE_ALLOWED_TO_USE)
    @jakarta.annotation.Nullable
    private String flexibleAllowedToUse;

    public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";

    @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
    @jakarta.annotation.Nullable
    private Long creationDateTime;

    public static final String SERIALIZED_NAME_FIRST_EXECUTION_DATE_TIME = "firstExecutionDateTime";

    @SerializedName(SERIALIZED_NAME_FIRST_EXECUTION_DATE_TIME)
    @jakarta.annotation.Nullable
    private Long firstExecutionDateTime;

    public static final String SERIALIZED_NAME_NEXT_EXECUTION_DATE_TIME = "nextExecutionDateTime";

    @SerializedName(SERIALIZED_NAME_NEXT_EXECUTION_DATE_TIME)
    @jakarta.annotation.Nullable
    private Long nextExecutionDateTime;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_TARGET_ASSET = "targetAsset";

    @SerializedName(SERIALIZED_NAME_TARGET_ASSET)
    @jakarta.annotation.Nullable
    private String targetAsset;

    public static final String SERIALIZED_NAME_SOURCE_ASSET = "sourceAsset";

    @SerializedName(SERIALIZED_NAME_SOURCE_ASSET)
    @jakarta.annotation.Nullable
    private String sourceAsset;

    public static final String SERIALIZED_NAME_PLAN_VALUE_IN_U_S_D = "planValueInUSD";

    @SerializedName(SERIALIZED_NAME_PLAN_VALUE_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String planValueInUSD;

    public static final String SERIALIZED_NAME_PNL_IN_U_S_D = "pnlInUSD";

    @SerializedName(SERIALIZED_NAME_PNL_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String pnlInUSD;

    public static final String SERIALIZED_NAME_ROI = "roi";

    @SerializedName(SERIALIZED_NAME_ROI)
    @jakarta.annotation.Nullable
    private String roi;

    public static final String SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D = "totalInvestedInUSD";

    @SerializedName(SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String totalInvestedInUSD;

    public static final String SERIALIZED_NAME_DETAILS = "details";

    @SerializedName(SERIALIZED_NAME_DETAILS)
    @jakarta.annotation.Nullable
    private List<@Valid QueryHoldingDetailsOfThePlanResponseDetailsInner> details;

    public QueryHoldingDetailsOfThePlanResponse() {}

    public QueryHoldingDetailsOfThePlanResponse planId(@jakarta.annotation.Nullable Long planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get planId
     *
     * @return planId
     */
    @jakarta.annotation.Nullable
    public Long getPlanId() {
        return planId;
    }

    public void setPlanId(@jakarta.annotation.Nullable Long planId) {
        this.planId = planId;
    }

    public QueryHoldingDetailsOfThePlanResponse planType(
            @jakarta.annotation.Nullable String planType) {
        this.planType = planType;
        return this;
    }

    /**
     * Get planType
     *
     * @return planType
     */
    @jakarta.annotation.Nullable
    public String getPlanType() {
        return planType;
    }

    public void setPlanType(@jakarta.annotation.Nullable String planType) {
        this.planType = planType;
    }

    public QueryHoldingDetailsOfThePlanResponse editAllowed(
            @jakarta.annotation.Nullable String editAllowed) {
        this.editAllowed = editAllowed;
        return this;
    }

    /**
     * Get editAllowed
     *
     * @return editAllowed
     */
    @jakarta.annotation.Nullable
    public String getEditAllowed() {
        return editAllowed;
    }

    public void setEditAllowed(@jakarta.annotation.Nullable String editAllowed) {
        this.editAllowed = editAllowed;
    }

    public QueryHoldingDetailsOfThePlanResponse flexibleAllowedToUse(
            @jakarta.annotation.Nullable String flexibleAllowedToUse) {
        this.flexibleAllowedToUse = flexibleAllowedToUse;
        return this;
    }

    /**
     * Get flexibleAllowedToUse
     *
     * @return flexibleAllowedToUse
     */
    @jakarta.annotation.Nullable
    public String getFlexibleAllowedToUse() {
        return flexibleAllowedToUse;
    }

    public void setFlexibleAllowedToUse(@jakarta.annotation.Nullable String flexibleAllowedToUse) {
        this.flexibleAllowedToUse = flexibleAllowedToUse;
    }

    public QueryHoldingDetailsOfThePlanResponse creationDateTime(
            @jakarta.annotation.Nullable Long creationDateTime) {
        this.creationDateTime = creationDateTime;
        return this;
    }

    /**
     * Get creationDateTime
     *
     * @return creationDateTime
     */
    @jakarta.annotation.Nullable
    public Long getCreationDateTime() {
        return creationDateTime;
    }

    public void setCreationDateTime(@jakarta.annotation.Nullable Long creationDateTime) {
        this.creationDateTime = creationDateTime;
    }

    public QueryHoldingDetailsOfThePlanResponse firstExecutionDateTime(
            @jakarta.annotation.Nullable Long firstExecutionDateTime) {
        this.firstExecutionDateTime = firstExecutionDateTime;
        return this;
    }

    /**
     * Get firstExecutionDateTime
     *
     * @return firstExecutionDateTime
     */
    @jakarta.annotation.Nullable
    public Long getFirstExecutionDateTime() {
        return firstExecutionDateTime;
    }

    public void setFirstExecutionDateTime(
            @jakarta.annotation.Nullable Long firstExecutionDateTime) {
        this.firstExecutionDateTime = firstExecutionDateTime;
    }

    public QueryHoldingDetailsOfThePlanResponse nextExecutionDateTime(
            @jakarta.annotation.Nullable Long nextExecutionDateTime) {
        this.nextExecutionDateTime = nextExecutionDateTime;
        return this;
    }

    /**
     * Get nextExecutionDateTime
     *
     * @return nextExecutionDateTime
     */
    @jakarta.annotation.Nullable
    public Long getNextExecutionDateTime() {
        return nextExecutionDateTime;
    }

    public void setNextExecutionDateTime(@jakarta.annotation.Nullable Long nextExecutionDateTime) {
        this.nextExecutionDateTime = nextExecutionDateTime;
    }

    public QueryHoldingDetailsOfThePlanResponse status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public QueryHoldingDetailsOfThePlanResponse targetAsset(
            @jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
        return this;
    }

    /**
     * Get targetAsset
     *
     * @return targetAsset
     */
    @jakarta.annotation.Nullable
    public String getTargetAsset() {
        return targetAsset;
    }

    public void setTargetAsset(@jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
    }

    public QueryHoldingDetailsOfThePlanResponse sourceAsset(
            @jakarta.annotation.Nullable String sourceAsset) {
        this.sourceAsset = sourceAsset;
        return this;
    }

    /**
     * Get sourceAsset
     *
     * @return sourceAsset
     */
    @jakarta.annotation.Nullable
    public String getSourceAsset() {
        return sourceAsset;
    }

    public void setSourceAsset(@jakarta.annotation.Nullable String sourceAsset) {
        this.sourceAsset = sourceAsset;
    }

    public QueryHoldingDetailsOfThePlanResponse planValueInUSD(
            @jakarta.annotation.Nullable String planValueInUSD) {
        this.planValueInUSD = planValueInUSD;
        return this;
    }

    /**
     * Get planValueInUSD
     *
     * @return planValueInUSD
     */
    @jakarta.annotation.Nullable
    public String getPlanValueInUSD() {
        return planValueInUSD;
    }

    public void setPlanValueInUSD(@jakarta.annotation.Nullable String planValueInUSD) {
        this.planValueInUSD = planValueInUSD;
    }

    public QueryHoldingDetailsOfThePlanResponse pnlInUSD(
            @jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
        return this;
    }

    /**
     * Get pnlInUSD
     *
     * @return pnlInUSD
     */
    @jakarta.annotation.Nullable
    public String getPnlInUSD() {
        return pnlInUSD;
    }

    public void setPnlInUSD(@jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
    }

    public QueryHoldingDetailsOfThePlanResponse roi(@jakarta.annotation.Nullable String roi) {
        this.roi = roi;
        return this;
    }

    /**
     * Get roi
     *
     * @return roi
     */
    @jakarta.annotation.Nullable
    public String getRoi() {
        return roi;
    }

    public void setRoi(@jakarta.annotation.Nullable String roi) {
        this.roi = roi;
    }

    public QueryHoldingDetailsOfThePlanResponse totalInvestedInUSD(
            @jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
        return this;
    }

    /**
     * Get totalInvestedInUSD
     *
     * @return totalInvestedInUSD
     */
    @jakarta.annotation.Nullable
    public String getTotalInvestedInUSD() {
        return totalInvestedInUSD;
    }

    public void setTotalInvestedInUSD(@jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
    }

    public QueryHoldingDetailsOfThePlanResponse details(
            @jakarta.annotation.Nullable
                    List<@Valid QueryHoldingDetailsOfThePlanResponseDetailsInner> details) {
        this.details = details;
        return this;
    }

    public QueryHoldingDetailsOfThePlanResponse addDetailsItem(
            QueryHoldingDetailsOfThePlanResponseDetailsInner detailsItem) {
        if (this.details == null) {
            this.details = new ArrayList<>();
        }
        this.details.add(detailsItem);
        return this;
    }

    /**
     * Get details
     *
     * @return details
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryHoldingDetailsOfThePlanResponseDetailsInner> getDetails() {
        return details;
    }

    public void setDetails(
            @jakarta.annotation.Nullable
                    List<@Valid QueryHoldingDetailsOfThePlanResponseDetailsInner> details) {
        this.details = details;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryHoldingDetailsOfThePlanResponse queryHoldingDetailsOfThePlanResponse =
                (QueryHoldingDetailsOfThePlanResponse) o;
        return Objects.equals(this.planId, queryHoldingDetailsOfThePlanResponse.planId)
                && Objects.equals(this.planType, queryHoldingDetailsOfThePlanResponse.planType)
                && Objects.equals(
                        this.editAllowed, queryHoldingDetailsOfThePlanResponse.editAllowed)
                && Objects.equals(
                        this.flexibleAllowedToUse,
                        queryHoldingDetailsOfThePlanResponse.flexibleAllowedToUse)
                && Objects.equals(
                        this.creationDateTime,
                        queryHoldingDetailsOfThePlanResponse.creationDateTime)
                && Objects.equals(
                        this.firstExecutionDateTime,
                        queryHoldingDetailsOfThePlanResponse.firstExecutionDateTime)
                && Objects.equals(
                        this.nextExecutionDateTime,
                        queryHoldingDetailsOfThePlanResponse.nextExecutionDateTime)
                && Objects.equals(this.status, queryHoldingDetailsOfThePlanResponse.status)
                && Objects.equals(
                        this.targetAsset, queryHoldingDetailsOfThePlanResponse.targetAsset)
                && Objects.equals(
                        this.sourceAsset, queryHoldingDetailsOfThePlanResponse.sourceAsset)
                && Objects.equals(
                        this.planValueInUSD, queryHoldingDetailsOfThePlanResponse.planValueInUSD)
                && Objects.equals(this.pnlInUSD, queryHoldingDetailsOfThePlanResponse.pnlInUSD)
                && Objects.equals(this.roi, queryHoldingDetailsOfThePlanResponse.roi)
                && Objects.equals(
                        this.totalInvestedInUSD,
                        queryHoldingDetailsOfThePlanResponse.totalInvestedInUSD)
                && Objects.equals(this.details, queryHoldingDetailsOfThePlanResponse.details);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                planId,
                planType,
                editAllowed,
                flexibleAllowedToUse,
                creationDateTime,
                firstExecutionDateTime,
                nextExecutionDateTime,
                status,
                targetAsset,
                sourceAsset,
                planValueInUSD,
                pnlInUSD,
                roi,
                totalInvestedInUSD,
                details);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryHoldingDetailsOfThePlanResponse {\n");
        sb.append("		planId: ").append(toIndentedString(planId)).append("\n");
        sb.append("		planType: ").append(toIndentedString(planType)).append("\n");
        sb.append("		editAllowed: ").append(toIndentedString(editAllowed)).append("\n");
        sb.append("		flexibleAllowedToUse: ")
                .append(toIndentedString(flexibleAllowedToUse))
                .append("\n");
        sb.append("		creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
        sb.append("		firstExecutionDateTime: ")
                .append(toIndentedString(firstExecutionDateTime))
                .append("\n");
        sb.append("		nextExecutionDateTime: ")
                .append(toIndentedString(nextExecutionDateTime))
                .append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		targetAsset: ").append(toIndentedString(targetAsset)).append("\n");
        sb.append("		sourceAsset: ").append(toIndentedString(sourceAsset)).append("\n");
        sb.append("		planValueInUSD: ").append(toIndentedString(planValueInUSD)).append("\n");
        sb.append("		pnlInUSD: ").append(toIndentedString(pnlInUSD)).append("\n");
        sb.append("		roi: ").append(toIndentedString(roi)).append("\n");
        sb.append("		totalInvestedInUSD: ")
                .append(toIndentedString(totalInvestedInUSD))
                .append("\n");
        sb.append("		details: ").append(toIndentedString(details)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object planIdValue = getPlanId();
        String planIdValueAsString = "";
        planIdValueAsString = planIdValue.toString();
        sb.append("planId=").append(urlEncode(planIdValueAsString)).append("");
        Object planTypeValue = getPlanType();
        String planTypeValueAsString = "";
        planTypeValueAsString = planTypeValue.toString();
        sb.append("planType=").append(urlEncode(planTypeValueAsString)).append("");
        Object editAllowedValue = getEditAllowed();
        String editAllowedValueAsString = "";
        editAllowedValueAsString = editAllowedValue.toString();
        sb.append("editAllowed=").append(urlEncode(editAllowedValueAsString)).append("");
        Object flexibleAllowedToUseValue = getFlexibleAllowedToUse();
        String flexibleAllowedToUseValueAsString = "";
        flexibleAllowedToUseValueAsString = flexibleAllowedToUseValue.toString();
        sb.append("flexibleAllowedToUse=")
                .append(urlEncode(flexibleAllowedToUseValueAsString))
                .append("");
        Object creationDateTimeValue = getCreationDateTime();
        String creationDateTimeValueAsString = "";
        creationDateTimeValueAsString = creationDateTimeValue.toString();
        sb.append("creationDateTime=").append(urlEncode(creationDateTimeValueAsString)).append("");
        Object firstExecutionDateTimeValue = getFirstExecutionDateTime();
        String firstExecutionDateTimeValueAsString = "";
        firstExecutionDateTimeValueAsString = firstExecutionDateTimeValue.toString();
        sb.append("firstExecutionDateTime=")
                .append(urlEncode(firstExecutionDateTimeValueAsString))
                .append("");
        Object nextExecutionDateTimeValue = getNextExecutionDateTime();
        String nextExecutionDateTimeValueAsString = "";
        nextExecutionDateTimeValueAsString = nextExecutionDateTimeValue.toString();
        sb.append("nextExecutionDateTime=")
                .append(urlEncode(nextExecutionDateTimeValueAsString))
                .append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object targetAssetValue = getTargetAsset();
        String targetAssetValueAsString = "";
        targetAssetValueAsString = targetAssetValue.toString();
        sb.append("targetAsset=").append(urlEncode(targetAssetValueAsString)).append("");
        Object sourceAssetValue = getSourceAsset();
        String sourceAssetValueAsString = "";
        sourceAssetValueAsString = sourceAssetValue.toString();
        sb.append("sourceAsset=").append(urlEncode(sourceAssetValueAsString)).append("");
        Object planValueInUSDValue = getPlanValueInUSD();
        String planValueInUSDValueAsString = "";
        planValueInUSDValueAsString = planValueInUSDValue.toString();
        sb.append("planValueInUSD=").append(urlEncode(planValueInUSDValueAsString)).append("");
        Object pnlInUSDValue = getPnlInUSD();
        String pnlInUSDValueAsString = "";
        pnlInUSDValueAsString = pnlInUSDValue.toString();
        sb.append("pnlInUSD=").append(urlEncode(pnlInUSDValueAsString)).append("");
        Object roiValue = getRoi();
        String roiValueAsString = "";
        roiValueAsString = roiValue.toString();
        sb.append("roi=").append(urlEncode(roiValueAsString)).append("");
        Object totalInvestedInUSDValue = getTotalInvestedInUSD();
        String totalInvestedInUSDValueAsString = "";
        totalInvestedInUSDValueAsString = totalInvestedInUSDValue.toString();
        sb.append("totalInvestedInUSD=")
                .append(urlEncode(totalInvestedInUSDValueAsString))
                .append("");
        Object detailsValue = getDetails();
        String detailsValueAsString = "";
        detailsValueAsString =
                (String)
                        ((Collection) detailsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("details=").append(urlEncode(detailsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("planId");
        openapiFields.add("planType");
        openapiFields.add("editAllowed");
        openapiFields.add("flexibleAllowedToUse");
        openapiFields.add("creationDateTime");
        openapiFields.add("firstExecutionDateTime");
        openapiFields.add("nextExecutionDateTime");
        openapiFields.add("status");
        openapiFields.add("targetAsset");
        openapiFields.add("sourceAsset");
        openapiFields.add("planValueInUSD");
        openapiFields.add("pnlInUSD");
        openapiFields.add("roi");
        openapiFields.add("totalInvestedInUSD");
        openapiFields.add("details");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryHoldingDetailsOfThePlanResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryHoldingDetailsOfThePlanResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in QueryHoldingDetailsOfThePlanResponse"
                                        + " is not found in the empty JSON string",
                                QueryHoldingDetailsOfThePlanResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryHoldingDetailsOfThePlanResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryHoldingDetailsOfThePlanResponse` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("planType") != null && !jsonObj.get("planType").isJsonNull())
                && !jsonObj.get("planType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `planType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("planType").toString()));
        }
        if ((jsonObj.get("editAllowed") != null && !jsonObj.get("editAllowed").isJsonNull())
                && !jsonObj.get("editAllowed").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `editAllowed` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("editAllowed").toString()));
        }
        if ((jsonObj.get("flexibleAllowedToUse") != null
                        && !jsonObj.get("flexibleAllowedToUse").isJsonNull())
                && !jsonObj.get("flexibleAllowedToUse").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `flexibleAllowedToUse` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("flexibleAllowedToUse").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("targetAsset") != null && !jsonObj.get("targetAsset").isJsonNull())
                && !jsonObj.get("targetAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `targetAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("targetAsset").toString()));
        }
        if ((jsonObj.get("sourceAsset") != null && !jsonObj.get("sourceAsset").isJsonNull())
                && !jsonObj.get("sourceAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceAsset").toString()));
        }
        if ((jsonObj.get("planValueInUSD") != null && !jsonObj.get("planValueInUSD").isJsonNull())
                && !jsonObj.get("planValueInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `planValueInUSD` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("planValueInUSD").toString()));
        }
        if ((jsonObj.get("pnlInUSD") != null && !jsonObj.get("pnlInUSD").isJsonNull())
                && !jsonObj.get("pnlInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pnlInUSD` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("pnlInUSD").toString()));
        }
        if ((jsonObj.get("roi") != null && !jsonObj.get("roi").isJsonNull())
                && !jsonObj.get("roi").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `roi` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("roi").toString()));
        }
        if ((jsonObj.get("totalInvestedInUSD") != null
                        && !jsonObj.get("totalInvestedInUSD").isJsonNull())
                && !jsonObj.get("totalInvestedInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalInvestedInUSD` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalInvestedInUSD").toString()));
        }
        if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
            JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
            if (jsonArraydetails != null) {
                // ensure the json data is an array
                if (!jsonObj.get("details").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `details` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("details").toString()));
                }

                // validate the optional field `details` (array)
                for (int i = 0; i < jsonArraydetails.size(); i++) {
                    QueryHoldingDetailsOfThePlanResponseDetailsInner.validateJsonElement(
                            jsonArraydetails.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryHoldingDetailsOfThePlanResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'QueryHoldingDetailsOfThePlanResponse'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryHoldingDetailsOfThePlanResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryHoldingDetailsOfThePlanResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryHoldingDetailsOfThePlanResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryHoldingDetailsOfThePlanResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryHoldingDetailsOfThePlanResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryHoldingDetailsOfThePlanResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryHoldingDetailsOfThePlanResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryHoldingDetailsOfThePlanResponse
     */
    public static QueryHoldingDetailsOfThePlanResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, QueryHoldingDetailsOfThePlanResponse.class);
    }

    /**
     * Convert an instance of QueryHoldingDetailsOfThePlanResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
