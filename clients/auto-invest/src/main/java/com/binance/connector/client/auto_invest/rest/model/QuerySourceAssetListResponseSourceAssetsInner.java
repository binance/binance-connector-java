/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QuerySourceAssetListResponseSourceAssetsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QuerySourceAssetListResponseSourceAssetsInner {
    public static final String SERIALIZED_NAME_SOURCE_ASSET = "sourceAsset";

    @SerializedName(SERIALIZED_NAME_SOURCE_ASSET)
    @jakarta.annotation.Nullable
    private String sourceAsset;

    public static final String SERIALIZED_NAME_ASSET_MIN_AMOUNT = "assetMinAmount";

    @SerializedName(SERIALIZED_NAME_ASSET_MIN_AMOUNT)
    @jakarta.annotation.Nullable
    private String assetMinAmount;

    public static final String SERIALIZED_NAME_ASSET_MAX_AMOUNT = "assetMaxAmount";

    @SerializedName(SERIALIZED_NAME_ASSET_MAX_AMOUNT)
    @jakarta.annotation.Nullable
    private String assetMaxAmount;

    public static final String SERIALIZED_NAME_SCALE = "scale";

    @SerializedName(SERIALIZED_NAME_SCALE)
    @jakarta.annotation.Nullable
    private String scale;

    public static final String SERIALIZED_NAME_FLEXIBLE_AMOUNT = "flexibleAmount";

    @SerializedName(SERIALIZED_NAME_FLEXIBLE_AMOUNT)
    @jakarta.annotation.Nullable
    private String flexibleAmount;

    public QuerySourceAssetListResponseSourceAssetsInner() {}

    public QuerySourceAssetListResponseSourceAssetsInner sourceAsset(
            @jakarta.annotation.Nullable String sourceAsset) {
        this.sourceAsset = sourceAsset;
        return this;
    }

    /**
     * Get sourceAsset
     *
     * @return sourceAsset
     */
    @jakarta.annotation.Nullable
    public String getSourceAsset() {
        return sourceAsset;
    }

    public void setSourceAsset(@jakarta.annotation.Nullable String sourceAsset) {
        this.sourceAsset = sourceAsset;
    }

    public QuerySourceAssetListResponseSourceAssetsInner assetMinAmount(
            @jakarta.annotation.Nullable String assetMinAmount) {
        this.assetMinAmount = assetMinAmount;
        return this;
    }

    /**
     * Get assetMinAmount
     *
     * @return assetMinAmount
     */
    @jakarta.annotation.Nullable
    public String getAssetMinAmount() {
        return assetMinAmount;
    }

    public void setAssetMinAmount(@jakarta.annotation.Nullable String assetMinAmount) {
        this.assetMinAmount = assetMinAmount;
    }

    public QuerySourceAssetListResponseSourceAssetsInner assetMaxAmount(
            @jakarta.annotation.Nullable String assetMaxAmount) {
        this.assetMaxAmount = assetMaxAmount;
        return this;
    }

    /**
     * Get assetMaxAmount
     *
     * @return assetMaxAmount
     */
    @jakarta.annotation.Nullable
    public String getAssetMaxAmount() {
        return assetMaxAmount;
    }

    public void setAssetMaxAmount(@jakarta.annotation.Nullable String assetMaxAmount) {
        this.assetMaxAmount = assetMaxAmount;
    }

    public QuerySourceAssetListResponseSourceAssetsInner scale(
            @jakarta.annotation.Nullable String scale) {
        this.scale = scale;
        return this;
    }

    /**
     * Get scale
     *
     * @return scale
     */
    @jakarta.annotation.Nullable
    public String getScale() {
        return scale;
    }

    public void setScale(@jakarta.annotation.Nullable String scale) {
        this.scale = scale;
    }

    public QuerySourceAssetListResponseSourceAssetsInner flexibleAmount(
            @jakarta.annotation.Nullable String flexibleAmount) {
        this.flexibleAmount = flexibleAmount;
        return this;
    }

    /**
     * Get flexibleAmount
     *
     * @return flexibleAmount
     */
    @jakarta.annotation.Nullable
    public String getFlexibleAmount() {
        return flexibleAmount;
    }

    public void setFlexibleAmount(@jakarta.annotation.Nullable String flexibleAmount) {
        this.flexibleAmount = flexibleAmount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuerySourceAssetListResponseSourceAssetsInner
                querySourceAssetListResponseSourceAssetsInner =
                        (QuerySourceAssetListResponseSourceAssetsInner) o;
        return Objects.equals(
                        this.sourceAsset, querySourceAssetListResponseSourceAssetsInner.sourceAsset)
                && Objects.equals(
                        this.assetMinAmount,
                        querySourceAssetListResponseSourceAssetsInner.assetMinAmount)
                && Objects.equals(
                        this.assetMaxAmount,
                        querySourceAssetListResponseSourceAssetsInner.assetMaxAmount)
                && Objects.equals(this.scale, querySourceAssetListResponseSourceAssetsInner.scale)
                && Objects.equals(
                        this.flexibleAmount,
                        querySourceAssetListResponseSourceAssetsInner.flexibleAmount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceAsset, assetMinAmount, assetMaxAmount, scale, flexibleAmount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QuerySourceAssetListResponseSourceAssetsInner {\n");
        sb.append("		sourceAsset: ").append(toIndentedString(sourceAsset)).append("\n");
        sb.append("		assetMinAmount: ").append(toIndentedString(assetMinAmount)).append("\n");
        sb.append("		assetMaxAmount: ").append(toIndentedString(assetMaxAmount)).append("\n");
        sb.append("		scale: ").append(toIndentedString(scale)).append("\n");
        sb.append("		flexibleAmount: ").append(toIndentedString(flexibleAmount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object sourceAssetValue = getSourceAsset();
        String sourceAssetValueAsString = "";
        sourceAssetValueAsString = sourceAssetValue.toString();
        sb.append("sourceAsset=").append(urlEncode(sourceAssetValueAsString)).append("");
        Object assetMinAmountValue = getAssetMinAmount();
        String assetMinAmountValueAsString = "";
        assetMinAmountValueAsString = assetMinAmountValue.toString();
        sb.append("assetMinAmount=").append(urlEncode(assetMinAmountValueAsString)).append("");
        Object assetMaxAmountValue = getAssetMaxAmount();
        String assetMaxAmountValueAsString = "";
        assetMaxAmountValueAsString = assetMaxAmountValue.toString();
        sb.append("assetMaxAmount=").append(urlEncode(assetMaxAmountValueAsString)).append("");
        Object scaleValue = getScale();
        String scaleValueAsString = "";
        scaleValueAsString = scaleValue.toString();
        sb.append("scale=").append(urlEncode(scaleValueAsString)).append("");
        Object flexibleAmountValue = getFlexibleAmount();
        String flexibleAmountValueAsString = "";
        flexibleAmountValueAsString = flexibleAmountValue.toString();
        sb.append("flexibleAmount=").append(urlEncode(flexibleAmountValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("sourceAsset");
        openapiFields.add("assetMinAmount");
        openapiFields.add("assetMaxAmount");
        openapiFields.add("scale");
        openapiFields.add("flexibleAmount");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QuerySourceAssetListResponseSourceAssetsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QuerySourceAssetListResponseSourceAssetsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QuerySourceAssetListResponseSourceAssetsInner is not found"
                                    + " in the empty JSON string",
                                QuerySourceAssetListResponseSourceAssetsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QuerySourceAssetListResponseSourceAssetsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QuerySourceAssetListResponseSourceAssetsInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("sourceAsset") != null && !jsonObj.get("sourceAsset").isJsonNull())
                && !jsonObj.get("sourceAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceAsset").toString()));
        }
        if ((jsonObj.get("assetMinAmount") != null && !jsonObj.get("assetMinAmount").isJsonNull())
                && !jsonObj.get("assetMinAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetMinAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("assetMinAmount").toString()));
        }
        if ((jsonObj.get("assetMaxAmount") != null && !jsonObj.get("assetMaxAmount").isJsonNull())
                && !jsonObj.get("assetMaxAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetMaxAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("assetMaxAmount").toString()));
        }
        if ((jsonObj.get("scale") != null && !jsonObj.get("scale").isJsonNull())
                && !jsonObj.get("scale").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `scale` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("scale").toString()));
        }
        if ((jsonObj.get("flexibleAmount") != null && !jsonObj.get("flexibleAmount").isJsonNull())
                && !jsonObj.get("flexibleAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `flexibleAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("flexibleAmount").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QuerySourceAssetListResponseSourceAssetsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QuerySourceAssetListResponseSourceAssetsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QuerySourceAssetListResponseSourceAssetsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(QuerySourceAssetListResponseSourceAssetsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QuerySourceAssetListResponseSourceAssetsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, QuerySourceAssetListResponseSourceAssetsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QuerySourceAssetListResponseSourceAssetsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QuerySourceAssetListResponseSourceAssetsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QuerySourceAssetListResponseSourceAssetsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QuerySourceAssetListResponseSourceAssetsInner
     */
    public static QuerySourceAssetListResponseSourceAssetsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QuerySourceAssetListResponseSourceAssetsInner.class);
    }

    /**
     * Convert an instance of QuerySourceAssetListResponseSourceAssetsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
