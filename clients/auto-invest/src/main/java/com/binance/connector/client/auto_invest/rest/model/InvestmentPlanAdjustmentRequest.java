/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** InvestmentPlanAdjustmentRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class InvestmentPlanAdjustmentRequest {
    public static final String SERIALIZED_NAME_PLAN_ID = "planId";

    @SerializedName(SERIALIZED_NAME_PLAN_ID)
    @jakarta.annotation.Nonnull
    private Long planId;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_AMOUNT = "subscriptionAmount";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_AMOUNT)
    @jakarta.annotation.Nonnull
    private Double subscriptionAmount;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_CYCLE = "subscriptionCycle";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_CYCLE)
    @jakarta.annotation.Nonnull
    private String subscriptionCycle;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_START_TIME = "subscriptionStartTime";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_START_TIME)
    @jakarta.annotation.Nonnull
    private Long subscriptionStartTime;

    public static final String SERIALIZED_NAME_SOURCE_ASSET = "sourceAsset";

    @SerializedName(SERIALIZED_NAME_SOURCE_ASSET)
    @jakarta.annotation.Nonnull
    private String sourceAsset;

    public static final String SERIALIZED_NAME_FLEXIBLE_ALLOWED_TO_USE = "flexibleAllowedToUse";

    @SerializedName(SERIALIZED_NAME_FLEXIBLE_ALLOWED_TO_USE)
    @jakarta.annotation.Nullable
    private Boolean flexibleAllowedToUse;

    public static final String SERIALIZED_NAME_DETAILS = "details";

    @SerializedName(SERIALIZED_NAME_DETAILS)
    @jakarta.annotation.Nonnull
    private Details details;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public InvestmentPlanAdjustmentRequest() {}

    public InvestmentPlanAdjustmentRequest planId(@jakarta.annotation.Nonnull Long planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get planId
     *
     * @return planId
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public Long getPlanId() {
        return planId;
    }

    public void setPlanId(@jakarta.annotation.Nonnull Long planId) {
        this.planId = planId;
    }

    public InvestmentPlanAdjustmentRequest subscriptionAmount(
            @jakarta.annotation.Nonnull Double subscriptionAmount) {
        this.subscriptionAmount = subscriptionAmount;
        return this;
    }

    /**
     * Get subscriptionAmount
     *
     * @return subscriptionAmount
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getSubscriptionAmount() {
        return subscriptionAmount;
    }

    public void setSubscriptionAmount(@jakarta.annotation.Nonnull Double subscriptionAmount) {
        this.subscriptionAmount = subscriptionAmount;
    }

    public InvestmentPlanAdjustmentRequest subscriptionCycle(
            @jakarta.annotation.Nonnull String subscriptionCycle) {
        this.subscriptionCycle = subscriptionCycle;
        return this;
    }

    /**
     * Get subscriptionCycle
     *
     * @return subscriptionCycle
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSubscriptionCycle() {
        return subscriptionCycle;
    }

    public void setSubscriptionCycle(@jakarta.annotation.Nonnull String subscriptionCycle) {
        this.subscriptionCycle = subscriptionCycle;
    }

    public InvestmentPlanAdjustmentRequest subscriptionStartTime(
            @jakarta.annotation.Nonnull Long subscriptionStartTime) {
        this.subscriptionStartTime = subscriptionStartTime;
        return this;
    }

    /**
     * Get subscriptionStartTime
     *
     * @return subscriptionStartTime
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public Long getSubscriptionStartTime() {
        return subscriptionStartTime;
    }

    public void setSubscriptionStartTime(@jakarta.annotation.Nonnull Long subscriptionStartTime) {
        this.subscriptionStartTime = subscriptionStartTime;
    }

    public InvestmentPlanAdjustmentRequest sourceAsset(
            @jakarta.annotation.Nonnull String sourceAsset) {
        this.sourceAsset = sourceAsset;
        return this;
    }

    /**
     * Get sourceAsset
     *
     * @return sourceAsset
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSourceAsset() {
        return sourceAsset;
    }

    public void setSourceAsset(@jakarta.annotation.Nonnull String sourceAsset) {
        this.sourceAsset = sourceAsset;
    }

    public InvestmentPlanAdjustmentRequest flexibleAllowedToUse(
            @jakarta.annotation.Nullable Boolean flexibleAllowedToUse) {
        this.flexibleAllowedToUse = flexibleAllowedToUse;
        return this;
    }

    /**
     * Get flexibleAllowedToUse
     *
     * @return flexibleAllowedToUse
     */
    @jakarta.annotation.Nullable
    public Boolean getFlexibleAllowedToUse() {
        return flexibleAllowedToUse;
    }

    public void setFlexibleAllowedToUse(@jakarta.annotation.Nullable Boolean flexibleAllowedToUse) {
        this.flexibleAllowedToUse = flexibleAllowedToUse;
    }

    public InvestmentPlanAdjustmentRequest details(@jakarta.annotation.Nonnull Details details) {
        this.details = details;
        return this;
    }

    /**
     * Get details
     *
     * @return details
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Details getDetails() {
        return details;
    }

    public void setDetails(@jakarta.annotation.Nonnull Details details) {
        this.details = details;
    }

    public InvestmentPlanAdjustmentRequest recvWindow(
            @jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvestmentPlanAdjustmentRequest investmentPlanAdjustmentRequest =
                (InvestmentPlanAdjustmentRequest) o;
        return Objects.equals(this.planId, investmentPlanAdjustmentRequest.planId)
                && Objects.equals(
                        this.subscriptionAmount, investmentPlanAdjustmentRequest.subscriptionAmount)
                && Objects.equals(
                        this.subscriptionCycle, investmentPlanAdjustmentRequest.subscriptionCycle)
                && Objects.equals(
                        this.subscriptionStartTime,
                        investmentPlanAdjustmentRequest.subscriptionStartTime)
                && Objects.equals(this.sourceAsset, investmentPlanAdjustmentRequest.sourceAsset)
                && Objects.equals(
                        this.flexibleAllowedToUse,
                        investmentPlanAdjustmentRequest.flexibleAllowedToUse)
                && Objects.equals(this.details, investmentPlanAdjustmentRequest.details)
                && Objects.equals(this.recvWindow, investmentPlanAdjustmentRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                planId,
                subscriptionAmount,
                subscriptionCycle,
                subscriptionStartTime,
                sourceAsset,
                flexibleAllowedToUse,
                details,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class InvestmentPlanAdjustmentRequest {\n");
        sb.append("		planId: ").append(toIndentedString(planId)).append("\n");
        sb.append("		subscriptionAmount: ")
                .append(toIndentedString(subscriptionAmount))
                .append("\n");
        sb.append("		subscriptionCycle: ").append(toIndentedString(subscriptionCycle)).append("\n");
        sb.append("		subscriptionStartTime: ")
                .append(toIndentedString(subscriptionStartTime))
                .append("\n");
        sb.append("		sourceAsset: ").append(toIndentedString(sourceAsset)).append("\n");
        sb.append("		flexibleAllowedToUse: ")
                .append(toIndentedString(flexibleAllowedToUse))
                .append("\n");
        sb.append("		details: ").append(toIndentedString(details)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object planIdValue = getPlanId();
        String planIdValueAsString = "";
        planIdValueAsString = planIdValue.toString();
        sb.append("planId=").append(urlEncode(planIdValueAsString)).append("");
        Object subscriptionAmountValue = getSubscriptionAmount();
        String subscriptionAmountValueAsString = "";
        subscriptionAmountValueAsString = subscriptionAmountValue.toString();
        sb.append("subscriptionAmount=")
                .append(urlEncode(subscriptionAmountValueAsString))
                .append("");
        Object subscriptionCycleValue = getSubscriptionCycle();
        String subscriptionCycleValueAsString = "";
        subscriptionCycleValueAsString = subscriptionCycleValue.toString();
        sb.append("subscriptionCycle=")
                .append(urlEncode(subscriptionCycleValueAsString))
                .append("");
        Object subscriptionStartTimeValue = getSubscriptionStartTime();
        String subscriptionStartTimeValueAsString = "";
        subscriptionStartTimeValueAsString = subscriptionStartTimeValue.toString();
        sb.append("subscriptionStartTime=")
                .append(urlEncode(subscriptionStartTimeValueAsString))
                .append("");
        Object sourceAssetValue = getSourceAsset();
        String sourceAssetValueAsString = "";
        sourceAssetValueAsString = sourceAssetValue.toString();
        sb.append("sourceAsset=").append(urlEncode(sourceAssetValueAsString)).append("");
        Object flexibleAllowedToUseValue = getFlexibleAllowedToUse();
        String flexibleAllowedToUseValueAsString = "";
        flexibleAllowedToUseValueAsString = flexibleAllowedToUseValue.toString();
        sb.append("flexibleAllowedToUse=")
                .append(urlEncode(flexibleAllowedToUseValueAsString))
                .append("");
        Object detailsValue = getDetails();
        String detailsValueAsString = "";
        detailsValueAsString = detailsValue.toString();
        sb.append("details=").append(urlEncode(detailsValueAsString)).append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("planId");
        openapiFields.add("subscriptionAmount");
        openapiFields.add("subscriptionCycle");
        openapiFields.add("subscriptionStartTime");
        openapiFields.add("sourceAsset");
        openapiFields.add("flexibleAllowedToUse");
        openapiFields.add("details");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("planId");
        openapiRequiredFields.add("subscriptionAmount");
        openapiRequiredFields.add("subscriptionCycle");
        openapiRequiredFields.add("subscriptionStartTime");
        openapiRequiredFields.add("sourceAsset");
        openapiRequiredFields.add("details");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     InvestmentPlanAdjustmentRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!InvestmentPlanAdjustmentRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in InvestmentPlanAdjustmentRequest is not"
                                        + " found in the empty JSON string",
                                InvestmentPlanAdjustmentRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!InvestmentPlanAdjustmentRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `InvestmentPlanAdjustmentRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : InvestmentPlanAdjustmentRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("subscriptionCycle").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subscriptionCycle` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("subscriptionCycle").toString()));
        }
        if (!jsonObj.get("sourceAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceAsset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!InvestmentPlanAdjustmentRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'InvestmentPlanAdjustmentRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<InvestmentPlanAdjustmentRequest> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(InvestmentPlanAdjustmentRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<InvestmentPlanAdjustmentRequest>() {
                        @Override
                        public void write(JsonWriter out, InvestmentPlanAdjustmentRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public InvestmentPlanAdjustmentRequest read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of InvestmentPlanAdjustmentRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of InvestmentPlanAdjustmentRequest
     * @throws IOException if the JSON string is invalid with respect to
     *     InvestmentPlanAdjustmentRequest
     */
    public static InvestmentPlanAdjustmentRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, InvestmentPlanAdjustmentRequest.class);
    }

    /**
     * Convert an instance of InvestmentPlanAdjustmentRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
