/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** IndexLinkedPlanRebalanceDetailsResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class IndexLinkedPlanRebalanceDetailsResponseInner {
    public static final String SERIALIZED_NAME_INDEX_ID = "indexId";

    @SerializedName(SERIALIZED_NAME_INDEX_ID)
    @jakarta.annotation.Nullable
    private Long indexId;

    public static final String SERIALIZED_NAME_INDEX_NAME = "indexName";

    @SerializedName(SERIALIZED_NAME_INDEX_NAME)
    @jakarta.annotation.Nullable
    private String indexName;

    public static final String SERIALIZED_NAME_REBALANCE_ID = "rebalanceId";

    @SerializedName(SERIALIZED_NAME_REBALANCE_ID)
    @jakarta.annotation.Nullable
    private Long rebalanceId;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_REBALANCE_FEE = "rebalanceFee";

    @SerializedName(SERIALIZED_NAME_REBALANCE_FEE)
    @jakarta.annotation.Nullable
    private String rebalanceFee;

    public static final String SERIALIZED_NAME_REBALANCE_FEE_UNIT = "rebalanceFeeUnit";

    @SerializedName(SERIALIZED_NAME_REBALANCE_FEE_UNIT)
    @jakarta.annotation.Nullable
    private String rebalanceFeeUnit;

    public static final String SERIALIZED_NAME_TRANSACTION_DETAILS = "transactionDetails";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_DETAILS)
    @jakarta.annotation.Nullable
    private List<@Valid IndexLinkedPlanRebalanceDetailsResponseInnerTransactionDetailsInner>
            transactionDetails;

    public IndexLinkedPlanRebalanceDetailsResponseInner() {}

    public IndexLinkedPlanRebalanceDetailsResponseInner indexId(
            @jakarta.annotation.Nullable Long indexId) {
        this.indexId = indexId;
        return this;
    }

    /**
     * Get indexId
     *
     * @return indexId
     */
    @jakarta.annotation.Nullable
    public Long getIndexId() {
        return indexId;
    }

    public void setIndexId(@jakarta.annotation.Nullable Long indexId) {
        this.indexId = indexId;
    }

    public IndexLinkedPlanRebalanceDetailsResponseInner indexName(
            @jakarta.annotation.Nullable String indexName) {
        this.indexName = indexName;
        return this;
    }

    /**
     * Get indexName
     *
     * @return indexName
     */
    @jakarta.annotation.Nullable
    public String getIndexName() {
        return indexName;
    }

    public void setIndexName(@jakarta.annotation.Nullable String indexName) {
        this.indexName = indexName;
    }

    public IndexLinkedPlanRebalanceDetailsResponseInner rebalanceId(
            @jakarta.annotation.Nullable Long rebalanceId) {
        this.rebalanceId = rebalanceId;
        return this;
    }

    /**
     * Get rebalanceId
     *
     * @return rebalanceId
     */
    @jakarta.annotation.Nullable
    public Long getRebalanceId() {
        return rebalanceId;
    }

    public void setRebalanceId(@jakarta.annotation.Nullable Long rebalanceId) {
        this.rebalanceId = rebalanceId;
    }

    public IndexLinkedPlanRebalanceDetailsResponseInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public IndexLinkedPlanRebalanceDetailsResponseInner rebalanceFee(
            @jakarta.annotation.Nullable String rebalanceFee) {
        this.rebalanceFee = rebalanceFee;
        return this;
    }

    /**
     * Get rebalanceFee
     *
     * @return rebalanceFee
     */
    @jakarta.annotation.Nullable
    public String getRebalanceFee() {
        return rebalanceFee;
    }

    public void setRebalanceFee(@jakarta.annotation.Nullable String rebalanceFee) {
        this.rebalanceFee = rebalanceFee;
    }

    public IndexLinkedPlanRebalanceDetailsResponseInner rebalanceFeeUnit(
            @jakarta.annotation.Nullable String rebalanceFeeUnit) {
        this.rebalanceFeeUnit = rebalanceFeeUnit;
        return this;
    }

    /**
     * Get rebalanceFeeUnit
     *
     * @return rebalanceFeeUnit
     */
    @jakarta.annotation.Nullable
    public String getRebalanceFeeUnit() {
        return rebalanceFeeUnit;
    }

    public void setRebalanceFeeUnit(@jakarta.annotation.Nullable String rebalanceFeeUnit) {
        this.rebalanceFeeUnit = rebalanceFeeUnit;
    }

    public IndexLinkedPlanRebalanceDetailsResponseInner transactionDetails(
            @jakarta.annotation.Nullable
                    List<@Valid IndexLinkedPlanRebalanceDetailsResponseInnerTransactionDetailsInner>
                            transactionDetails) {
        this.transactionDetails = transactionDetails;
        return this;
    }

    public IndexLinkedPlanRebalanceDetailsResponseInner addTransactionDetailsItem(
            IndexLinkedPlanRebalanceDetailsResponseInnerTransactionDetailsInner
                    transactionDetailsItem) {
        if (this.transactionDetails == null) {
            this.transactionDetails = new ArrayList<>();
        }
        this.transactionDetails.add(transactionDetailsItem);
        return this;
    }

    /**
     * Get transactionDetails
     *
     * @return transactionDetails
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid IndexLinkedPlanRebalanceDetailsResponseInnerTransactionDetailsInner>
            getTransactionDetails() {
        return transactionDetails;
    }

    public void setTransactionDetails(
            @jakarta.annotation.Nullable
                    List<@Valid IndexLinkedPlanRebalanceDetailsResponseInnerTransactionDetailsInner>
                            transactionDetails) {
        this.transactionDetails = transactionDetails;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndexLinkedPlanRebalanceDetailsResponseInner indexLinkedPlanRebalanceDetailsResponseInner =
                (IndexLinkedPlanRebalanceDetailsResponseInner) o;
        return Objects.equals(this.indexId, indexLinkedPlanRebalanceDetailsResponseInner.indexId)
                && Objects.equals(
                        this.indexName, indexLinkedPlanRebalanceDetailsResponseInner.indexName)
                && Objects.equals(
                        this.rebalanceId, indexLinkedPlanRebalanceDetailsResponseInner.rebalanceId)
                && Objects.equals(this.status, indexLinkedPlanRebalanceDetailsResponseInner.status)
                && Objects.equals(
                        this.rebalanceFee,
                        indexLinkedPlanRebalanceDetailsResponseInner.rebalanceFee)
                && Objects.equals(
                        this.rebalanceFeeUnit,
                        indexLinkedPlanRebalanceDetailsResponseInner.rebalanceFeeUnit)
                && Objects.equals(
                        this.transactionDetails,
                        indexLinkedPlanRebalanceDetailsResponseInner.transactionDetails);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                indexId,
                indexName,
                rebalanceId,
                status,
                rebalanceFee,
                rebalanceFeeUnit,
                transactionDetails);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class IndexLinkedPlanRebalanceDetailsResponseInner {\n");
        sb.append("		indexId: ").append(toIndentedString(indexId)).append("\n");
        sb.append("		indexName: ").append(toIndentedString(indexName)).append("\n");
        sb.append("		rebalanceId: ").append(toIndentedString(rebalanceId)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		rebalanceFee: ").append(toIndentedString(rebalanceFee)).append("\n");
        sb.append("		rebalanceFeeUnit: ").append(toIndentedString(rebalanceFeeUnit)).append("\n");
        sb.append("		transactionDetails: ")
                .append(toIndentedString(transactionDetails))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object indexIdValue = getIndexId();
        String indexIdValueAsString = "";
        indexIdValueAsString = indexIdValue.toString();
        sb.append("indexId=").append(urlEncode(indexIdValueAsString)).append("");
        Object indexNameValue = getIndexName();
        String indexNameValueAsString = "";
        indexNameValueAsString = indexNameValue.toString();
        sb.append("indexName=").append(urlEncode(indexNameValueAsString)).append("");
        Object rebalanceIdValue = getRebalanceId();
        String rebalanceIdValueAsString = "";
        rebalanceIdValueAsString = rebalanceIdValue.toString();
        sb.append("rebalanceId=").append(urlEncode(rebalanceIdValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object rebalanceFeeValue = getRebalanceFee();
        String rebalanceFeeValueAsString = "";
        rebalanceFeeValueAsString = rebalanceFeeValue.toString();
        sb.append("rebalanceFee=").append(urlEncode(rebalanceFeeValueAsString)).append("");
        Object rebalanceFeeUnitValue = getRebalanceFeeUnit();
        String rebalanceFeeUnitValueAsString = "";
        rebalanceFeeUnitValueAsString = rebalanceFeeUnitValue.toString();
        sb.append("rebalanceFeeUnit=").append(urlEncode(rebalanceFeeUnitValueAsString)).append("");
        Object transactionDetailsValue = getTransactionDetails();
        String transactionDetailsValueAsString = "";
        transactionDetailsValueAsString =
                (String)
                        ((Collection) transactionDetailsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("transactionDetails=")
                .append(urlEncode(transactionDetailsValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("indexId");
        openapiFields.add("indexName");
        openapiFields.add("rebalanceId");
        openapiFields.add("status");
        openapiFields.add("rebalanceFee");
        openapiFields.add("rebalanceFeeUnit");
        openapiFields.add("transactionDetails");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     IndexLinkedPlanRebalanceDetailsResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!IndexLinkedPlanRebalanceDetailsResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " IndexLinkedPlanRebalanceDetailsResponseInner is not found"
                                    + " in the empty JSON string",
                                IndexLinkedPlanRebalanceDetailsResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!IndexLinkedPlanRebalanceDetailsResponseInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `IndexLinkedPlanRebalanceDetailsResponseInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("indexName") != null && !jsonObj.get("indexName").isJsonNull())
                && !jsonObj.get("indexName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `indexName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("indexName").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("rebalanceFee") != null && !jsonObj.get("rebalanceFee").isJsonNull())
                && !jsonObj.get("rebalanceFee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `rebalanceFee` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("rebalanceFee").toString()));
        }
        if ((jsonObj.get("rebalanceFeeUnit") != null
                        && !jsonObj.get("rebalanceFeeUnit").isJsonNull())
                && !jsonObj.get("rebalanceFeeUnit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `rebalanceFeeUnit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("rebalanceFeeUnit").toString()));
        }
        if (jsonObj.get("transactionDetails") != null
                && !jsonObj.get("transactionDetails").isJsonNull()) {
            JsonArray jsonArraytransactionDetails = jsonObj.getAsJsonArray("transactionDetails");
            if (jsonArraytransactionDetails != null) {
                // ensure the json data is an array
                if (!jsonObj.get("transactionDetails").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `transactionDetails` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("transactionDetails").toString()));
                }

                // validate the optional field `transactionDetails` (array)
                for (int i = 0; i < jsonArraytransactionDetails.size(); i++) {
                    IndexLinkedPlanRebalanceDetailsResponseInnerTransactionDetailsInner
                            .validateJsonElement(jsonArraytransactionDetails.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!IndexLinkedPlanRebalanceDetailsResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'IndexLinkedPlanRebalanceDetailsResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<IndexLinkedPlanRebalanceDetailsResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(IndexLinkedPlanRebalanceDetailsResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<IndexLinkedPlanRebalanceDetailsResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, IndexLinkedPlanRebalanceDetailsResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public IndexLinkedPlanRebalanceDetailsResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of IndexLinkedPlanRebalanceDetailsResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of IndexLinkedPlanRebalanceDetailsResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     IndexLinkedPlanRebalanceDetailsResponseInner
     */
    public static IndexLinkedPlanRebalanceDetailsResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, IndexLinkedPlanRebalanceDetailsResponseInner.class);
    }

    /**
     * Convert an instance of IndexLinkedPlanRebalanceDetailsResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
