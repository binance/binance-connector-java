/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryIndexDetailsResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryIndexDetailsResponse {
    public static final String SERIALIZED_NAME_INDEX_ID = "indexId";

    @SerializedName(SERIALIZED_NAME_INDEX_ID)
    @jakarta.annotation.Nullable
    private Long indexId;

    public static final String SERIALIZED_NAME_INDEX_NAME = "indexName";

    @SerializedName(SERIALIZED_NAME_INDEX_NAME)
    @jakarta.annotation.Nullable
    private String indexName;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_ASSET_ALLOCATION = "assetAllocation";

    @SerializedName(SERIALIZED_NAME_ASSET_ALLOCATION)
    @jakarta.annotation.Nullable
    private List<@Valid QueryIndexDetailsResponseAssetAllocationInner> assetAllocation;

    public QueryIndexDetailsResponse() {}

    public QueryIndexDetailsResponse indexId(@jakarta.annotation.Nullable Long indexId) {
        this.indexId = indexId;
        return this;
    }

    /**
     * Get indexId
     *
     * @return indexId
     */
    @jakarta.annotation.Nullable
    public Long getIndexId() {
        return indexId;
    }

    public void setIndexId(@jakarta.annotation.Nullable Long indexId) {
        this.indexId = indexId;
    }

    public QueryIndexDetailsResponse indexName(@jakarta.annotation.Nullable String indexName) {
        this.indexName = indexName;
        return this;
    }

    /**
     * Get indexName
     *
     * @return indexName
     */
    @jakarta.annotation.Nullable
    public String getIndexName() {
        return indexName;
    }

    public void setIndexName(@jakarta.annotation.Nullable String indexName) {
        this.indexName = indexName;
    }

    public QueryIndexDetailsResponse status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public QueryIndexDetailsResponse assetAllocation(
            @jakarta.annotation.Nullable
                    List<@Valid QueryIndexDetailsResponseAssetAllocationInner> assetAllocation) {
        this.assetAllocation = assetAllocation;
        return this;
    }

    public QueryIndexDetailsResponse addAssetAllocationItem(
            QueryIndexDetailsResponseAssetAllocationInner assetAllocationItem) {
        if (this.assetAllocation == null) {
            this.assetAllocation = new ArrayList<>();
        }
        this.assetAllocation.add(assetAllocationItem);
        return this;
    }

    /**
     * Get assetAllocation
     *
     * @return assetAllocation
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryIndexDetailsResponseAssetAllocationInner> getAssetAllocation() {
        return assetAllocation;
    }

    public void setAssetAllocation(
            @jakarta.annotation.Nullable
                    List<@Valid QueryIndexDetailsResponseAssetAllocationInner> assetAllocation) {
        this.assetAllocation = assetAllocation;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryIndexDetailsResponse queryIndexDetailsResponse = (QueryIndexDetailsResponse) o;
        return Objects.equals(this.indexId, queryIndexDetailsResponse.indexId)
                && Objects.equals(this.indexName, queryIndexDetailsResponse.indexName)
                && Objects.equals(this.status, queryIndexDetailsResponse.status)
                && Objects.equals(this.assetAllocation, queryIndexDetailsResponse.assetAllocation);
    }

    @Override
    public int hashCode() {
        return Objects.hash(indexId, indexName, status, assetAllocation);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryIndexDetailsResponse {\n");
        sb.append("		indexId: ").append(toIndentedString(indexId)).append("\n");
        sb.append("		indexName: ").append(toIndentedString(indexName)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		assetAllocation: ").append(toIndentedString(assetAllocation)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object indexIdValue = getIndexId();
        String indexIdValueAsString = "";
        indexIdValueAsString = indexIdValue.toString();
        sb.append("indexId=").append(urlEncode(indexIdValueAsString)).append("");
        Object indexNameValue = getIndexName();
        String indexNameValueAsString = "";
        indexNameValueAsString = indexNameValue.toString();
        sb.append("indexName=").append(urlEncode(indexNameValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object assetAllocationValue = getAssetAllocation();
        String assetAllocationValueAsString = "";
        assetAllocationValueAsString =
                (String)
                        ((Collection) assetAllocationValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("assetAllocation=").append(urlEncode(assetAllocationValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("indexId");
        openapiFields.add("indexName");
        openapiFields.add("status");
        openapiFields.add("assetAllocation");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to QueryIndexDetailsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryIndexDetailsResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in QueryIndexDetailsResponse is not found"
                                        + " in the empty JSON string",
                                QueryIndexDetailsResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryIndexDetailsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QueryIndexDetailsResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("indexName") != null && !jsonObj.get("indexName").isJsonNull())
                && !jsonObj.get("indexName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `indexName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("indexName").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if (jsonObj.get("assetAllocation") != null
                && !jsonObj.get("assetAllocation").isJsonNull()) {
            JsonArray jsonArrayassetAllocation = jsonObj.getAsJsonArray("assetAllocation");
            if (jsonArrayassetAllocation != null) {
                // ensure the json data is an array
                if (!jsonObj.get("assetAllocation").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `assetAllocation` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("assetAllocation").toString()));
                }

                // validate the optional field `assetAllocation` (array)
                for (int i = 0; i < jsonArrayassetAllocation.size(); i++) {
                    QueryIndexDetailsResponseAssetAllocationInner.validateJsonElement(
                            jsonArrayassetAllocation.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryIndexDetailsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'QueryIndexDetailsResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryIndexDetailsResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(QueryIndexDetailsResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryIndexDetailsResponse>() {
                        @Override
                        public void write(JsonWriter out, QueryIndexDetailsResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryIndexDetailsResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryIndexDetailsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryIndexDetailsResponse
     * @throws IOException if the JSON string is invalid with respect to QueryIndexDetailsResponse
     */
    public static QueryIndexDetailsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, QueryIndexDetailsResponse.class);
    }

    /**
     * Convert an instance of QueryIndexDetailsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
