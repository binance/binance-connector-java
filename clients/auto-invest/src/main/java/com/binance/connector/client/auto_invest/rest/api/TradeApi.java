/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.api;

import com.binance.connector.client.auto_invest.rest.model.ChangePlanStatusRequest;
import com.binance.connector.client.auto_invest.rest.model.ChangePlanStatusResponse;
import com.binance.connector.client.auto_invest.rest.model.IndexLinkedPlanRebalanceDetailsResponse;
import com.binance.connector.client.auto_invest.rest.model.IndexLinkedPlanRedemptionRequest;
import com.binance.connector.client.auto_invest.rest.model.IndexLinkedPlanRedemptionResponse;
import com.binance.connector.client.auto_invest.rest.model.IndexLinkedPlanRedemptionTradeResponse;
import com.binance.connector.client.auto_invest.rest.model.InvestmentPlanAdjustmentRequest;
import com.binance.connector.client.auto_invest.rest.model.InvestmentPlanAdjustmentResponse;
import com.binance.connector.client.auto_invest.rest.model.InvestmentPlanCreationRequest;
import com.binance.connector.client.auto_invest.rest.model.InvestmentPlanCreationResponse;
import com.binance.connector.client.auto_invest.rest.model.OneTimeTransactionRequest;
import com.binance.connector.client.auto_invest.rest.model.OneTimeTransactionResponse;
import com.binance.connector.client.auto_invest.rest.model.QueryHoldingDetailsOfThePlanResponse;
import com.binance.connector.client.auto_invest.rest.model.QueryIndexLinkedPlanPositionDetailsResponse;
import com.binance.connector.client.auto_invest.rest.model.QueryOneTimeTransactionStatusResponse;
import com.binance.connector.client.auto_invest.rest.model.QuerySubscriptionTransactionHistoryResponse;
import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.JSON;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class TradeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-auto-invest/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public TradeApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public TradeApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for changePlanStatus
     *
     * @param changePlanStatusRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Change Plan Status </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Change-Plan-Status">Change
     *     Plan Status(TRADE) Documentation</a>
     */
    private okhttp3.Call changePlanStatusCall(ChangePlanStatusRequest changePlanStatusRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/plan/edit-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (changePlanStatusRequest.getPlanId() != null) {
            localVarFormParams.put("planId", changePlanStatusRequest.getPlanId());
        }

        if (changePlanStatusRequest.getStatus() != null) {
            localVarFormParams.put("status", changePlanStatusRequest.getStatus());
        }

        if (changePlanStatusRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", changePlanStatusRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changePlanStatusValidateBeforeCall(
            ChangePlanStatusRequest changePlanStatusRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {changePlanStatusRequest};
            Method method =
                    this.getClass().getMethod("changePlanStatus", ChangePlanStatusRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return changePlanStatusCall(changePlanStatusRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Change Plan Status(TRADE) Change Plan Status * max one request every 3s per account Weight: 1
     *
     * @param changePlanStatusRequest (required)
     * @return ApiResponse&lt;ChangePlanStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Change Plan Status </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Change-Plan-Status">Change
     *     Plan Status(TRADE) Documentation</a>
     */
    public ApiResponse<ChangePlanStatusResponse> changePlanStatus(
            @Valid @NotNull ChangePlanStatusRequest changePlanStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = changePlanStatusValidateBeforeCall(changePlanStatusRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<ChangePlanStatusResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for indexLinkedPlanRebalanceDetails
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current query page. Default: 1, start from 1 (optional)
     * @param size Default: 8, Max:100 (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Index Linked Plan Rebalance Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Index-Linked-Plan-Rebalance-Details">Index
     *     Linked Plan Rebalance Details(USER_DATA) Documentation</a>
     */
    private okhttp3.Call indexLinkedPlanRebalanceDetailsCall(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/rebalance/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexLinkedPlanRebalanceDetailsValidateBeforeCall(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {startTime, endTime, current, size, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "indexLinkedPlanRebalanceDetails",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return indexLinkedPlanRebalanceDetailsCall(
                        startTime, endTime, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Index Linked Plan Rebalance Details(USER_DATA) Get the history of Index Linked Plan
     * Redemption transactions * Max 30 day difference between &#x60;startTime&#x60; and
     * &#x60;endTime&#x60; * If no &#x60;startTime&#x60; and &#x60;endTime&#x60;, default to show
     * past 30 day records Weight: 1
     *
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current query page. Default: 1, start from 1 (optional)
     * @param size Default: 8, Max:100 (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;IndexLinkedPlanRebalanceDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Index Linked Plan Rebalance Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Index-Linked-Plan-Rebalance-Details">Index
     *     Linked Plan Rebalance Details(USER_DATA) Documentation</a>
     */
    public ApiResponse<IndexLinkedPlanRebalanceDetailsResponse> indexLinkedPlanRebalanceDetails(
            Long startTime, Long endTime, Long current, Long size, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                indexLinkedPlanRebalanceDetailsValidateBeforeCall(
                        startTime, endTime, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<IndexLinkedPlanRebalanceDetailsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for indexLinkedPlanRedemption
     *
     * @param indexLinkedPlanRedemptionRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Index Linked Plan Redemption </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Index-Linked-Plan-Redemption">Index
     *     Linked Plan Redemption(TRADE) Documentation</a>
     */
    private okhttp3.Call indexLinkedPlanRedemptionCall(
            IndexLinkedPlanRedemptionRequest indexLinkedPlanRedemptionRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/redeem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (indexLinkedPlanRedemptionRequest.getIndexId() != null) {
            localVarFormParams.put("indexId", indexLinkedPlanRedemptionRequest.getIndexId());
        }

        if (indexLinkedPlanRedemptionRequest.getRequestId() != null) {
            localVarFormParams.put("requestId", indexLinkedPlanRedemptionRequest.getRequestId());
        }

        if (indexLinkedPlanRedemptionRequest.getRedemptionPercentage() != null) {
            localVarFormParams.put(
                    "redemptionPercentage",
                    indexLinkedPlanRedemptionRequest.getRedemptionPercentage());
        }

        if (indexLinkedPlanRedemptionRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", indexLinkedPlanRedemptionRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexLinkedPlanRedemptionValidateBeforeCall(
            IndexLinkedPlanRedemptionRequest indexLinkedPlanRedemptionRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {indexLinkedPlanRedemptionRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "indexLinkedPlanRedemption",
                                    IndexLinkedPlanRedemptionRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return indexLinkedPlanRedemptionCall(indexLinkedPlanRedemptionRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Index Linked Plan Redemption(TRADE) To redeem index-Linked plan holdings Weight: 1
     *
     * @param indexLinkedPlanRedemptionRequest (required)
     * @return ApiResponse&lt;IndexLinkedPlanRedemptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Index Linked Plan Redemption </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Index-Linked-Plan-Redemption">Index
     *     Linked Plan Redemption(TRADE) Documentation</a>
     */
    public ApiResponse<IndexLinkedPlanRedemptionResponse> indexLinkedPlanRedemption(
            @Valid @NotNull IndexLinkedPlanRedemptionRequest indexLinkedPlanRedemptionRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                indexLinkedPlanRedemptionValidateBeforeCall(indexLinkedPlanRedemptionRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<IndexLinkedPlanRedemptionResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for indexLinkedPlanRedemptionTrade
     *
     * @param requestId request id (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current query page. Default: 1, start from 1 (optional)
     * @param asset (optional)
     * @param size Default: 8, Max:100 (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Index Linked Plan Redemption </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-Index-Linked-Plan-Redemption">Index
     *     Linked Plan Redemption(USER_DATA) Documentation</a>
     */
    private okhttp3.Call indexLinkedPlanRedemptionTradeCall(
            Long requestId,
            Long startTime,
            Long endTime,
            Long current,
            String asset,
            Long size,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/redeem/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestId", requestId));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexLinkedPlanRedemptionTradeValidateBeforeCall(
            Long requestId,
            Long startTime,
            Long endTime,
            Long current,
            String asset,
            Long size,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                requestId, startTime, endTime, current, asset, size, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "indexLinkedPlanRedemptionTrade",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return indexLinkedPlanRedemptionTradeCall(
                        requestId, startTime, endTime, current, asset, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Index Linked Plan Redemption(USER_DATA) Get the history of Index Linked Plan Redemption
     * transactions * Max 30 day difference between &#x60;startTime&#x60; and &#x60;endTime&#x60; *
     * If no &#x60;startTime&#x60; and &#x60;endTime&#x60;, default to show past 30 day records
     * Weight: 1
     *
     * @param requestId request id (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current query page. Default: 1, start from 1 (optional)
     * @param asset (optional)
     * @param size Default: 8, Max:100 (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;IndexLinkedPlanRedemptionTradeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Index Linked Plan Redemption </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-Index-Linked-Plan-Redemption">Index
     *     Linked Plan Redemption(USER_DATA) Documentation</a>
     */
    public ApiResponse<IndexLinkedPlanRedemptionTradeResponse> indexLinkedPlanRedemptionTrade(
            @NotNull Long requestId,
            Long startTime,
            Long endTime,
            Long current,
            String asset,
            Long size,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                indexLinkedPlanRedemptionTradeValidateBeforeCall(
                        requestId, startTime, endTime, current, asset, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<IndexLinkedPlanRedemptionTradeResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for investmentPlanAdjustment
     *
     * @param investmentPlanAdjustmentRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Investment plan adjustment </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Investment-plan-adjustment">Investment
     *     plan adjustment(TRADE) Documentation</a>
     */
    private okhttp3.Call investmentPlanAdjustmentCall(
            InvestmentPlanAdjustmentRequest investmentPlanAdjustmentRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/plan/edit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (investmentPlanAdjustmentRequest.getPlanId() != null) {
            localVarFormParams.put("planId", investmentPlanAdjustmentRequest.getPlanId());
        }

        if (investmentPlanAdjustmentRequest.getSubscriptionAmount() != null) {
            localVarFormParams.put(
                    "subscriptionAmount",
                    DecimalFormatter.getFormatter()
                            .format(investmentPlanAdjustmentRequest.getSubscriptionAmount()));
        }

        if (investmentPlanAdjustmentRequest.getSubscriptionCycle() != null) {
            localVarFormParams.put(
                    "subscriptionCycle", investmentPlanAdjustmentRequest.getSubscriptionCycle());
        }

        if (investmentPlanAdjustmentRequest.getSubscriptionStartTime() != null) {
            localVarFormParams.put(
                    "subscriptionStartTime",
                    investmentPlanAdjustmentRequest.getSubscriptionStartTime());
        }

        if (investmentPlanAdjustmentRequest.getSourceAsset() != null) {
            localVarFormParams.put("sourceAsset", investmentPlanAdjustmentRequest.getSourceAsset());
        }

        if (investmentPlanAdjustmentRequest.getFlexibleAllowedToUse() != null) {
            localVarFormParams.put(
                    "flexibleAllowedToUse",
                    investmentPlanAdjustmentRequest.getFlexibleAllowedToUse());
        }

        if (investmentPlanAdjustmentRequest.getDetails() != null) {
            String json = JSON.getGson().toJson(investmentPlanAdjustmentRequest.getDetails());
            localVarFormParams.put("details", json);
        }

        if (investmentPlanAdjustmentRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", investmentPlanAdjustmentRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call investmentPlanAdjustmentValidateBeforeCall(
            InvestmentPlanAdjustmentRequest investmentPlanAdjustmentRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {investmentPlanAdjustmentRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "investmentPlanAdjustment",
                                    InvestmentPlanAdjustmentRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return investmentPlanAdjustmentCall(investmentPlanAdjustmentRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Investment plan adjustment(TRADE) Query Source Asset to be used for investment * max one
     * request every 3s per account Weight: 1
     *
     * @param investmentPlanAdjustmentRequest (required)
     * @return ApiResponse&lt;InvestmentPlanAdjustmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Investment plan adjustment </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Investment-plan-adjustment">Investment
     *     plan adjustment(TRADE) Documentation</a>
     */
    public ApiResponse<InvestmentPlanAdjustmentResponse> investmentPlanAdjustment(
            @Valid @NotNull InvestmentPlanAdjustmentRequest investmentPlanAdjustmentRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                investmentPlanAdjustmentValidateBeforeCall(investmentPlanAdjustmentRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<InvestmentPlanAdjustmentResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for investmentPlanCreation
     *
     * @param investmentPlanCreationRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Investment plan creation </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Investment-plan-creation">Investment
     *     plan creation(USER_DATA) Documentation</a>
     */
    private okhttp3.Call investmentPlanCreationCall(
            InvestmentPlanCreationRequest investmentPlanCreationRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/plan/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (investmentPlanCreationRequest.getSourceType() != null) {
            localVarFormParams.put("sourceType", investmentPlanCreationRequest.getSourceType());
        }

        if (investmentPlanCreationRequest.getRequestId() != null) {
            localVarFormParams.put("requestId", investmentPlanCreationRequest.getRequestId());
        }

        if (investmentPlanCreationRequest.getPlanType() != null) {
            localVarFormParams.put("planType", investmentPlanCreationRequest.getPlanType());
        }

        if (investmentPlanCreationRequest.getIndexId() != null) {
            localVarFormParams.put("indexId", investmentPlanCreationRequest.getIndexId());
        }

        if (investmentPlanCreationRequest.getSubscriptionAmount() != null) {
            localVarFormParams.put(
                    "subscriptionAmount",
                    DecimalFormatter.getFormatter()
                            .format(investmentPlanCreationRequest.getSubscriptionAmount()));
        }

        if (investmentPlanCreationRequest.getSubscriptionCycle() != null) {
            localVarFormParams.put(
                    "subscriptionCycle", investmentPlanCreationRequest.getSubscriptionCycle());
        }

        if (investmentPlanCreationRequest.getSubscriptionStartTime() != null) {
            localVarFormParams.put(
                    "subscriptionStartTime",
                    investmentPlanCreationRequest.getSubscriptionStartTime());
        }

        if (investmentPlanCreationRequest.getSourceAsset() != null) {
            localVarFormParams.put("sourceAsset", investmentPlanCreationRequest.getSourceAsset());
        }

        if (investmentPlanCreationRequest.getFlexibleAllowedToUse() != null) {
            localVarFormParams.put(
                    "flexibleAllowedToUse",
                    investmentPlanCreationRequest.getFlexibleAllowedToUse());
        }

        if (investmentPlanCreationRequest.getDetails() != null) {
            String json = JSON.getGson().toJson(investmentPlanCreationRequest.getDetails());
            localVarFormParams.put("details", json);
        }

        if (investmentPlanCreationRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", investmentPlanCreationRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call investmentPlanCreationValidateBeforeCall(
            InvestmentPlanCreationRequest investmentPlanCreationRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {investmentPlanCreationRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "investmentPlanCreation", InvestmentPlanCreationRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return investmentPlanCreationCall(investmentPlanCreationRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Investment plan creation(USER_DATA) Post an investment plan creation * max one request every
     * 3s per account Weight: 1
     *
     * @param investmentPlanCreationRequest (required)
     * @return ApiResponse&lt;InvestmentPlanCreationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Investment plan creation </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Investment-plan-creation">Investment
     *     plan creation(USER_DATA) Documentation</a>
     */
    public ApiResponse<InvestmentPlanCreationResponse> investmentPlanCreation(
            @Valid @NotNull InvestmentPlanCreationRequest investmentPlanCreationRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                investmentPlanCreationValidateBeforeCall(investmentPlanCreationRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<InvestmentPlanCreationResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for oneTimeTransaction
     *
     * @param oneTimeTransactionRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> One Time Transaction </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/auto_invest/trade/One-Time-Transaction">One
     *     Time Transaction(TRADE) Documentation</a>
     */
    private okhttp3.Call oneTimeTransactionCall(OneTimeTransactionRequest oneTimeTransactionRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/one-off";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (oneTimeTransactionRequest.getSourceType() != null) {
            localVarFormParams.put("sourceType", oneTimeTransactionRequest.getSourceType());
        }

        if (oneTimeTransactionRequest.getRequestId() != null) {
            localVarFormParams.put("requestId", oneTimeTransactionRequest.getRequestId());
        }

        if (oneTimeTransactionRequest.getSubscriptionAmount() != null) {
            localVarFormParams.put(
                    "subscriptionAmount",
                    DecimalFormatter.getFormatter()
                            .format(oneTimeTransactionRequest.getSubscriptionAmount()));
        }

        if (oneTimeTransactionRequest.getSourceAsset() != null) {
            localVarFormParams.put("sourceAsset", oneTimeTransactionRequest.getSourceAsset());
        }

        if (oneTimeTransactionRequest.getFlexibleAllowedToUse() != null) {
            localVarFormParams.put(
                    "flexibleAllowedToUse", oneTimeTransactionRequest.getFlexibleAllowedToUse());
        }

        if (oneTimeTransactionRequest.getPlanId() != null) {
            localVarFormParams.put("planId", oneTimeTransactionRequest.getPlanId());
        }

        if (oneTimeTransactionRequest.getIndexId() != null) {
            localVarFormParams.put("indexId", oneTimeTransactionRequest.getIndexId());
        }

        if (oneTimeTransactionRequest.getDetails() != null) {
            String json = JSON.getGson().toJson(oneTimeTransactionRequest.getDetails());
            localVarFormParams.put("details", json);
        }

        if (oneTimeTransactionRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", oneTimeTransactionRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oneTimeTransactionValidateBeforeCall(
            OneTimeTransactionRequest oneTimeTransactionRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {oneTimeTransactionRequest};
            Method method =
                    this.getClass()
                            .getMethod("oneTimeTransaction", OneTimeTransactionRequest.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return oneTimeTransactionCall(oneTimeTransactionRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * One Time Transaction(TRADE) One time transaction *
     * &#x60;planId&#x60;/&#x60;planId&#x60;/&#x60;details&#x60; must not all be null Weight: 1
     *
     * @param oneTimeTransactionRequest (required)
     * @return ApiResponse&lt;OneTimeTransactionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> One Time Transaction </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/auto_invest/trade/One-Time-Transaction">One
     *     Time Transaction(TRADE) Documentation</a>
     */
    public ApiResponse<OneTimeTransactionResponse> oneTimeTransaction(
            @Valid @NotNull OneTimeTransactionRequest oneTimeTransactionRequest)
            throws ApiException {
        okhttp3.Call localVarCall = oneTimeTransactionValidateBeforeCall(oneTimeTransactionRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<OneTimeTransactionResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryHoldingDetailsOfThePlan
     *
     * @param planId Plan identifier (optional)
     * @param requestId requestId when create (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> holding details of the plan </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-holding-details-of-the-plan">Query
     *     holding details of the plan(USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryHoldingDetailsOfThePlanCall(
            Long planId, String requestId, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/plan/id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestId", requestId));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryHoldingDetailsOfThePlanValidateBeforeCall(
            Long planId, String requestId, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {planId, requestId, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryHoldingDetailsOfThePlan",
                                    Long.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryHoldingDetailsOfThePlanCall(planId, requestId, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query holding details of the plan(USER_DATA) Query holding details of the plan Weight: 1
     *
     * @param planId Plan identifier (optional)
     * @param requestId requestId when create (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;QueryHoldingDetailsOfThePlanResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> holding details of the plan </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-holding-details-of-the-plan">Query
     *     holding details of the plan(USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryHoldingDetailsOfThePlanResponse> queryHoldingDetailsOfThePlan(
            Long planId, String requestId, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                queryHoldingDetailsOfThePlanValidateBeforeCall(planId, requestId, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryHoldingDetailsOfThePlanResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryIndexLinkedPlanPositionDetails
     *
     * @param indexId (required)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Index Linked Plan Position Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-Index-Linked-Plan-Position-Details">Query
     *     Index Linked Plan Position Details(USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryIndexLinkedPlanPositionDetailsCall(Long indexId, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/index/user-summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (indexId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("indexId", indexId));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryIndexLinkedPlanPositionDetailsValidateBeforeCall(
            Long indexId, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {indexId, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryIndexLinkedPlanPositionDetails", Long.class, Long.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryIndexLinkedPlanPositionDetailsCall(indexId, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Index Linked Plan Position Details(USER_DATA) Details on users Index-Linked plan
     * position details Weight: 1
     *
     * @param indexId (required)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;QueryIndexLinkedPlanPositionDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Index Linked Plan Position Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-Index-Linked-Plan-Position-Details">Query
     *     Index Linked Plan Position Details(USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryIndexLinkedPlanPositionDetailsResponse>
            queryIndexLinkedPlanPositionDetails(@NotNull Long indexId, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                queryIndexLinkedPlanPositionDetailsValidateBeforeCall(indexId, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryIndexLinkedPlanPositionDetailsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryOneTimeTransactionStatus
     *
     * @param transactionId PORTFOLIO plan&#39;s Id (required)
     * @param requestId requestId when create (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> One-Time Transaction Status </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-One-Time-Transaction-Status">Query
     *     One-Time Transaction Status(USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryOneTimeTransactionStatusCall(
            Long transactionId, String requestId, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/one-off/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionId != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("transactionId", transactionId));
        }

        if (requestId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("requestId", requestId));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryOneTimeTransactionStatusValidateBeforeCall(
            Long transactionId, String requestId, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {transactionId, requestId, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryOneTimeTransactionStatus",
                                    Long.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryOneTimeTransactionStatusCall(transactionId, requestId, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query One-Time Transaction Status(USER_DATA) Transaction status for one-time transaction
     * Weight: 1
     *
     * @param transactionId PORTFOLIO plan&#39;s Id (required)
     * @param requestId requestId when create (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;QueryOneTimeTransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> One-Time Transaction Status </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-One-Time-Transaction-Status">Query
     *     One-Time Transaction Status(USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryOneTimeTransactionStatusResponse> queryOneTimeTransactionStatus(
            @NotNull Long transactionId, String requestId, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                queryOneTimeTransactionStatusValidateBeforeCall(
                        transactionId, requestId, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryOneTimeTransactionStatusResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for querySubscriptionTransactionHistory
     *
     * @param planId Plan identifier (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param targetAsset Plan identifier (optional)
     * @param planType SINGLE, PORTFOLIO, INDEX, ALL (optional)
     * @param size Default: 8, Max:100 (optional)
     * @param current Current query page. Default: 1, start from 1 (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> subscription transaction history </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-subscription-transaction-history">Query
     *     subscription transaction history(USER_DATA) Documentation</a>
     */
    private okhttp3.Call querySubscriptionTransactionHistoryCall(
            Long planId,
            Long startTime,
            Long endTime,
            Long targetAsset,
            Long planType,
            Long size,
            Long current,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/lending/auto-invest/history/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (planId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planId", planId));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (targetAsset != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("targetAsset", targetAsset));
        }

        if (planType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("planType", planType));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySubscriptionTransactionHistoryValidateBeforeCall(
            Long planId,
            Long startTime,
            Long endTime,
            Long targetAsset,
            Long planType,
            Long size,
            Long current,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                planId, startTime, endTime, targetAsset, planType, size, current, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "querySubscriptionTransactionHistory",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<TradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return querySubscriptionTransactionHistoryCall(
                        planId,
                        startTime,
                        endTime,
                        targetAsset,
                        planType,
                        size,
                        current,
                        recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query subscription transaction history(USER_DATA) Query subscription transaction history of a
     * plan * Max span between startTime and endTime is 30days * If both startTime and endTime are
     * null，then default is 30days Weight: 1
     *
     * @param planId Plan identifier (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param targetAsset Plan identifier (optional)
     * @param planType SINGLE, PORTFOLIO, INDEX, ALL (optional)
     * @param size Default: 8, Max:100 (optional)
     * @param current Current query page. Default: 1, start from 1 (optional)
     * @param recvWindow no more than &#x60;&#x60;&#x60;60000&#x60;&#x60;&#x60; (optional)
     * @return ApiResponse&lt;QuerySubscriptionTransactionHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> subscription transaction history </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/auto_invest/trade/Query-subscription-transaction-history">Query
     *     subscription transaction history(USER_DATA) Documentation</a>
     */
    public ApiResponse<QuerySubscriptionTransactionHistoryResponse>
            querySubscriptionTransactionHistory(
                    Long planId,
                    Long startTime,
                    Long endTime,
                    Long targetAsset,
                    Long planType,
                    Long size,
                    Long current,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                querySubscriptionTransactionHistoryValidateBeforeCall(
                        planId,
                        startTime,
                        endTime,
                        targetAsset,
                        planType,
                        size,
                        current,
                        recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QuerySubscriptionTransactionHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
