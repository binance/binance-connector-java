/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryIndexDetailsResponseAssetAllocationInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryIndexDetailsResponseAssetAllocationInner {
    public static final String SERIALIZED_NAME_TARGET_ASSET = "targetAsset";

    @SerializedName(SERIALIZED_NAME_TARGET_ASSET)
    @jakarta.annotation.Nullable
    private String targetAsset;

    public static final String SERIALIZED_NAME_ALLOCATION = "allocation";

    @SerializedName(SERIALIZED_NAME_ALLOCATION)
    @jakarta.annotation.Nullable
    private String allocation;

    public QueryIndexDetailsResponseAssetAllocationInner() {}

    public QueryIndexDetailsResponseAssetAllocationInner targetAsset(
            @jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
        return this;
    }

    /**
     * Get targetAsset
     *
     * @return targetAsset
     */
    @jakarta.annotation.Nullable
    public String getTargetAsset() {
        return targetAsset;
    }

    public void setTargetAsset(@jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
    }

    public QueryIndexDetailsResponseAssetAllocationInner allocation(
            @jakarta.annotation.Nullable String allocation) {
        this.allocation = allocation;
        return this;
    }

    /**
     * Get allocation
     *
     * @return allocation
     */
    @jakarta.annotation.Nullable
    public String getAllocation() {
        return allocation;
    }

    public void setAllocation(@jakarta.annotation.Nullable String allocation) {
        this.allocation = allocation;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryIndexDetailsResponseAssetAllocationInner
                queryIndexDetailsResponseAssetAllocationInner =
                        (QueryIndexDetailsResponseAssetAllocationInner) o;
        return Objects.equals(
                        this.targetAsset, queryIndexDetailsResponseAssetAllocationInner.targetAsset)
                && Objects.equals(
                        this.allocation, queryIndexDetailsResponseAssetAllocationInner.allocation);
    }

    @Override
    public int hashCode() {
        return Objects.hash(targetAsset, allocation);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryIndexDetailsResponseAssetAllocationInner {\n");
        sb.append("		targetAsset: ").append(toIndentedString(targetAsset)).append("\n");
        sb.append("		allocation: ").append(toIndentedString(allocation)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object targetAssetValue = getTargetAsset();
        String targetAssetValueAsString = "";
        targetAssetValueAsString = targetAssetValue.toString();
        sb.append("targetAsset=").append(urlEncode(targetAssetValueAsString)).append("");
        Object allocationValue = getAllocation();
        String allocationValueAsString = "";
        allocationValueAsString = allocationValue.toString();
        sb.append("allocation=").append(urlEncode(allocationValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("targetAsset");
        openapiFields.add("allocation");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryIndexDetailsResponseAssetAllocationInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryIndexDetailsResponseAssetAllocationInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryIndexDetailsResponseAssetAllocationInner is not found"
                                    + " in the empty JSON string",
                                QueryIndexDetailsResponseAssetAllocationInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryIndexDetailsResponseAssetAllocationInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryIndexDetailsResponseAssetAllocationInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("targetAsset") != null && !jsonObj.get("targetAsset").isJsonNull())
                && !jsonObj.get("targetAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `targetAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("targetAsset").toString()));
        }
        if ((jsonObj.get("allocation") != null && !jsonObj.get("allocation").isJsonNull())
                && !jsonObj.get("allocation").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `allocation` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("allocation").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryIndexDetailsResponseAssetAllocationInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryIndexDetailsResponseAssetAllocationInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryIndexDetailsResponseAssetAllocationInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(QueryIndexDetailsResponseAssetAllocationInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryIndexDetailsResponseAssetAllocationInner>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryIndexDetailsResponseAssetAllocationInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryIndexDetailsResponseAssetAllocationInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryIndexDetailsResponseAssetAllocationInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryIndexDetailsResponseAssetAllocationInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryIndexDetailsResponseAssetAllocationInner
     */
    public static QueryIndexDetailsResponseAssetAllocationInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QueryIndexDetailsResponseAssetAllocationInner.class);
    }

    /**
     * Convert an instance of QueryIndexDetailsResponseAssetAllocationInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
