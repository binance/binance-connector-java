/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetListOfPlansResponse2PlansInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetListOfPlansResponse2PlansInner {
    public static final String SERIALIZED_NAME_PLAN_ID = "planId";

    @SerializedName(SERIALIZED_NAME_PLAN_ID)
    @jakarta.annotation.Nullable
    private Long planId;

    public static final String SERIALIZED_NAME_PLAN_TYPE = "planType";

    @SerializedName(SERIALIZED_NAME_PLAN_TYPE)
    @jakarta.annotation.Nullable
    private String planType;

    public static final String SERIALIZED_NAME_EDIT_ALLOWED = "editAllowed";

    @SerializedName(SERIALIZED_NAME_EDIT_ALLOWED)
    @jakarta.annotation.Nullable
    private String editAllowed;

    public static final String SERIALIZED_NAME_CREATION_DATE_TIME = "creationDateTime";

    @SerializedName(SERIALIZED_NAME_CREATION_DATE_TIME)
    @jakarta.annotation.Nullable
    private Long creationDateTime;

    public static final String SERIALIZED_NAME_FIRST_EXECUTION_DATE_TIME = "firstExecutionDateTime";

    @SerializedName(SERIALIZED_NAME_FIRST_EXECUTION_DATE_TIME)
    @jakarta.annotation.Nullable
    private Long firstExecutionDateTime;

    public static final String SERIALIZED_NAME_NEXT_EXECUTION_DATE_TIME = "nextExecutionDateTime";

    @SerializedName(SERIALIZED_NAME_NEXT_EXECUTION_DATE_TIME)
    @jakarta.annotation.Nullable
    private Long nextExecutionDateTime;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_LAST_UPDATED_DATE_TIME = "lastUpdatedDateTime";

    @SerializedName(SERIALIZED_NAME_LAST_UPDATED_DATE_TIME)
    @jakarta.annotation.Nullable
    private Long lastUpdatedDateTime;

    public static final String SERIALIZED_NAME_TARGET_ASSET = "targetAsset";

    @SerializedName(SERIALIZED_NAME_TARGET_ASSET)
    @jakarta.annotation.Nullable
    private String targetAsset;

    public static final String SERIALIZED_NAME_SOURCE_ASSET = "sourceAsset";

    @SerializedName(SERIALIZED_NAME_SOURCE_ASSET)
    @jakarta.annotation.Nullable
    private String sourceAsset;

    public static final String SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D = "totalInvestedInUSD";

    @SerializedName(SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String totalInvestedInUSD;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_AMOUNT = "subscriptionAmount";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_AMOUNT)
    @jakarta.annotation.Nullable
    private String subscriptionAmount;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_CYCLE = "subscriptionCycle";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_CYCLE)
    @jakarta.annotation.Nullable
    private String subscriptionCycle;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_START_DAY = "subscriptionStartDay";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_START_DAY)
    @jakarta.annotation.Nullable
    private String subscriptionStartDay;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_START_WEEKDAY =
            "subscriptionStartWeekday";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_START_WEEKDAY)
    @jakarta.annotation.Nullable
    private String subscriptionStartWeekday;

    public static final String SERIALIZED_NAME_SUBSCRIPTION_START_TIME = "subscriptionStartTime";

    @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_START_TIME)
    @jakarta.annotation.Nullable
    private String subscriptionStartTime;

    public static final String SERIALIZED_NAME_SOURCE_WALLET = "sourceWallet";

    @SerializedName(SERIALIZED_NAME_SOURCE_WALLET)
    @jakarta.annotation.Nullable
    private String sourceWallet;

    public static final String SERIALIZED_NAME_FLEXIBLE_ALLOWED_TO_USE = "flexibleAllowedToUse";

    @SerializedName(SERIALIZED_NAME_FLEXIBLE_ALLOWED_TO_USE)
    @jakarta.annotation.Nullable
    private String flexibleAllowedToUse;

    public GetListOfPlansResponse2PlansInner() {}

    public GetListOfPlansResponse2PlansInner planId(@jakarta.annotation.Nullable Long planId) {
        this.planId = planId;
        return this;
    }

    /**
     * Get planId
     *
     * @return planId
     */
    @jakarta.annotation.Nullable
    public Long getPlanId() {
        return planId;
    }

    public void setPlanId(@jakarta.annotation.Nullable Long planId) {
        this.planId = planId;
    }

    public GetListOfPlansResponse2PlansInner planType(
            @jakarta.annotation.Nullable String planType) {
        this.planType = planType;
        return this;
    }

    /**
     * Get planType
     *
     * @return planType
     */
    @jakarta.annotation.Nullable
    public String getPlanType() {
        return planType;
    }

    public void setPlanType(@jakarta.annotation.Nullable String planType) {
        this.planType = planType;
    }

    public GetListOfPlansResponse2PlansInner editAllowed(
            @jakarta.annotation.Nullable String editAllowed) {
        this.editAllowed = editAllowed;
        return this;
    }

    /**
     * Get editAllowed
     *
     * @return editAllowed
     */
    @jakarta.annotation.Nullable
    public String getEditAllowed() {
        return editAllowed;
    }

    public void setEditAllowed(@jakarta.annotation.Nullable String editAllowed) {
        this.editAllowed = editAllowed;
    }

    public GetListOfPlansResponse2PlansInner creationDateTime(
            @jakarta.annotation.Nullable Long creationDateTime) {
        this.creationDateTime = creationDateTime;
        return this;
    }

    /**
     * Get creationDateTime
     *
     * @return creationDateTime
     */
    @jakarta.annotation.Nullable
    public Long getCreationDateTime() {
        return creationDateTime;
    }

    public void setCreationDateTime(@jakarta.annotation.Nullable Long creationDateTime) {
        this.creationDateTime = creationDateTime;
    }

    public GetListOfPlansResponse2PlansInner firstExecutionDateTime(
            @jakarta.annotation.Nullable Long firstExecutionDateTime) {
        this.firstExecutionDateTime = firstExecutionDateTime;
        return this;
    }

    /**
     * Get firstExecutionDateTime
     *
     * @return firstExecutionDateTime
     */
    @jakarta.annotation.Nullable
    public Long getFirstExecutionDateTime() {
        return firstExecutionDateTime;
    }

    public void setFirstExecutionDateTime(
            @jakarta.annotation.Nullable Long firstExecutionDateTime) {
        this.firstExecutionDateTime = firstExecutionDateTime;
    }

    public GetListOfPlansResponse2PlansInner nextExecutionDateTime(
            @jakarta.annotation.Nullable Long nextExecutionDateTime) {
        this.nextExecutionDateTime = nextExecutionDateTime;
        return this;
    }

    /**
     * Get nextExecutionDateTime
     *
     * @return nextExecutionDateTime
     */
    @jakarta.annotation.Nullable
    public Long getNextExecutionDateTime() {
        return nextExecutionDateTime;
    }

    public void setNextExecutionDateTime(@jakarta.annotation.Nullable Long nextExecutionDateTime) {
        this.nextExecutionDateTime = nextExecutionDateTime;
    }

    public GetListOfPlansResponse2PlansInner status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public GetListOfPlansResponse2PlansInner lastUpdatedDateTime(
            @jakarta.annotation.Nullable Long lastUpdatedDateTime) {
        this.lastUpdatedDateTime = lastUpdatedDateTime;
        return this;
    }

    /**
     * Get lastUpdatedDateTime
     *
     * @return lastUpdatedDateTime
     */
    @jakarta.annotation.Nullable
    public Long getLastUpdatedDateTime() {
        return lastUpdatedDateTime;
    }

    public void setLastUpdatedDateTime(@jakarta.annotation.Nullable Long lastUpdatedDateTime) {
        this.lastUpdatedDateTime = lastUpdatedDateTime;
    }

    public GetListOfPlansResponse2PlansInner targetAsset(
            @jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
        return this;
    }

    /**
     * Get targetAsset
     *
     * @return targetAsset
     */
    @jakarta.annotation.Nullable
    public String getTargetAsset() {
        return targetAsset;
    }

    public void setTargetAsset(@jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
    }

    public GetListOfPlansResponse2PlansInner sourceAsset(
            @jakarta.annotation.Nullable String sourceAsset) {
        this.sourceAsset = sourceAsset;
        return this;
    }

    /**
     * Get sourceAsset
     *
     * @return sourceAsset
     */
    @jakarta.annotation.Nullable
    public String getSourceAsset() {
        return sourceAsset;
    }

    public void setSourceAsset(@jakarta.annotation.Nullable String sourceAsset) {
        this.sourceAsset = sourceAsset;
    }

    public GetListOfPlansResponse2PlansInner totalInvestedInUSD(
            @jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
        return this;
    }

    /**
     * Get totalInvestedInUSD
     *
     * @return totalInvestedInUSD
     */
    @jakarta.annotation.Nullable
    public String getTotalInvestedInUSD() {
        return totalInvestedInUSD;
    }

    public void setTotalInvestedInUSD(@jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
    }

    public GetListOfPlansResponse2PlansInner subscriptionAmount(
            @jakarta.annotation.Nullable String subscriptionAmount) {
        this.subscriptionAmount = subscriptionAmount;
        return this;
    }

    /**
     * Get subscriptionAmount
     *
     * @return subscriptionAmount
     */
    @jakarta.annotation.Nullable
    public String getSubscriptionAmount() {
        return subscriptionAmount;
    }

    public void setSubscriptionAmount(@jakarta.annotation.Nullable String subscriptionAmount) {
        this.subscriptionAmount = subscriptionAmount;
    }

    public GetListOfPlansResponse2PlansInner subscriptionCycle(
            @jakarta.annotation.Nullable String subscriptionCycle) {
        this.subscriptionCycle = subscriptionCycle;
        return this;
    }

    /**
     * Get subscriptionCycle
     *
     * @return subscriptionCycle
     */
    @jakarta.annotation.Nullable
    public String getSubscriptionCycle() {
        return subscriptionCycle;
    }

    public void setSubscriptionCycle(@jakarta.annotation.Nullable String subscriptionCycle) {
        this.subscriptionCycle = subscriptionCycle;
    }

    public GetListOfPlansResponse2PlansInner subscriptionStartDay(
            @jakarta.annotation.Nullable String subscriptionStartDay) {
        this.subscriptionStartDay = subscriptionStartDay;
        return this;
    }

    /**
     * Get subscriptionStartDay
     *
     * @return subscriptionStartDay
     */
    @jakarta.annotation.Nullable
    public String getSubscriptionStartDay() {
        return subscriptionStartDay;
    }

    public void setSubscriptionStartDay(@jakarta.annotation.Nullable String subscriptionStartDay) {
        this.subscriptionStartDay = subscriptionStartDay;
    }

    public GetListOfPlansResponse2PlansInner subscriptionStartWeekday(
            @jakarta.annotation.Nullable String subscriptionStartWeekday) {
        this.subscriptionStartWeekday = subscriptionStartWeekday;
        return this;
    }

    /**
     * Get subscriptionStartWeekday
     *
     * @return subscriptionStartWeekday
     */
    @jakarta.annotation.Nullable
    public String getSubscriptionStartWeekday() {
        return subscriptionStartWeekday;
    }

    public void setSubscriptionStartWeekday(
            @jakarta.annotation.Nullable String subscriptionStartWeekday) {
        this.subscriptionStartWeekday = subscriptionStartWeekday;
    }

    public GetListOfPlansResponse2PlansInner subscriptionStartTime(
            @jakarta.annotation.Nullable String subscriptionStartTime) {
        this.subscriptionStartTime = subscriptionStartTime;
        return this;
    }

    /**
     * Get subscriptionStartTime
     *
     * @return subscriptionStartTime
     */
    @jakarta.annotation.Nullable
    public String getSubscriptionStartTime() {
        return subscriptionStartTime;
    }

    public void setSubscriptionStartTime(
            @jakarta.annotation.Nullable String subscriptionStartTime) {
        this.subscriptionStartTime = subscriptionStartTime;
    }

    public GetListOfPlansResponse2PlansInner sourceWallet(
            @jakarta.annotation.Nullable String sourceWallet) {
        this.sourceWallet = sourceWallet;
        return this;
    }

    /**
     * Get sourceWallet
     *
     * @return sourceWallet
     */
    @jakarta.annotation.Nullable
    public String getSourceWallet() {
        return sourceWallet;
    }

    public void setSourceWallet(@jakarta.annotation.Nullable String sourceWallet) {
        this.sourceWallet = sourceWallet;
    }

    public GetListOfPlansResponse2PlansInner flexibleAllowedToUse(
            @jakarta.annotation.Nullable String flexibleAllowedToUse) {
        this.flexibleAllowedToUse = flexibleAllowedToUse;
        return this;
    }

    /**
     * Get flexibleAllowedToUse
     *
     * @return flexibleAllowedToUse
     */
    @jakarta.annotation.Nullable
    public String getFlexibleAllowedToUse() {
        return flexibleAllowedToUse;
    }

    public void setFlexibleAllowedToUse(@jakarta.annotation.Nullable String flexibleAllowedToUse) {
        this.flexibleAllowedToUse = flexibleAllowedToUse;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetListOfPlansResponse2PlansInner getListOfPlansResponse2PlansInner =
                (GetListOfPlansResponse2PlansInner) o;
        return Objects.equals(this.planId, getListOfPlansResponse2PlansInner.planId)
                && Objects.equals(this.planType, getListOfPlansResponse2PlansInner.planType)
                && Objects.equals(this.editAllowed, getListOfPlansResponse2PlansInner.editAllowed)
                && Objects.equals(
                        this.creationDateTime, getListOfPlansResponse2PlansInner.creationDateTime)
                && Objects.equals(
                        this.firstExecutionDateTime,
                        getListOfPlansResponse2PlansInner.firstExecutionDateTime)
                && Objects.equals(
                        this.nextExecutionDateTime,
                        getListOfPlansResponse2PlansInner.nextExecutionDateTime)
                && Objects.equals(this.status, getListOfPlansResponse2PlansInner.status)
                && Objects.equals(
                        this.lastUpdatedDateTime,
                        getListOfPlansResponse2PlansInner.lastUpdatedDateTime)
                && Objects.equals(this.targetAsset, getListOfPlansResponse2PlansInner.targetAsset)
                && Objects.equals(this.sourceAsset, getListOfPlansResponse2PlansInner.sourceAsset)
                && Objects.equals(
                        this.totalInvestedInUSD,
                        getListOfPlansResponse2PlansInner.totalInvestedInUSD)
                && Objects.equals(
                        this.subscriptionAmount,
                        getListOfPlansResponse2PlansInner.subscriptionAmount)
                && Objects.equals(
                        this.subscriptionCycle, getListOfPlansResponse2PlansInner.subscriptionCycle)
                && Objects.equals(
                        this.subscriptionStartDay,
                        getListOfPlansResponse2PlansInner.subscriptionStartDay)
                && Objects.equals(
                        this.subscriptionStartWeekday,
                        getListOfPlansResponse2PlansInner.subscriptionStartWeekday)
                && Objects.equals(
                        this.subscriptionStartTime,
                        getListOfPlansResponse2PlansInner.subscriptionStartTime)
                && Objects.equals(this.sourceWallet, getListOfPlansResponse2PlansInner.sourceWallet)
                && Objects.equals(
                        this.flexibleAllowedToUse,
                        getListOfPlansResponse2PlansInner.flexibleAllowedToUse);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                planId,
                planType,
                editAllowed,
                creationDateTime,
                firstExecutionDateTime,
                nextExecutionDateTime,
                status,
                lastUpdatedDateTime,
                targetAsset,
                sourceAsset,
                totalInvestedInUSD,
                subscriptionAmount,
                subscriptionCycle,
                subscriptionStartDay,
                subscriptionStartWeekday,
                subscriptionStartTime,
                sourceWallet,
                flexibleAllowedToUse);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetListOfPlansResponse2PlansInner {\n");
        sb.append("		planId: ").append(toIndentedString(planId)).append("\n");
        sb.append("		planType: ").append(toIndentedString(planType)).append("\n");
        sb.append("		editAllowed: ").append(toIndentedString(editAllowed)).append("\n");
        sb.append("		creationDateTime: ").append(toIndentedString(creationDateTime)).append("\n");
        sb.append("		firstExecutionDateTime: ")
                .append(toIndentedString(firstExecutionDateTime))
                .append("\n");
        sb.append("		nextExecutionDateTime: ")
                .append(toIndentedString(nextExecutionDateTime))
                .append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		lastUpdatedDateTime: ")
                .append(toIndentedString(lastUpdatedDateTime))
                .append("\n");
        sb.append("		targetAsset: ").append(toIndentedString(targetAsset)).append("\n");
        sb.append("		sourceAsset: ").append(toIndentedString(sourceAsset)).append("\n");
        sb.append("		totalInvestedInUSD: ")
                .append(toIndentedString(totalInvestedInUSD))
                .append("\n");
        sb.append("		subscriptionAmount: ")
                .append(toIndentedString(subscriptionAmount))
                .append("\n");
        sb.append("		subscriptionCycle: ").append(toIndentedString(subscriptionCycle)).append("\n");
        sb.append("		subscriptionStartDay: ")
                .append(toIndentedString(subscriptionStartDay))
                .append("\n");
        sb.append("		subscriptionStartWeekday: ")
                .append(toIndentedString(subscriptionStartWeekday))
                .append("\n");
        sb.append("		subscriptionStartTime: ")
                .append(toIndentedString(subscriptionStartTime))
                .append("\n");
        sb.append("		sourceWallet: ").append(toIndentedString(sourceWallet)).append("\n");
        sb.append("		flexibleAllowedToUse: ")
                .append(toIndentedString(flexibleAllowedToUse))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object planIdValue = getPlanId();
        String planIdValueAsString = "";
        planIdValueAsString = planIdValue.toString();
        sb.append("planId=").append(urlEncode(planIdValueAsString)).append("");
        Object planTypeValue = getPlanType();
        String planTypeValueAsString = "";
        planTypeValueAsString = planTypeValue.toString();
        sb.append("planType=").append(urlEncode(planTypeValueAsString)).append("");
        Object editAllowedValue = getEditAllowed();
        String editAllowedValueAsString = "";
        editAllowedValueAsString = editAllowedValue.toString();
        sb.append("editAllowed=").append(urlEncode(editAllowedValueAsString)).append("");
        Object creationDateTimeValue = getCreationDateTime();
        String creationDateTimeValueAsString = "";
        creationDateTimeValueAsString = creationDateTimeValue.toString();
        sb.append("creationDateTime=").append(urlEncode(creationDateTimeValueAsString)).append("");
        Object firstExecutionDateTimeValue = getFirstExecutionDateTime();
        String firstExecutionDateTimeValueAsString = "";
        firstExecutionDateTimeValueAsString = firstExecutionDateTimeValue.toString();
        sb.append("firstExecutionDateTime=")
                .append(urlEncode(firstExecutionDateTimeValueAsString))
                .append("");
        Object nextExecutionDateTimeValue = getNextExecutionDateTime();
        String nextExecutionDateTimeValueAsString = "";
        nextExecutionDateTimeValueAsString = nextExecutionDateTimeValue.toString();
        sb.append("nextExecutionDateTime=")
                .append(urlEncode(nextExecutionDateTimeValueAsString))
                .append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object lastUpdatedDateTimeValue = getLastUpdatedDateTime();
        String lastUpdatedDateTimeValueAsString = "";
        lastUpdatedDateTimeValueAsString = lastUpdatedDateTimeValue.toString();
        sb.append("lastUpdatedDateTime=")
                .append(urlEncode(lastUpdatedDateTimeValueAsString))
                .append("");
        Object targetAssetValue = getTargetAsset();
        String targetAssetValueAsString = "";
        targetAssetValueAsString = targetAssetValue.toString();
        sb.append("targetAsset=").append(urlEncode(targetAssetValueAsString)).append("");
        Object sourceAssetValue = getSourceAsset();
        String sourceAssetValueAsString = "";
        sourceAssetValueAsString = sourceAssetValue.toString();
        sb.append("sourceAsset=").append(urlEncode(sourceAssetValueAsString)).append("");
        Object totalInvestedInUSDValue = getTotalInvestedInUSD();
        String totalInvestedInUSDValueAsString = "";
        totalInvestedInUSDValueAsString = totalInvestedInUSDValue.toString();
        sb.append("totalInvestedInUSD=")
                .append(urlEncode(totalInvestedInUSDValueAsString))
                .append("");
        Object subscriptionAmountValue = getSubscriptionAmount();
        String subscriptionAmountValueAsString = "";
        subscriptionAmountValueAsString = subscriptionAmountValue.toString();
        sb.append("subscriptionAmount=")
                .append(urlEncode(subscriptionAmountValueAsString))
                .append("");
        Object subscriptionCycleValue = getSubscriptionCycle();
        String subscriptionCycleValueAsString = "";
        subscriptionCycleValueAsString = subscriptionCycleValue.toString();
        sb.append("subscriptionCycle=")
                .append(urlEncode(subscriptionCycleValueAsString))
                .append("");
        Object subscriptionStartDayValue = getSubscriptionStartDay();
        String subscriptionStartDayValueAsString = "";
        subscriptionStartDayValueAsString = subscriptionStartDayValue.toString();
        sb.append("subscriptionStartDay=")
                .append(urlEncode(subscriptionStartDayValueAsString))
                .append("");
        Object subscriptionStartWeekdayValue = getSubscriptionStartWeekday();
        String subscriptionStartWeekdayValueAsString = "";
        subscriptionStartWeekdayValueAsString = subscriptionStartWeekdayValue.toString();
        sb.append("subscriptionStartWeekday=")
                .append(urlEncode(subscriptionStartWeekdayValueAsString))
                .append("");
        Object subscriptionStartTimeValue = getSubscriptionStartTime();
        String subscriptionStartTimeValueAsString = "";
        subscriptionStartTimeValueAsString = subscriptionStartTimeValue.toString();
        sb.append("subscriptionStartTime=")
                .append(urlEncode(subscriptionStartTimeValueAsString))
                .append("");
        Object sourceWalletValue = getSourceWallet();
        String sourceWalletValueAsString = "";
        sourceWalletValueAsString = sourceWalletValue.toString();
        sb.append("sourceWallet=").append(urlEncode(sourceWalletValueAsString)).append("");
        Object flexibleAllowedToUseValue = getFlexibleAllowedToUse();
        String flexibleAllowedToUseValueAsString = "";
        flexibleAllowedToUseValueAsString = flexibleAllowedToUseValue.toString();
        sb.append("flexibleAllowedToUse=")
                .append(urlEncode(flexibleAllowedToUseValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("planId");
        openapiFields.add("planType");
        openapiFields.add("editAllowed");
        openapiFields.add("creationDateTime");
        openapiFields.add("firstExecutionDateTime");
        openapiFields.add("nextExecutionDateTime");
        openapiFields.add("status");
        openapiFields.add("lastUpdatedDateTime");
        openapiFields.add("targetAsset");
        openapiFields.add("sourceAsset");
        openapiFields.add("totalInvestedInUSD");
        openapiFields.add("subscriptionAmount");
        openapiFields.add("subscriptionCycle");
        openapiFields.add("subscriptionStartDay");
        openapiFields.add("subscriptionStartWeekday");
        openapiFields.add("subscriptionStartTime");
        openapiFields.add("sourceWallet");
        openapiFields.add("flexibleAllowedToUse");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetListOfPlansResponse2PlansInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetListOfPlansResponse2PlansInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetListOfPlansResponse2PlansInner is"
                                        + " not found in the empty JSON string",
                                GetListOfPlansResponse2PlansInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetListOfPlansResponse2PlansInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetListOfPlansResponse2PlansInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("planType") != null && !jsonObj.get("planType").isJsonNull())
                && !jsonObj.get("planType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `planType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("planType").toString()));
        }
        if ((jsonObj.get("editAllowed") != null && !jsonObj.get("editAllowed").isJsonNull())
                && !jsonObj.get("editAllowed").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `editAllowed` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("editAllowed").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("targetAsset") != null && !jsonObj.get("targetAsset").isJsonNull())
                && !jsonObj.get("targetAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `targetAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("targetAsset").toString()));
        }
        if ((jsonObj.get("sourceAsset") != null && !jsonObj.get("sourceAsset").isJsonNull())
                && !jsonObj.get("sourceAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceAsset").toString()));
        }
        if ((jsonObj.get("totalInvestedInUSD") != null
                        && !jsonObj.get("totalInvestedInUSD").isJsonNull())
                && !jsonObj.get("totalInvestedInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalInvestedInUSD` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalInvestedInUSD").toString()));
        }
        if ((jsonObj.get("subscriptionAmount") != null
                        && !jsonObj.get("subscriptionAmount").isJsonNull())
                && !jsonObj.get("subscriptionAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subscriptionAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("subscriptionAmount").toString()));
        }
        if ((jsonObj.get("subscriptionCycle") != null
                        && !jsonObj.get("subscriptionCycle").isJsonNull())
                && !jsonObj.get("subscriptionCycle").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subscriptionCycle` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("subscriptionCycle").toString()));
        }
        if ((jsonObj.get("subscriptionStartDay") != null
                        && !jsonObj.get("subscriptionStartDay").isJsonNull())
                && !jsonObj.get("subscriptionStartDay").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subscriptionStartDay` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("subscriptionStartDay").toString()));
        }
        if ((jsonObj.get("subscriptionStartWeekday") != null
                        && !jsonObj.get("subscriptionStartWeekday").isJsonNull())
                && !jsonObj.get("subscriptionStartWeekday").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subscriptionStartWeekday` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("subscriptionStartWeekday").toString()));
        }
        if ((jsonObj.get("subscriptionStartTime") != null
                        && !jsonObj.get("subscriptionStartTime").isJsonNull())
                && !jsonObj.get("subscriptionStartTime").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `subscriptionStartTime` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("subscriptionStartTime").toString()));
        }
        if ((jsonObj.get("sourceWallet") != null && !jsonObj.get("sourceWallet").isJsonNull())
                && !jsonObj.get("sourceWallet").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sourceWallet` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sourceWallet").toString()));
        }
        if ((jsonObj.get("flexibleAllowedToUse") != null
                        && !jsonObj.get("flexibleAllowedToUse").isJsonNull())
                && !jsonObj.get("flexibleAllowedToUse").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `flexibleAllowedToUse` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("flexibleAllowedToUse").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetListOfPlansResponse2PlansInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetListOfPlansResponse2PlansInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetListOfPlansResponse2PlansInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetListOfPlansResponse2PlansInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetListOfPlansResponse2PlansInner>() {
                        @Override
                        public void write(JsonWriter out, GetListOfPlansResponse2PlansInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetListOfPlansResponse2PlansInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetListOfPlansResponse2PlansInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetListOfPlansResponse2PlansInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetListOfPlansResponse2PlansInner
     */
    public static GetListOfPlansResponse2PlansInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetListOfPlansResponse2PlansInner.class);
    }

    /**
     * Convert an instance of GetListOfPlansResponse2PlansInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
