/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryHoldingDetailsOfThePlanResponseDetailsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryHoldingDetailsOfThePlanResponseDetailsInner {
    public static final String SERIALIZED_NAME_TARGET_ASSET = "targetAsset";

    @SerializedName(SERIALIZED_NAME_TARGET_ASSET)
    @jakarta.annotation.Nullable
    private String targetAsset;

    public static final String SERIALIZED_NAME_AVERAGE_PRICE_IN_U_S_D = "averagePriceInUSD";

    @SerializedName(SERIALIZED_NAME_AVERAGE_PRICE_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String averagePriceInUSD;

    public static final String SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D = "totalInvestedInUSD";

    @SerializedName(SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String totalInvestedInUSD;

    public static final String SERIALIZED_NAME_PURCHASED_AMOUNT = "purchasedAmount";

    @SerializedName(SERIALIZED_NAME_PURCHASED_AMOUNT)
    @jakarta.annotation.Nullable
    private String purchasedAmount;

    public static final String SERIALIZED_NAME_PURCHASED_AMOUNT_UNIT = "purchasedAmountUnit";

    @SerializedName(SERIALIZED_NAME_PURCHASED_AMOUNT_UNIT)
    @jakarta.annotation.Nullable
    private String purchasedAmountUnit;

    public static final String SERIALIZED_NAME_PNL_IN_U_S_D = "pnlInUSD";

    @SerializedName(SERIALIZED_NAME_PNL_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String pnlInUSD;

    public static final String SERIALIZED_NAME_ROI = "roi";

    @SerializedName(SERIALIZED_NAME_ROI)
    @jakarta.annotation.Nullable
    private String roi;

    public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";

    @SerializedName(SERIALIZED_NAME_PERCENTAGE)
    @jakarta.annotation.Nullable
    private String percentage;

    public static final String SERIALIZED_NAME_ASSET_STATUS = "assetStatus";

    @SerializedName(SERIALIZED_NAME_ASSET_STATUS)
    @jakarta.annotation.Nullable
    private String assetStatus;

    public static final String SERIALIZED_NAME_AVAILABLE_AMOUNT = "availableAmount";

    @SerializedName(SERIALIZED_NAME_AVAILABLE_AMOUNT)
    @jakarta.annotation.Nullable
    private String availableAmount;

    public static final String SERIALIZED_NAME_AVAILABLE_AMOUNT_UNIT = "availableAmountUnit";

    @SerializedName(SERIALIZED_NAME_AVAILABLE_AMOUNT_UNIT)
    @jakarta.annotation.Nullable
    private String availableAmountUnit;

    public static final String SERIALIZED_NAME_REDEEMED_AMOUT = "redeemedAmout";

    @SerializedName(SERIALIZED_NAME_REDEEMED_AMOUT)
    @jakarta.annotation.Nullable
    private String redeemedAmout;

    public static final String SERIALIZED_NAME_REDEEMED_AMOUT_UNIT = "redeemedAmoutUnit";

    @SerializedName(SERIALIZED_NAME_REDEEMED_AMOUT_UNIT)
    @jakarta.annotation.Nullable
    private String redeemedAmoutUnit;

    public static final String SERIALIZED_NAME_ASSET_VALUE_IN_U_S_D = "assetValueInUSD";

    @SerializedName(SERIALIZED_NAME_ASSET_VALUE_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String assetValueInUSD;

    public QueryHoldingDetailsOfThePlanResponseDetailsInner() {}

    public QueryHoldingDetailsOfThePlanResponseDetailsInner targetAsset(
            @jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
        return this;
    }

    /**
     * Get targetAsset
     *
     * @return targetAsset
     */
    @jakarta.annotation.Nullable
    public String getTargetAsset() {
        return targetAsset;
    }

    public void setTargetAsset(@jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner averagePriceInUSD(
            @jakarta.annotation.Nullable String averagePriceInUSD) {
        this.averagePriceInUSD = averagePriceInUSD;
        return this;
    }

    /**
     * Get averagePriceInUSD
     *
     * @return averagePriceInUSD
     */
    @jakarta.annotation.Nullable
    public String getAveragePriceInUSD() {
        return averagePriceInUSD;
    }

    public void setAveragePriceInUSD(@jakarta.annotation.Nullable String averagePriceInUSD) {
        this.averagePriceInUSD = averagePriceInUSD;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner totalInvestedInUSD(
            @jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
        return this;
    }

    /**
     * Get totalInvestedInUSD
     *
     * @return totalInvestedInUSD
     */
    @jakarta.annotation.Nullable
    public String getTotalInvestedInUSD() {
        return totalInvestedInUSD;
    }

    public void setTotalInvestedInUSD(@jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner purchasedAmount(
            @jakarta.annotation.Nullable String purchasedAmount) {
        this.purchasedAmount = purchasedAmount;
        return this;
    }

    /**
     * Get purchasedAmount
     *
     * @return purchasedAmount
     */
    @jakarta.annotation.Nullable
    public String getPurchasedAmount() {
        return purchasedAmount;
    }

    public void setPurchasedAmount(@jakarta.annotation.Nullable String purchasedAmount) {
        this.purchasedAmount = purchasedAmount;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner purchasedAmountUnit(
            @jakarta.annotation.Nullable String purchasedAmountUnit) {
        this.purchasedAmountUnit = purchasedAmountUnit;
        return this;
    }

    /**
     * Get purchasedAmountUnit
     *
     * @return purchasedAmountUnit
     */
    @jakarta.annotation.Nullable
    public String getPurchasedAmountUnit() {
        return purchasedAmountUnit;
    }

    public void setPurchasedAmountUnit(@jakarta.annotation.Nullable String purchasedAmountUnit) {
        this.purchasedAmountUnit = purchasedAmountUnit;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner pnlInUSD(
            @jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
        return this;
    }

    /**
     * Get pnlInUSD
     *
     * @return pnlInUSD
     */
    @jakarta.annotation.Nullable
    public String getPnlInUSD() {
        return pnlInUSD;
    }

    public void setPnlInUSD(@jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner roi(
            @jakarta.annotation.Nullable String roi) {
        this.roi = roi;
        return this;
    }

    /**
     * Get roi
     *
     * @return roi
     */
    @jakarta.annotation.Nullable
    public String getRoi() {
        return roi;
    }

    public void setRoi(@jakarta.annotation.Nullable String roi) {
        this.roi = roi;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner percentage(
            @jakarta.annotation.Nullable String percentage) {
        this.percentage = percentage;
        return this;
    }

    /**
     * Get percentage
     *
     * @return percentage
     */
    @jakarta.annotation.Nullable
    public String getPercentage() {
        return percentage;
    }

    public void setPercentage(@jakarta.annotation.Nullable String percentage) {
        this.percentage = percentage;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner assetStatus(
            @jakarta.annotation.Nullable String assetStatus) {
        this.assetStatus = assetStatus;
        return this;
    }

    /**
     * Get assetStatus
     *
     * @return assetStatus
     */
    @jakarta.annotation.Nullable
    public String getAssetStatus() {
        return assetStatus;
    }

    public void setAssetStatus(@jakarta.annotation.Nullable String assetStatus) {
        this.assetStatus = assetStatus;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner availableAmount(
            @jakarta.annotation.Nullable String availableAmount) {
        this.availableAmount = availableAmount;
        return this;
    }

    /**
     * Get availableAmount
     *
     * @return availableAmount
     */
    @jakarta.annotation.Nullable
    public String getAvailableAmount() {
        return availableAmount;
    }

    public void setAvailableAmount(@jakarta.annotation.Nullable String availableAmount) {
        this.availableAmount = availableAmount;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner availableAmountUnit(
            @jakarta.annotation.Nullable String availableAmountUnit) {
        this.availableAmountUnit = availableAmountUnit;
        return this;
    }

    /**
     * Get availableAmountUnit
     *
     * @return availableAmountUnit
     */
    @jakarta.annotation.Nullable
    public String getAvailableAmountUnit() {
        return availableAmountUnit;
    }

    public void setAvailableAmountUnit(@jakarta.annotation.Nullable String availableAmountUnit) {
        this.availableAmountUnit = availableAmountUnit;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner redeemedAmout(
            @jakarta.annotation.Nullable String redeemedAmout) {
        this.redeemedAmout = redeemedAmout;
        return this;
    }

    /**
     * Get redeemedAmout
     *
     * @return redeemedAmout
     */
    @jakarta.annotation.Nullable
    public String getRedeemedAmout() {
        return redeemedAmout;
    }

    public void setRedeemedAmout(@jakarta.annotation.Nullable String redeemedAmout) {
        this.redeemedAmout = redeemedAmout;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner redeemedAmoutUnit(
            @jakarta.annotation.Nullable String redeemedAmoutUnit) {
        this.redeemedAmoutUnit = redeemedAmoutUnit;
        return this;
    }

    /**
     * Get redeemedAmoutUnit
     *
     * @return redeemedAmoutUnit
     */
    @jakarta.annotation.Nullable
    public String getRedeemedAmoutUnit() {
        return redeemedAmoutUnit;
    }

    public void setRedeemedAmoutUnit(@jakarta.annotation.Nullable String redeemedAmoutUnit) {
        this.redeemedAmoutUnit = redeemedAmoutUnit;
    }

    public QueryHoldingDetailsOfThePlanResponseDetailsInner assetValueInUSD(
            @jakarta.annotation.Nullable String assetValueInUSD) {
        this.assetValueInUSD = assetValueInUSD;
        return this;
    }

    /**
     * Get assetValueInUSD
     *
     * @return assetValueInUSD
     */
    @jakarta.annotation.Nullable
    public String getAssetValueInUSD() {
        return assetValueInUSD;
    }

    public void setAssetValueInUSD(@jakarta.annotation.Nullable String assetValueInUSD) {
        this.assetValueInUSD = assetValueInUSD;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryHoldingDetailsOfThePlanResponseDetailsInner
                queryHoldingDetailsOfThePlanResponseDetailsInner =
                        (QueryHoldingDetailsOfThePlanResponseDetailsInner) o;
        return Objects.equals(
                        this.targetAsset,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.targetAsset)
                && Objects.equals(
                        this.averagePriceInUSD,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.averagePriceInUSD)
                && Objects.equals(
                        this.totalInvestedInUSD,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.totalInvestedInUSD)
                && Objects.equals(
                        this.purchasedAmount,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.purchasedAmount)
                && Objects.equals(
                        this.purchasedAmountUnit,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.purchasedAmountUnit)
                && Objects.equals(
                        this.pnlInUSD, queryHoldingDetailsOfThePlanResponseDetailsInner.pnlInUSD)
                && Objects.equals(this.roi, queryHoldingDetailsOfThePlanResponseDetailsInner.roi)
                && Objects.equals(
                        this.percentage,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.percentage)
                && Objects.equals(
                        this.assetStatus,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.assetStatus)
                && Objects.equals(
                        this.availableAmount,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.availableAmount)
                && Objects.equals(
                        this.availableAmountUnit,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.availableAmountUnit)
                && Objects.equals(
                        this.redeemedAmout,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.redeemedAmout)
                && Objects.equals(
                        this.redeemedAmoutUnit,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.redeemedAmoutUnit)
                && Objects.equals(
                        this.assetValueInUSD,
                        queryHoldingDetailsOfThePlanResponseDetailsInner.assetValueInUSD);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                targetAsset,
                averagePriceInUSD,
                totalInvestedInUSD,
                purchasedAmount,
                purchasedAmountUnit,
                pnlInUSD,
                roi,
                percentage,
                assetStatus,
                availableAmount,
                availableAmountUnit,
                redeemedAmout,
                redeemedAmoutUnit,
                assetValueInUSD);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryHoldingDetailsOfThePlanResponseDetailsInner {\n");
        sb.append("		targetAsset: ").append(toIndentedString(targetAsset)).append("\n");
        sb.append("		averagePriceInUSD: ").append(toIndentedString(averagePriceInUSD)).append("\n");
        sb.append("		totalInvestedInUSD: ")
                .append(toIndentedString(totalInvestedInUSD))
                .append("\n");
        sb.append("		purchasedAmount: ").append(toIndentedString(purchasedAmount)).append("\n");
        sb.append("		purchasedAmountUnit: ")
                .append(toIndentedString(purchasedAmountUnit))
                .append("\n");
        sb.append("		pnlInUSD: ").append(toIndentedString(pnlInUSD)).append("\n");
        sb.append("		roi: ").append(toIndentedString(roi)).append("\n");
        sb.append("		percentage: ").append(toIndentedString(percentage)).append("\n");
        sb.append("		assetStatus: ").append(toIndentedString(assetStatus)).append("\n");
        sb.append("		availableAmount: ").append(toIndentedString(availableAmount)).append("\n");
        sb.append("		availableAmountUnit: ")
                .append(toIndentedString(availableAmountUnit))
                .append("\n");
        sb.append("		redeemedAmout: ").append(toIndentedString(redeemedAmout)).append("\n");
        sb.append("		redeemedAmoutUnit: ").append(toIndentedString(redeemedAmoutUnit)).append("\n");
        sb.append("		assetValueInUSD: ").append(toIndentedString(assetValueInUSD)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object targetAssetValue = getTargetAsset();
        String targetAssetValueAsString = "";
        targetAssetValueAsString = targetAssetValue.toString();
        sb.append("targetAsset=").append(urlEncode(targetAssetValueAsString)).append("");
        Object averagePriceInUSDValue = getAveragePriceInUSD();
        String averagePriceInUSDValueAsString = "";
        averagePriceInUSDValueAsString = averagePriceInUSDValue.toString();
        sb.append("averagePriceInUSD=")
                .append(urlEncode(averagePriceInUSDValueAsString))
                .append("");
        Object totalInvestedInUSDValue = getTotalInvestedInUSD();
        String totalInvestedInUSDValueAsString = "";
        totalInvestedInUSDValueAsString = totalInvestedInUSDValue.toString();
        sb.append("totalInvestedInUSD=")
                .append(urlEncode(totalInvestedInUSDValueAsString))
                .append("");
        Object purchasedAmountValue = getPurchasedAmount();
        String purchasedAmountValueAsString = "";
        purchasedAmountValueAsString = purchasedAmountValue.toString();
        sb.append("purchasedAmount=").append(urlEncode(purchasedAmountValueAsString)).append("");
        Object purchasedAmountUnitValue = getPurchasedAmountUnit();
        String purchasedAmountUnitValueAsString = "";
        purchasedAmountUnitValueAsString = purchasedAmountUnitValue.toString();
        sb.append("purchasedAmountUnit=")
                .append(urlEncode(purchasedAmountUnitValueAsString))
                .append("");
        Object pnlInUSDValue = getPnlInUSD();
        String pnlInUSDValueAsString = "";
        pnlInUSDValueAsString = pnlInUSDValue.toString();
        sb.append("pnlInUSD=").append(urlEncode(pnlInUSDValueAsString)).append("");
        Object roiValue = getRoi();
        String roiValueAsString = "";
        roiValueAsString = roiValue.toString();
        sb.append("roi=").append(urlEncode(roiValueAsString)).append("");
        Object percentageValue = getPercentage();
        String percentageValueAsString = "";
        percentageValueAsString = percentageValue.toString();
        sb.append("percentage=").append(urlEncode(percentageValueAsString)).append("");
        Object assetStatusValue = getAssetStatus();
        String assetStatusValueAsString = "";
        assetStatusValueAsString = assetStatusValue.toString();
        sb.append("assetStatus=").append(urlEncode(assetStatusValueAsString)).append("");
        Object availableAmountValue = getAvailableAmount();
        String availableAmountValueAsString = "";
        availableAmountValueAsString = availableAmountValue.toString();
        sb.append("availableAmount=").append(urlEncode(availableAmountValueAsString)).append("");
        Object availableAmountUnitValue = getAvailableAmountUnit();
        String availableAmountUnitValueAsString = "";
        availableAmountUnitValueAsString = availableAmountUnitValue.toString();
        sb.append("availableAmountUnit=")
                .append(urlEncode(availableAmountUnitValueAsString))
                .append("");
        Object redeemedAmoutValue = getRedeemedAmout();
        String redeemedAmoutValueAsString = "";
        redeemedAmoutValueAsString = redeemedAmoutValue.toString();
        sb.append("redeemedAmout=").append(urlEncode(redeemedAmoutValueAsString)).append("");
        Object redeemedAmoutUnitValue = getRedeemedAmoutUnit();
        String redeemedAmoutUnitValueAsString = "";
        redeemedAmoutUnitValueAsString = redeemedAmoutUnitValue.toString();
        sb.append("redeemedAmoutUnit=")
                .append(urlEncode(redeemedAmoutUnitValueAsString))
                .append("");
        Object assetValueInUSDValue = getAssetValueInUSD();
        String assetValueInUSDValueAsString = "";
        assetValueInUSDValueAsString = assetValueInUSDValue.toString();
        sb.append("assetValueInUSD=").append(urlEncode(assetValueInUSDValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("targetAsset");
        openapiFields.add("averagePriceInUSD");
        openapiFields.add("totalInvestedInUSD");
        openapiFields.add("purchasedAmount");
        openapiFields.add("purchasedAmountUnit");
        openapiFields.add("pnlInUSD");
        openapiFields.add("roi");
        openapiFields.add("percentage");
        openapiFields.add("assetStatus");
        openapiFields.add("availableAmount");
        openapiFields.add("availableAmountUnit");
        openapiFields.add("redeemedAmout");
        openapiFields.add("redeemedAmoutUnit");
        openapiFields.add("assetValueInUSD");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryHoldingDetailsOfThePlanResponseDetailsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryHoldingDetailsOfThePlanResponseDetailsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " QueryHoldingDetailsOfThePlanResponseDetailsInner is not"
                                        + " found in the empty JSON string",
                                QueryHoldingDetailsOfThePlanResponseDetailsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryHoldingDetailsOfThePlanResponseDetailsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QueryHoldingDetailsOfThePlanResponseDetailsInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("targetAsset") != null && !jsonObj.get("targetAsset").isJsonNull())
                && !jsonObj.get("targetAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `targetAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("targetAsset").toString()));
        }
        if ((jsonObj.get("averagePriceInUSD") != null
                        && !jsonObj.get("averagePriceInUSD").isJsonNull())
                && !jsonObj.get("averagePriceInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `averagePriceInUSD` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("averagePriceInUSD").toString()));
        }
        if ((jsonObj.get("totalInvestedInUSD") != null
                        && !jsonObj.get("totalInvestedInUSD").isJsonNull())
                && !jsonObj.get("totalInvestedInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalInvestedInUSD` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalInvestedInUSD").toString()));
        }
        if ((jsonObj.get("purchasedAmount") != null && !jsonObj.get("purchasedAmount").isJsonNull())
                && !jsonObj.get("purchasedAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `purchasedAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("purchasedAmount").toString()));
        }
        if ((jsonObj.get("purchasedAmountUnit") != null
                        && !jsonObj.get("purchasedAmountUnit").isJsonNull())
                && !jsonObj.get("purchasedAmountUnit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `purchasedAmountUnit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("purchasedAmountUnit").toString()));
        }
        if ((jsonObj.get("pnlInUSD") != null && !jsonObj.get("pnlInUSD").isJsonNull())
                && !jsonObj.get("pnlInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pnlInUSD` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("pnlInUSD").toString()));
        }
        if ((jsonObj.get("roi") != null && !jsonObj.get("roi").isJsonNull())
                && !jsonObj.get("roi").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `roi` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("roi").toString()));
        }
        if ((jsonObj.get("percentage") != null && !jsonObj.get("percentage").isJsonNull())
                && !jsonObj.get("percentage").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `percentage` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("percentage").toString()));
        }
        if ((jsonObj.get("assetStatus") != null && !jsonObj.get("assetStatus").isJsonNull())
                && !jsonObj.get("assetStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("assetStatus").toString()));
        }
        if ((jsonObj.get("availableAmount") != null && !jsonObj.get("availableAmount").isJsonNull())
                && !jsonObj.get("availableAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `availableAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("availableAmount").toString()));
        }
        if ((jsonObj.get("availableAmountUnit") != null
                        && !jsonObj.get("availableAmountUnit").isJsonNull())
                && !jsonObj.get("availableAmountUnit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `availableAmountUnit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("availableAmountUnit").toString()));
        }
        if ((jsonObj.get("redeemedAmout") != null && !jsonObj.get("redeemedAmout").isJsonNull())
                && !jsonObj.get("redeemedAmout").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `redeemedAmout` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("redeemedAmout").toString()));
        }
        if ((jsonObj.get("redeemedAmoutUnit") != null
                        && !jsonObj.get("redeemedAmoutUnit").isJsonNull())
                && !jsonObj.get("redeemedAmoutUnit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `redeemedAmoutUnit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("redeemedAmoutUnit").toString()));
        }
        if ((jsonObj.get("assetValueInUSD") != null && !jsonObj.get("assetValueInUSD").isJsonNull())
                && !jsonObj.get("assetValueInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetValueInUSD` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("assetValueInUSD").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryHoldingDetailsOfThePlanResponseDetailsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryHoldingDetailsOfThePlanResponseDetailsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryHoldingDetailsOfThePlanResponseDetailsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(QueryHoldingDetailsOfThePlanResponseDetailsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryHoldingDetailsOfThePlanResponseDetailsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryHoldingDetailsOfThePlanResponseDetailsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryHoldingDetailsOfThePlanResponseDetailsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryHoldingDetailsOfThePlanResponseDetailsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryHoldingDetailsOfThePlanResponseDetailsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryHoldingDetailsOfThePlanResponseDetailsInner
     */
    public static QueryHoldingDetailsOfThePlanResponseDetailsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QueryHoldingDetailsOfThePlanResponseDetailsInner.class);
    }

    /**
     * Convert an instance of QueryHoldingDetailsOfThePlanResponseDetailsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
