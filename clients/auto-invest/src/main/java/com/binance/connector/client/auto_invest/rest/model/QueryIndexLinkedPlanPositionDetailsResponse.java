/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryIndexLinkedPlanPositionDetailsResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryIndexLinkedPlanPositionDetailsResponse {
    public static final String SERIALIZED_NAME_INDEX_ID = "indexId";

    @SerializedName(SERIALIZED_NAME_INDEX_ID)
    @jakarta.annotation.Nullable
    private Long indexId;

    public static final String SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D = "totalInvestedInUSD";

    @SerializedName(SERIALIZED_NAME_TOTAL_INVESTED_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String totalInvestedInUSD;

    public static final String SERIALIZED_NAME_CURRENT_INVESTED_IN_U_S_D = "currentInvestedInUSD";

    @SerializedName(SERIALIZED_NAME_CURRENT_INVESTED_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String currentInvestedInUSD;

    public static final String SERIALIZED_NAME_PNL_IN_U_S_D = "pnlInUSD";

    @SerializedName(SERIALIZED_NAME_PNL_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String pnlInUSD;

    public static final String SERIALIZED_NAME_ROI = "roi";

    @SerializedName(SERIALIZED_NAME_ROI)
    @jakarta.annotation.Nullable
    private String roi;

    public static final String SERIALIZED_NAME_ASSET_ALLOCATION = "assetAllocation";

    @SerializedName(SERIALIZED_NAME_ASSET_ALLOCATION)
    @jakarta.annotation.Nullable
    private List<@Valid QueryIndexDetailsResponseAssetAllocationInner> assetAllocation;

    public static final String SERIALIZED_NAME_DETAILS = "details";

    @SerializedName(SERIALIZED_NAME_DETAILS)
    @jakarta.annotation.Nullable
    private List<@Valid QueryIndexLinkedPlanPositionDetailsResponseDetailsInner> details;

    public QueryIndexLinkedPlanPositionDetailsResponse() {}

    public QueryIndexLinkedPlanPositionDetailsResponse indexId(
            @jakarta.annotation.Nullable Long indexId) {
        this.indexId = indexId;
        return this;
    }

    /**
     * Get indexId
     *
     * @return indexId
     */
    @jakarta.annotation.Nullable
    public Long getIndexId() {
        return indexId;
    }

    public void setIndexId(@jakarta.annotation.Nullable Long indexId) {
        this.indexId = indexId;
    }

    public QueryIndexLinkedPlanPositionDetailsResponse totalInvestedInUSD(
            @jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
        return this;
    }

    /**
     * Get totalInvestedInUSD
     *
     * @return totalInvestedInUSD
     */
    @jakarta.annotation.Nullable
    public String getTotalInvestedInUSD() {
        return totalInvestedInUSD;
    }

    public void setTotalInvestedInUSD(@jakarta.annotation.Nullable String totalInvestedInUSD) {
        this.totalInvestedInUSD = totalInvestedInUSD;
    }

    public QueryIndexLinkedPlanPositionDetailsResponse currentInvestedInUSD(
            @jakarta.annotation.Nullable String currentInvestedInUSD) {
        this.currentInvestedInUSD = currentInvestedInUSD;
        return this;
    }

    /**
     * Get currentInvestedInUSD
     *
     * @return currentInvestedInUSD
     */
    @jakarta.annotation.Nullable
    public String getCurrentInvestedInUSD() {
        return currentInvestedInUSD;
    }

    public void setCurrentInvestedInUSD(@jakarta.annotation.Nullable String currentInvestedInUSD) {
        this.currentInvestedInUSD = currentInvestedInUSD;
    }

    public QueryIndexLinkedPlanPositionDetailsResponse pnlInUSD(
            @jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
        return this;
    }

    /**
     * Get pnlInUSD
     *
     * @return pnlInUSD
     */
    @jakarta.annotation.Nullable
    public String getPnlInUSD() {
        return pnlInUSD;
    }

    public void setPnlInUSD(@jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
    }

    public QueryIndexLinkedPlanPositionDetailsResponse roi(
            @jakarta.annotation.Nullable String roi) {
        this.roi = roi;
        return this;
    }

    /**
     * Get roi
     *
     * @return roi
     */
    @jakarta.annotation.Nullable
    public String getRoi() {
        return roi;
    }

    public void setRoi(@jakarta.annotation.Nullable String roi) {
        this.roi = roi;
    }

    public QueryIndexLinkedPlanPositionDetailsResponse assetAllocation(
            @jakarta.annotation.Nullable
                    List<@Valid QueryIndexDetailsResponseAssetAllocationInner> assetAllocation) {
        this.assetAllocation = assetAllocation;
        return this;
    }

    public QueryIndexLinkedPlanPositionDetailsResponse addAssetAllocationItem(
            QueryIndexDetailsResponseAssetAllocationInner assetAllocationItem) {
        if (this.assetAllocation == null) {
            this.assetAllocation = new ArrayList<>();
        }
        this.assetAllocation.add(assetAllocationItem);
        return this;
    }

    /**
     * Get assetAllocation
     *
     * @return assetAllocation
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryIndexDetailsResponseAssetAllocationInner> getAssetAllocation() {
        return assetAllocation;
    }

    public void setAssetAllocation(
            @jakarta.annotation.Nullable
                    List<@Valid QueryIndexDetailsResponseAssetAllocationInner> assetAllocation) {
        this.assetAllocation = assetAllocation;
    }

    public QueryIndexLinkedPlanPositionDetailsResponse details(
            @jakarta.annotation.Nullable
                    List<@Valid QueryIndexLinkedPlanPositionDetailsResponseDetailsInner> details) {
        this.details = details;
        return this;
    }

    public QueryIndexLinkedPlanPositionDetailsResponse addDetailsItem(
            QueryIndexLinkedPlanPositionDetailsResponseDetailsInner detailsItem) {
        if (this.details == null) {
            this.details = new ArrayList<>();
        }
        this.details.add(detailsItem);
        return this;
    }

    /**
     * Get details
     *
     * @return details
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryIndexLinkedPlanPositionDetailsResponseDetailsInner> getDetails() {
        return details;
    }

    public void setDetails(
            @jakarta.annotation.Nullable
                    List<@Valid QueryIndexLinkedPlanPositionDetailsResponseDetailsInner> details) {
        this.details = details;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryIndexLinkedPlanPositionDetailsResponse queryIndexLinkedPlanPositionDetailsResponse =
                (QueryIndexLinkedPlanPositionDetailsResponse) o;
        return Objects.equals(this.indexId, queryIndexLinkedPlanPositionDetailsResponse.indexId)
                && Objects.equals(
                        this.totalInvestedInUSD,
                        queryIndexLinkedPlanPositionDetailsResponse.totalInvestedInUSD)
                && Objects.equals(
                        this.currentInvestedInUSD,
                        queryIndexLinkedPlanPositionDetailsResponse.currentInvestedInUSD)
                && Objects.equals(
                        this.pnlInUSD, queryIndexLinkedPlanPositionDetailsResponse.pnlInUSD)
                && Objects.equals(this.roi, queryIndexLinkedPlanPositionDetailsResponse.roi)
                && Objects.equals(
                        this.assetAllocation,
                        queryIndexLinkedPlanPositionDetailsResponse.assetAllocation)
                && Objects.equals(
                        this.details, queryIndexLinkedPlanPositionDetailsResponse.details);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                indexId,
                totalInvestedInUSD,
                currentInvestedInUSD,
                pnlInUSD,
                roi,
                assetAllocation,
                details);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryIndexLinkedPlanPositionDetailsResponse {\n");
        sb.append("		indexId: ").append(toIndentedString(indexId)).append("\n");
        sb.append("		totalInvestedInUSD: ")
                .append(toIndentedString(totalInvestedInUSD))
                .append("\n");
        sb.append("		currentInvestedInUSD: ")
                .append(toIndentedString(currentInvestedInUSD))
                .append("\n");
        sb.append("		pnlInUSD: ").append(toIndentedString(pnlInUSD)).append("\n");
        sb.append("		roi: ").append(toIndentedString(roi)).append("\n");
        sb.append("		assetAllocation: ").append(toIndentedString(assetAllocation)).append("\n");
        sb.append("		details: ").append(toIndentedString(details)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object indexIdValue = getIndexId();
        String indexIdValueAsString = "";
        indexIdValueAsString = indexIdValue.toString();
        sb.append("indexId=").append(urlEncode(indexIdValueAsString)).append("");
        Object totalInvestedInUSDValue = getTotalInvestedInUSD();
        String totalInvestedInUSDValueAsString = "";
        totalInvestedInUSDValueAsString = totalInvestedInUSDValue.toString();
        sb.append("totalInvestedInUSD=")
                .append(urlEncode(totalInvestedInUSDValueAsString))
                .append("");
        Object currentInvestedInUSDValue = getCurrentInvestedInUSD();
        String currentInvestedInUSDValueAsString = "";
        currentInvestedInUSDValueAsString = currentInvestedInUSDValue.toString();
        sb.append("currentInvestedInUSD=")
                .append(urlEncode(currentInvestedInUSDValueAsString))
                .append("");
        Object pnlInUSDValue = getPnlInUSD();
        String pnlInUSDValueAsString = "";
        pnlInUSDValueAsString = pnlInUSDValue.toString();
        sb.append("pnlInUSD=").append(urlEncode(pnlInUSDValueAsString)).append("");
        Object roiValue = getRoi();
        String roiValueAsString = "";
        roiValueAsString = roiValue.toString();
        sb.append("roi=").append(urlEncode(roiValueAsString)).append("");
        Object assetAllocationValue = getAssetAllocation();
        String assetAllocationValueAsString = "";
        assetAllocationValueAsString =
                (String)
                        ((Collection) assetAllocationValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("assetAllocation=").append(urlEncode(assetAllocationValueAsString)).append("");
        Object detailsValue = getDetails();
        String detailsValueAsString = "";
        detailsValueAsString =
                (String)
                        ((Collection) detailsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("details=").append(urlEncode(detailsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("indexId");
        openapiFields.add("totalInvestedInUSD");
        openapiFields.add("currentInvestedInUSD");
        openapiFields.add("pnlInUSD");
        openapiFields.add("roi");
        openapiFields.add("assetAllocation");
        openapiFields.add("details");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryIndexLinkedPlanPositionDetailsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryIndexLinkedPlanPositionDetailsResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryIndexLinkedPlanPositionDetailsResponse is not found in"
                                    + " the empty JSON string",
                                QueryIndexLinkedPlanPositionDetailsResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryIndexLinkedPlanPositionDetailsResponse.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryIndexLinkedPlanPositionDetailsResponse` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("totalInvestedInUSD") != null
                        && !jsonObj.get("totalInvestedInUSD").isJsonNull())
                && !jsonObj.get("totalInvestedInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalInvestedInUSD` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalInvestedInUSD").toString()));
        }
        if ((jsonObj.get("currentInvestedInUSD") != null
                        && !jsonObj.get("currentInvestedInUSD").isJsonNull())
                && !jsonObj.get("currentInvestedInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `currentInvestedInUSD` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("currentInvestedInUSD").toString()));
        }
        if ((jsonObj.get("pnlInUSD") != null && !jsonObj.get("pnlInUSD").isJsonNull())
                && !jsonObj.get("pnlInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pnlInUSD` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("pnlInUSD").toString()));
        }
        if ((jsonObj.get("roi") != null && !jsonObj.get("roi").isJsonNull())
                && !jsonObj.get("roi").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `roi` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("roi").toString()));
        }
        if (jsonObj.get("assetAllocation") != null
                && !jsonObj.get("assetAllocation").isJsonNull()) {
            JsonArray jsonArrayassetAllocation = jsonObj.getAsJsonArray("assetAllocation");
            if (jsonArrayassetAllocation != null) {
                // ensure the json data is an array
                if (!jsonObj.get("assetAllocation").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `assetAllocation` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("assetAllocation").toString()));
                }

                // validate the optional field `assetAllocation` (array)
                for (int i = 0; i < jsonArrayassetAllocation.size(); i++) {
                    QueryIndexDetailsResponseAssetAllocationInner.validateJsonElement(
                            jsonArrayassetAllocation.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
            JsonArray jsonArraydetails = jsonObj.getAsJsonArray("details");
            if (jsonArraydetails != null) {
                // ensure the json data is an array
                if (!jsonObj.get("details").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `details` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("details").toString()));
                }

                // validate the optional field `details` (array)
                for (int i = 0; i < jsonArraydetails.size(); i++) {
                    QueryIndexLinkedPlanPositionDetailsResponseDetailsInner.validateJsonElement(
                            jsonArraydetails.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryIndexLinkedPlanPositionDetailsResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryIndexLinkedPlanPositionDetailsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryIndexLinkedPlanPositionDetailsResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryIndexLinkedPlanPositionDetailsResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryIndexLinkedPlanPositionDetailsResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryIndexLinkedPlanPositionDetailsResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryIndexLinkedPlanPositionDetailsResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryIndexLinkedPlanPositionDetailsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryIndexLinkedPlanPositionDetailsResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryIndexLinkedPlanPositionDetailsResponse
     */
    public static QueryIndexLinkedPlanPositionDetailsResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QueryIndexLinkedPlanPositionDetailsResponse.class);
    }

    /**
     * Convert an instance of QueryIndexLinkedPlanPositionDetailsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
