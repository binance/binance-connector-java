/*
 * Binance Auto Invest REST API
 * OpenAPI Specification for the Binance Auto Invest REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.auto_invest.rest.model;

import com.binance.connector.client.auto_invest.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetListOfPlansResponse1 */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetListOfPlansResponse1 {
    public static final String SERIALIZED_NAME_PLAN_VALUE_IN_U_S_D = "planValueInUSD";

    @SerializedName(SERIALIZED_NAME_PLAN_VALUE_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String planValueInUSD;

    public static final String SERIALIZED_NAME_PLAN_VALUE_IN_B_T_C = "planValueInBTC";

    @SerializedName(SERIALIZED_NAME_PLAN_VALUE_IN_B_T_C)
    @jakarta.annotation.Nullable
    private String planValueInBTC;

    public static final String SERIALIZED_NAME_PNL_IN_U_S_D = "pnlInUSD";

    @SerializedName(SERIALIZED_NAME_PNL_IN_U_S_D)
    @jakarta.annotation.Nullable
    private String pnlInUSD;

    public static final String SERIALIZED_NAME_ROI = "roi";

    @SerializedName(SERIALIZED_NAME_ROI)
    @jakarta.annotation.Nullable
    private String roi;

    public static final String SERIALIZED_NAME_PLANS = "plans";

    @SerializedName(SERIALIZED_NAME_PLANS)
    @jakarta.annotation.Nullable
    private List<@Valid GetListOfPlansResponse1PlansInner> plans;

    public GetListOfPlansResponse1() {}

    public GetListOfPlansResponse1 planValueInUSD(
            @jakarta.annotation.Nullable String planValueInUSD) {
        this.planValueInUSD = planValueInUSD;
        return this;
    }

    /**
     * Get planValueInUSD
     *
     * @return planValueInUSD
     */
    @jakarta.annotation.Nullable
    public String getPlanValueInUSD() {
        return planValueInUSD;
    }

    public void setPlanValueInUSD(@jakarta.annotation.Nullable String planValueInUSD) {
        this.planValueInUSD = planValueInUSD;
    }

    public GetListOfPlansResponse1 planValueInBTC(
            @jakarta.annotation.Nullable String planValueInBTC) {
        this.planValueInBTC = planValueInBTC;
        return this;
    }

    /**
     * Get planValueInBTC
     *
     * @return planValueInBTC
     */
    @jakarta.annotation.Nullable
    public String getPlanValueInBTC() {
        return planValueInBTC;
    }

    public void setPlanValueInBTC(@jakarta.annotation.Nullable String planValueInBTC) {
        this.planValueInBTC = planValueInBTC;
    }

    public GetListOfPlansResponse1 pnlInUSD(@jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
        return this;
    }

    /**
     * Get pnlInUSD
     *
     * @return pnlInUSD
     */
    @jakarta.annotation.Nullable
    public String getPnlInUSD() {
        return pnlInUSD;
    }

    public void setPnlInUSD(@jakarta.annotation.Nullable String pnlInUSD) {
        this.pnlInUSD = pnlInUSD;
    }

    public GetListOfPlansResponse1 roi(@jakarta.annotation.Nullable String roi) {
        this.roi = roi;
        return this;
    }

    /**
     * Get roi
     *
     * @return roi
     */
    @jakarta.annotation.Nullable
    public String getRoi() {
        return roi;
    }

    public void setRoi(@jakarta.annotation.Nullable String roi) {
        this.roi = roi;
    }

    public GetListOfPlansResponse1 plans(
            @jakarta.annotation.Nullable List<@Valid GetListOfPlansResponse1PlansInner> plans) {
        this.plans = plans;
        return this;
    }

    public GetListOfPlansResponse1 addPlansItem(GetListOfPlansResponse1PlansInner plansItem) {
        if (this.plans == null) {
            this.plans = new ArrayList<>();
        }
        this.plans.add(plansItem);
        return this;
    }

    /**
     * Get plans
     *
     * @return plans
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid GetListOfPlansResponse1PlansInner> getPlans() {
        return plans;
    }

    public void setPlans(
            @jakarta.annotation.Nullable List<@Valid GetListOfPlansResponse1PlansInner> plans) {
        this.plans = plans;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetListOfPlansResponse1 getListOfPlansResponse1 = (GetListOfPlansResponse1) o;
        return Objects.equals(this.planValueInUSD, getListOfPlansResponse1.planValueInUSD)
                && Objects.equals(this.planValueInBTC, getListOfPlansResponse1.planValueInBTC)
                && Objects.equals(this.pnlInUSD, getListOfPlansResponse1.pnlInUSD)
                && Objects.equals(this.roi, getListOfPlansResponse1.roi)
                && Objects.equals(this.plans, getListOfPlansResponse1.plans);
    }

    @Override
    public int hashCode() {
        return Objects.hash(planValueInUSD, planValueInBTC, pnlInUSD, roi, plans);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetListOfPlansResponse1 {\n");
        sb.append("		planValueInUSD: ").append(toIndentedString(planValueInUSD)).append("\n");
        sb.append("		planValueInBTC: ").append(toIndentedString(planValueInBTC)).append("\n");
        sb.append("		pnlInUSD: ").append(toIndentedString(pnlInUSD)).append("\n");
        sb.append("		roi: ").append(toIndentedString(roi)).append("\n");
        sb.append("		plans: ").append(toIndentedString(plans)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object planValueInUSDValue = getPlanValueInUSD();
        String planValueInUSDValueAsString = "";
        planValueInUSDValueAsString = planValueInUSDValue.toString();
        sb.append("planValueInUSD=").append(urlEncode(planValueInUSDValueAsString)).append("");
        Object planValueInBTCValue = getPlanValueInBTC();
        String planValueInBTCValueAsString = "";
        planValueInBTCValueAsString = planValueInBTCValue.toString();
        sb.append("planValueInBTC=").append(urlEncode(planValueInBTCValueAsString)).append("");
        Object pnlInUSDValue = getPnlInUSD();
        String pnlInUSDValueAsString = "";
        pnlInUSDValueAsString = pnlInUSDValue.toString();
        sb.append("pnlInUSD=").append(urlEncode(pnlInUSDValueAsString)).append("");
        Object roiValue = getRoi();
        String roiValueAsString = "";
        roiValueAsString = roiValue.toString();
        sb.append("roi=").append(urlEncode(roiValueAsString)).append("");
        Object plansValue = getPlans();
        String plansValueAsString = "";
        plansValueAsString =
                (String)
                        ((Collection) plansValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("plans=").append(urlEncode(plansValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("planValueInUSD");
        openapiFields.add("planValueInBTC");
        openapiFields.add("pnlInUSD");
        openapiFields.add("roi");
        openapiFields.add("plans");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to GetListOfPlansResponse1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetListOfPlansResponse1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetListOfPlansResponse1 is not found"
                                        + " in the empty JSON string",
                                GetListOfPlansResponse1.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetListOfPlansResponse1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetListOfPlansResponse1` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("planValueInUSD") != null && !jsonObj.get("planValueInUSD").isJsonNull())
                && !jsonObj.get("planValueInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `planValueInUSD` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("planValueInUSD").toString()));
        }
        if ((jsonObj.get("planValueInBTC") != null && !jsonObj.get("planValueInBTC").isJsonNull())
                && !jsonObj.get("planValueInBTC").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `planValueInBTC` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("planValueInBTC").toString()));
        }
        if ((jsonObj.get("pnlInUSD") != null && !jsonObj.get("pnlInUSD").isJsonNull())
                && !jsonObj.get("pnlInUSD").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pnlInUSD` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("pnlInUSD").toString()));
        }
        if ((jsonObj.get("roi") != null && !jsonObj.get("roi").isJsonNull())
                && !jsonObj.get("roi").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `roi` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("roi").toString()));
        }
        if (jsonObj.get("plans") != null && !jsonObj.get("plans").isJsonNull()) {
            JsonArray jsonArrayplans = jsonObj.getAsJsonArray("plans");
            if (jsonArrayplans != null) {
                // ensure the json data is an array
                if (!jsonObj.get("plans").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `plans` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("plans").toString()));
                }

                // validate the optional field `plans` (array)
                for (int i = 0; i < jsonArrayplans.size(); i++) {
                    GetListOfPlansResponse1PlansInner.validateJsonElement(jsonArrayplans.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetListOfPlansResponse1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetListOfPlansResponse1' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetListOfPlansResponse1> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(GetListOfPlansResponse1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetListOfPlansResponse1>() {
                        @Override
                        public void write(JsonWriter out, GetListOfPlansResponse1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetListOfPlansResponse1 read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetListOfPlansResponse1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetListOfPlansResponse1
     * @throws IOException if the JSON string is invalid with respect to GetListOfPlansResponse1
     */
    public static GetListOfPlansResponse1 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetListOfPlansResponse1.class);
    }

    /**
     * Convert an instance of GetListOfPlansResponse1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
