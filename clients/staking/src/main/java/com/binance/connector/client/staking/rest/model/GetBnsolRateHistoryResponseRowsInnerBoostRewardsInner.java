/*
 * Binance Staking REST API
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.staking.rest.model;

import com.binance.connector.client.staking.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner {
    public static final String SERIALIZED_NAME_BOOST_A_P_R = "boostAPR";

    @SerializedName(SERIALIZED_NAME_BOOST_A_P_R)
    @jakarta.annotation.Nullable
    private String boostAPR;

    public static final String SERIALIZED_NAME_REWARDS_ASSET = "rewardsAsset";

    @SerializedName(SERIALIZED_NAME_REWARDS_ASSET)
    @jakarta.annotation.Nullable
    private String rewardsAsset;

    public GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner() {}

    public GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner boostAPR(
            @jakarta.annotation.Nullable String boostAPR) {
        this.boostAPR = boostAPR;
        return this;
    }

    /**
     * Get boostAPR
     *
     * @return boostAPR
     */
    @jakarta.annotation.Nullable
    public String getBoostAPR() {
        return boostAPR;
    }

    public void setBoostAPR(@jakarta.annotation.Nullable String boostAPR) {
        this.boostAPR = boostAPR;
    }

    public GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner rewardsAsset(
            @jakarta.annotation.Nullable String rewardsAsset) {
        this.rewardsAsset = rewardsAsset;
        return this;
    }

    /**
     * Get rewardsAsset
     *
     * @return rewardsAsset
     */
    @jakarta.annotation.Nullable
    public String getRewardsAsset() {
        return rewardsAsset;
    }

    public void setRewardsAsset(@jakarta.annotation.Nullable String rewardsAsset) {
        this.rewardsAsset = rewardsAsset;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner
                getBnsolRateHistoryResponseRowsInnerBoostRewardsInner =
                        (GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner) o;
        return Objects.equals(
                        this.boostAPR,
                        getBnsolRateHistoryResponseRowsInnerBoostRewardsInner.boostAPR)
                && Objects.equals(
                        this.rewardsAsset,
                        getBnsolRateHistoryResponseRowsInnerBoostRewardsInner.rewardsAsset);
    }

    @Override
    public int hashCode() {
        return Objects.hash(boostAPR, rewardsAsset);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner {\n");
        sb.append("		boostAPR: ").append(toIndentedString(boostAPR)).append("\n");
        sb.append("		rewardsAsset: ").append(toIndentedString(rewardsAsset)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object boostAPRValue = getBoostAPR();
        String boostAPRValueAsString = "";
        boostAPRValueAsString = boostAPRValue.toString();
        sb.append("boostAPR=").append(urlEncode(boostAPRValueAsString)).append("");
        Object rewardsAssetValue = getRewardsAsset();
        String rewardsAssetValueAsString = "";
        rewardsAssetValueAsString = rewardsAssetValue.toString();
        sb.append("rewardsAsset=").append(urlEncode(rewardsAssetValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("boostAPR");
        openapiFields.add("rewardsAsset");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner is"
                                    + " not found in the empty JSON string",
                                GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("boostAPR") != null && !jsonObj.get("boostAPR").isJsonNull())
                && !jsonObj.get("boostAPR").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `boostAPR` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("boostAPR").toString()));
        }
        if ((jsonObj.get("rewardsAsset") != null && !jsonObj.get("rewardsAsset").isJsonNull())
                && !jsonObj.get("rewardsAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `rewardsAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("rewardsAsset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner
     */
    public static GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner.class);
    }

    /**
     * Convert an instance of GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
