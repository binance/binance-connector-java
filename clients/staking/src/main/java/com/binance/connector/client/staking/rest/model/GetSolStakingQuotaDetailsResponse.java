/*
 * Binance Staking REST API
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.staking.rest.model;

import com.binance.connector.client.staking.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetSolStakingQuotaDetailsResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetSolStakingQuotaDetailsResponse {
    public static final String SERIALIZED_NAME_LEFT_STAKING_PERSONAL_QUOTA =
            "leftStakingPersonalQuota";

    @SerializedName(SERIALIZED_NAME_LEFT_STAKING_PERSONAL_QUOTA)
    @jakarta.annotation.Nullable
    private String leftStakingPersonalQuota;

    public static final String SERIALIZED_NAME_LEFT_REDEMPTION_PERSONAL_QUOTA =
            "leftRedemptionPersonalQuota";

    @SerializedName(SERIALIZED_NAME_LEFT_REDEMPTION_PERSONAL_QUOTA)
    @jakarta.annotation.Nullable
    private String leftRedemptionPersonalQuota;

    public static final String SERIALIZED_NAME_MIN_STAKE_AMOUNT = "minStakeAmount";

    @SerializedName(SERIALIZED_NAME_MIN_STAKE_AMOUNT)
    @jakarta.annotation.Nullable
    private String minStakeAmount;

    public static final String SERIALIZED_NAME_MIN_REDEEM_AMOUNT = "minRedeemAmount";

    @SerializedName(SERIALIZED_NAME_MIN_REDEEM_AMOUNT)
    @jakarta.annotation.Nullable
    private String minRedeemAmount;

    public static final String SERIALIZED_NAME_REDEEM_PERIOD = "redeemPeriod";

    @SerializedName(SERIALIZED_NAME_REDEEM_PERIOD)
    @jakarta.annotation.Nullable
    private Long redeemPeriod;

    public static final String SERIALIZED_NAME_STAKEABLE = "stakeable";

    @SerializedName(SERIALIZED_NAME_STAKEABLE)
    @jakarta.annotation.Nullable
    private Boolean stakeable;

    public static final String SERIALIZED_NAME_REDEEMABLE = "redeemable";

    @SerializedName(SERIALIZED_NAME_REDEEMABLE)
    @jakarta.annotation.Nullable
    private Boolean redeemable;

    public static final String SERIALIZED_NAME_SOLD_OUT = "soldOut";

    @SerializedName(SERIALIZED_NAME_SOLD_OUT)
    @jakarta.annotation.Nullable
    private Boolean soldOut;

    public static final String SERIALIZED_NAME_COMMISSION_FEE = "commissionFee";

    @SerializedName(SERIALIZED_NAME_COMMISSION_FEE)
    @jakarta.annotation.Nullable
    private String commissionFee;

    public static final String SERIALIZED_NAME_NEXT_EPOCH_TIME = "nextEpochTime";

    @SerializedName(SERIALIZED_NAME_NEXT_EPOCH_TIME)
    @jakarta.annotation.Nullable
    private Long nextEpochTime;

    public static final String SERIALIZED_NAME_CALCULATING = "calculating";

    @SerializedName(SERIALIZED_NAME_CALCULATING)
    @jakarta.annotation.Nullable
    private Boolean calculating;

    public GetSolStakingQuotaDetailsResponse() {}

    public GetSolStakingQuotaDetailsResponse leftStakingPersonalQuota(
            @jakarta.annotation.Nullable String leftStakingPersonalQuota) {
        this.leftStakingPersonalQuota = leftStakingPersonalQuota;
        return this;
    }

    /**
     * Get leftStakingPersonalQuota
     *
     * @return leftStakingPersonalQuota
     */
    @jakarta.annotation.Nullable
    public String getLeftStakingPersonalQuota() {
        return leftStakingPersonalQuota;
    }

    public void setLeftStakingPersonalQuota(
            @jakarta.annotation.Nullable String leftStakingPersonalQuota) {
        this.leftStakingPersonalQuota = leftStakingPersonalQuota;
    }

    public GetSolStakingQuotaDetailsResponse leftRedemptionPersonalQuota(
            @jakarta.annotation.Nullable String leftRedemptionPersonalQuota) {
        this.leftRedemptionPersonalQuota = leftRedemptionPersonalQuota;
        return this;
    }

    /**
     * Get leftRedemptionPersonalQuota
     *
     * @return leftRedemptionPersonalQuota
     */
    @jakarta.annotation.Nullable
    public String getLeftRedemptionPersonalQuota() {
        return leftRedemptionPersonalQuota;
    }

    public void setLeftRedemptionPersonalQuota(
            @jakarta.annotation.Nullable String leftRedemptionPersonalQuota) {
        this.leftRedemptionPersonalQuota = leftRedemptionPersonalQuota;
    }

    public GetSolStakingQuotaDetailsResponse minStakeAmount(
            @jakarta.annotation.Nullable String minStakeAmount) {
        this.minStakeAmount = minStakeAmount;
        return this;
    }

    /**
     * Get minStakeAmount
     *
     * @return minStakeAmount
     */
    @jakarta.annotation.Nullable
    public String getMinStakeAmount() {
        return minStakeAmount;
    }

    public void setMinStakeAmount(@jakarta.annotation.Nullable String minStakeAmount) {
        this.minStakeAmount = minStakeAmount;
    }

    public GetSolStakingQuotaDetailsResponse minRedeemAmount(
            @jakarta.annotation.Nullable String minRedeemAmount) {
        this.minRedeemAmount = minRedeemAmount;
        return this;
    }

    /**
     * Get minRedeemAmount
     *
     * @return minRedeemAmount
     */
    @jakarta.annotation.Nullable
    public String getMinRedeemAmount() {
        return minRedeemAmount;
    }

    public void setMinRedeemAmount(@jakarta.annotation.Nullable String minRedeemAmount) {
        this.minRedeemAmount = minRedeemAmount;
    }

    public GetSolStakingQuotaDetailsResponse redeemPeriod(
            @jakarta.annotation.Nullable Long redeemPeriod) {
        this.redeemPeriod = redeemPeriod;
        return this;
    }

    /**
     * Get redeemPeriod
     *
     * @return redeemPeriod
     */
    @jakarta.annotation.Nullable
    public Long getRedeemPeriod() {
        return redeemPeriod;
    }

    public void setRedeemPeriod(@jakarta.annotation.Nullable Long redeemPeriod) {
        this.redeemPeriod = redeemPeriod;
    }

    public GetSolStakingQuotaDetailsResponse stakeable(
            @jakarta.annotation.Nullable Boolean stakeable) {
        this.stakeable = stakeable;
        return this;
    }

    /**
     * Get stakeable
     *
     * @return stakeable
     */
    @jakarta.annotation.Nullable
    public Boolean getStakeable() {
        return stakeable;
    }

    public void setStakeable(@jakarta.annotation.Nullable Boolean stakeable) {
        this.stakeable = stakeable;
    }

    public GetSolStakingQuotaDetailsResponse redeemable(
            @jakarta.annotation.Nullable Boolean redeemable) {
        this.redeemable = redeemable;
        return this;
    }

    /**
     * Get redeemable
     *
     * @return redeemable
     */
    @jakarta.annotation.Nullable
    public Boolean getRedeemable() {
        return redeemable;
    }

    public void setRedeemable(@jakarta.annotation.Nullable Boolean redeemable) {
        this.redeemable = redeemable;
    }

    public GetSolStakingQuotaDetailsResponse soldOut(@jakarta.annotation.Nullable Boolean soldOut) {
        this.soldOut = soldOut;
        return this;
    }

    /**
     * Get soldOut
     *
     * @return soldOut
     */
    @jakarta.annotation.Nullable
    public Boolean getSoldOut() {
        return soldOut;
    }

    public void setSoldOut(@jakarta.annotation.Nullable Boolean soldOut) {
        this.soldOut = soldOut;
    }

    public GetSolStakingQuotaDetailsResponse commissionFee(
            @jakarta.annotation.Nullable String commissionFee) {
        this.commissionFee = commissionFee;
        return this;
    }

    /**
     * Get commissionFee
     *
     * @return commissionFee
     */
    @jakarta.annotation.Nullable
    public String getCommissionFee() {
        return commissionFee;
    }

    public void setCommissionFee(@jakarta.annotation.Nullable String commissionFee) {
        this.commissionFee = commissionFee;
    }

    public GetSolStakingQuotaDetailsResponse nextEpochTime(
            @jakarta.annotation.Nullable Long nextEpochTime) {
        this.nextEpochTime = nextEpochTime;
        return this;
    }

    /**
     * Get nextEpochTime
     *
     * @return nextEpochTime
     */
    @jakarta.annotation.Nullable
    public Long getNextEpochTime() {
        return nextEpochTime;
    }

    public void setNextEpochTime(@jakarta.annotation.Nullable Long nextEpochTime) {
        this.nextEpochTime = nextEpochTime;
    }

    public GetSolStakingQuotaDetailsResponse calculating(
            @jakarta.annotation.Nullable Boolean calculating) {
        this.calculating = calculating;
        return this;
    }

    /**
     * Get calculating
     *
     * @return calculating
     */
    @jakarta.annotation.Nullable
    public Boolean getCalculating() {
        return calculating;
    }

    public void setCalculating(@jakarta.annotation.Nullable Boolean calculating) {
        this.calculating = calculating;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSolStakingQuotaDetailsResponse getSolStakingQuotaDetailsResponse =
                (GetSolStakingQuotaDetailsResponse) o;
        return Objects.equals(
                        this.leftStakingPersonalQuota,
                        getSolStakingQuotaDetailsResponse.leftStakingPersonalQuota)
                && Objects.equals(
                        this.leftRedemptionPersonalQuota,
                        getSolStakingQuotaDetailsResponse.leftRedemptionPersonalQuota)
                && Objects.equals(
                        this.minStakeAmount, getSolStakingQuotaDetailsResponse.minStakeAmount)
                && Objects.equals(
                        this.minRedeemAmount, getSolStakingQuotaDetailsResponse.minRedeemAmount)
                && Objects.equals(this.redeemPeriod, getSolStakingQuotaDetailsResponse.redeemPeriod)
                && Objects.equals(this.stakeable, getSolStakingQuotaDetailsResponse.stakeable)
                && Objects.equals(this.redeemable, getSolStakingQuotaDetailsResponse.redeemable)
                && Objects.equals(this.soldOut, getSolStakingQuotaDetailsResponse.soldOut)
                && Objects.equals(
                        this.commissionFee, getSolStakingQuotaDetailsResponse.commissionFee)
                && Objects.equals(
                        this.nextEpochTime, getSolStakingQuotaDetailsResponse.nextEpochTime)
                && Objects.equals(this.calculating, getSolStakingQuotaDetailsResponse.calculating);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                leftStakingPersonalQuota,
                leftRedemptionPersonalQuota,
                minStakeAmount,
                minRedeemAmount,
                redeemPeriod,
                stakeable,
                redeemable,
                soldOut,
                commissionFee,
                nextEpochTime,
                calculating);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetSolStakingQuotaDetailsResponse {\n");
        sb.append("		leftStakingPersonalQuota: ")
                .append(toIndentedString(leftStakingPersonalQuota))
                .append("\n");
        sb.append("		leftRedemptionPersonalQuota: ")
                .append(toIndentedString(leftRedemptionPersonalQuota))
                .append("\n");
        sb.append("		minStakeAmount: ").append(toIndentedString(minStakeAmount)).append("\n");
        sb.append("		minRedeemAmount: ").append(toIndentedString(minRedeemAmount)).append("\n");
        sb.append("		redeemPeriod: ").append(toIndentedString(redeemPeriod)).append("\n");
        sb.append("		stakeable: ").append(toIndentedString(stakeable)).append("\n");
        sb.append("		redeemable: ").append(toIndentedString(redeemable)).append("\n");
        sb.append("		soldOut: ").append(toIndentedString(soldOut)).append("\n");
        sb.append("		commissionFee: ").append(toIndentedString(commissionFee)).append("\n");
        sb.append("		nextEpochTime: ").append(toIndentedString(nextEpochTime)).append("\n");
        sb.append("		calculating: ").append(toIndentedString(calculating)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object leftStakingPersonalQuotaValue = getLeftStakingPersonalQuota();
        String leftStakingPersonalQuotaValueAsString = "";
        leftStakingPersonalQuotaValueAsString = leftStakingPersonalQuotaValue.toString();
        sb.append("leftStakingPersonalQuota=")
                .append(urlEncode(leftStakingPersonalQuotaValueAsString))
                .append("");
        Object leftRedemptionPersonalQuotaValue = getLeftRedemptionPersonalQuota();
        String leftRedemptionPersonalQuotaValueAsString = "";
        leftRedemptionPersonalQuotaValueAsString = leftRedemptionPersonalQuotaValue.toString();
        sb.append("leftRedemptionPersonalQuota=")
                .append(urlEncode(leftRedemptionPersonalQuotaValueAsString))
                .append("");
        Object minStakeAmountValue = getMinStakeAmount();
        String minStakeAmountValueAsString = "";
        minStakeAmountValueAsString = minStakeAmountValue.toString();
        sb.append("minStakeAmount=").append(urlEncode(minStakeAmountValueAsString)).append("");
        Object minRedeemAmountValue = getMinRedeemAmount();
        String minRedeemAmountValueAsString = "";
        minRedeemAmountValueAsString = minRedeemAmountValue.toString();
        sb.append("minRedeemAmount=").append(urlEncode(minRedeemAmountValueAsString)).append("");
        Object redeemPeriodValue = getRedeemPeriod();
        String redeemPeriodValueAsString = "";
        redeemPeriodValueAsString = redeemPeriodValue.toString();
        sb.append("redeemPeriod=").append(urlEncode(redeemPeriodValueAsString)).append("");
        Object stakeableValue = getStakeable();
        String stakeableValueAsString = "";
        stakeableValueAsString = stakeableValue.toString();
        sb.append("stakeable=").append(urlEncode(stakeableValueAsString)).append("");
        Object redeemableValue = getRedeemable();
        String redeemableValueAsString = "";
        redeemableValueAsString = redeemableValue.toString();
        sb.append("redeemable=").append(urlEncode(redeemableValueAsString)).append("");
        Object soldOutValue = getSoldOut();
        String soldOutValueAsString = "";
        soldOutValueAsString = soldOutValue.toString();
        sb.append("soldOut=").append(urlEncode(soldOutValueAsString)).append("");
        Object commissionFeeValue = getCommissionFee();
        String commissionFeeValueAsString = "";
        commissionFeeValueAsString = commissionFeeValue.toString();
        sb.append("commissionFee=").append(urlEncode(commissionFeeValueAsString)).append("");
        Object nextEpochTimeValue = getNextEpochTime();
        String nextEpochTimeValueAsString = "";
        nextEpochTimeValueAsString = nextEpochTimeValue.toString();
        sb.append("nextEpochTime=").append(urlEncode(nextEpochTimeValueAsString)).append("");
        Object calculatingValue = getCalculating();
        String calculatingValueAsString = "";
        calculatingValueAsString = calculatingValue.toString();
        sb.append("calculating=").append(urlEncode(calculatingValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("leftStakingPersonalQuota");
        openapiFields.add("leftRedemptionPersonalQuota");
        openapiFields.add("minStakeAmount");
        openapiFields.add("minRedeemAmount");
        openapiFields.add("redeemPeriod");
        openapiFields.add("stakeable");
        openapiFields.add("redeemable");
        openapiFields.add("soldOut");
        openapiFields.add("commissionFee");
        openapiFields.add("nextEpochTime");
        openapiFields.add("calculating");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetSolStakingQuotaDetailsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetSolStakingQuotaDetailsResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetSolStakingQuotaDetailsResponse is"
                                        + " not found in the empty JSON string",
                                GetSolStakingQuotaDetailsResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetSolStakingQuotaDetailsResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetSolStakingQuotaDetailsResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("leftStakingPersonalQuota") != null
                        && !jsonObj.get("leftStakingPersonalQuota").isJsonNull())
                && !jsonObj.get("leftStakingPersonalQuota").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `leftStakingPersonalQuota` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("leftStakingPersonalQuota").toString()));
        }
        if ((jsonObj.get("leftRedemptionPersonalQuota") != null
                        && !jsonObj.get("leftRedemptionPersonalQuota").isJsonNull())
                && !jsonObj.get("leftRedemptionPersonalQuota").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `leftRedemptionPersonalQuota` to be a primitive"
                                    + " type in the JSON string but got `%s`",
                            jsonObj.get("leftRedemptionPersonalQuota").toString()));
        }
        if ((jsonObj.get("minStakeAmount") != null && !jsonObj.get("minStakeAmount").isJsonNull())
                && !jsonObj.get("minStakeAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minStakeAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("minStakeAmount").toString()));
        }
        if ((jsonObj.get("minRedeemAmount") != null && !jsonObj.get("minRedeemAmount").isJsonNull())
                && !jsonObj.get("minRedeemAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minRedeemAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("minRedeemAmount").toString()));
        }
        if ((jsonObj.get("commissionFee") != null && !jsonObj.get("commissionFee").isJsonNull())
                && !jsonObj.get("commissionFee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `commissionFee` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("commissionFee").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetSolStakingQuotaDetailsResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetSolStakingQuotaDetailsResponse' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetSolStakingQuotaDetailsResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetSolStakingQuotaDetailsResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetSolStakingQuotaDetailsResponse>() {
                        @Override
                        public void write(JsonWriter out, GetSolStakingQuotaDetailsResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetSolStakingQuotaDetailsResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetSolStakingQuotaDetailsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetSolStakingQuotaDetailsResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     GetSolStakingQuotaDetailsResponse
     */
    public static GetSolStakingQuotaDetailsResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetSolStakingQuotaDetailsResponse.class);
    }

    /**
     * Convert an instance of GetSolStakingQuotaDetailsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
