/*
 * Binance Staking REST API
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.staking.rest.model;

import com.binance.connector.client.staking.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetBnsolRateHistoryResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetBnsolRateHistoryResponseRowsInner {
    public static final String SERIALIZED_NAME_ANNUAL_PERCENTAGE_RATE = "annualPercentageRate";

    @SerializedName(SERIALIZED_NAME_ANNUAL_PERCENTAGE_RATE)
    @jakarta.annotation.Nullable
    private String annualPercentageRate;

    public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";

    @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
    @jakarta.annotation.Nullable
    private String exchangeRate;

    public static final String SERIALIZED_NAME_BOOST_REWARDS = "boostRewards";

    @SerializedName(SERIALIZED_NAME_BOOST_REWARDS)
    @jakarta.annotation.Nullable
    private List<@Valid GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner> boostRewards;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public GetBnsolRateHistoryResponseRowsInner() {}

    public GetBnsolRateHistoryResponseRowsInner annualPercentageRate(
            @jakarta.annotation.Nullable String annualPercentageRate) {
        this.annualPercentageRate = annualPercentageRate;
        return this;
    }

    /**
     * Get annualPercentageRate
     *
     * @return annualPercentageRate
     */
    @jakarta.annotation.Nullable
    public String getAnnualPercentageRate() {
        return annualPercentageRate;
    }

    public void setAnnualPercentageRate(@jakarta.annotation.Nullable String annualPercentageRate) {
        this.annualPercentageRate = annualPercentageRate;
    }

    public GetBnsolRateHistoryResponseRowsInner exchangeRate(
            @jakarta.annotation.Nullable String exchangeRate) {
        this.exchangeRate = exchangeRate;
        return this;
    }

    /**
     * Get exchangeRate
     *
     * @return exchangeRate
     */
    @jakarta.annotation.Nullable
    public String getExchangeRate() {
        return exchangeRate;
    }

    public void setExchangeRate(@jakarta.annotation.Nullable String exchangeRate) {
        this.exchangeRate = exchangeRate;
    }

    public GetBnsolRateHistoryResponseRowsInner boostRewards(
            @jakarta.annotation.Nullable
                    List<@Valid GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner>
                            boostRewards) {
        this.boostRewards = boostRewards;
        return this;
    }

    public GetBnsolRateHistoryResponseRowsInner addBoostRewardsItem(
            GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner boostRewardsItem) {
        if (this.boostRewards == null) {
            this.boostRewards = new ArrayList<>();
        }
        this.boostRewards.add(boostRewardsItem);
        return this;
    }

    /**
     * Get boostRewards
     *
     * @return boostRewards
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner> getBoostRewards() {
        return boostRewards;
    }

    public void setBoostRewards(
            @jakarta.annotation.Nullable
                    List<@Valid GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner>
                            boostRewards) {
        this.boostRewards = boostRewards;
    }

    public GetBnsolRateHistoryResponseRowsInner time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetBnsolRateHistoryResponseRowsInner getBnsolRateHistoryResponseRowsInner =
                (GetBnsolRateHistoryResponseRowsInner) o;
        return Objects.equals(
                        this.annualPercentageRate,
                        getBnsolRateHistoryResponseRowsInner.annualPercentageRate)
                && Objects.equals(
                        this.exchangeRate, getBnsolRateHistoryResponseRowsInner.exchangeRate)
                && Objects.equals(
                        this.boostRewards, getBnsolRateHistoryResponseRowsInner.boostRewards)
                && Objects.equals(this.time, getBnsolRateHistoryResponseRowsInner.time);
    }

    @Override
    public int hashCode() {
        return Objects.hash(annualPercentageRate, exchangeRate, boostRewards, time);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetBnsolRateHistoryResponseRowsInner {\n");
        sb.append("		annualPercentageRate: ")
                .append(toIndentedString(annualPercentageRate))
                .append("\n");
        sb.append("		exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
        sb.append("		boostRewards: ").append(toIndentedString(boostRewards)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object annualPercentageRateValue = getAnnualPercentageRate();
        String annualPercentageRateValueAsString = "";
        annualPercentageRateValueAsString = annualPercentageRateValue.toString();
        sb.append("annualPercentageRate=")
                .append(urlEncode(annualPercentageRateValueAsString))
                .append("");
        Object exchangeRateValue = getExchangeRate();
        String exchangeRateValueAsString = "";
        exchangeRateValueAsString = exchangeRateValue.toString();
        sb.append("exchangeRate=").append(urlEncode(exchangeRateValueAsString)).append("");
        Object boostRewardsValue = getBoostRewards();
        String boostRewardsValueAsString = "";
        boostRewardsValueAsString =
                (String)
                        ((Collection) boostRewardsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("boostRewards=").append(urlEncode(boostRewardsValueAsString)).append("");
        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("annualPercentageRate");
        openapiFields.add("exchangeRate");
        openapiFields.add("boostRewards");
        openapiFields.add("time");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetBnsolRateHistoryResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetBnsolRateHistoryResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetBnsolRateHistoryResponseRowsInner"
                                        + " is not found in the empty JSON string",
                                GetBnsolRateHistoryResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetBnsolRateHistoryResponseRowsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetBnsolRateHistoryResponseRowsInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("annualPercentageRate") != null
                        && !jsonObj.get("annualPercentageRate").isJsonNull())
                && !jsonObj.get("annualPercentageRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `annualPercentageRate` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("annualPercentageRate").toString()));
        }
        if ((jsonObj.get("exchangeRate") != null && !jsonObj.get("exchangeRate").isJsonNull())
                && !jsonObj.get("exchangeRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `exchangeRate` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("exchangeRate").toString()));
        }
        if (jsonObj.get("boostRewards") != null && !jsonObj.get("boostRewards").isJsonNull()) {
            JsonArray jsonArrayboostRewards = jsonObj.getAsJsonArray("boostRewards");
            if (jsonArrayboostRewards != null) {
                // ensure the json data is an array
                if (!jsonObj.get("boostRewards").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `boostRewards` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("boostRewards").toString()));
                }

                // validate the optional field `boostRewards` (array)
                for (int i = 0; i < jsonArrayboostRewards.size(); i++) {
                    GetBnsolRateHistoryResponseRowsInnerBoostRewardsInner.validateJsonElement(
                            jsonArrayboostRewards.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetBnsolRateHistoryResponseRowsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetBnsolRateHistoryResponseRowsInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetBnsolRateHistoryResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetBnsolRateHistoryResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetBnsolRateHistoryResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetBnsolRateHistoryResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetBnsolRateHistoryResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetBnsolRateHistoryResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetBnsolRateHistoryResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetBnsolRateHistoryResponseRowsInner
     */
    public static GetBnsolRateHistoryResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetBnsolRateHistoryResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetBnsolRateHistoryResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
