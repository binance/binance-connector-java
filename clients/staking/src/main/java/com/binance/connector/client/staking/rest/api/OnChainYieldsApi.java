/*
 * Binance Staking REST API
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.staking.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.staking.rest.model.GetOnChainYieldsLockedPersonalLeftQuotaResponse;
import com.binance.connector.client.staking.rest.model.GetOnChainYieldsLockedProductListResponse;
import com.binance.connector.client.staking.rest.model.GetOnChainYieldsLockedProductPositionResponse;
import com.binance.connector.client.staking.rest.model.GetOnChainYieldsLockedRedemptionRecordResponse;
import com.binance.connector.client.staking.rest.model.GetOnChainYieldsLockedRewardsHistoryResponse;
import com.binance.connector.client.staking.rest.model.GetOnChainYieldsLockedSubscriptionPreviewResponse;
import com.binance.connector.client.staking.rest.model.GetOnChainYieldsLockedSubscriptionRecordResponse;
import com.binance.connector.client.staking.rest.model.OnChainYieldsAccountResponse;
import com.binance.connector.client.staking.rest.model.RedeemOnChainYieldsLockedProductRequest;
import com.binance.connector.client.staking.rest.model.RedeemOnChainYieldsLockedProductResponse;
import com.binance.connector.client.staking.rest.model.SetOnChainYieldsLockedAutoSubscribeRequest;
import com.binance.connector.client.staking.rest.model.SetOnChainYieldsLockedAutoSubscribeResponse;
import com.binance.connector.client.staking.rest.model.SetOnChainYieldsLockedProductRedeemOptionRequest;
import com.binance.connector.client.staking.rest.model.SetOnChainYieldsLockedProductRedeemOptionResponse;
import com.binance.connector.client.staking.rest.model.SubscribeOnChainYieldsLockedProductRequest;
import com.binance.connector.client.staking.rest.model.SubscribeOnChainYieldsLockedProductResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class OnChainYieldsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-staking/4.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public OnChainYieldsApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public OnChainYieldsApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getOnChainYieldsLockedPersonalLeftQuota
     *
     * @param projectId (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Personal Left Quota </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/account/Get-Onchain-Locked-Personal-Left-Quota">Get
     *     On-chain Yields Locked Personal Left Quota (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getOnChainYieldsLockedPersonalLeftQuotaCall(
            String projectId, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/personalLeftQuota";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnChainYieldsLockedPersonalLeftQuotaValidateBeforeCall(
            String projectId, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {projectId, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getOnChainYieldsLockedPersonalLeftQuota",
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getOnChainYieldsLockedPersonalLeftQuotaCall(projectId, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get On-chain Yields Locked Personal Left Quota (USER_DATA) Get On-chain Yields Locked
     * Personal Left Quota Weight: 50
     *
     * @param projectId (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetOnChainYieldsLockedPersonalLeftQuotaResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Personal Left Quota </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/account/Get-Onchain-Locked-Personal-Left-Quota">Get
     *     On-chain Yields Locked Personal Left Quota (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetOnChainYieldsLockedPersonalLeftQuotaResponse>
            getOnChainYieldsLockedPersonalLeftQuota(@NotNull String projectId, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getOnChainYieldsLockedPersonalLeftQuotaValidateBeforeCall(projectId, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetOnChainYieldsLockedPersonalLeftQuotaResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getOnChainYieldsLockedProductList
     *
     * @param asset (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Product List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/staking/on-chain-yields/account/">Get
     *     On-chain Yields Locked Product List (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getOnChainYieldsLockedProductListCall(
            String asset, Long current, Long size, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnChainYieldsLockedProductListValidateBeforeCall(
            String asset, Long current, Long size, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {asset, current, size, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getOnChainYieldsLockedProductList",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getOnChainYieldsLockedProductListCall(asset, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get On-chain Yields Locked Product List (USER_DATA) Get available On-chain Yields Locked
     * product list * Get available On-chain Yields Locked product list Weight: 50
     *
     * @param asset (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetOnChainYieldsLockedProductListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Product List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/staking/on-chain-yields/account/">Get
     *     On-chain Yields Locked Product List (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetOnChainYieldsLockedProductListResponse> getOnChainYieldsLockedProductList(
            String asset, Long current, Long size, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                getOnChainYieldsLockedProductListValidateBeforeCall(
                        asset, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetOnChainYieldsLockedProductListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getOnChainYieldsLockedProductPosition
     *
     * @param asset (optional)
     * @param positionId (optional)
     * @param projectId (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Product Position </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/account/Get-Onchain-Locked-Product-Position">Get
     *     On-chain Yields Locked Product Position (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getOnChainYieldsLockedProductPositionCall(
            String asset,
            String positionId,
            String projectId,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/position";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (positionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positionId", positionId));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnChainYieldsLockedProductPositionValidateBeforeCall(
            String asset,
            String positionId,
            String projectId,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {asset, positionId, projectId, current, size, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getOnChainYieldsLockedProductPosition",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getOnChainYieldsLockedProductPositionCall(
                        asset, positionId, projectId, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get On-chain Yields Locked Product Position (USER_DATA) Get On-chain Yields Locked Product
     * Position Weight: 50
     *
     * @param asset (optional)
     * @param positionId (optional)
     * @param projectId (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetOnChainYieldsLockedProductPositionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Product Position </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/account/Get-Onchain-Locked-Product-Position">Get
     *     On-chain Yields Locked Product Position (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetOnChainYieldsLockedProductPositionResponse>
            getOnChainYieldsLockedProductPosition(
                    String asset,
                    String positionId,
                    String projectId,
                    Long current,
                    Long size,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getOnChainYieldsLockedProductPositionValidateBeforeCall(
                        asset, positionId, projectId, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetOnChainYieldsLockedProductPositionResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getOnChainYieldsLockedRedemptionRecord
     *
     * @param positionId (optional)
     * @param redeemId (optional)
     * @param asset (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Redemption Record </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/history/Get-Onchain-Locked-Redemption-Record">Get
     *     On-chain Yields Locked Redemption Record (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getOnChainYieldsLockedRedemptionRecordCall(
            String positionId,
            String redeemId,
            String asset,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/history/redemptionRecord";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (positionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positionId", positionId));
        }

        if (redeemId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redeemId", redeemId));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnChainYieldsLockedRedemptionRecordValidateBeforeCall(
            String positionId,
            String redeemId,
            String asset,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                positionId, redeemId, asset, startTime, endTime, current, size, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getOnChainYieldsLockedRedemptionRecord",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getOnChainYieldsLockedRedemptionRecordCall(
                        positionId, redeemId, asset, startTime, endTime, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get On-chain Yields Locked Redemption Record (USER_DATA) Get On-chain Yields Locked
     * Redemption Record * The time between &#x60;startTime&#x60; and &#x60;endTime&#x60; cannot be
     * longer than 3 months. * If &#x60;startTime&#x60; and &#x60;endTime&#x60; are both not sent,
     * then the last 30 days&#39; data will be returned. * If &#x60;startTime&#x60; is sent but
     * &#x60;endTime&#x60; is not sent, the next 30 days&#39; data beginning from
     * &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 50
     *
     * @param positionId (optional)
     * @param redeemId (optional)
     * @param asset (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetOnChainYieldsLockedRedemptionRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Redemption Record </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/history/Get-Onchain-Locked-Redemption-Record">Get
     *     On-chain Yields Locked Redemption Record (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetOnChainYieldsLockedRedemptionRecordResponse>
            getOnChainYieldsLockedRedemptionRecord(
                    String positionId,
                    String redeemId,
                    String asset,
                    Long startTime,
                    Long endTime,
                    Long current,
                    Long size,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getOnChainYieldsLockedRedemptionRecordValidateBeforeCall(
                        positionId, redeemId, asset, startTime, endTime, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetOnChainYieldsLockedRedemptionRecordResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getOnChainYieldsLockedRewardsHistory
     *
     * @param positionId (optional)
     * @param asset (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Rewards History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/history/Get-Onchain-Locked-Rewards-History">Get
     *     On-chain Yields Locked Rewards History (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getOnChainYieldsLockedRewardsHistoryCall(
            String positionId,
            String asset,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/history/rewardsRecord";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (positionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positionId", positionId));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnChainYieldsLockedRewardsHistoryValidateBeforeCall(
            String positionId,
            String asset,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                positionId, asset, startTime, endTime, current, size, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getOnChainYieldsLockedRewardsHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getOnChainYieldsLockedRewardsHistoryCall(
                        positionId, asset, startTime, endTime, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get On-chain Yields Locked Rewards History (USER_DATA) Get On-chain Yields Locked Rewards
     * History * The time between &#x60;startTime&#x60; and &#x60;endTime&#x60; cannot be longer
     * than 3 months. * If &#x60;startTime&#x60; and &#x60;endTime&#x60; are both not sent, then the
     * last 30 days&#39; data will be returned. * If &#x60;startTime&#x60; is sent but
     * &#x60;endTime&#x60; is not sent, the next 30 days&#39; data beginning from
     * &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 50
     *
     * @param positionId (optional)
     * @param asset (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetOnChainYieldsLockedRewardsHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Rewards History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/history/Get-Onchain-Locked-Rewards-History">Get
     *     On-chain Yields Locked Rewards History (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetOnChainYieldsLockedRewardsHistoryResponse>
            getOnChainYieldsLockedRewardsHistory(
                    String positionId,
                    String asset,
                    Long startTime,
                    Long endTime,
                    Long current,
                    Long size,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getOnChainYieldsLockedRewardsHistoryValidateBeforeCall(
                        positionId, asset, startTime, endTime, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetOnChainYieldsLockedRewardsHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getOnChainYieldsLockedSubscriptionPreview
     *
     * @param projectId (required)
     * @param amount (required)
     * @param autoSubscribe true or false, default true. (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Subscription Preview </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/staking/on-chain-yields/earn/">Get On-chain
     *     Yields Locked Subscription Preview (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getOnChainYieldsLockedSubscriptionPreviewCall(
            String projectId, Double amount, Boolean autoSubscribe, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/subscriptionPreview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (amount != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "amount", DecimalFormatter.getFormatter().format(amount)));
        }

        if (autoSubscribe != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("autoSubscribe", autoSubscribe));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnChainYieldsLockedSubscriptionPreviewValidateBeforeCall(
            String projectId, Double amount, Boolean autoSubscribe, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {projectId, amount, autoSubscribe, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getOnChainYieldsLockedSubscriptionPreview",
                                    String.class,
                                    Double.class,
                                    Boolean.class,
                                    Long.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getOnChainYieldsLockedSubscriptionPreviewCall(
                        projectId, amount, autoSubscribe, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get On-chain Yields Locked Subscription Preview (USER_DATA) Get On-chain Yields Locked
     * Subscription Preview Weight: 50
     *
     * @param projectId (required)
     * @param amount (required)
     * @param autoSubscribe true or false, default true. (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetOnChainYieldsLockedSubscriptionPreviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Subscription Preview </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/staking/on-chain-yields/earn/">Get On-chain
     *     Yields Locked Subscription Preview (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetOnChainYieldsLockedSubscriptionPreviewResponse>
            getOnChainYieldsLockedSubscriptionPreview(
                    @NotNull String projectId,
                    @NotNull Double amount,
                    Boolean autoSubscribe,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getOnChainYieldsLockedSubscriptionPreviewValidateBeforeCall(
                        projectId, amount, autoSubscribe, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetOnChainYieldsLockedSubscriptionPreviewResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getOnChainYieldsLockedSubscriptionRecord
     *
     * @param purchaseId (optional)
     * @param clientId (optional)
     * @param asset (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Subscription Record </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/staking/on-chain-yields/history/">Get
     *     On-chain Yields Locked Subscription Record (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getOnChainYieldsLockedSubscriptionRecordCall(
            String purchaseId,
            String clientId,
            String asset,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/history/subscriptionRecord";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (purchaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purchaseId", purchaseId));
        }

        if (clientId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientId", clientId));
        }

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOnChainYieldsLockedSubscriptionRecordValidateBeforeCall(
            String purchaseId,
            String clientId,
            String asset,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                purchaseId, clientId, asset, startTime, endTime, current, size, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getOnChainYieldsLockedSubscriptionRecord",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getOnChainYieldsLockedSubscriptionRecordCall(
                        purchaseId, clientId, asset, startTime, endTime, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get On-chain Yields Locked Subscription Record (USER_DATA) Get On-chain Yields Locked
     * Subscription Record * The time between &#x60;startTime&#x60; and &#x60;endTime&#x60; cannot
     * be longer than 3 months. * If &#x60;startTime&#x60; and &#x60;endTime&#x60; are both not
     * sent, then the last 30 days&#39; data will be returned. * If &#x60;startTime&#x60; is sent
     * but &#x60;endTime&#x60; is not sent, the next 30 days&#39; data beginning from
     * &#x60;startTime&#x60; will be returned. * If &#x60;endTime&#x60; is sent but
     * &#x60;startTime&#x60; is not sent, the 30 days&#39; data before &#x60;endTime&#x60; will be
     * returned. Weight: 50
     *
     * @param purchaseId (optional)
     * @param clientId (optional)
     * @param asset (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10, Max:100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetOnChainYieldsLockedSubscriptionRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get On-chain Yields Locked Subscription Record </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a href="https://developers.binance.com/docs/staking/on-chain-yields/history/">Get
     *     On-chain Yields Locked Subscription Record (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetOnChainYieldsLockedSubscriptionRecordResponse>
            getOnChainYieldsLockedSubscriptionRecord(
                    String purchaseId,
                    String clientId,
                    String asset,
                    Long startTime,
                    Long endTime,
                    Long current,
                    Long size,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getOnChainYieldsLockedSubscriptionRecordValidateBeforeCall(
                        purchaseId, clientId, asset, startTime, endTime, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetOnChainYieldsLockedSubscriptionRecordResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for onChainYieldsAccount
     *
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> On-chain Yields Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/account/Onchain-Account">On-chain
     *     Yields Account (USER_DATA) Documentation</a>
     */
    private okhttp3.Call onChainYieldsAccountCall(Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onChainYieldsAccountValidateBeforeCall(Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method = this.getClass().getMethod("onChainYieldsAccount", Long.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return onChainYieldsAccountCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * On-chain Yields Account (USER_DATA) On-chain Yields Account query Weight: 50
     *
     * @param recvWindow (optional)
     * @return ApiResponse&lt;OnChainYieldsAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> On-chain Yields Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/account/Onchain-Account">On-chain
     *     Yields Account (USER_DATA) Documentation</a>
     */
    public ApiResponse<OnChainYieldsAccountResponse> onChainYieldsAccount(Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall = onChainYieldsAccountValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<OnChainYieldsAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for redeemOnChainYieldsLockedProduct
     *
     * @param redeemOnChainYieldsLockedProductRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem On-chain Yields Locked Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/earn/Redeem-Onchain-Locked-Product">Redeem
     *     On-chain Yields Locked Product (TRADE) Documentation</a>
     */
    private okhttp3.Call redeemOnChainYieldsLockedProductCall(
            RedeemOnChainYieldsLockedProductRequest redeemOnChainYieldsLockedProductRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/redeem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redeemOnChainYieldsLockedProductRequest.getPositionId() != null) {
            localVarFormParams.put(
                    "positionId", redeemOnChainYieldsLockedProductRequest.getPositionId());
        }

        if (redeemOnChainYieldsLockedProductRequest.getChannelId() != null) {
            localVarFormParams.put(
                    "channelId", redeemOnChainYieldsLockedProductRequest.getChannelId());
        }

        if (redeemOnChainYieldsLockedProductRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", redeemOnChainYieldsLockedProductRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redeemOnChainYieldsLockedProductValidateBeforeCall(
            RedeemOnChainYieldsLockedProductRequest redeemOnChainYieldsLockedProductRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {redeemOnChainYieldsLockedProductRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "redeemOnChainYieldsLockedProduct",
                                    RedeemOnChainYieldsLockedProductRequest.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return redeemOnChainYieldsLockedProductCall(
                        redeemOnChainYieldsLockedProductRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Redeem On-chain Yields Locked Product (TRADE) Redeem On-chain Yields Locked Product * You
     * need to open &#x60;Enable Spot &amp; Margin Trading&#x60; permission for the API Key which
     * requests this endpoint. Weight: 1/3s per account
     *
     * @param redeemOnChainYieldsLockedProductRequest (required)
     * @return ApiResponse&lt;RedeemOnChainYieldsLockedProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Redeem On-chain Yields Locked Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/earn/Redeem-Onchain-Locked-Product">Redeem
     *     On-chain Yields Locked Product (TRADE) Documentation</a>
     */
    public ApiResponse<RedeemOnChainYieldsLockedProductResponse> redeemOnChainYieldsLockedProduct(
            @Valid @NotNull
                    RedeemOnChainYieldsLockedProductRequest redeemOnChainYieldsLockedProductRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                redeemOnChainYieldsLockedProductValidateBeforeCall(
                        redeemOnChainYieldsLockedProductRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<RedeemOnChainYieldsLockedProductResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for setOnChainYieldsLockedAutoSubscribe
     *
     * @param setOnChainYieldsLockedAutoSubscribeRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set On-chain Yields Locked Auto Subscribe </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/earn/Set-Onchain-Locked-Auto-Subscribe">Set
     *     On-chain Yields Locked Auto Subscribe(USER_DATA) Documentation</a>
     */
    private okhttp3.Call setOnChainYieldsLockedAutoSubscribeCall(
            SetOnChainYieldsLockedAutoSubscribeRequest setOnChainYieldsLockedAutoSubscribeRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/setAutoSubscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (setOnChainYieldsLockedAutoSubscribeRequest.getPositionId() != null) {
            localVarFormParams.put(
                    "positionId", setOnChainYieldsLockedAutoSubscribeRequest.getPositionId());
        }

        if (setOnChainYieldsLockedAutoSubscribeRequest.getAutoSubscribe() != null) {
            localVarFormParams.put(
                    "autoSubscribe", setOnChainYieldsLockedAutoSubscribeRequest.getAutoSubscribe());
        }

        if (setOnChainYieldsLockedAutoSubscribeRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", setOnChainYieldsLockedAutoSubscribeRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOnChainYieldsLockedAutoSubscribeValidateBeforeCall(
            SetOnChainYieldsLockedAutoSubscribeRequest setOnChainYieldsLockedAutoSubscribeRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {setOnChainYieldsLockedAutoSubscribeRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "setOnChainYieldsLockedAutoSubscribe",
                                    SetOnChainYieldsLockedAutoSubscribeRequest.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return setOnChainYieldsLockedAutoSubscribeCall(
                        setOnChainYieldsLockedAutoSubscribeRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Set On-chain Yields Locked Auto Subscribe(USER_DATA) Set On-chain Yield locked auto subscribe
     * Weight: 50
     *
     * @param setOnChainYieldsLockedAutoSubscribeRequest (required)
     * @return ApiResponse&lt;SetOnChainYieldsLockedAutoSubscribeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set On-chain Yields Locked Auto Subscribe </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/earn/Set-Onchain-Locked-Auto-Subscribe">Set
     *     On-chain Yields Locked Auto Subscribe(USER_DATA) Documentation</a>
     */
    public ApiResponse<SetOnChainYieldsLockedAutoSubscribeResponse>
            setOnChainYieldsLockedAutoSubscribe(
                    @Valid @NotNull
                            SetOnChainYieldsLockedAutoSubscribeRequest
                                    setOnChainYieldsLockedAutoSubscribeRequest)
                    throws ApiException {
        okhttp3.Call localVarCall =
                setOnChainYieldsLockedAutoSubscribeValidateBeforeCall(
                        setOnChainYieldsLockedAutoSubscribeRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SetOnChainYieldsLockedAutoSubscribeResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for setOnChainYieldsLockedProductRedeemOption
     *
     * @param setOnChainYieldsLockedProductRedeemOptionRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set On-chain Yields Locked Product Redeem Option </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/earn/Set-Onchain-Locked-Redeem-Option">Set
     *     On-chain Yields Locked Product Redeem Option(USER_DATA) Documentation</a>
     */
    private okhttp3.Call setOnChainYieldsLockedProductRedeemOptionCall(
            SetOnChainYieldsLockedProductRedeemOptionRequest
                    setOnChainYieldsLockedProductRedeemOptionRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/setRedeemOption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (setOnChainYieldsLockedProductRedeemOptionRequest.getPositionId() != null) {
            localVarFormParams.put(
                    "positionId", setOnChainYieldsLockedProductRedeemOptionRequest.getPositionId());
        }

        if (setOnChainYieldsLockedProductRedeemOptionRequest.getRedeemTo() != null) {
            localVarFormParams.put(
                    "redeemTo", setOnChainYieldsLockedProductRedeemOptionRequest.getRedeemTo());
        }

        if (setOnChainYieldsLockedProductRedeemOptionRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", setOnChainYieldsLockedProductRedeemOptionRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setOnChainYieldsLockedProductRedeemOptionValidateBeforeCall(
            SetOnChainYieldsLockedProductRedeemOptionRequest
                    setOnChainYieldsLockedProductRedeemOptionRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {setOnChainYieldsLockedProductRedeemOptionRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "setOnChainYieldsLockedProductRedeemOption",
                                    SetOnChainYieldsLockedProductRedeemOptionRequest.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return setOnChainYieldsLockedProductRedeemOptionCall(
                        setOnChainYieldsLockedProductRedeemOptionRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Set On-chain Yields Locked Product Redeem Option(USER_DATA) Set On-chain Yields redeem option
     * for Locked product Weight: 50
     *
     * @param setOnChainYieldsLockedProductRedeemOptionRequest (required)
     * @return ApiResponse&lt;SetOnChainYieldsLockedProductRedeemOptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set On-chain Yields Locked Product Redeem Option </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/earn/Set-Onchain-Locked-Redeem-Option">Set
     *     On-chain Yields Locked Product Redeem Option(USER_DATA) Documentation</a>
     */
    public ApiResponse<SetOnChainYieldsLockedProductRedeemOptionResponse>
            setOnChainYieldsLockedProductRedeemOption(
                    @Valid @NotNull
                            SetOnChainYieldsLockedProductRedeemOptionRequest
                                    setOnChainYieldsLockedProductRedeemOptionRequest)
                    throws ApiException {
        okhttp3.Call localVarCall =
                setOnChainYieldsLockedProductRedeemOptionValidateBeforeCall(
                        setOnChainYieldsLockedProductRedeemOptionRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SetOnChainYieldsLockedProductRedeemOptionResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for subscribeOnChainYieldsLockedProduct
     *
     * @param subscribeOnChainYieldsLockedProductRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe On-chain Yields Locked Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/earn/Subscribe-Onchain-Locked-Product">Subscribe
     *     On-chain Yields Locked Product(TRADE) Documentation</a>
     */
    private okhttp3.Call subscribeOnChainYieldsLockedProductCall(
            SubscribeOnChainYieldsLockedProductRequest subscribeOnChainYieldsLockedProductRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/onchain-yields/locked/subscribe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscribeOnChainYieldsLockedProductRequest.getProjectId() != null) {
            localVarFormParams.put(
                    "projectId", subscribeOnChainYieldsLockedProductRequest.getProjectId());
        }

        if (subscribeOnChainYieldsLockedProductRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(subscribeOnChainYieldsLockedProductRequest.getAmount()));
        }

        if (subscribeOnChainYieldsLockedProductRequest.getAutoSubscribe() != null) {
            localVarFormParams.put(
                    "autoSubscribe", subscribeOnChainYieldsLockedProductRequest.getAutoSubscribe());
        }

        if (subscribeOnChainYieldsLockedProductRequest.getSourceAccount() != null) {
            localVarFormParams.put(
                    "sourceAccount", subscribeOnChainYieldsLockedProductRequest.getSourceAccount());
        }

        if (subscribeOnChainYieldsLockedProductRequest.getRedeemTo() != null) {
            localVarFormParams.put(
                    "redeemTo", subscribeOnChainYieldsLockedProductRequest.getRedeemTo());
        }

        if (subscribeOnChainYieldsLockedProductRequest.getChannelId() != null) {
            localVarFormParams.put(
                    "channelId", subscribeOnChainYieldsLockedProductRequest.getChannelId());
        }

        if (subscribeOnChainYieldsLockedProductRequest.getClientId() != null) {
            localVarFormParams.put(
                    "clientId", subscribeOnChainYieldsLockedProductRequest.getClientId());
        }

        if (subscribeOnChainYieldsLockedProductRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", subscribeOnChainYieldsLockedProductRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (!localVarFormParams.isEmpty() && localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        Set<String> localVarAuthNames = new HashSet<>();
        localVarAuthNames.add("binanceSignature");
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscribeOnChainYieldsLockedProductValidateBeforeCall(
            SubscribeOnChainYieldsLockedProductRequest subscribeOnChainYieldsLockedProductRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {subscribeOnChainYieldsLockedProductRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "subscribeOnChainYieldsLockedProduct",
                                    SubscribeOnChainYieldsLockedProductRequest.class);
            Set<ConstraintViolation<OnChainYieldsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return subscribeOnChainYieldsLockedProductCall(
                        subscribeOnChainYieldsLockedProductRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Subscribe On-chain Yields Locked Product(TRADE) Subscribe On-chain Yields Locked Product *
     * You need to open &#x60;Enable Spot &amp; Margin Trading&#x60; permission for the API Key
     * which requests this endpoint. Weight: 200
     *
     * @param subscribeOnChainYieldsLockedProductRequest (required)
     * @return ApiResponse&lt;SubscribeOnChainYieldsLockedProductResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Subscribe On-chain Yields Locked Product </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/staking/on-chain-yields/earn/Subscribe-Onchain-Locked-Product">Subscribe
     *     On-chain Yields Locked Product(TRADE) Documentation</a>
     */
    public ApiResponse<SubscribeOnChainYieldsLockedProductResponse>
            subscribeOnChainYieldsLockedProduct(
                    @Valid @NotNull
                            SubscribeOnChainYieldsLockedProductRequest
                                    subscribeOnChainYieldsLockedProductRequest)
                    throws ApiException {
        okhttp3.Call localVarCall =
                subscribeOnChainYieldsLockedProductValidateBeforeCall(
                        subscribeOnChainYieldsLockedProductRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SubscribeOnChainYieldsLockedProductResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
