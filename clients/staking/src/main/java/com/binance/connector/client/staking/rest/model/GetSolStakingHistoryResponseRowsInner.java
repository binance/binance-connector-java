/*
 * Binance Staking REST API
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.staking.rest.model;

import com.binance.connector.client.staking.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetSolStakingHistoryResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetSolStakingHistoryResponseRowsInner {
    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_DISTRIBUTE_ASSET = "distributeAsset";

    @SerializedName(SERIALIZED_NAME_DISTRIBUTE_ASSET)
    @jakarta.annotation.Nullable
    private String distributeAsset;

    public static final String SERIALIZED_NAME_DISTRIBUTE_AMOUNT = "distributeAmount";

    @SerializedName(SERIALIZED_NAME_DISTRIBUTE_AMOUNT)
    @jakarta.annotation.Nullable
    private String distributeAmount;

    public static final String SERIALIZED_NAME_EXCHANGE_RATE = "exchangeRate";

    @SerializedName(SERIALIZED_NAME_EXCHANGE_RATE)
    @jakarta.annotation.Nullable
    private String exchangeRate;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public GetSolStakingHistoryResponseRowsInner() {}

    public GetSolStakingHistoryResponseRowsInner time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public GetSolStakingHistoryResponseRowsInner asset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public GetSolStakingHistoryResponseRowsInner amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public GetSolStakingHistoryResponseRowsInner distributeAsset(
            @jakarta.annotation.Nullable String distributeAsset) {
        this.distributeAsset = distributeAsset;
        return this;
    }

    /**
     * Get distributeAsset
     *
     * @return distributeAsset
     */
    @jakarta.annotation.Nullable
    public String getDistributeAsset() {
        return distributeAsset;
    }

    public void setDistributeAsset(@jakarta.annotation.Nullable String distributeAsset) {
        this.distributeAsset = distributeAsset;
    }

    public GetSolStakingHistoryResponseRowsInner distributeAmount(
            @jakarta.annotation.Nullable String distributeAmount) {
        this.distributeAmount = distributeAmount;
        return this;
    }

    /**
     * Get distributeAmount
     *
     * @return distributeAmount
     */
    @jakarta.annotation.Nullable
    public String getDistributeAmount() {
        return distributeAmount;
    }

    public void setDistributeAmount(@jakarta.annotation.Nullable String distributeAmount) {
        this.distributeAmount = distributeAmount;
    }

    public GetSolStakingHistoryResponseRowsInner exchangeRate(
            @jakarta.annotation.Nullable String exchangeRate) {
        this.exchangeRate = exchangeRate;
        return this;
    }

    /**
     * Get exchangeRate
     *
     * @return exchangeRate
     */
    @jakarta.annotation.Nullable
    public String getExchangeRate() {
        return exchangeRate;
    }

    public void setExchangeRate(@jakarta.annotation.Nullable String exchangeRate) {
        this.exchangeRate = exchangeRate;
    }

    public GetSolStakingHistoryResponseRowsInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSolStakingHistoryResponseRowsInner getSolStakingHistoryResponseRowsInner =
                (GetSolStakingHistoryResponseRowsInner) o;
        return Objects.equals(this.time, getSolStakingHistoryResponseRowsInner.time)
                && Objects.equals(this.asset, getSolStakingHistoryResponseRowsInner.asset)
                && Objects.equals(this.amount, getSolStakingHistoryResponseRowsInner.amount)
                && Objects.equals(
                        this.distributeAsset, getSolStakingHistoryResponseRowsInner.distributeAsset)
                && Objects.equals(
                        this.distributeAmount,
                        getSolStakingHistoryResponseRowsInner.distributeAmount)
                && Objects.equals(
                        this.exchangeRate, getSolStakingHistoryResponseRowsInner.exchangeRate)
                && Objects.equals(this.status, getSolStakingHistoryResponseRowsInner.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                time, asset, amount, distributeAsset, distributeAmount, exchangeRate, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetSolStakingHistoryResponseRowsInner {\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		distributeAsset: ").append(toIndentedString(distributeAsset)).append("\n");
        sb.append("		distributeAmount: ").append(toIndentedString(distributeAmount)).append("\n");
        sb.append("		exchangeRate: ").append(toIndentedString(exchangeRate)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object distributeAssetValue = getDistributeAsset();
        String distributeAssetValueAsString = "";
        distributeAssetValueAsString = distributeAssetValue.toString();
        sb.append("distributeAsset=").append(urlEncode(distributeAssetValueAsString)).append("");
        Object distributeAmountValue = getDistributeAmount();
        String distributeAmountValueAsString = "";
        distributeAmountValueAsString = distributeAmountValue.toString();
        sb.append("distributeAmount=").append(urlEncode(distributeAmountValueAsString)).append("");
        Object exchangeRateValue = getExchangeRate();
        String exchangeRateValueAsString = "";
        exchangeRateValueAsString = exchangeRateValue.toString();
        sb.append("exchangeRate=").append(urlEncode(exchangeRateValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("time");
        openapiFields.add("asset");
        openapiFields.add("amount");
        openapiFields.add("distributeAsset");
        openapiFields.add("distributeAmount");
        openapiFields.add("exchangeRate");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetSolStakingHistoryResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetSolStakingHistoryResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetSolStakingHistoryResponseRowsInner"
                                        + " is not found in the empty JSON string",
                                GetSolStakingHistoryResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetSolStakingHistoryResponseRowsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetSolStakingHistoryResponseRowsInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("distributeAsset") != null && !jsonObj.get("distributeAsset").isJsonNull())
                && !jsonObj.get("distributeAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `distributeAsset` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("distributeAsset").toString()));
        }
        if ((jsonObj.get("distributeAmount") != null
                        && !jsonObj.get("distributeAmount").isJsonNull())
                && !jsonObj.get("distributeAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `distributeAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("distributeAmount").toString()));
        }
        if ((jsonObj.get("exchangeRate") != null && !jsonObj.get("exchangeRate").isJsonNull())
                && !jsonObj.get("exchangeRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `exchangeRate` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("exchangeRate").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetSolStakingHistoryResponseRowsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetSolStakingHistoryResponseRowsInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetSolStakingHistoryResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetSolStakingHistoryResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetSolStakingHistoryResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetSolStakingHistoryResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetSolStakingHistoryResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetSolStakingHistoryResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetSolStakingHistoryResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetSolStakingHistoryResponseRowsInner
     */
    public static GetSolStakingHistoryResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetSolStakingHistoryResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetSolStakingHistoryResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
