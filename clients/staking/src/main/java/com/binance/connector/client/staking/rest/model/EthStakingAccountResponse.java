/*
 * Binance Staking REST API
 * OpenAPI Specification for the Binance Staking REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.staking.rest.model;

import com.binance.connector.client.staking.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** EthStakingAccountResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class EthStakingAccountResponse {
    public static final String SERIALIZED_NAME_HOLDING_IN_E_T_H = "holdingInETH";

    @SerializedName(SERIALIZED_NAME_HOLDING_IN_E_T_H)
    @jakarta.annotation.Nullable
    private String holdingInETH;

    public static final String SERIALIZED_NAME_HOLDINGS = "holdings";

    @SerializedName(SERIALIZED_NAME_HOLDINGS)
    @jakarta.annotation.Nullable
    private EthStakingAccountResponseHoldings holdings;

    public static final String SERIALIZED_NAME_THIRTY_DAYS_PROFIT_IN_E_T_H =
            "thirtyDaysProfitInETH";

    @SerializedName(SERIALIZED_NAME_THIRTY_DAYS_PROFIT_IN_E_T_H)
    @jakarta.annotation.Nullable
    private String thirtyDaysProfitInETH;

    public static final String SERIALIZED_NAME_PROFIT = "profit";

    @SerializedName(SERIALIZED_NAME_PROFIT)
    @jakarta.annotation.Nullable
    private EthStakingAccountResponseProfit profit;

    public EthStakingAccountResponse() {}

    public EthStakingAccountResponse holdingInETH(
            @jakarta.annotation.Nullable String holdingInETH) {
        this.holdingInETH = holdingInETH;
        return this;
    }

    /**
     * Get holdingInETH
     *
     * @return holdingInETH
     */
    @jakarta.annotation.Nullable
    public String getHoldingInETH() {
        return holdingInETH;
    }

    public void setHoldingInETH(@jakarta.annotation.Nullable String holdingInETH) {
        this.holdingInETH = holdingInETH;
    }

    public EthStakingAccountResponse holdings(
            @jakarta.annotation.Nullable EthStakingAccountResponseHoldings holdings) {
        this.holdings = holdings;
        return this;
    }

    /**
     * Get holdings
     *
     * @return holdings
     */
    @jakarta.annotation.Nullable
    @Valid
    public EthStakingAccountResponseHoldings getHoldings() {
        return holdings;
    }

    public void setHoldings(
            @jakarta.annotation.Nullable EthStakingAccountResponseHoldings holdings) {
        this.holdings = holdings;
    }

    public EthStakingAccountResponse thirtyDaysProfitInETH(
            @jakarta.annotation.Nullable String thirtyDaysProfitInETH) {
        this.thirtyDaysProfitInETH = thirtyDaysProfitInETH;
        return this;
    }

    /**
     * Get thirtyDaysProfitInETH
     *
     * @return thirtyDaysProfitInETH
     */
    @jakarta.annotation.Nullable
    public String getThirtyDaysProfitInETH() {
        return thirtyDaysProfitInETH;
    }

    public void setThirtyDaysProfitInETH(
            @jakarta.annotation.Nullable String thirtyDaysProfitInETH) {
        this.thirtyDaysProfitInETH = thirtyDaysProfitInETH;
    }

    public EthStakingAccountResponse profit(
            @jakarta.annotation.Nullable EthStakingAccountResponseProfit profit) {
        this.profit = profit;
        return this;
    }

    /**
     * Get profit
     *
     * @return profit
     */
    @jakarta.annotation.Nullable
    @Valid
    public EthStakingAccountResponseProfit getProfit() {
        return profit;
    }

    public void setProfit(@jakarta.annotation.Nullable EthStakingAccountResponseProfit profit) {
        this.profit = profit;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EthStakingAccountResponse ethStakingAccountResponse = (EthStakingAccountResponse) o;
        return Objects.equals(this.holdingInETH, ethStakingAccountResponse.holdingInETH)
                && Objects.equals(this.holdings, ethStakingAccountResponse.holdings)
                && Objects.equals(
                        this.thirtyDaysProfitInETH, ethStakingAccountResponse.thirtyDaysProfitInETH)
                && Objects.equals(this.profit, ethStakingAccountResponse.profit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(holdingInETH, holdings, thirtyDaysProfitInETH, profit);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EthStakingAccountResponse {\n");
        sb.append("		holdingInETH: ").append(toIndentedString(holdingInETH)).append("\n");
        sb.append("		holdings: ").append(toIndentedString(holdings)).append("\n");
        sb.append("		thirtyDaysProfitInETH: ")
                .append(toIndentedString(thirtyDaysProfitInETH))
                .append("\n");
        sb.append("		profit: ").append(toIndentedString(profit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object holdingInETHValue = getHoldingInETH();
        String holdingInETHValueAsString = "";
        holdingInETHValueAsString = holdingInETHValue.toString();
        sb.append("holdingInETH=").append(urlEncode(holdingInETHValueAsString)).append("");
        Object holdingsValue = getHoldings();
        String holdingsValueAsString = "";
        holdingsValueAsString = holdingsValue.toString();
        sb.append("holdings=").append(urlEncode(holdingsValueAsString)).append("");
        Object thirtyDaysProfitInETHValue = getThirtyDaysProfitInETH();
        String thirtyDaysProfitInETHValueAsString = "";
        thirtyDaysProfitInETHValueAsString = thirtyDaysProfitInETHValue.toString();
        sb.append("thirtyDaysProfitInETH=")
                .append(urlEncode(thirtyDaysProfitInETHValueAsString))
                .append("");
        Object profitValue = getProfit();
        String profitValueAsString = "";
        profitValueAsString = profitValue.toString();
        sb.append("profit=").append(urlEncode(profitValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("holdingInETH");
        openapiFields.add("holdings");
        openapiFields.add("thirtyDaysProfitInETH");
        openapiFields.add("profit");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to EthStakingAccountResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!EthStakingAccountResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in EthStakingAccountResponse is not found"
                                        + " in the empty JSON string",
                                EthStakingAccountResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!EthStakingAccountResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `EthStakingAccountResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("holdingInETH") != null && !jsonObj.get("holdingInETH").isJsonNull())
                && !jsonObj.get("holdingInETH").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `holdingInETH` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("holdingInETH").toString()));
        }
        // validate the optional field `holdings`
        if (jsonObj.get("holdings") != null && !jsonObj.get("holdings").isJsonNull()) {
            EthStakingAccountResponseHoldings.validateJsonElement(jsonObj.get("holdings"));
        }
        if ((jsonObj.get("thirtyDaysProfitInETH") != null
                        && !jsonObj.get("thirtyDaysProfitInETH").isJsonNull())
                && !jsonObj.get("thirtyDaysProfitInETH").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `thirtyDaysProfitInETH` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("thirtyDaysProfitInETH").toString()));
        }
        // validate the optional field `profit`
        if (jsonObj.get("profit") != null && !jsonObj.get("profit").isJsonNull()) {
            EthStakingAccountResponseProfit.validateJsonElement(jsonObj.get("profit"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!EthStakingAccountResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'EthStakingAccountResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<EthStakingAccountResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(EthStakingAccountResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<EthStakingAccountResponse>() {
                        @Override
                        public void write(JsonWriter out, EthStakingAccountResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public EthStakingAccountResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of EthStakingAccountResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of EthStakingAccountResponse
     * @throws IOException if the JSON string is invalid with respect to EthStakingAccountResponse
     */
    public static EthStakingAccountResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, EthStakingAccountResponse.class);
    }

    /**
     * Convert an instance of EthStakingAccountResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
