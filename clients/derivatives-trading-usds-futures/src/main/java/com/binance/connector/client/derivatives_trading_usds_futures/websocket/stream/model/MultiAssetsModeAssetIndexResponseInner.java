/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** MultiAssetsModeAssetIndexResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MultiAssetsModeAssetIndexResponseInner extends BaseDTO {
    public static final String SERIALIZED_NAME_E_LOWER_CASE = "e";

    @SerializedName(SERIALIZED_NAME_E_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String eLowerCase;

    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_I_LOWER_CASE = "i";

    @SerializedName(SERIALIZED_NAME_I_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String iLowerCase;

    public static final String SERIALIZED_NAME_B_LOWER_CASE = "b";

    @SerializedName(SERIALIZED_NAME_B_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String bLowerCase;

    public static final String SERIALIZED_NAME_A_LOWER_CASE = "a";

    @SerializedName(SERIALIZED_NAME_A_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String aLowerCase;

    public static final String SERIALIZED_NAME_B = "B";

    @SerializedName(SERIALIZED_NAME_B)
    @jakarta.annotation.Nullable
    private String B;

    public static final String SERIALIZED_NAME_A = "A";

    @SerializedName(SERIALIZED_NAME_A)
    @jakarta.annotation.Nullable
    private String A;

    public static final String SERIALIZED_NAME_Q_LOWER_CASE = "q";

    @SerializedName(SERIALIZED_NAME_Q_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String qLowerCase;

    public static final String SERIALIZED_NAME_G_LOWER_CASE = "g";

    @SerializedName(SERIALIZED_NAME_G_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String gLowerCase;

    public static final String SERIALIZED_NAME_Q = "Q";

    @SerializedName(SERIALIZED_NAME_Q)
    @jakarta.annotation.Nullable
    private String Q;

    public static final String SERIALIZED_NAME_G = "G";

    @SerializedName(SERIALIZED_NAME_G)
    @jakarta.annotation.Nullable
    private String G;

    public MultiAssetsModeAssetIndexResponseInner() {}

    public MultiAssetsModeAssetIndexResponseInner eLowerCase(
            @jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
        return this;
    }

    /**
     * Get eLowerCase
     *
     * @return eLowerCase
     */
    @jakarta.annotation.Nullable
    public String geteLowerCase() {
        return eLowerCase;
    }

    public void seteLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
    }

    public MultiAssetsModeAssetIndexResponseInner E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public MultiAssetsModeAssetIndexResponseInner sLowerCase(
            @jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public MultiAssetsModeAssetIndexResponseInner iLowerCase(
            @jakarta.annotation.Nullable String iLowerCase) {
        this.iLowerCase = iLowerCase;
        return this;
    }

    /**
     * Get iLowerCase
     *
     * @return iLowerCase
     */
    @jakarta.annotation.Nullable
    public String getiLowerCase() {
        return iLowerCase;
    }

    public void setiLowerCase(@jakarta.annotation.Nullable String iLowerCase) {
        this.iLowerCase = iLowerCase;
    }

    public MultiAssetsModeAssetIndexResponseInner bLowerCase(
            @jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
        return this;
    }

    /**
     * Get bLowerCase
     *
     * @return bLowerCase
     */
    @jakarta.annotation.Nullable
    public String getbLowerCase() {
        return bLowerCase;
    }

    public void setbLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
    }

    public MultiAssetsModeAssetIndexResponseInner aLowerCase(
            @jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
        return this;
    }

    /**
     * Get aLowerCase
     *
     * @return aLowerCase
     */
    @jakarta.annotation.Nullable
    public String getaLowerCase() {
        return aLowerCase;
    }

    public void setaLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
    }

    public MultiAssetsModeAssetIndexResponseInner B(@jakarta.annotation.Nullable String B) {
        this.B = B;
        return this;
    }

    /**
     * Get B
     *
     * @return B
     */
    @jakarta.annotation.Nullable
    public String getB() {
        return B;
    }

    public void setB(@jakarta.annotation.Nullable String B) {
        this.B = B;
    }

    public MultiAssetsModeAssetIndexResponseInner A(@jakarta.annotation.Nullable String A) {
        this.A = A;
        return this;
    }

    /**
     * Get A
     *
     * @return A
     */
    @jakarta.annotation.Nullable
    public String getA() {
        return A;
    }

    public void setA(@jakarta.annotation.Nullable String A) {
        this.A = A;
    }

    public MultiAssetsModeAssetIndexResponseInner qLowerCase(
            @jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
        return this;
    }

    /**
     * Get qLowerCase
     *
     * @return qLowerCase
     */
    @jakarta.annotation.Nullable
    public String getqLowerCase() {
        return qLowerCase;
    }

    public void setqLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
    }

    public MultiAssetsModeAssetIndexResponseInner gLowerCase(
            @jakarta.annotation.Nullable String gLowerCase) {
        this.gLowerCase = gLowerCase;
        return this;
    }

    /**
     * Get gLowerCase
     *
     * @return gLowerCase
     */
    @jakarta.annotation.Nullable
    public String getgLowerCase() {
        return gLowerCase;
    }

    public void setgLowerCase(@jakarta.annotation.Nullable String gLowerCase) {
        this.gLowerCase = gLowerCase;
    }

    public MultiAssetsModeAssetIndexResponseInner Q(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
        return this;
    }

    /**
     * Get Q
     *
     * @return Q
     */
    @jakarta.annotation.Nullable
    public String getQ() {
        return Q;
    }

    public void setQ(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
    }

    public MultiAssetsModeAssetIndexResponseInner G(@jakarta.annotation.Nullable String G) {
        this.G = G;
        return this;
    }

    /**
     * Get G
     *
     * @return G
     */
    @jakarta.annotation.Nullable
    public String getG() {
        return G;
    }

    public void setG(@jakarta.annotation.Nullable String G) {
        this.G = G;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MultiAssetsModeAssetIndexResponseInner multiAssetsModeAssetIndexResponseInner =
                (MultiAssetsModeAssetIndexResponseInner) o;
        return Objects.equals(this.eLowerCase, multiAssetsModeAssetIndexResponseInner.eLowerCase)
                && Objects.equals(this.E, multiAssetsModeAssetIndexResponseInner.E)
                && Objects.equals(
                        this.sLowerCase, multiAssetsModeAssetIndexResponseInner.sLowerCase)
                && Objects.equals(
                        this.iLowerCase, multiAssetsModeAssetIndexResponseInner.iLowerCase)
                && Objects.equals(
                        this.bLowerCase, multiAssetsModeAssetIndexResponseInner.bLowerCase)
                && Objects.equals(
                        this.aLowerCase, multiAssetsModeAssetIndexResponseInner.aLowerCase)
                && Objects.equals(this.B, multiAssetsModeAssetIndexResponseInner.B)
                && Objects.equals(this.A, multiAssetsModeAssetIndexResponseInner.A)
                && Objects.equals(
                        this.qLowerCase, multiAssetsModeAssetIndexResponseInner.qLowerCase)
                && Objects.equals(
                        this.gLowerCase, multiAssetsModeAssetIndexResponseInner.gLowerCase)
                && Objects.equals(this.Q, multiAssetsModeAssetIndexResponseInner.Q)
                && Objects.equals(this.G, multiAssetsModeAssetIndexResponseInner.G);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                eLowerCase,
                E,
                sLowerCase,
                iLowerCase,
                bLowerCase,
                aLowerCase,
                B,
                A,
                qLowerCase,
                gLowerCase,
                Q,
                G);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MultiAssetsModeAssetIndexResponseInner {\n");
        sb.append("		eLowerCase: ").append(toIndentedString(eLowerCase)).append("\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		iLowerCase: ").append(toIndentedString(iLowerCase)).append("\n");
        sb.append("		bLowerCase: ").append(toIndentedString(bLowerCase)).append("\n");
        sb.append("		aLowerCase: ").append(toIndentedString(aLowerCase)).append("\n");
        sb.append("		B: ").append(toIndentedString(B)).append("\n");
        sb.append("		A: ").append(toIndentedString(A)).append("\n");
        sb.append("		qLowerCase: ").append(toIndentedString(qLowerCase)).append("\n");
        sb.append("		gLowerCase: ").append(toIndentedString(gLowerCase)).append("\n");
        sb.append("		Q: ").append(toIndentedString(Q)).append("\n");
        sb.append("		G: ").append(toIndentedString(G)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            String eLowerCaseValueAsString = eLowerCaseValue.toString();
            valMap.put("eLowerCase", eLowerCaseValueAsString);
        }
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            String iLowerCaseValueAsString = iLowerCaseValue.toString();
            valMap.put("iLowerCase", iLowerCaseValueAsString);
        }
        String bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            String bLowerCaseValueAsString = bLowerCaseValue.toString();
            valMap.put("bLowerCase", bLowerCaseValueAsString);
        }
        String aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            String aLowerCaseValueAsString = aLowerCaseValue.toString();
            valMap.put("aLowerCase", aLowerCaseValueAsString);
        }
        String BValue = getB();
        if (BValue != null) {
            String BValueAsString = BValue.toString();
            valMap.put("B", BValueAsString);
        }
        String AValue = getA();
        if (AValue != null) {
            String AValueAsString = AValue.toString();
            valMap.put("A", AValueAsString);
        }
        String qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            String qLowerCaseValueAsString = qLowerCaseValue.toString();
            valMap.put("qLowerCase", qLowerCaseValueAsString);
        }
        String gLowerCaseValue = getgLowerCase();
        if (gLowerCaseValue != null) {
            String gLowerCaseValueAsString = gLowerCaseValue.toString();
            valMap.put("gLowerCase", gLowerCaseValueAsString);
        }
        String QValue = getQ();
        if (QValue != null) {
            String QValueAsString = QValue.toString();
            valMap.put("Q", QValueAsString);
        }
        String GValue = getG();
        if (GValue != null) {
            String GValueAsString = GValue.toString();
            valMap.put("G", GValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            valMap.put("eLowerCase", eLowerCaseValue);
        }
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            valMap.put("iLowerCase", iLowerCaseValue);
        }
        Object bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            valMap.put("bLowerCase", bLowerCaseValue);
        }
        Object aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            valMap.put("aLowerCase", aLowerCaseValue);
        }
        Object BValue = getB();
        if (BValue != null) {
            valMap.put("B", BValue);
        }
        Object AValue = getA();
        if (AValue != null) {
            valMap.put("A", AValue);
        }
        Object qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            valMap.put("qLowerCase", qLowerCaseValue);
        }
        Object gLowerCaseValue = getgLowerCase();
        if (gLowerCaseValue != null) {
            valMap.put("gLowerCase", gLowerCaseValue);
        }
        Object QValue = getQ();
        if (QValue != null) {
            valMap.put("Q", QValue);
        }
        Object GValue = getG();
        if (GValue != null) {
            valMap.put("G", GValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("e");
        openapiFields.add("E");
        openapiFields.add("s");
        openapiFields.add("i");
        openapiFields.add("b");
        openapiFields.add("a");
        openapiFields.add("B");
        openapiFields.add("A");
        openapiFields.add("q");
        openapiFields.add("g");
        openapiFields.add("Q");
        openapiFields.add("G");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     MultiAssetsModeAssetIndexResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MultiAssetsModeAssetIndexResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MultiAssetsModeAssetIndexResponseInner"
                                        + " is not found in the empty JSON string",
                                MultiAssetsModeAssetIndexResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MultiAssetsModeAssetIndexResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `MultiAssetsModeAssetIndexResponseInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull())
                && !jsonObj.get("e").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `e` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("e").toString()));
        }
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("i") != null && !jsonObj.get("i").isJsonNull())
                && !jsonObj.get("i").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `i` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("i").toString()));
        }
        if ((jsonObj.get("b") != null && !jsonObj.get("b").isJsonNull())
                && !jsonObj.get("b").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `b` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("b").toString()));
        }
        if ((jsonObj.get("a") != null && !jsonObj.get("a").isJsonNull())
                && !jsonObj.get("a").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `a` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("a").toString()));
        }
        if ((jsonObj.get("B") != null && !jsonObj.get("B").isJsonNull())
                && !jsonObj.get("B").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `B` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("B").toString()));
        }
        if ((jsonObj.get("A") != null && !jsonObj.get("A").isJsonNull())
                && !jsonObj.get("A").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `A` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("A").toString()));
        }
        if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull())
                && !jsonObj.get("q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("q").toString()));
        }
        if ((jsonObj.get("g") != null && !jsonObj.get("g").isJsonNull())
                && !jsonObj.get("g").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `g` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("g").toString()));
        }
        if ((jsonObj.get("Q") != null && !jsonObj.get("Q").isJsonNull())
                && !jsonObj.get("Q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Q").toString()));
        }
        if ((jsonObj.get("G") != null && !jsonObj.get("G").isJsonNull())
                && !jsonObj.get("G").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `G` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("G").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MultiAssetsModeAssetIndexResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MultiAssetsModeAssetIndexResponseInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MultiAssetsModeAssetIndexResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(MultiAssetsModeAssetIndexResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MultiAssetsModeAssetIndexResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, MultiAssetsModeAssetIndexResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MultiAssetsModeAssetIndexResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MultiAssetsModeAssetIndexResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MultiAssetsModeAssetIndexResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     MultiAssetsModeAssetIndexResponseInner
     */
    public static MultiAssetsModeAssetIndexResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, MultiAssetsModeAssetIndexResponseInner.class);
    }

    /**
     * Convert an instance of MultiAssetsModeAssetIndexResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
