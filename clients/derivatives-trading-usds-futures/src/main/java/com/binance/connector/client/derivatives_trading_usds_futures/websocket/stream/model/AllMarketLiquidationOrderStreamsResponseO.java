/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AllMarketLiquidationOrderStreamsResponseO */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AllMarketLiquidationOrderStreamsResponseO extends BaseDTO {
    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_S = "S";

    @SerializedName(SERIALIZED_NAME_S)
    @jakarta.annotation.Nullable
    private String S;

    public static final String SERIALIZED_NAME_O_LOWER_CASE = "o";

    @SerializedName(SERIALIZED_NAME_O_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String oLowerCase;

    public static final String SERIALIZED_NAME_F_LOWER_CASE = "f";

    @SerializedName(SERIALIZED_NAME_F_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String fLowerCase;

    public static final String SERIALIZED_NAME_Q_LOWER_CASE = "q";

    @SerializedName(SERIALIZED_NAME_Q_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String qLowerCase;

    public static final String SERIALIZED_NAME_P_LOWER_CASE = "p";

    @SerializedName(SERIALIZED_NAME_P_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String pLowerCase;

    public static final String SERIALIZED_NAME_AP = "ap";

    @SerializedName(SERIALIZED_NAME_AP)
    @jakarta.annotation.Nullable
    private String ap;

    public static final String SERIALIZED_NAME_X = "X";

    @SerializedName(SERIALIZED_NAME_X)
    @jakarta.annotation.Nullable
    private String X;

    public static final String SERIALIZED_NAME_L_LOWER_CASE = "l";

    @SerializedName(SERIALIZED_NAME_L_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String lLowerCase;

    public static final String SERIALIZED_NAME_Z_LOWER_CASE = "z";

    @SerializedName(SERIALIZED_NAME_Z_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String zLowerCase;

    public static final String SERIALIZED_NAME_T = "T";

    @SerializedName(SERIALIZED_NAME_T)
    @jakarta.annotation.Nullable
    private Long T;

    public AllMarketLiquidationOrderStreamsResponseO() {}

    public AllMarketLiquidationOrderStreamsResponseO sLowerCase(
            @jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public AllMarketLiquidationOrderStreamsResponseO S(@jakarta.annotation.Nullable String S) {
        this.S = S;
        return this;
    }

    /**
     * Get S
     *
     * @return S
     */
    @jakarta.annotation.Nullable
    public String getS() {
        return S;
    }

    public void setS(@jakarta.annotation.Nullable String S) {
        this.S = S;
    }

    public AllMarketLiquidationOrderStreamsResponseO oLowerCase(
            @jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
        return this;
    }

    /**
     * Get oLowerCase
     *
     * @return oLowerCase
     */
    @jakarta.annotation.Nullable
    public String getoLowerCase() {
        return oLowerCase;
    }

    public void setoLowerCase(@jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
    }

    public AllMarketLiquidationOrderStreamsResponseO fLowerCase(
            @jakarta.annotation.Nullable String fLowerCase) {
        this.fLowerCase = fLowerCase;
        return this;
    }

    /**
     * Get fLowerCase
     *
     * @return fLowerCase
     */
    @jakarta.annotation.Nullable
    public String getfLowerCase() {
        return fLowerCase;
    }

    public void setfLowerCase(@jakarta.annotation.Nullable String fLowerCase) {
        this.fLowerCase = fLowerCase;
    }

    public AllMarketLiquidationOrderStreamsResponseO qLowerCase(
            @jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
        return this;
    }

    /**
     * Get qLowerCase
     *
     * @return qLowerCase
     */
    @jakarta.annotation.Nullable
    public String getqLowerCase() {
        return qLowerCase;
    }

    public void setqLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
    }

    public AllMarketLiquidationOrderStreamsResponseO pLowerCase(
            @jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
        return this;
    }

    /**
     * Get pLowerCase
     *
     * @return pLowerCase
     */
    @jakarta.annotation.Nullable
    public String getpLowerCase() {
        return pLowerCase;
    }

    public void setpLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
    }

    public AllMarketLiquidationOrderStreamsResponseO ap(@jakarta.annotation.Nullable String ap) {
        this.ap = ap;
        return this;
    }

    /**
     * Get ap
     *
     * @return ap
     */
    @jakarta.annotation.Nullable
    public String getAp() {
        return ap;
    }

    public void setAp(@jakarta.annotation.Nullable String ap) {
        this.ap = ap;
    }

    public AllMarketLiquidationOrderStreamsResponseO X(@jakarta.annotation.Nullable String X) {
        this.X = X;
        return this;
    }

    /**
     * Get X
     *
     * @return X
     */
    @jakarta.annotation.Nullable
    public String getX() {
        return X;
    }

    public void setX(@jakarta.annotation.Nullable String X) {
        this.X = X;
    }

    public AllMarketLiquidationOrderStreamsResponseO lLowerCase(
            @jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
        return this;
    }

    /**
     * Get lLowerCase
     *
     * @return lLowerCase
     */
    @jakarta.annotation.Nullable
    public String getlLowerCase() {
        return lLowerCase;
    }

    public void setlLowerCase(@jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
    }

    public AllMarketLiquidationOrderStreamsResponseO zLowerCase(
            @jakarta.annotation.Nullable String zLowerCase) {
        this.zLowerCase = zLowerCase;
        return this;
    }

    /**
     * Get zLowerCase
     *
     * @return zLowerCase
     */
    @jakarta.annotation.Nullable
    public String getzLowerCase() {
        return zLowerCase;
    }

    public void setzLowerCase(@jakarta.annotation.Nullable String zLowerCase) {
        this.zLowerCase = zLowerCase;
    }

    public AllMarketLiquidationOrderStreamsResponseO T(@jakarta.annotation.Nullable Long T) {
        this.T = T;
        return this;
    }

    /**
     * Get T
     *
     * @return T
     */
    @jakarta.annotation.Nullable
    public Long getT() {
        return T;
    }

    public void setT(@jakarta.annotation.Nullable Long T) {
        this.T = T;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AllMarketLiquidationOrderStreamsResponseO allMarketLiquidationOrderStreamsResponseO =
                (AllMarketLiquidationOrderStreamsResponseO) o;
        return Objects.equals(this.sLowerCase, allMarketLiquidationOrderStreamsResponseO.sLowerCase)
                && Objects.equals(this.S, allMarketLiquidationOrderStreamsResponseO.S)
                && Objects.equals(
                        this.oLowerCase, allMarketLiquidationOrderStreamsResponseO.oLowerCase)
                && Objects.equals(
                        this.fLowerCase, allMarketLiquidationOrderStreamsResponseO.fLowerCase)
                && Objects.equals(
                        this.qLowerCase, allMarketLiquidationOrderStreamsResponseO.qLowerCase)
                && Objects.equals(
                        this.pLowerCase, allMarketLiquidationOrderStreamsResponseO.pLowerCase)
                && Objects.equals(this.ap, allMarketLiquidationOrderStreamsResponseO.ap)
                && Objects.equals(this.X, allMarketLiquidationOrderStreamsResponseO.X)
                && Objects.equals(
                        this.lLowerCase, allMarketLiquidationOrderStreamsResponseO.lLowerCase)
                && Objects.equals(
                        this.zLowerCase, allMarketLiquidationOrderStreamsResponseO.zLowerCase)
                && Objects.equals(this.T, allMarketLiquidationOrderStreamsResponseO.T);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                sLowerCase,
                S,
                oLowerCase,
                fLowerCase,
                qLowerCase,
                pLowerCase,
                ap,
                X,
                lLowerCase,
                zLowerCase,
                T);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AllMarketLiquidationOrderStreamsResponseO {\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		S: ").append(toIndentedString(S)).append("\n");
        sb.append("		oLowerCase: ").append(toIndentedString(oLowerCase)).append("\n");
        sb.append("		fLowerCase: ").append(toIndentedString(fLowerCase)).append("\n");
        sb.append("		qLowerCase: ").append(toIndentedString(qLowerCase)).append("\n");
        sb.append("		pLowerCase: ").append(toIndentedString(pLowerCase)).append("\n");
        sb.append("		ap: ").append(toIndentedString(ap)).append("\n");
        sb.append("		X: ").append(toIndentedString(X)).append("\n");
        sb.append("		lLowerCase: ").append(toIndentedString(lLowerCase)).append("\n");
        sb.append("		zLowerCase: ").append(toIndentedString(zLowerCase)).append("\n");
        sb.append("		T: ").append(toIndentedString(T)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String SValue = getS();
        if (SValue != null) {
            String SValueAsString = SValue.toString();
            valMap.put("S", SValueAsString);
        }
        String oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            String oLowerCaseValueAsString = oLowerCaseValue.toString();
            valMap.put("oLowerCase", oLowerCaseValueAsString);
        }
        String fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            String fLowerCaseValueAsString = fLowerCaseValue.toString();
            valMap.put("fLowerCase", fLowerCaseValueAsString);
        }
        String qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            String qLowerCaseValueAsString = qLowerCaseValue.toString();
            valMap.put("qLowerCase", qLowerCaseValueAsString);
        }
        String pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            String pLowerCaseValueAsString = pLowerCaseValue.toString();
            valMap.put("pLowerCase", pLowerCaseValueAsString);
        }
        String apValue = getAp();
        if (apValue != null) {
            String apValueAsString = apValue.toString();
            valMap.put("ap", apValueAsString);
        }
        String XValue = getX();
        if (XValue != null) {
            String XValueAsString = XValue.toString();
            valMap.put("X", XValueAsString);
        }
        String lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            String lLowerCaseValueAsString = lLowerCaseValue.toString();
            valMap.put("lLowerCase", lLowerCaseValueAsString);
        }
        String zLowerCaseValue = getzLowerCase();
        if (zLowerCaseValue != null) {
            String zLowerCaseValueAsString = zLowerCaseValue.toString();
            valMap.put("zLowerCase", zLowerCaseValueAsString);
        }
        Long TValue = getT();
        if (TValue != null) {
            String TValueAsString = TValue.toString();
            valMap.put("T", TValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object SValue = getS();
        if (SValue != null) {
            valMap.put("S", SValue);
        }
        Object oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            valMap.put("oLowerCase", oLowerCaseValue);
        }
        Object fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            valMap.put("fLowerCase", fLowerCaseValue);
        }
        Object qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            valMap.put("qLowerCase", qLowerCaseValue);
        }
        Object pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            valMap.put("pLowerCase", pLowerCaseValue);
        }
        Object apValue = getAp();
        if (apValue != null) {
            valMap.put("ap", apValue);
        }
        Object XValue = getX();
        if (XValue != null) {
            valMap.put("X", XValue);
        }
        Object lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            valMap.put("lLowerCase", lLowerCaseValue);
        }
        Object zLowerCaseValue = getzLowerCase();
        if (zLowerCaseValue != null) {
            valMap.put("zLowerCase", zLowerCaseValue);
        }
        Object TValue = getT();
        if (TValue != null) {
            valMap.put("T", TValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("s");
        openapiFields.add("S");
        openapiFields.add("o");
        openapiFields.add("f");
        openapiFields.add("q");
        openapiFields.add("p");
        openapiFields.add("ap");
        openapiFields.add("X");
        openapiFields.add("l");
        openapiFields.add("z");
        openapiFields.add("T");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AllMarketLiquidationOrderStreamsResponseO
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AllMarketLiquidationOrderStreamsResponseO.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " AllMarketLiquidationOrderStreamsResponseO is not found in"
                                    + " the empty JSON string",
                                AllMarketLiquidationOrderStreamsResponseO.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AllMarketLiquidationOrderStreamsResponseO.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AllMarketLiquidationOrderStreamsResponseO` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("S") != null && !jsonObj.get("S").isJsonNull())
                && !jsonObj.get("S").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `S` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("S").toString()));
        }
        if ((jsonObj.get("o") != null && !jsonObj.get("o").isJsonNull())
                && !jsonObj.get("o").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `o` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("o").toString()));
        }
        if ((jsonObj.get("f") != null && !jsonObj.get("f").isJsonNull())
                && !jsonObj.get("f").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `f` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("f").toString()));
        }
        if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull())
                && !jsonObj.get("q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("q").toString()));
        }
        if ((jsonObj.get("p") != null && !jsonObj.get("p").isJsonNull())
                && !jsonObj.get("p").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `p` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("p").toString()));
        }
        if ((jsonObj.get("ap") != null && !jsonObj.get("ap").isJsonNull())
                && !jsonObj.get("ap").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ap` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ap").toString()));
        }
        if ((jsonObj.get("X") != null && !jsonObj.get("X").isJsonNull())
                && !jsonObj.get("X").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `X` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("X").toString()));
        }
        if ((jsonObj.get("l") != null && !jsonObj.get("l").isJsonNull())
                && !jsonObj.get("l").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `l` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("l").toString()));
        }
        if ((jsonObj.get("z") != null && !jsonObj.get("z").isJsonNull())
                && !jsonObj.get("z").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `z` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("z").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AllMarketLiquidationOrderStreamsResponseO.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'AllMarketLiquidationOrderStreamsResponseO' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AllMarketLiquidationOrderStreamsResponseO> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AllMarketLiquidationOrderStreamsResponseO.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AllMarketLiquidationOrderStreamsResponseO>() {
                        @Override
                        public void write(
                                JsonWriter out, AllMarketLiquidationOrderStreamsResponseO value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AllMarketLiquidationOrderStreamsResponseO read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AllMarketLiquidationOrderStreamsResponseO given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AllMarketLiquidationOrderStreamsResponseO
     * @throws IOException if the JSON string is invalid with respect to
     *     AllMarketLiquidationOrderStreamsResponseO
     */
    public static AllMarketLiquidationOrderStreamsResponseO fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, AllMarketLiquidationOrderStreamsResponseO.class);
    }

    /**
     * Convert an instance of AllMarketLiquidationOrderStreamsResponseO to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
