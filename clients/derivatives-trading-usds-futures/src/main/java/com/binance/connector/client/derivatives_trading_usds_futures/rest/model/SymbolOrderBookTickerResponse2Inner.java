/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** SymbolOrderBookTickerResponse2Inner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SymbolOrderBookTickerResponse2Inner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_BID_PRICE = "bidPrice";

    @SerializedName(SERIALIZED_NAME_BID_PRICE)
    @jakarta.annotation.Nullable
    private String bidPrice;

    public static final String SERIALIZED_NAME_BID_QTY = "bidQty";

    @SerializedName(SERIALIZED_NAME_BID_QTY)
    @jakarta.annotation.Nullable
    private String bidQty;

    public static final String SERIALIZED_NAME_ASK_PRICE = "askPrice";

    @SerializedName(SERIALIZED_NAME_ASK_PRICE)
    @jakarta.annotation.Nullable
    private String askPrice;

    public static final String SERIALIZED_NAME_ASK_QTY = "askQty";

    @SerializedName(SERIALIZED_NAME_ASK_QTY)
    @jakarta.annotation.Nullable
    private String askQty;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public SymbolOrderBookTickerResponse2Inner() {}

    public SymbolOrderBookTickerResponse2Inner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public SymbolOrderBookTickerResponse2Inner bidPrice(
            @jakarta.annotation.Nullable String bidPrice) {
        this.bidPrice = bidPrice;
        return this;
    }

    /**
     * Get bidPrice
     *
     * @return bidPrice
     */
    @jakarta.annotation.Nullable
    public String getBidPrice() {
        return bidPrice;
    }

    public void setBidPrice(@jakarta.annotation.Nullable String bidPrice) {
        this.bidPrice = bidPrice;
    }

    public SymbolOrderBookTickerResponse2Inner bidQty(@jakarta.annotation.Nullable String bidQty) {
        this.bidQty = bidQty;
        return this;
    }

    /**
     * Get bidQty
     *
     * @return bidQty
     */
    @jakarta.annotation.Nullable
    public String getBidQty() {
        return bidQty;
    }

    public void setBidQty(@jakarta.annotation.Nullable String bidQty) {
        this.bidQty = bidQty;
    }

    public SymbolOrderBookTickerResponse2Inner askPrice(
            @jakarta.annotation.Nullable String askPrice) {
        this.askPrice = askPrice;
        return this;
    }

    /**
     * Get askPrice
     *
     * @return askPrice
     */
    @jakarta.annotation.Nullable
    public String getAskPrice() {
        return askPrice;
    }

    public void setAskPrice(@jakarta.annotation.Nullable String askPrice) {
        this.askPrice = askPrice;
    }

    public SymbolOrderBookTickerResponse2Inner askQty(@jakarta.annotation.Nullable String askQty) {
        this.askQty = askQty;
        return this;
    }

    /**
     * Get askQty
     *
     * @return askQty
     */
    @jakarta.annotation.Nullable
    public String getAskQty() {
        return askQty;
    }

    public void setAskQty(@jakarta.annotation.Nullable String askQty) {
        this.askQty = askQty;
    }

    public SymbolOrderBookTickerResponse2Inner time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SymbolOrderBookTickerResponse2Inner symbolOrderBookTickerResponse2Inner =
                (SymbolOrderBookTickerResponse2Inner) o;
        return Objects.equals(this.symbol, symbolOrderBookTickerResponse2Inner.symbol)
                && Objects.equals(this.bidPrice, symbolOrderBookTickerResponse2Inner.bidPrice)
                && Objects.equals(this.bidQty, symbolOrderBookTickerResponse2Inner.bidQty)
                && Objects.equals(this.askPrice, symbolOrderBookTickerResponse2Inner.askPrice)
                && Objects.equals(this.askQty, symbolOrderBookTickerResponse2Inner.askQty)
                && Objects.equals(this.time, symbolOrderBookTickerResponse2Inner.time);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbol, bidPrice, bidQty, askPrice, askQty, time);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SymbolOrderBookTickerResponse2Inner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		bidPrice: ").append(toIndentedString(bidPrice)).append("\n");
        sb.append("		bidQty: ").append(toIndentedString(bidQty)).append("\n");
        sb.append("		askPrice: ").append(toIndentedString(askPrice)).append("\n");
        sb.append("		askQty: ").append(toIndentedString(askQty)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object bidPriceValue = getBidPrice();
        String bidPriceValueAsString = "";
        bidPriceValueAsString = bidPriceValue.toString();
        sb.append("bidPrice=").append(urlEncode(bidPriceValueAsString)).append("");
        Object bidQtyValue = getBidQty();
        String bidQtyValueAsString = "";
        bidQtyValueAsString = bidQtyValue.toString();
        sb.append("bidQty=").append(urlEncode(bidQtyValueAsString)).append("");
        Object askPriceValue = getAskPrice();
        String askPriceValueAsString = "";
        askPriceValueAsString = askPriceValue.toString();
        sb.append("askPrice=").append(urlEncode(askPriceValueAsString)).append("");
        Object askQtyValue = getAskQty();
        String askQtyValueAsString = "";
        askQtyValueAsString = askQtyValue.toString();
        sb.append("askQty=").append(urlEncode(askQtyValueAsString)).append("");
        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("bidPrice");
        openapiFields.add("bidQty");
        openapiFields.add("askPrice");
        openapiFields.add("askQty");
        openapiFields.add("time");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     SymbolOrderBookTickerResponse2Inner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SymbolOrderBookTickerResponse2Inner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SymbolOrderBookTickerResponse2Inner is"
                                        + " not found in the empty JSON string",
                                SymbolOrderBookTickerResponse2Inner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SymbolOrderBookTickerResponse2Inner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `SymbolOrderBookTickerResponse2Inner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("bidPrice") != null && !jsonObj.get("bidPrice").isJsonNull())
                && !jsonObj.get("bidPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("bidPrice").toString()));
        }
        if ((jsonObj.get("bidQty") != null && !jsonObj.get("bidQty").isJsonNull())
                && !jsonObj.get("bidQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("bidQty").toString()));
        }
        if ((jsonObj.get("askPrice") != null && !jsonObj.get("askPrice").isJsonNull())
                && !jsonObj.get("askPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("askPrice").toString()));
        }
        if ((jsonObj.get("askQty") != null && !jsonObj.get("askQty").isJsonNull())
                && !jsonObj.get("askQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("askQty").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SymbolOrderBookTickerResponse2Inner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SymbolOrderBookTickerResponse2Inner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SymbolOrderBookTickerResponse2Inner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(SymbolOrderBookTickerResponse2Inner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SymbolOrderBookTickerResponse2Inner>() {
                        @Override
                        public void write(JsonWriter out, SymbolOrderBookTickerResponse2Inner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SymbolOrderBookTickerResponse2Inner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SymbolOrderBookTickerResponse2Inner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SymbolOrderBookTickerResponse2Inner
     * @throws IOException if the JSON string is invalid with respect to
     *     SymbolOrderBookTickerResponse2Inner
     */
    public static SymbolOrderBookTickerResponse2Inner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, SymbolOrderBookTickerResponse2Inner.class);
    }

    /**
     * Convert an instance of SymbolOrderBookTickerResponse2Inner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
