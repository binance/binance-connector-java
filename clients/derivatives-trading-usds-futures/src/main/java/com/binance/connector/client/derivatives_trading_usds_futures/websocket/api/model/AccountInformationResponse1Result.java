/*
 * Binance Derivatives Trading USDS Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AccountInformationResponse1Result */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountInformationResponse1Result extends BaseDTO {
    public static final String SERIALIZED_NAME_FEE_TIER = "feeTier";

    @SerializedName(SERIALIZED_NAME_FEE_TIER)
    @jakarta.annotation.Nullable
    private Long feeTier;

    public static final String SERIALIZED_NAME_CAN_TRADE = "canTrade";

    @SerializedName(SERIALIZED_NAME_CAN_TRADE)
    @jakarta.annotation.Nullable
    private Boolean canTrade;

    public static final String SERIALIZED_NAME_CAN_DEPOSIT = "canDeposit";

    @SerializedName(SERIALIZED_NAME_CAN_DEPOSIT)
    @jakarta.annotation.Nullable
    private Boolean canDeposit;

    public static final String SERIALIZED_NAME_CAN_WITHDRAW = "canWithdraw";

    @SerializedName(SERIALIZED_NAME_CAN_WITHDRAW)
    @jakarta.annotation.Nullable
    private Boolean canWithdraw;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public static final String SERIALIZED_NAME_MULTI_ASSETS_MARGIN = "multiAssetsMargin";

    @SerializedName(SERIALIZED_NAME_MULTI_ASSETS_MARGIN)
    @jakarta.annotation.Nullable
    private Boolean multiAssetsMargin;

    public static final String SERIALIZED_NAME_TRADE_GROUP_ID = "tradeGroupId";

    @SerializedName(SERIALIZED_NAME_TRADE_GROUP_ID)
    @jakarta.annotation.Nullable
    private Long tradeGroupId;

    public static final String SERIALIZED_NAME_TOTAL_INITIAL_MARGIN = "totalInitialMargin";

    @SerializedName(SERIALIZED_NAME_TOTAL_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String totalInitialMargin;

    public static final String SERIALIZED_NAME_TOTAL_MAINT_MARGIN = "totalMaintMargin";

    @SerializedName(SERIALIZED_NAME_TOTAL_MAINT_MARGIN)
    @jakarta.annotation.Nullable
    private String totalMaintMargin;

    public static final String SERIALIZED_NAME_TOTAL_WALLET_BALANCE = "totalWalletBalance";

    @SerializedName(SERIALIZED_NAME_TOTAL_WALLET_BALANCE)
    @jakarta.annotation.Nullable
    private String totalWalletBalance;

    public static final String SERIALIZED_NAME_TOTAL_UNREALIZED_PROFIT = "totalUnrealizedProfit";

    @SerializedName(SERIALIZED_NAME_TOTAL_UNREALIZED_PROFIT)
    @jakarta.annotation.Nullable
    private String totalUnrealizedProfit;

    public static final String SERIALIZED_NAME_TOTAL_MARGIN_BALANCE = "totalMarginBalance";

    @SerializedName(SERIALIZED_NAME_TOTAL_MARGIN_BALANCE)
    @jakarta.annotation.Nullable
    private String totalMarginBalance;

    public static final String SERIALIZED_NAME_TOTAL_POSITION_INITIAL_MARGIN =
            "totalPositionInitialMargin";

    @SerializedName(SERIALIZED_NAME_TOTAL_POSITION_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String totalPositionInitialMargin;

    public static final String SERIALIZED_NAME_TOTAL_OPEN_ORDER_INITIAL_MARGIN =
            "totalOpenOrderInitialMargin";

    @SerializedName(SERIALIZED_NAME_TOTAL_OPEN_ORDER_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String totalOpenOrderInitialMargin;

    public static final String SERIALIZED_NAME_TOTAL_CROSS_WALLET_BALANCE =
            "totalCrossWalletBalance";

    @SerializedName(SERIALIZED_NAME_TOTAL_CROSS_WALLET_BALANCE)
    @jakarta.annotation.Nullable
    private String totalCrossWalletBalance;

    public static final String SERIALIZED_NAME_TOTAL_CROSS_UN_PNL = "totalCrossUnPnl";

    @SerializedName(SERIALIZED_NAME_TOTAL_CROSS_UN_PNL)
    @jakarta.annotation.Nullable
    private String totalCrossUnPnl;

    public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";

    @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
    @jakarta.annotation.Nullable
    private String availableBalance;

    public static final String SERIALIZED_NAME_MAX_WITHDRAW_AMOUNT = "maxWithdrawAmount";

    @SerializedName(SERIALIZED_NAME_MAX_WITHDRAW_AMOUNT)
    @jakarta.annotation.Nullable
    private String maxWithdrawAmount;

    public static final String SERIALIZED_NAME_ASSETS = "assets";

    @SerializedName(SERIALIZED_NAME_ASSETS)
    @jakarta.annotation.Nullable
    private List<@Valid AccountInformationResponse1ResultAssetsInner> assets;

    public static final String SERIALIZED_NAME_POSITIONS = "positions";

    @SerializedName(SERIALIZED_NAME_POSITIONS)
    @jakarta.annotation.Nullable
    private List<@Valid AccountInformationResponse1ResultPositionsInner> positions;

    public AccountInformationResponse1Result() {}

    public AccountInformationResponse1Result feeTier(@jakarta.annotation.Nullable Long feeTier) {
        this.feeTier = feeTier;
        return this;
    }

    /**
     * Get feeTier
     *
     * @return feeTier
     */
    @jakarta.annotation.Nullable
    public Long getFeeTier() {
        return feeTier;
    }

    public void setFeeTier(@jakarta.annotation.Nullable Long feeTier) {
        this.feeTier = feeTier;
    }

    public AccountInformationResponse1Result canTrade(
            @jakarta.annotation.Nullable Boolean canTrade) {
        this.canTrade = canTrade;
        return this;
    }

    /**
     * Get canTrade
     *
     * @return canTrade
     */
    @jakarta.annotation.Nullable
    public Boolean getCanTrade() {
        return canTrade;
    }

    public void setCanTrade(@jakarta.annotation.Nullable Boolean canTrade) {
        this.canTrade = canTrade;
    }

    public AccountInformationResponse1Result canDeposit(
            @jakarta.annotation.Nullable Boolean canDeposit) {
        this.canDeposit = canDeposit;
        return this;
    }

    /**
     * Get canDeposit
     *
     * @return canDeposit
     */
    @jakarta.annotation.Nullable
    public Boolean getCanDeposit() {
        return canDeposit;
    }

    public void setCanDeposit(@jakarta.annotation.Nullable Boolean canDeposit) {
        this.canDeposit = canDeposit;
    }

    public AccountInformationResponse1Result canWithdraw(
            @jakarta.annotation.Nullable Boolean canWithdraw) {
        this.canWithdraw = canWithdraw;
        return this;
    }

    /**
     * Get canWithdraw
     *
     * @return canWithdraw
     */
    @jakarta.annotation.Nullable
    public Boolean getCanWithdraw() {
        return canWithdraw;
    }

    public void setCanWithdraw(@jakarta.annotation.Nullable Boolean canWithdraw) {
        this.canWithdraw = canWithdraw;
    }

    public AccountInformationResponse1Result updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    public AccountInformationResponse1Result multiAssetsMargin(
            @jakarta.annotation.Nullable Boolean multiAssetsMargin) {
        this.multiAssetsMargin = multiAssetsMargin;
        return this;
    }

    /**
     * Get multiAssetsMargin
     *
     * @return multiAssetsMargin
     */
    @jakarta.annotation.Nullable
    public Boolean getMultiAssetsMargin() {
        return multiAssetsMargin;
    }

    public void setMultiAssetsMargin(@jakarta.annotation.Nullable Boolean multiAssetsMargin) {
        this.multiAssetsMargin = multiAssetsMargin;
    }

    public AccountInformationResponse1Result tradeGroupId(
            @jakarta.annotation.Nullable Long tradeGroupId) {
        this.tradeGroupId = tradeGroupId;
        return this;
    }

    /**
     * Get tradeGroupId
     *
     * @return tradeGroupId
     */
    @jakarta.annotation.Nullable
    public Long getTradeGroupId() {
        return tradeGroupId;
    }

    public void setTradeGroupId(@jakarta.annotation.Nullable Long tradeGroupId) {
        this.tradeGroupId = tradeGroupId;
    }

    public AccountInformationResponse1Result totalInitialMargin(
            @jakarta.annotation.Nullable String totalInitialMargin) {
        this.totalInitialMargin = totalInitialMargin;
        return this;
    }

    /**
     * Get totalInitialMargin
     *
     * @return totalInitialMargin
     */
    @jakarta.annotation.Nullable
    public String getTotalInitialMargin() {
        return totalInitialMargin;
    }

    public void setTotalInitialMargin(@jakarta.annotation.Nullable String totalInitialMargin) {
        this.totalInitialMargin = totalInitialMargin;
    }

    public AccountInformationResponse1Result totalMaintMargin(
            @jakarta.annotation.Nullable String totalMaintMargin) {
        this.totalMaintMargin = totalMaintMargin;
        return this;
    }

    /**
     * Get totalMaintMargin
     *
     * @return totalMaintMargin
     */
    @jakarta.annotation.Nullable
    public String getTotalMaintMargin() {
        return totalMaintMargin;
    }

    public void setTotalMaintMargin(@jakarta.annotation.Nullable String totalMaintMargin) {
        this.totalMaintMargin = totalMaintMargin;
    }

    public AccountInformationResponse1Result totalWalletBalance(
            @jakarta.annotation.Nullable String totalWalletBalance) {
        this.totalWalletBalance = totalWalletBalance;
        return this;
    }

    /**
     * Get totalWalletBalance
     *
     * @return totalWalletBalance
     */
    @jakarta.annotation.Nullable
    public String getTotalWalletBalance() {
        return totalWalletBalance;
    }

    public void setTotalWalletBalance(@jakarta.annotation.Nullable String totalWalletBalance) {
        this.totalWalletBalance = totalWalletBalance;
    }

    public AccountInformationResponse1Result totalUnrealizedProfit(
            @jakarta.annotation.Nullable String totalUnrealizedProfit) {
        this.totalUnrealizedProfit = totalUnrealizedProfit;
        return this;
    }

    /**
     * Get totalUnrealizedProfit
     *
     * @return totalUnrealizedProfit
     */
    @jakarta.annotation.Nullable
    public String getTotalUnrealizedProfit() {
        return totalUnrealizedProfit;
    }

    public void setTotalUnrealizedProfit(
            @jakarta.annotation.Nullable String totalUnrealizedProfit) {
        this.totalUnrealizedProfit = totalUnrealizedProfit;
    }

    public AccountInformationResponse1Result totalMarginBalance(
            @jakarta.annotation.Nullable String totalMarginBalance) {
        this.totalMarginBalance = totalMarginBalance;
        return this;
    }

    /**
     * Get totalMarginBalance
     *
     * @return totalMarginBalance
     */
    @jakarta.annotation.Nullable
    public String getTotalMarginBalance() {
        return totalMarginBalance;
    }

    public void setTotalMarginBalance(@jakarta.annotation.Nullable String totalMarginBalance) {
        this.totalMarginBalance = totalMarginBalance;
    }

    public AccountInformationResponse1Result totalPositionInitialMargin(
            @jakarta.annotation.Nullable String totalPositionInitialMargin) {
        this.totalPositionInitialMargin = totalPositionInitialMargin;
        return this;
    }

    /**
     * Get totalPositionInitialMargin
     *
     * @return totalPositionInitialMargin
     */
    @jakarta.annotation.Nullable
    public String getTotalPositionInitialMargin() {
        return totalPositionInitialMargin;
    }

    public void setTotalPositionInitialMargin(
            @jakarta.annotation.Nullable String totalPositionInitialMargin) {
        this.totalPositionInitialMargin = totalPositionInitialMargin;
    }

    public AccountInformationResponse1Result totalOpenOrderInitialMargin(
            @jakarta.annotation.Nullable String totalOpenOrderInitialMargin) {
        this.totalOpenOrderInitialMargin = totalOpenOrderInitialMargin;
        return this;
    }

    /**
     * Get totalOpenOrderInitialMargin
     *
     * @return totalOpenOrderInitialMargin
     */
    @jakarta.annotation.Nullable
    public String getTotalOpenOrderInitialMargin() {
        return totalOpenOrderInitialMargin;
    }

    public void setTotalOpenOrderInitialMargin(
            @jakarta.annotation.Nullable String totalOpenOrderInitialMargin) {
        this.totalOpenOrderInitialMargin = totalOpenOrderInitialMargin;
    }

    public AccountInformationResponse1Result totalCrossWalletBalance(
            @jakarta.annotation.Nullable String totalCrossWalletBalance) {
        this.totalCrossWalletBalance = totalCrossWalletBalance;
        return this;
    }

    /**
     * Get totalCrossWalletBalance
     *
     * @return totalCrossWalletBalance
     */
    @jakarta.annotation.Nullable
    public String getTotalCrossWalletBalance() {
        return totalCrossWalletBalance;
    }

    public void setTotalCrossWalletBalance(
            @jakarta.annotation.Nullable String totalCrossWalletBalance) {
        this.totalCrossWalletBalance = totalCrossWalletBalance;
    }

    public AccountInformationResponse1Result totalCrossUnPnl(
            @jakarta.annotation.Nullable String totalCrossUnPnl) {
        this.totalCrossUnPnl = totalCrossUnPnl;
        return this;
    }

    /**
     * Get totalCrossUnPnl
     *
     * @return totalCrossUnPnl
     */
    @jakarta.annotation.Nullable
    public String getTotalCrossUnPnl() {
        return totalCrossUnPnl;
    }

    public void setTotalCrossUnPnl(@jakarta.annotation.Nullable String totalCrossUnPnl) {
        this.totalCrossUnPnl = totalCrossUnPnl;
    }

    public AccountInformationResponse1Result availableBalance(
            @jakarta.annotation.Nullable String availableBalance) {
        this.availableBalance = availableBalance;
        return this;
    }

    /**
     * Get availableBalance
     *
     * @return availableBalance
     */
    @jakarta.annotation.Nullable
    public String getAvailableBalance() {
        return availableBalance;
    }

    public void setAvailableBalance(@jakarta.annotation.Nullable String availableBalance) {
        this.availableBalance = availableBalance;
    }

    public AccountInformationResponse1Result maxWithdrawAmount(
            @jakarta.annotation.Nullable String maxWithdrawAmount) {
        this.maxWithdrawAmount = maxWithdrawAmount;
        return this;
    }

    /**
     * Get maxWithdrawAmount
     *
     * @return maxWithdrawAmount
     */
    @jakarta.annotation.Nullable
    public String getMaxWithdrawAmount() {
        return maxWithdrawAmount;
    }

    public void setMaxWithdrawAmount(@jakarta.annotation.Nullable String maxWithdrawAmount) {
        this.maxWithdrawAmount = maxWithdrawAmount;
    }

    public AccountInformationResponse1Result assets(
            @jakarta.annotation.Nullable
                    List<@Valid AccountInformationResponse1ResultAssetsInner> assets) {
        this.assets = assets;
        return this;
    }

    public AccountInformationResponse1Result addAssetsItem(
            AccountInformationResponse1ResultAssetsInner assetsItem) {
        if (this.assets == null) {
            this.assets = new ArrayList<>();
        }
        this.assets.add(assetsItem);
        return this;
    }

    /**
     * Get assets
     *
     * @return assets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid AccountInformationResponse1ResultAssetsInner> getAssets() {
        return assets;
    }

    public void setAssets(
            @jakarta.annotation.Nullable
                    List<@Valid AccountInformationResponse1ResultAssetsInner> assets) {
        this.assets = assets;
    }

    public AccountInformationResponse1Result positions(
            @jakarta.annotation.Nullable
                    List<@Valid AccountInformationResponse1ResultPositionsInner> positions) {
        this.positions = positions;
        return this;
    }

    public AccountInformationResponse1Result addPositionsItem(
            AccountInformationResponse1ResultPositionsInner positionsItem) {
        if (this.positions == null) {
            this.positions = new ArrayList<>();
        }
        this.positions.add(positionsItem);
        return this;
    }

    /**
     * Get positions
     *
     * @return positions
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid AccountInformationResponse1ResultPositionsInner> getPositions() {
        return positions;
    }

    public void setPositions(
            @jakarta.annotation.Nullable
                    List<@Valid AccountInformationResponse1ResultPositionsInner> positions) {
        this.positions = positions;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountInformationResponse1Result accountInformationResponse1Result =
                (AccountInformationResponse1Result) o;
        return Objects.equals(this.feeTier, accountInformationResponse1Result.feeTier)
                && Objects.equals(this.canTrade, accountInformationResponse1Result.canTrade)
                && Objects.equals(this.canDeposit, accountInformationResponse1Result.canDeposit)
                && Objects.equals(this.canWithdraw, accountInformationResponse1Result.canWithdraw)
                && Objects.equals(this.updateTime, accountInformationResponse1Result.updateTime)
                && Objects.equals(
                        this.multiAssetsMargin, accountInformationResponse1Result.multiAssetsMargin)
                && Objects.equals(this.tradeGroupId, accountInformationResponse1Result.tradeGroupId)
                && Objects.equals(
                        this.totalInitialMargin,
                        accountInformationResponse1Result.totalInitialMargin)
                && Objects.equals(
                        this.totalMaintMargin, accountInformationResponse1Result.totalMaintMargin)
                && Objects.equals(
                        this.totalWalletBalance,
                        accountInformationResponse1Result.totalWalletBalance)
                && Objects.equals(
                        this.totalUnrealizedProfit,
                        accountInformationResponse1Result.totalUnrealizedProfit)
                && Objects.equals(
                        this.totalMarginBalance,
                        accountInformationResponse1Result.totalMarginBalance)
                && Objects.equals(
                        this.totalPositionInitialMargin,
                        accountInformationResponse1Result.totalPositionInitialMargin)
                && Objects.equals(
                        this.totalOpenOrderInitialMargin,
                        accountInformationResponse1Result.totalOpenOrderInitialMargin)
                && Objects.equals(
                        this.totalCrossWalletBalance,
                        accountInformationResponse1Result.totalCrossWalletBalance)
                && Objects.equals(
                        this.totalCrossUnPnl, accountInformationResponse1Result.totalCrossUnPnl)
                && Objects.equals(
                        this.availableBalance, accountInformationResponse1Result.availableBalance)
                && Objects.equals(
                        this.maxWithdrawAmount, accountInformationResponse1Result.maxWithdrawAmount)
                && Objects.equals(this.assets, accountInformationResponse1Result.assets)
                && Objects.equals(this.positions, accountInformationResponse1Result.positions);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                feeTier,
                canTrade,
                canDeposit,
                canWithdraw,
                updateTime,
                multiAssetsMargin,
                tradeGroupId,
                totalInitialMargin,
                totalMaintMargin,
                totalWalletBalance,
                totalUnrealizedProfit,
                totalMarginBalance,
                totalPositionInitialMargin,
                totalOpenOrderInitialMargin,
                totalCrossWalletBalance,
                totalCrossUnPnl,
                availableBalance,
                maxWithdrawAmount,
                assets,
                positions);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountInformationResponse1Result {\n");
        sb.append("		feeTier: ").append(toIndentedString(feeTier)).append("\n");
        sb.append("		canTrade: ").append(toIndentedString(canTrade)).append("\n");
        sb.append("		canDeposit: ").append(toIndentedString(canDeposit)).append("\n");
        sb.append("		canWithdraw: ").append(toIndentedString(canWithdraw)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("		multiAssetsMargin: ").append(toIndentedString(multiAssetsMargin)).append("\n");
        sb.append("		tradeGroupId: ").append(toIndentedString(tradeGroupId)).append("\n");
        sb.append("		totalInitialMargin: ")
                .append(toIndentedString(totalInitialMargin))
                .append("\n");
        sb.append("		totalMaintMargin: ").append(toIndentedString(totalMaintMargin)).append("\n");
        sb.append("		totalWalletBalance: ")
                .append(toIndentedString(totalWalletBalance))
                .append("\n");
        sb.append("		totalUnrealizedProfit: ")
                .append(toIndentedString(totalUnrealizedProfit))
                .append("\n");
        sb.append("		totalMarginBalance: ")
                .append(toIndentedString(totalMarginBalance))
                .append("\n");
        sb.append("		totalPositionInitialMargin: ")
                .append(toIndentedString(totalPositionInitialMargin))
                .append("\n");
        sb.append("		totalOpenOrderInitialMargin: ")
                .append(toIndentedString(totalOpenOrderInitialMargin))
                .append("\n");
        sb.append("		totalCrossWalletBalance: ")
                .append(toIndentedString(totalCrossWalletBalance))
                .append("\n");
        sb.append("		totalCrossUnPnl: ").append(toIndentedString(totalCrossUnPnl)).append("\n");
        sb.append("		availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
        sb.append("		maxWithdrawAmount: ").append(toIndentedString(maxWithdrawAmount)).append("\n");
        sb.append("		assets: ").append(toIndentedString(assets)).append("\n");
        sb.append("		positions: ").append(toIndentedString(positions)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long feeTierValue = getFeeTier();
        if (feeTierValue != null) {
            String feeTierValueAsString = feeTierValue.toString();
            valMap.put("feeTier", feeTierValueAsString);
        }
        Boolean canTradeValue = getCanTrade();
        if (canTradeValue != null) {
            String canTradeValueAsString = canTradeValue.toString();
            valMap.put("canTrade", canTradeValueAsString);
        }
        Boolean canDepositValue = getCanDeposit();
        if (canDepositValue != null) {
            String canDepositValueAsString = canDepositValue.toString();
            valMap.put("canDeposit", canDepositValueAsString);
        }
        Boolean canWithdrawValue = getCanWithdraw();
        if (canWithdrawValue != null) {
            String canWithdrawValueAsString = canWithdrawValue.toString();
            valMap.put("canWithdraw", canWithdrawValueAsString);
        }
        Long updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            String updateTimeValueAsString = updateTimeValue.toString();
            valMap.put("updateTime", updateTimeValueAsString);
        }
        Boolean multiAssetsMarginValue = getMultiAssetsMargin();
        if (multiAssetsMarginValue != null) {
            String multiAssetsMarginValueAsString = multiAssetsMarginValue.toString();
            valMap.put("multiAssetsMargin", multiAssetsMarginValueAsString);
        }
        Long tradeGroupIdValue = getTradeGroupId();
        if (tradeGroupIdValue != null) {
            String tradeGroupIdValueAsString = tradeGroupIdValue.toString();
            valMap.put("tradeGroupId", tradeGroupIdValueAsString);
        }
        String totalInitialMarginValue = getTotalInitialMargin();
        if (totalInitialMarginValue != null) {
            String totalInitialMarginValueAsString = totalInitialMarginValue.toString();
            valMap.put("totalInitialMargin", totalInitialMarginValueAsString);
        }
        String totalMaintMarginValue = getTotalMaintMargin();
        if (totalMaintMarginValue != null) {
            String totalMaintMarginValueAsString = totalMaintMarginValue.toString();
            valMap.put("totalMaintMargin", totalMaintMarginValueAsString);
        }
        String totalWalletBalanceValue = getTotalWalletBalance();
        if (totalWalletBalanceValue != null) {
            String totalWalletBalanceValueAsString = totalWalletBalanceValue.toString();
            valMap.put("totalWalletBalance", totalWalletBalanceValueAsString);
        }
        String totalUnrealizedProfitValue = getTotalUnrealizedProfit();
        if (totalUnrealizedProfitValue != null) {
            String totalUnrealizedProfitValueAsString = totalUnrealizedProfitValue.toString();
            valMap.put("totalUnrealizedProfit", totalUnrealizedProfitValueAsString);
        }
        String totalMarginBalanceValue = getTotalMarginBalance();
        if (totalMarginBalanceValue != null) {
            String totalMarginBalanceValueAsString = totalMarginBalanceValue.toString();
            valMap.put("totalMarginBalance", totalMarginBalanceValueAsString);
        }
        String totalPositionInitialMarginValue = getTotalPositionInitialMargin();
        if (totalPositionInitialMarginValue != null) {
            String totalPositionInitialMarginValueAsString =
                    totalPositionInitialMarginValue.toString();
            valMap.put("totalPositionInitialMargin", totalPositionInitialMarginValueAsString);
        }
        String totalOpenOrderInitialMarginValue = getTotalOpenOrderInitialMargin();
        if (totalOpenOrderInitialMarginValue != null) {
            String totalOpenOrderInitialMarginValueAsString =
                    totalOpenOrderInitialMarginValue.toString();
            valMap.put("totalOpenOrderInitialMargin", totalOpenOrderInitialMarginValueAsString);
        }
        String totalCrossWalletBalanceValue = getTotalCrossWalletBalance();
        if (totalCrossWalletBalanceValue != null) {
            String totalCrossWalletBalanceValueAsString = totalCrossWalletBalanceValue.toString();
            valMap.put("totalCrossWalletBalance", totalCrossWalletBalanceValueAsString);
        }
        String totalCrossUnPnlValue = getTotalCrossUnPnl();
        if (totalCrossUnPnlValue != null) {
            String totalCrossUnPnlValueAsString = totalCrossUnPnlValue.toString();
            valMap.put("totalCrossUnPnl", totalCrossUnPnlValueAsString);
        }
        String availableBalanceValue = getAvailableBalance();
        if (availableBalanceValue != null) {
            String availableBalanceValueAsString = availableBalanceValue.toString();
            valMap.put("availableBalance", availableBalanceValueAsString);
        }
        String maxWithdrawAmountValue = getMaxWithdrawAmount();
        if (maxWithdrawAmountValue != null) {
            String maxWithdrawAmountValueAsString = maxWithdrawAmountValue.toString();
            valMap.put("maxWithdrawAmount", maxWithdrawAmountValueAsString);
        }
        List<@Valid AccountInformationResponse1ResultAssetsInner> assetsValue = getAssets();
        if (assetsValue != null) {
            String assetsValueAsString = JSON.getGson().toJson(assetsValue);
            valMap.put("assets", assetsValueAsString);
        }
        List<@Valid AccountInformationResponse1ResultPositionsInner> positionsValue =
                getPositions();
        if (positionsValue != null) {
            String positionsValueAsString = JSON.getGson().toJson(positionsValue);
            valMap.put("positions", positionsValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object feeTierValue = getFeeTier();
        if (feeTierValue != null) {
            valMap.put("feeTier", feeTierValue);
        }
        Object canTradeValue = getCanTrade();
        if (canTradeValue != null) {
            valMap.put("canTrade", canTradeValue);
        }
        Object canDepositValue = getCanDeposit();
        if (canDepositValue != null) {
            valMap.put("canDeposit", canDepositValue);
        }
        Object canWithdrawValue = getCanWithdraw();
        if (canWithdrawValue != null) {
            valMap.put("canWithdraw", canWithdrawValue);
        }
        Object updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            valMap.put("updateTime", updateTimeValue);
        }
        Object multiAssetsMarginValue = getMultiAssetsMargin();
        if (multiAssetsMarginValue != null) {
            valMap.put("multiAssetsMargin", multiAssetsMarginValue);
        }
        Object tradeGroupIdValue = getTradeGroupId();
        if (tradeGroupIdValue != null) {
            valMap.put("tradeGroupId", tradeGroupIdValue);
        }
        Object totalInitialMarginValue = getTotalInitialMargin();
        if (totalInitialMarginValue != null) {
            valMap.put("totalInitialMargin", totalInitialMarginValue);
        }
        Object totalMaintMarginValue = getTotalMaintMargin();
        if (totalMaintMarginValue != null) {
            valMap.put("totalMaintMargin", totalMaintMarginValue);
        }
        Object totalWalletBalanceValue = getTotalWalletBalance();
        if (totalWalletBalanceValue != null) {
            valMap.put("totalWalletBalance", totalWalletBalanceValue);
        }
        Object totalUnrealizedProfitValue = getTotalUnrealizedProfit();
        if (totalUnrealizedProfitValue != null) {
            valMap.put("totalUnrealizedProfit", totalUnrealizedProfitValue);
        }
        Object totalMarginBalanceValue = getTotalMarginBalance();
        if (totalMarginBalanceValue != null) {
            valMap.put("totalMarginBalance", totalMarginBalanceValue);
        }
        Object totalPositionInitialMarginValue = getTotalPositionInitialMargin();
        if (totalPositionInitialMarginValue != null) {
            valMap.put("totalPositionInitialMargin", totalPositionInitialMarginValue);
        }
        Object totalOpenOrderInitialMarginValue = getTotalOpenOrderInitialMargin();
        if (totalOpenOrderInitialMarginValue != null) {
            valMap.put("totalOpenOrderInitialMargin", totalOpenOrderInitialMarginValue);
        }
        Object totalCrossWalletBalanceValue = getTotalCrossWalletBalance();
        if (totalCrossWalletBalanceValue != null) {
            valMap.put("totalCrossWalletBalance", totalCrossWalletBalanceValue);
        }
        Object totalCrossUnPnlValue = getTotalCrossUnPnl();
        if (totalCrossUnPnlValue != null) {
            valMap.put("totalCrossUnPnl", totalCrossUnPnlValue);
        }
        Object availableBalanceValue = getAvailableBalance();
        if (availableBalanceValue != null) {
            valMap.put("availableBalance", availableBalanceValue);
        }
        Object maxWithdrawAmountValue = getMaxWithdrawAmount();
        if (maxWithdrawAmountValue != null) {
            valMap.put("maxWithdrawAmount", maxWithdrawAmountValue);
        }
        Object assetsValue = getAssets();
        if (assetsValue != null) {
            valMap.put("assets", assetsValue);
        }
        Object positionsValue = getPositions();
        if (positionsValue != null) {
            valMap.put("positions", positionsValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("feeTier");
        openapiFields.add("canTrade");
        openapiFields.add("canDeposit");
        openapiFields.add("canWithdraw");
        openapiFields.add("updateTime");
        openapiFields.add("multiAssetsMargin");
        openapiFields.add("tradeGroupId");
        openapiFields.add("totalInitialMargin");
        openapiFields.add("totalMaintMargin");
        openapiFields.add("totalWalletBalance");
        openapiFields.add("totalUnrealizedProfit");
        openapiFields.add("totalMarginBalance");
        openapiFields.add("totalPositionInitialMargin");
        openapiFields.add("totalOpenOrderInitialMargin");
        openapiFields.add("totalCrossWalletBalance");
        openapiFields.add("totalCrossUnPnl");
        openapiFields.add("availableBalance");
        openapiFields.add("maxWithdrawAmount");
        openapiFields.add("assets");
        openapiFields.add("positions");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AccountInformationResponse1Result
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountInformationResponse1Result.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountInformationResponse1Result is"
                                        + " not found in the empty JSON string",
                                AccountInformationResponse1Result.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountInformationResponse1Result.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AccountInformationResponse1Result` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("totalInitialMargin") != null
                        && !jsonObj.get("totalInitialMargin").isJsonNull())
                && !jsonObj.get("totalInitialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalInitialMargin` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalInitialMargin").toString()));
        }
        if ((jsonObj.get("totalMaintMargin") != null
                        && !jsonObj.get("totalMaintMargin").isJsonNull())
                && !jsonObj.get("totalMaintMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalMaintMargin` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalMaintMargin").toString()));
        }
        if ((jsonObj.get("totalWalletBalance") != null
                        && !jsonObj.get("totalWalletBalance").isJsonNull())
                && !jsonObj.get("totalWalletBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalWalletBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalWalletBalance").toString()));
        }
        if ((jsonObj.get("totalUnrealizedProfit") != null
                        && !jsonObj.get("totalUnrealizedProfit").isJsonNull())
                && !jsonObj.get("totalUnrealizedProfit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalUnrealizedProfit` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("totalUnrealizedProfit").toString()));
        }
        if ((jsonObj.get("totalMarginBalance") != null
                        && !jsonObj.get("totalMarginBalance").isJsonNull())
                && !jsonObj.get("totalMarginBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalMarginBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalMarginBalance").toString()));
        }
        if ((jsonObj.get("totalPositionInitialMargin") != null
                        && !jsonObj.get("totalPositionInitialMargin").isJsonNull())
                && !jsonObj.get("totalPositionInitialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalPositionInitialMargin` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("totalPositionInitialMargin").toString()));
        }
        if ((jsonObj.get("totalOpenOrderInitialMargin") != null
                        && !jsonObj.get("totalOpenOrderInitialMargin").isJsonNull())
                && !jsonObj.get("totalOpenOrderInitialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalOpenOrderInitialMargin` to be a primitive"
                                    + " type in the JSON string but got `%s`",
                            jsonObj.get("totalOpenOrderInitialMargin").toString()));
        }
        if ((jsonObj.get("totalCrossWalletBalance") != null
                        && !jsonObj.get("totalCrossWalletBalance").isJsonNull())
                && !jsonObj.get("totalCrossWalletBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalCrossWalletBalance` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("totalCrossWalletBalance").toString()));
        }
        if ((jsonObj.get("totalCrossUnPnl") != null && !jsonObj.get("totalCrossUnPnl").isJsonNull())
                && !jsonObj.get("totalCrossUnPnl").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalCrossUnPnl` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalCrossUnPnl").toString()));
        }
        if ((jsonObj.get("availableBalance") != null
                        && !jsonObj.get("availableBalance").isJsonNull())
                && !jsonObj.get("availableBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `availableBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("availableBalance").toString()));
        }
        if ((jsonObj.get("maxWithdrawAmount") != null
                        && !jsonObj.get("maxWithdrawAmount").isJsonNull())
                && !jsonObj.get("maxWithdrawAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxWithdrawAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("maxWithdrawAmount").toString()));
        }
        if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
            JsonArray jsonArrayassets = jsonObj.getAsJsonArray("assets");
            if (jsonArrayassets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("assets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `assets` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("assets").toString()));
                }

                // validate the optional field `assets` (array)
                for (int i = 0; i < jsonArrayassets.size(); i++) {
                    AccountInformationResponse1ResultAssetsInner.validateJsonElement(
                            jsonArrayassets.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("positions") != null && !jsonObj.get("positions").isJsonNull()) {
            JsonArray jsonArraypositions = jsonObj.getAsJsonArray("positions");
            if (jsonArraypositions != null) {
                // ensure the json data is an array
                if (!jsonObj.get("positions").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `positions` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("positions").toString()));
                }

                // validate the optional field `positions` (array)
                for (int i = 0; i < jsonArraypositions.size(); i++) {
                    AccountInformationResponse1ResultPositionsInner.validateJsonElement(
                            jsonArraypositions.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountInformationResponse1Result.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountInformationResponse1Result' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountInformationResponse1Result> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AccountInformationResponse1Result.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountInformationResponse1Result>() {
                        @Override
                        public void write(JsonWriter out, AccountInformationResponse1Result value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountInformationResponse1Result read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountInformationResponse1Result given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountInformationResponse1Result
     * @throws IOException if the JSON string is invalid with respect to
     *     AccountInformationResponse1Result
     */
    public static AccountInformationResponse1Result fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountInformationResponse1Result.class);
    }

    /**
     * Convert an instance of AccountInformationResponse1Result to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
