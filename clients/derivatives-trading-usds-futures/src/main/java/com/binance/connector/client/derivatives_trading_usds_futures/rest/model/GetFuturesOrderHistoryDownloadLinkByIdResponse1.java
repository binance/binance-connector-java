/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFuturesOrderHistoryDownloadLinkByIdResponse1 */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFuturesOrderHistoryDownloadLinkByIdResponse1 {
    public static final String SERIALIZED_NAME_DOWNLOAD_ID = "downloadId";

    @SerializedName(SERIALIZED_NAME_DOWNLOAD_ID)
    @jakarta.annotation.Nullable
    private String downloadId;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_URL = "url";

    @SerializedName(SERIALIZED_NAME_URL)
    @jakarta.annotation.Nullable
    private String url;

    public static final String SERIALIZED_NAME_NOTIFIED = "notified";

    @SerializedName(SERIALIZED_NAME_NOTIFIED)
    @jakarta.annotation.Nullable
    private Boolean notified;

    public static final String SERIALIZED_NAME_EXPIRATION_TIMESTAMP = "expirationTimestamp";

    @SerializedName(SERIALIZED_NAME_EXPIRATION_TIMESTAMP)
    @jakarta.annotation.Nullable
    private Long expirationTimestamp;

    public static final String SERIALIZED_NAME_IS_EXPIRED = "isExpired";

    @SerializedName(SERIALIZED_NAME_IS_EXPIRED)
    @jakarta.annotation.Nullable
    private String isExpired;

    public GetFuturesOrderHistoryDownloadLinkByIdResponse1() {}

    public GetFuturesOrderHistoryDownloadLinkByIdResponse1 downloadId(
            @jakarta.annotation.Nullable String downloadId) {
        this.downloadId = downloadId;
        return this;
    }

    /**
     * Get downloadId
     *
     * @return downloadId
     */
    @jakarta.annotation.Nullable
    public String getDownloadId() {
        return downloadId;
    }

    public void setDownloadId(@jakarta.annotation.Nullable String downloadId) {
        this.downloadId = downloadId;
    }

    public GetFuturesOrderHistoryDownloadLinkByIdResponse1 status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public GetFuturesOrderHistoryDownloadLinkByIdResponse1 url(
            @jakarta.annotation.Nullable String url) {
        this.url = url;
        return this;
    }

    /**
     * Get url
     *
     * @return url
     */
    @jakarta.annotation.Nullable
    public String getUrl() {
        return url;
    }

    public void setUrl(@jakarta.annotation.Nullable String url) {
        this.url = url;
    }

    public GetFuturesOrderHistoryDownloadLinkByIdResponse1 notified(
            @jakarta.annotation.Nullable Boolean notified) {
        this.notified = notified;
        return this;
    }

    /**
     * Get notified
     *
     * @return notified
     */
    @jakarta.annotation.Nullable
    public Boolean getNotified() {
        return notified;
    }

    public void setNotified(@jakarta.annotation.Nullable Boolean notified) {
        this.notified = notified;
    }

    public GetFuturesOrderHistoryDownloadLinkByIdResponse1 expirationTimestamp(
            @jakarta.annotation.Nullable Long expirationTimestamp) {
        this.expirationTimestamp = expirationTimestamp;
        return this;
    }

    /**
     * Get expirationTimestamp
     *
     * @return expirationTimestamp
     */
    @jakarta.annotation.Nullable
    public Long getExpirationTimestamp() {
        return expirationTimestamp;
    }

    public void setExpirationTimestamp(@jakarta.annotation.Nullable Long expirationTimestamp) {
        this.expirationTimestamp = expirationTimestamp;
    }

    public GetFuturesOrderHistoryDownloadLinkByIdResponse1 isExpired(
            @jakarta.annotation.Nullable String isExpired) {
        this.isExpired = isExpired;
        return this;
    }

    /**
     * Get isExpired
     *
     * @return isExpired
     */
    @jakarta.annotation.Nullable
    public String getIsExpired() {
        return isExpired;
    }

    public void setIsExpired(@jakarta.annotation.Nullable String isExpired) {
        this.isExpired = isExpired;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFuturesOrderHistoryDownloadLinkByIdResponse1
                getFuturesOrderHistoryDownloadLinkByIdResponse1 =
                        (GetFuturesOrderHistoryDownloadLinkByIdResponse1) o;
        return Objects.equals(
                        this.downloadId, getFuturesOrderHistoryDownloadLinkByIdResponse1.downloadId)
                && Objects.equals(
                        this.status, getFuturesOrderHistoryDownloadLinkByIdResponse1.status)
                && Objects.equals(this.url, getFuturesOrderHistoryDownloadLinkByIdResponse1.url)
                && Objects.equals(
                        this.notified, getFuturesOrderHistoryDownloadLinkByIdResponse1.notified)
                && Objects.equals(
                        this.expirationTimestamp,
                        getFuturesOrderHistoryDownloadLinkByIdResponse1.expirationTimestamp)
                && Objects.equals(
                        this.isExpired, getFuturesOrderHistoryDownloadLinkByIdResponse1.isExpired);
    }

    @Override
    public int hashCode() {
        return Objects.hash(downloadId, status, url, notified, expirationTimestamp, isExpired);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetFuturesOrderHistoryDownloadLinkByIdResponse1 {\n");
        sb.append("		downloadId: ").append(toIndentedString(downloadId)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		url: ").append(toIndentedString(url)).append("\n");
        sb.append("		notified: ").append(toIndentedString(notified)).append("\n");
        sb.append("		expirationTimestamp: ")
                .append(toIndentedString(expirationTimestamp))
                .append("\n");
        sb.append("		isExpired: ").append(toIndentedString(isExpired)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object downloadIdValue = getDownloadId();
        String downloadIdValueAsString = "";
        downloadIdValueAsString = downloadIdValue.toString();
        sb.append("downloadId=").append(urlEncode(downloadIdValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object urlValue = getUrl();
        String urlValueAsString = "";
        urlValueAsString = urlValue.toString();
        sb.append("url=").append(urlEncode(urlValueAsString)).append("");
        Object notifiedValue = getNotified();
        String notifiedValueAsString = "";
        notifiedValueAsString = notifiedValue.toString();
        sb.append("notified=").append(urlEncode(notifiedValueAsString)).append("");
        Object expirationTimestampValue = getExpirationTimestamp();
        String expirationTimestampValueAsString = "";
        expirationTimestampValueAsString = expirationTimestampValue.toString();
        sb.append("expirationTimestamp=")
                .append(urlEncode(expirationTimestampValueAsString))
                .append("");
        Object isExpiredValue = getIsExpired();
        String isExpiredValueAsString = "";
        isExpiredValueAsString = isExpiredValue.toString();
        sb.append("isExpired=").append(urlEncode(isExpiredValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("downloadId");
        openapiFields.add("status");
        openapiFields.add("url");
        openapiFields.add("notified");
        openapiFields.add("expirationTimestamp");
        openapiFields.add("isExpired");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFuturesOrderHistoryDownloadLinkByIdResponse1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFuturesOrderHistoryDownloadLinkByIdResponse1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " GetFuturesOrderHistoryDownloadLinkByIdResponse1 is not"
                                        + " found in the empty JSON string",
                                GetFuturesOrderHistoryDownloadLinkByIdResponse1
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFuturesOrderHistoryDownloadLinkByIdResponse1.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetFuturesOrderHistoryDownloadLinkByIdResponse1`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("downloadId") != null && !jsonObj.get("downloadId").isJsonNull())
                && !jsonObj.get("downloadId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `downloadId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("downloadId").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull())
                && !jsonObj.get("url").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `url` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("url").toString()));
        }
        if ((jsonObj.get("isExpired") != null && !jsonObj.get("isExpired").isJsonNull())
                && !jsonObj.get("isExpired").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isExpired` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isExpired").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFuturesOrderHistoryDownloadLinkByIdResponse1.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetFuturesOrderHistoryDownloadLinkByIdResponse1' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetFuturesOrderHistoryDownloadLinkByIdResponse1> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(GetFuturesOrderHistoryDownloadLinkByIdResponse1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetFuturesOrderHistoryDownloadLinkByIdResponse1>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetFuturesOrderHistoryDownloadLinkByIdResponse1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetFuturesOrderHistoryDownloadLinkByIdResponse1 read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFuturesOrderHistoryDownloadLinkByIdResponse1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFuturesOrderHistoryDownloadLinkByIdResponse1
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFuturesOrderHistoryDownloadLinkByIdResponse1
     */
    public static GetFuturesOrderHistoryDownloadLinkByIdResponse1 fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetFuturesOrderHistoryDownloadLinkByIdResponse1.class);
    }

    /**
     * Convert an instance of GetFuturesOrderHistoryDownloadLinkByIdResponse1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
