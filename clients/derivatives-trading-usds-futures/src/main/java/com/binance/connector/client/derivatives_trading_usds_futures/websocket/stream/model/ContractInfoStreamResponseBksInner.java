/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** ContractInfoStreamResponseBksInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ContractInfoStreamResponseBksInner extends BaseDTO {
    public static final String SERIALIZED_NAME_BS = "bs";

    @SerializedName(SERIALIZED_NAME_BS)
    @jakarta.annotation.Nullable
    private Long bs;

    public static final String SERIALIZED_NAME_BNF = "bnf";

    @SerializedName(SERIALIZED_NAME_BNF)
    @jakarta.annotation.Nullable
    private Long bnf;

    public static final String SERIALIZED_NAME_BNC = "bnc";

    @SerializedName(SERIALIZED_NAME_BNC)
    @jakarta.annotation.Nullable
    private Long bnc;

    public static final String SERIALIZED_NAME_MMR = "mmr";

    @SerializedName(SERIALIZED_NAME_MMR)
    @jakarta.annotation.Nullable
    private Double mmr;

    public static final String SERIALIZED_NAME_CF = "cf";

    @SerializedName(SERIALIZED_NAME_CF)
    @jakarta.annotation.Nullable
    private Long cf;

    public static final String SERIALIZED_NAME_MI = "mi";

    @SerializedName(SERIALIZED_NAME_MI)
    @jakarta.annotation.Nullable
    private Long mi;

    public static final String SERIALIZED_NAME_MA = "ma";

    @SerializedName(SERIALIZED_NAME_MA)
    @jakarta.annotation.Nullable
    private Long ma;

    public ContractInfoStreamResponseBksInner() {}

    public ContractInfoStreamResponseBksInner bs(@jakarta.annotation.Nullable Long bs) {
        this.bs = bs;
        return this;
    }

    /**
     * Get bs
     *
     * @return bs
     */
    @jakarta.annotation.Nullable
    public Long getBs() {
        return bs;
    }

    public void setBs(@jakarta.annotation.Nullable Long bs) {
        this.bs = bs;
    }

    public ContractInfoStreamResponseBksInner bnf(@jakarta.annotation.Nullable Long bnf) {
        this.bnf = bnf;
        return this;
    }

    /**
     * Get bnf
     *
     * @return bnf
     */
    @jakarta.annotation.Nullable
    public Long getBnf() {
        return bnf;
    }

    public void setBnf(@jakarta.annotation.Nullable Long bnf) {
        this.bnf = bnf;
    }

    public ContractInfoStreamResponseBksInner bnc(@jakarta.annotation.Nullable Long bnc) {
        this.bnc = bnc;
        return this;
    }

    /**
     * Get bnc
     *
     * @return bnc
     */
    @jakarta.annotation.Nullable
    public Long getBnc() {
        return bnc;
    }

    public void setBnc(@jakarta.annotation.Nullable Long bnc) {
        this.bnc = bnc;
    }

    public ContractInfoStreamResponseBksInner mmr(@jakarta.annotation.Nullable Double mmr) {
        this.mmr = mmr;
        return this;
    }

    /**
     * Get mmr
     *
     * @return mmr
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getMmr() {
        return mmr;
    }

    public void setMmr(@jakarta.annotation.Nullable Double mmr) {
        this.mmr = mmr;
    }

    public ContractInfoStreamResponseBksInner cf(@jakarta.annotation.Nullable Long cf) {
        this.cf = cf;
        return this;
    }

    /**
     * Get cf
     *
     * @return cf
     */
    @jakarta.annotation.Nullable
    public Long getCf() {
        return cf;
    }

    public void setCf(@jakarta.annotation.Nullable Long cf) {
        this.cf = cf;
    }

    public ContractInfoStreamResponseBksInner mi(@jakarta.annotation.Nullable Long mi) {
        this.mi = mi;
        return this;
    }

    /**
     * Get mi
     *
     * @return mi
     */
    @jakarta.annotation.Nullable
    public Long getMi() {
        return mi;
    }

    public void setMi(@jakarta.annotation.Nullable Long mi) {
        this.mi = mi;
    }

    public ContractInfoStreamResponseBksInner ma(@jakarta.annotation.Nullable Long ma) {
        this.ma = ma;
        return this;
    }

    /**
     * Get ma
     *
     * @return ma
     */
    @jakarta.annotation.Nullable
    public Long getMa() {
        return ma;
    }

    public void setMa(@jakarta.annotation.Nullable Long ma) {
        this.ma = ma;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractInfoStreamResponseBksInner contractInfoStreamResponseBksInner =
                (ContractInfoStreamResponseBksInner) o;
        return Objects.equals(this.bs, contractInfoStreamResponseBksInner.bs)
                && Objects.equals(this.bnf, contractInfoStreamResponseBksInner.bnf)
                && Objects.equals(this.bnc, contractInfoStreamResponseBksInner.bnc)
                && Objects.equals(this.mmr, contractInfoStreamResponseBksInner.mmr)
                && Objects.equals(this.cf, contractInfoStreamResponseBksInner.cf)
                && Objects.equals(this.mi, contractInfoStreamResponseBksInner.mi)
                && Objects.equals(this.ma, contractInfoStreamResponseBksInner.ma);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bs, bnf, bnc, mmr, cf, mi, ma);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContractInfoStreamResponseBksInner {\n");
        sb.append("		bs: ").append(toIndentedString(bs)).append("\n");
        sb.append("		bnf: ").append(toIndentedString(bnf)).append("\n");
        sb.append("		bnc: ").append(toIndentedString(bnc)).append("\n");
        sb.append("		mmr: ").append(toIndentedString(mmr)).append("\n");
        sb.append("		cf: ").append(toIndentedString(cf)).append("\n");
        sb.append("		mi: ").append(toIndentedString(mi)).append("\n");
        sb.append("		ma: ").append(toIndentedString(ma)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long bsValue = getBs();
        if (bsValue != null) {
            String bsValueAsString = bsValue.toString();
            valMap.put("bs", bsValueAsString);
        }
        Long bnfValue = getBnf();
        if (bnfValue != null) {
            String bnfValueAsString = bnfValue.toString();
            valMap.put("bnf", bnfValueAsString);
        }
        Long bncValue = getBnc();
        if (bncValue != null) {
            String bncValueAsString = bncValue.toString();
            valMap.put("bnc", bncValueAsString);
        }
        Double mmrValue = getMmr();
        if (mmrValue != null) {
            String mmrValueAsString = DecimalFormatter.getFormatter().format(mmrValue);
            valMap.put("mmr", mmrValueAsString);
        }
        Long cfValue = getCf();
        if (cfValue != null) {
            String cfValueAsString = cfValue.toString();
            valMap.put("cf", cfValueAsString);
        }
        Long miValue = getMi();
        if (miValue != null) {
            String miValueAsString = miValue.toString();
            valMap.put("mi", miValueAsString);
        }
        Long maValue = getMa();
        if (maValue != null) {
            String maValueAsString = maValue.toString();
            valMap.put("ma", maValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object bsValue = getBs();
        if (bsValue != null) {
            valMap.put("bs", bsValue);
        }
        Object bnfValue = getBnf();
        if (bnfValue != null) {
            valMap.put("bnf", bnfValue);
        }
        Object bncValue = getBnc();
        if (bncValue != null) {
            valMap.put("bnc", bncValue);
        }
        Object mmrValue = getMmr();
        if (mmrValue != null) {
            valMap.put("mmr", mmrValue);
        }
        Object cfValue = getCf();
        if (cfValue != null) {
            valMap.put("cf", cfValue);
        }
        Object miValue = getMi();
        if (miValue != null) {
            valMap.put("mi", miValue);
        }
        Object maValue = getMa();
        if (maValue != null) {
            valMap.put("ma", maValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("bs");
        openapiFields.add("bnf");
        openapiFields.add("bnc");
        openapiFields.add("mmr");
        openapiFields.add("cf");
        openapiFields.add("mi");
        openapiFields.add("ma");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ContractInfoStreamResponseBksInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ContractInfoStreamResponseBksInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ContractInfoStreamResponseBksInner is"
                                        + " not found in the empty JSON string",
                                ContractInfoStreamResponseBksInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ContractInfoStreamResponseBksInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ContractInfoStreamResponseBksInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ContractInfoStreamResponseBksInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ContractInfoStreamResponseBksInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ContractInfoStreamResponseBksInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ContractInfoStreamResponseBksInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ContractInfoStreamResponseBksInner>() {
                        @Override
                        public void write(JsonWriter out, ContractInfoStreamResponseBksInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ContractInfoStreamResponseBksInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ContractInfoStreamResponseBksInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ContractInfoStreamResponseBksInner
     * @throws IOException if the JSON string is invalid with respect to
     *     ContractInfoStreamResponseBksInner
     */
    public static ContractInfoStreamResponseBksInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, ContractInfoStreamResponseBksInner.class);
    }

    /**
     * Convert an instance of ContractInfoStreamResponseBksInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
