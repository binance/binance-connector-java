/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** CompositeIndexSymbolInformationStreamsResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class CompositeIndexSymbolInformationStreamsResponse extends BaseDTO {
    public static final String SERIALIZED_NAME_E_LOWER_CASE = "e";

    @SerializedName(SERIALIZED_NAME_E_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String eLowerCase;

    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_P_LOWER_CASE = "p";

    @SerializedName(SERIALIZED_NAME_P_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String pLowerCase;

    public static final String SERIALIZED_NAME_C = "C";

    @SerializedName(SERIALIZED_NAME_C)
    @jakarta.annotation.Nullable
    private String C;

    public static final String SERIALIZED_NAME_C_LOWER_CASE = "c";

    @SerializedName(SERIALIZED_NAME_C_LOWER_CASE)
    @jakarta.annotation.Nullable
    private List<@Valid CompositeIndexSymbolInformationStreamsResponseCInner> cLowerCase;

    public CompositeIndexSymbolInformationStreamsResponse() {}

    public CompositeIndexSymbolInformationStreamsResponse eLowerCase(
            @jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
        return this;
    }

    /**
     * Get eLowerCase
     *
     * @return eLowerCase
     */
    @jakarta.annotation.Nullable
    public String geteLowerCase() {
        return eLowerCase;
    }

    public void seteLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
    }

    public CompositeIndexSymbolInformationStreamsResponse E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public CompositeIndexSymbolInformationStreamsResponse sLowerCase(
            @jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public CompositeIndexSymbolInformationStreamsResponse pLowerCase(
            @jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
        return this;
    }

    /**
     * Get pLowerCase
     *
     * @return pLowerCase
     */
    @jakarta.annotation.Nullable
    public String getpLowerCase() {
        return pLowerCase;
    }

    public void setpLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
    }

    public CompositeIndexSymbolInformationStreamsResponse C(@jakarta.annotation.Nullable String C) {
        this.C = C;
        return this;
    }

    /**
     * Get C
     *
     * @return C
     */
    @jakarta.annotation.Nullable
    public String getC() {
        return C;
    }

    public void setC(@jakarta.annotation.Nullable String C) {
        this.C = C;
    }

    public CompositeIndexSymbolInformationStreamsResponse cLowerCase(
            @jakarta.annotation.Nullable
                    List<@Valid CompositeIndexSymbolInformationStreamsResponseCInner> cLowerCase) {
        this.cLowerCase = cLowerCase;
        return this;
    }

    public CompositeIndexSymbolInformationStreamsResponse addCLowerCaseItem(
            CompositeIndexSymbolInformationStreamsResponseCInner cLowerCaseItem) {
        if (this.cLowerCase == null) {
            this.cLowerCase = new ArrayList<>();
        }
        this.cLowerCase.add(cLowerCaseItem);
        return this;
    }

    /**
     * Get cLowerCase
     *
     * @return cLowerCase
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid CompositeIndexSymbolInformationStreamsResponseCInner> getcLowerCase() {
        return cLowerCase;
    }

    public void setcLowerCase(
            @jakarta.annotation.Nullable
                    List<@Valid CompositeIndexSymbolInformationStreamsResponseCInner> cLowerCase) {
        this.cLowerCase = cLowerCase;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompositeIndexSymbolInformationStreamsResponse
                compositeIndexSymbolInformationStreamsResponse =
                        (CompositeIndexSymbolInformationStreamsResponse) o;
        return Objects.equals(
                        this.eLowerCase, compositeIndexSymbolInformationStreamsResponse.eLowerCase)
                && Objects.equals(this.E, compositeIndexSymbolInformationStreamsResponse.E)
                && Objects.equals(
                        this.sLowerCase, compositeIndexSymbolInformationStreamsResponse.sLowerCase)
                && Objects.equals(
                        this.pLowerCase, compositeIndexSymbolInformationStreamsResponse.pLowerCase)
                && Objects.equals(this.C, compositeIndexSymbolInformationStreamsResponse.C)
                && Objects.equals(
                        this.cLowerCase, compositeIndexSymbolInformationStreamsResponse.cLowerCase);
    }

    @Override
    public int hashCode() {
        return Objects.hash(eLowerCase, E, sLowerCase, pLowerCase, C, cLowerCase);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CompositeIndexSymbolInformationStreamsResponse {\n");
        sb.append("		eLowerCase: ").append(toIndentedString(eLowerCase)).append("\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		pLowerCase: ").append(toIndentedString(pLowerCase)).append("\n");
        sb.append("		C: ").append(toIndentedString(C)).append("\n");
        sb.append("		cLowerCase: ").append(toIndentedString(cLowerCase)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            String eLowerCaseValueAsString = eLowerCaseValue.toString();
            valMap.put("eLowerCase", eLowerCaseValueAsString);
        }
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            String pLowerCaseValueAsString = pLowerCaseValue.toString();
            valMap.put("pLowerCase", pLowerCaseValueAsString);
        }
        String CValue = getC();
        if (CValue != null) {
            String CValueAsString = CValue.toString();
            valMap.put("C", CValueAsString);
        }
        List<@Valid CompositeIndexSymbolInformationStreamsResponseCInner> cLowerCaseValue =
                getcLowerCase();
        if (cLowerCaseValue != null) {
            String cLowerCaseValueAsString = JSON.getGson().toJson(cLowerCaseValue);
            valMap.put("cLowerCase", cLowerCaseValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            valMap.put("eLowerCase", eLowerCaseValue);
        }
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            valMap.put("pLowerCase", pLowerCaseValue);
        }
        Object CValue = getC();
        if (CValue != null) {
            valMap.put("C", CValue);
        }
        Object cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            valMap.put("cLowerCase", cLowerCaseValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("e");
        openapiFields.add("E");
        openapiFields.add("s");
        openapiFields.add("p");
        openapiFields.add("C");
        openapiFields.add("c");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     CompositeIndexSymbolInformationStreamsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CompositeIndexSymbolInformationStreamsResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " CompositeIndexSymbolInformationStreamsResponse is not found"
                                    + " in the empty JSON string",
                                CompositeIndexSymbolInformationStreamsResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CompositeIndexSymbolInformationStreamsResponse.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CompositeIndexSymbolInformationStreamsResponse`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull())
                && !jsonObj.get("e").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `e` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("e").toString()));
        }
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("p") != null && !jsonObj.get("p").isJsonNull())
                && !jsonObj.get("p").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `p` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("p").toString()));
        }
        if ((jsonObj.get("C") != null && !jsonObj.get("C").isJsonNull())
                && !jsonObj.get("C").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `C` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("C").toString()));
        }
        if (jsonObj.get("c") != null && !jsonObj.get("c").isJsonNull()) {
            JsonArray jsonArraycLowerCase = jsonObj.getAsJsonArray("c");
            if (jsonArraycLowerCase != null) {
                // ensure the json data is an array
                if (!jsonObj.get("c").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `c` to be an array in the JSON string but"
                                            + " got `%s`",
                                    jsonObj.get("c").toString()));
                }

                // validate the optional field `c` (array)
                for (int i = 0; i < jsonArraycLowerCase.size(); i++) {
                    CompositeIndexSymbolInformationStreamsResponseCInner.validateJsonElement(
                            jsonArraycLowerCase.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CompositeIndexSymbolInformationStreamsResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'CompositeIndexSymbolInformationStreamsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CompositeIndexSymbolInformationStreamsResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(CompositeIndexSymbolInformationStreamsResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CompositeIndexSymbolInformationStreamsResponse>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                CompositeIndexSymbolInformationStreamsResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CompositeIndexSymbolInformationStreamsResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CompositeIndexSymbolInformationStreamsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CompositeIndexSymbolInformationStreamsResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     CompositeIndexSymbolInformationStreamsResponse
     */
    public static CompositeIndexSymbolInformationStreamsResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, CompositeIndexSymbolInformationStreamsResponse.class);
    }

    /**
     * Convert an instance of CompositeIndexSymbolInformationStreamsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
