/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** KlineCandlestickStreamsResponseK */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class KlineCandlestickStreamsResponseK extends BaseDTO {
    public static final String SERIALIZED_NAME_T_LOWER_CASE = "t";

    @SerializedName(SERIALIZED_NAME_T_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long tLowerCase;

    public static final String SERIALIZED_NAME_T = "T";

    @SerializedName(SERIALIZED_NAME_T)
    @jakarta.annotation.Nullable
    private Long T;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_I_LOWER_CASE = "i";

    @SerializedName(SERIALIZED_NAME_I_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String iLowerCase;

    public static final String SERIALIZED_NAME_F_LOWER_CASE = "f";

    @SerializedName(SERIALIZED_NAME_F_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long fLowerCase;

    public static final String SERIALIZED_NAME_L = "L";

    @SerializedName(SERIALIZED_NAME_L)
    @jakarta.annotation.Nullable
    private Long L;

    public static final String SERIALIZED_NAME_O_LOWER_CASE = "o";

    @SerializedName(SERIALIZED_NAME_O_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String oLowerCase;

    public static final String SERIALIZED_NAME_C_LOWER_CASE = "c";

    @SerializedName(SERIALIZED_NAME_C_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String cLowerCase;

    public static final String SERIALIZED_NAME_H_LOWER_CASE = "h";

    @SerializedName(SERIALIZED_NAME_H_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String hLowerCase;

    public static final String SERIALIZED_NAME_L_LOWER_CASE = "l";

    @SerializedName(SERIALIZED_NAME_L_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String lLowerCase;

    public static final String SERIALIZED_NAME_V_LOWER_CASE = "v";

    @SerializedName(SERIALIZED_NAME_V_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String vLowerCase;

    public static final String SERIALIZED_NAME_N_LOWER_CASE = "n";

    @SerializedName(SERIALIZED_NAME_N_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long nLowerCase;

    public static final String SERIALIZED_NAME_X_LOWER_CASE = "x";

    @SerializedName(SERIALIZED_NAME_X_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Boolean xLowerCase;

    public static final String SERIALIZED_NAME_Q_LOWER_CASE = "q";

    @SerializedName(SERIALIZED_NAME_Q_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String qLowerCase;

    public static final String SERIALIZED_NAME_V = "V";

    @SerializedName(SERIALIZED_NAME_V)
    @jakarta.annotation.Nullable
    private String V;

    public static final String SERIALIZED_NAME_Q = "Q";

    @SerializedName(SERIALIZED_NAME_Q)
    @jakarta.annotation.Nullable
    private String Q;

    public static final String SERIALIZED_NAME_B = "B";

    @SerializedName(SERIALIZED_NAME_B)
    @jakarta.annotation.Nullable
    private String B;

    public KlineCandlestickStreamsResponseK() {}

    public KlineCandlestickStreamsResponseK tLowerCase(
            @jakarta.annotation.Nullable Long tLowerCase) {
        this.tLowerCase = tLowerCase;
        return this;
    }

    /**
     * Get tLowerCase
     *
     * @return tLowerCase
     */
    @jakarta.annotation.Nullable
    public Long gettLowerCase() {
        return tLowerCase;
    }

    public void settLowerCase(@jakarta.annotation.Nullable Long tLowerCase) {
        this.tLowerCase = tLowerCase;
    }

    public KlineCandlestickStreamsResponseK T(@jakarta.annotation.Nullable Long T) {
        this.T = T;
        return this;
    }

    /**
     * Get T
     *
     * @return T
     */
    @jakarta.annotation.Nullable
    public Long getT() {
        return T;
    }

    public void setT(@jakarta.annotation.Nullable Long T) {
        this.T = T;
    }

    public KlineCandlestickStreamsResponseK sLowerCase(
            @jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public KlineCandlestickStreamsResponseK iLowerCase(
            @jakarta.annotation.Nullable String iLowerCase) {
        this.iLowerCase = iLowerCase;
        return this;
    }

    /**
     * Get iLowerCase
     *
     * @return iLowerCase
     */
    @jakarta.annotation.Nullable
    public String getiLowerCase() {
        return iLowerCase;
    }

    public void setiLowerCase(@jakarta.annotation.Nullable String iLowerCase) {
        this.iLowerCase = iLowerCase;
    }

    public KlineCandlestickStreamsResponseK fLowerCase(
            @jakarta.annotation.Nullable Long fLowerCase) {
        this.fLowerCase = fLowerCase;
        return this;
    }

    /**
     * Get fLowerCase
     *
     * @return fLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getfLowerCase() {
        return fLowerCase;
    }

    public void setfLowerCase(@jakarta.annotation.Nullable Long fLowerCase) {
        this.fLowerCase = fLowerCase;
    }

    public KlineCandlestickStreamsResponseK L(@jakarta.annotation.Nullable Long L) {
        this.L = L;
        return this;
    }

    /**
     * Get L
     *
     * @return L
     */
    @jakarta.annotation.Nullable
    public Long getL() {
        return L;
    }

    public void setL(@jakarta.annotation.Nullable Long L) {
        this.L = L;
    }

    public KlineCandlestickStreamsResponseK oLowerCase(
            @jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
        return this;
    }

    /**
     * Get oLowerCase
     *
     * @return oLowerCase
     */
    @jakarta.annotation.Nullable
    public String getoLowerCase() {
        return oLowerCase;
    }

    public void setoLowerCase(@jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
    }

    public KlineCandlestickStreamsResponseK cLowerCase(
            @jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
        return this;
    }

    /**
     * Get cLowerCase
     *
     * @return cLowerCase
     */
    @jakarta.annotation.Nullable
    public String getcLowerCase() {
        return cLowerCase;
    }

    public void setcLowerCase(@jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
    }

    public KlineCandlestickStreamsResponseK hLowerCase(
            @jakarta.annotation.Nullable String hLowerCase) {
        this.hLowerCase = hLowerCase;
        return this;
    }

    /**
     * Get hLowerCase
     *
     * @return hLowerCase
     */
    @jakarta.annotation.Nullable
    public String gethLowerCase() {
        return hLowerCase;
    }

    public void sethLowerCase(@jakarta.annotation.Nullable String hLowerCase) {
        this.hLowerCase = hLowerCase;
    }

    public KlineCandlestickStreamsResponseK lLowerCase(
            @jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
        return this;
    }

    /**
     * Get lLowerCase
     *
     * @return lLowerCase
     */
    @jakarta.annotation.Nullable
    public String getlLowerCase() {
        return lLowerCase;
    }

    public void setlLowerCase(@jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
    }

    public KlineCandlestickStreamsResponseK vLowerCase(
            @jakarta.annotation.Nullable String vLowerCase) {
        this.vLowerCase = vLowerCase;
        return this;
    }

    /**
     * Get vLowerCase
     *
     * @return vLowerCase
     */
    @jakarta.annotation.Nullable
    public String getvLowerCase() {
        return vLowerCase;
    }

    public void setvLowerCase(@jakarta.annotation.Nullable String vLowerCase) {
        this.vLowerCase = vLowerCase;
    }

    public KlineCandlestickStreamsResponseK nLowerCase(
            @jakarta.annotation.Nullable Long nLowerCase) {
        this.nLowerCase = nLowerCase;
        return this;
    }

    /**
     * Get nLowerCase
     *
     * @return nLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getnLowerCase() {
        return nLowerCase;
    }

    public void setnLowerCase(@jakarta.annotation.Nullable Long nLowerCase) {
        this.nLowerCase = nLowerCase;
    }

    public KlineCandlestickStreamsResponseK xLowerCase(
            @jakarta.annotation.Nullable Boolean xLowerCase) {
        this.xLowerCase = xLowerCase;
        return this;
    }

    /**
     * Get xLowerCase
     *
     * @return xLowerCase
     */
    @jakarta.annotation.Nullable
    public Boolean getxLowerCase() {
        return xLowerCase;
    }

    public void setxLowerCase(@jakarta.annotation.Nullable Boolean xLowerCase) {
        this.xLowerCase = xLowerCase;
    }

    public KlineCandlestickStreamsResponseK qLowerCase(
            @jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
        return this;
    }

    /**
     * Get qLowerCase
     *
     * @return qLowerCase
     */
    @jakarta.annotation.Nullable
    public String getqLowerCase() {
        return qLowerCase;
    }

    public void setqLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
    }

    public KlineCandlestickStreamsResponseK V(@jakarta.annotation.Nullable String V) {
        this.V = V;
        return this;
    }

    /**
     * Get V
     *
     * @return V
     */
    @jakarta.annotation.Nullable
    public String getV() {
        return V;
    }

    public void setV(@jakarta.annotation.Nullable String V) {
        this.V = V;
    }

    public KlineCandlestickStreamsResponseK Q(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
        return this;
    }

    /**
     * Get Q
     *
     * @return Q
     */
    @jakarta.annotation.Nullable
    public String getQ() {
        return Q;
    }

    public void setQ(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
    }

    public KlineCandlestickStreamsResponseK B(@jakarta.annotation.Nullable String B) {
        this.B = B;
        return this;
    }

    /**
     * Get B
     *
     * @return B
     */
    @jakarta.annotation.Nullable
    public String getB() {
        return B;
    }

    public void setB(@jakarta.annotation.Nullable String B) {
        this.B = B;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KlineCandlestickStreamsResponseK klineCandlestickStreamsResponseK =
                (KlineCandlestickStreamsResponseK) o;
        return Objects.equals(this.tLowerCase, klineCandlestickStreamsResponseK.tLowerCase)
                && Objects.equals(this.T, klineCandlestickStreamsResponseK.T)
                && Objects.equals(this.sLowerCase, klineCandlestickStreamsResponseK.sLowerCase)
                && Objects.equals(this.iLowerCase, klineCandlestickStreamsResponseK.iLowerCase)
                && Objects.equals(this.fLowerCase, klineCandlestickStreamsResponseK.fLowerCase)
                && Objects.equals(this.L, klineCandlestickStreamsResponseK.L)
                && Objects.equals(this.oLowerCase, klineCandlestickStreamsResponseK.oLowerCase)
                && Objects.equals(this.cLowerCase, klineCandlestickStreamsResponseK.cLowerCase)
                && Objects.equals(this.hLowerCase, klineCandlestickStreamsResponseK.hLowerCase)
                && Objects.equals(this.lLowerCase, klineCandlestickStreamsResponseK.lLowerCase)
                && Objects.equals(this.vLowerCase, klineCandlestickStreamsResponseK.vLowerCase)
                && Objects.equals(this.nLowerCase, klineCandlestickStreamsResponseK.nLowerCase)
                && Objects.equals(this.xLowerCase, klineCandlestickStreamsResponseK.xLowerCase)
                && Objects.equals(this.qLowerCase, klineCandlestickStreamsResponseK.qLowerCase)
                && Objects.equals(this.V, klineCandlestickStreamsResponseK.V)
                && Objects.equals(this.Q, klineCandlestickStreamsResponseK.Q)
                && Objects.equals(this.B, klineCandlestickStreamsResponseK.B);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                tLowerCase,
                T,
                sLowerCase,
                iLowerCase,
                fLowerCase,
                L,
                oLowerCase,
                cLowerCase,
                hLowerCase,
                lLowerCase,
                vLowerCase,
                nLowerCase,
                xLowerCase,
                qLowerCase,
                V,
                Q,
                B);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KlineCandlestickStreamsResponseK {\n");
        sb.append("		tLowerCase: ").append(toIndentedString(tLowerCase)).append("\n");
        sb.append("		T: ").append(toIndentedString(T)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		iLowerCase: ").append(toIndentedString(iLowerCase)).append("\n");
        sb.append("		fLowerCase: ").append(toIndentedString(fLowerCase)).append("\n");
        sb.append("		L: ").append(toIndentedString(L)).append("\n");
        sb.append("		oLowerCase: ").append(toIndentedString(oLowerCase)).append("\n");
        sb.append("		cLowerCase: ").append(toIndentedString(cLowerCase)).append("\n");
        sb.append("		hLowerCase: ").append(toIndentedString(hLowerCase)).append("\n");
        sb.append("		lLowerCase: ").append(toIndentedString(lLowerCase)).append("\n");
        sb.append("		vLowerCase: ").append(toIndentedString(vLowerCase)).append("\n");
        sb.append("		nLowerCase: ").append(toIndentedString(nLowerCase)).append("\n");
        sb.append("		xLowerCase: ").append(toIndentedString(xLowerCase)).append("\n");
        sb.append("		qLowerCase: ").append(toIndentedString(qLowerCase)).append("\n");
        sb.append("		V: ").append(toIndentedString(V)).append("\n");
        sb.append("		Q: ").append(toIndentedString(Q)).append("\n");
        sb.append("		B: ").append(toIndentedString(B)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Long tLowerCaseValue = gettLowerCase();
        if (tLowerCaseValue != null) {
            String tLowerCaseValueAsString = tLowerCaseValue.toString();
            valMap.put("tLowerCase", tLowerCaseValueAsString);
        }
        Long TValue = getT();
        if (TValue != null) {
            String TValueAsString = TValue.toString();
            valMap.put("T", TValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            String iLowerCaseValueAsString = iLowerCaseValue.toString();
            valMap.put("iLowerCase", iLowerCaseValueAsString);
        }
        Long fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            String fLowerCaseValueAsString = fLowerCaseValue.toString();
            valMap.put("fLowerCase", fLowerCaseValueAsString);
        }
        Long LValue = getL();
        if (LValue != null) {
            String LValueAsString = LValue.toString();
            valMap.put("L", LValueAsString);
        }
        String oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            String oLowerCaseValueAsString = oLowerCaseValue.toString();
            valMap.put("oLowerCase", oLowerCaseValueAsString);
        }
        String cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            String cLowerCaseValueAsString = cLowerCaseValue.toString();
            valMap.put("cLowerCase", cLowerCaseValueAsString);
        }
        String hLowerCaseValue = gethLowerCase();
        if (hLowerCaseValue != null) {
            String hLowerCaseValueAsString = hLowerCaseValue.toString();
            valMap.put("hLowerCase", hLowerCaseValueAsString);
        }
        String lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            String lLowerCaseValueAsString = lLowerCaseValue.toString();
            valMap.put("lLowerCase", lLowerCaseValueAsString);
        }
        String vLowerCaseValue = getvLowerCase();
        if (vLowerCaseValue != null) {
            String vLowerCaseValueAsString = vLowerCaseValue.toString();
            valMap.put("vLowerCase", vLowerCaseValueAsString);
        }
        Long nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            String nLowerCaseValueAsString = nLowerCaseValue.toString();
            valMap.put("nLowerCase", nLowerCaseValueAsString);
        }
        Boolean xLowerCaseValue = getxLowerCase();
        if (xLowerCaseValue != null) {
            String xLowerCaseValueAsString = xLowerCaseValue.toString();
            valMap.put("xLowerCase", xLowerCaseValueAsString);
        }
        String qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            String qLowerCaseValueAsString = qLowerCaseValue.toString();
            valMap.put("qLowerCase", qLowerCaseValueAsString);
        }
        String VValue = getV();
        if (VValue != null) {
            String VValueAsString = VValue.toString();
            valMap.put("V", VValueAsString);
        }
        String QValue = getQ();
        if (QValue != null) {
            String QValueAsString = QValue.toString();
            valMap.put("Q", QValueAsString);
        }
        String BValue = getB();
        if (BValue != null) {
            String BValueAsString = BValue.toString();
            valMap.put("B", BValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object tLowerCaseValue = gettLowerCase();
        if (tLowerCaseValue != null) {
            valMap.put("tLowerCase", tLowerCaseValue);
        }
        Object TValue = getT();
        if (TValue != null) {
            valMap.put("T", TValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            valMap.put("iLowerCase", iLowerCaseValue);
        }
        Object fLowerCaseValue = getfLowerCase();
        if (fLowerCaseValue != null) {
            valMap.put("fLowerCase", fLowerCaseValue);
        }
        Object LValue = getL();
        if (LValue != null) {
            valMap.put("L", LValue);
        }
        Object oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            valMap.put("oLowerCase", oLowerCaseValue);
        }
        Object cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            valMap.put("cLowerCase", cLowerCaseValue);
        }
        Object hLowerCaseValue = gethLowerCase();
        if (hLowerCaseValue != null) {
            valMap.put("hLowerCase", hLowerCaseValue);
        }
        Object lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            valMap.put("lLowerCase", lLowerCaseValue);
        }
        Object vLowerCaseValue = getvLowerCase();
        if (vLowerCaseValue != null) {
            valMap.put("vLowerCase", vLowerCaseValue);
        }
        Object nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            valMap.put("nLowerCase", nLowerCaseValue);
        }
        Object xLowerCaseValue = getxLowerCase();
        if (xLowerCaseValue != null) {
            valMap.put("xLowerCase", xLowerCaseValue);
        }
        Object qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            valMap.put("qLowerCase", qLowerCaseValue);
        }
        Object VValue = getV();
        if (VValue != null) {
            valMap.put("V", VValue);
        }
        Object QValue = getQ();
        if (QValue != null) {
            valMap.put("Q", QValue);
        }
        Object BValue = getB();
        if (BValue != null) {
            valMap.put("B", BValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("t");
        openapiFields.add("T");
        openapiFields.add("s");
        openapiFields.add("i");
        openapiFields.add("f");
        openapiFields.add("L");
        openapiFields.add("o");
        openapiFields.add("c");
        openapiFields.add("h");
        openapiFields.add("l");
        openapiFields.add("v");
        openapiFields.add("n");
        openapiFields.add("x");
        openapiFields.add("q");
        openapiFields.add("V");
        openapiFields.add("Q");
        openapiFields.add("B");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     KlineCandlestickStreamsResponseK
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!KlineCandlestickStreamsResponseK.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in KlineCandlestickStreamsResponseK is"
                                        + " not found in the empty JSON string",
                                KlineCandlestickStreamsResponseK.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!KlineCandlestickStreamsResponseK.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `KlineCandlestickStreamsResponseK` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("i") != null && !jsonObj.get("i").isJsonNull())
                && !jsonObj.get("i").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `i` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("i").toString()));
        }
        if ((jsonObj.get("o") != null && !jsonObj.get("o").isJsonNull())
                && !jsonObj.get("o").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `o` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("o").toString()));
        }
        if ((jsonObj.get("c") != null && !jsonObj.get("c").isJsonNull())
                && !jsonObj.get("c").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `c` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("c").toString()));
        }
        if ((jsonObj.get("h") != null && !jsonObj.get("h").isJsonNull())
                && !jsonObj.get("h").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `h` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("h").toString()));
        }
        if ((jsonObj.get("l") != null && !jsonObj.get("l").isJsonNull())
                && !jsonObj.get("l").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `l` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("l").toString()));
        }
        if ((jsonObj.get("v") != null && !jsonObj.get("v").isJsonNull())
                && !jsonObj.get("v").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `v` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("v").toString()));
        }
        if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull())
                && !jsonObj.get("q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("q").toString()));
        }
        if ((jsonObj.get("V") != null && !jsonObj.get("V").isJsonNull())
                && !jsonObj.get("V").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `V` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("V").toString()));
        }
        if ((jsonObj.get("Q") != null && !jsonObj.get("Q").isJsonNull())
                && !jsonObj.get("Q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Q").toString()));
        }
        if ((jsonObj.get("B") != null && !jsonObj.get("B").isJsonNull())
                && !jsonObj.get("B").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `B` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("B").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!KlineCandlestickStreamsResponseK.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'KlineCandlestickStreamsResponseK' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<KlineCandlestickStreamsResponseK> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(KlineCandlestickStreamsResponseK.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<KlineCandlestickStreamsResponseK>() {
                        @Override
                        public void write(JsonWriter out, KlineCandlestickStreamsResponseK value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public KlineCandlestickStreamsResponseK read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of KlineCandlestickStreamsResponseK given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of KlineCandlestickStreamsResponseK
     * @throws IOException if the JSON string is invalid with respect to
     *     KlineCandlestickStreamsResponseK
     */
    public static KlineCandlestickStreamsResponseK fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, KlineCandlestickStreamsResponseK.class);
    }

    /**
     * Convert an instance of KlineCandlestickStreamsResponseK to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
