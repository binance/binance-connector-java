/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** MultiAssetsModeAssetIndexResponse1 */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MultiAssetsModeAssetIndexResponse1 {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_INDEX = "index";

    @SerializedName(SERIALIZED_NAME_INDEX)
    @jakarta.annotation.Nullable
    private String index;

    public static final String SERIALIZED_NAME_BID_BUFFER = "bidBuffer";

    @SerializedName(SERIALIZED_NAME_BID_BUFFER)
    @jakarta.annotation.Nullable
    private String bidBuffer;

    public static final String SERIALIZED_NAME_ASK_BUFFER = "askBuffer";

    @SerializedName(SERIALIZED_NAME_ASK_BUFFER)
    @jakarta.annotation.Nullable
    private String askBuffer;

    public static final String SERIALIZED_NAME_BID_RATE = "bidRate";

    @SerializedName(SERIALIZED_NAME_BID_RATE)
    @jakarta.annotation.Nullable
    private String bidRate;

    public static final String SERIALIZED_NAME_ASK_RATE = "askRate";

    @SerializedName(SERIALIZED_NAME_ASK_RATE)
    @jakarta.annotation.Nullable
    private String askRate;

    public static final String SERIALIZED_NAME_AUTO_EXCHANGE_BID_BUFFER = "autoExchangeBidBuffer";

    @SerializedName(SERIALIZED_NAME_AUTO_EXCHANGE_BID_BUFFER)
    @jakarta.annotation.Nullable
    private String autoExchangeBidBuffer;

    public static final String SERIALIZED_NAME_AUTO_EXCHANGE_ASK_BUFFER = "autoExchangeAskBuffer";

    @SerializedName(SERIALIZED_NAME_AUTO_EXCHANGE_ASK_BUFFER)
    @jakarta.annotation.Nullable
    private String autoExchangeAskBuffer;

    public static final String SERIALIZED_NAME_AUTO_EXCHANGE_BID_RATE = "autoExchangeBidRate";

    @SerializedName(SERIALIZED_NAME_AUTO_EXCHANGE_BID_RATE)
    @jakarta.annotation.Nullable
    private String autoExchangeBidRate;

    public static final String SERIALIZED_NAME_AUTO_EXCHANGE_ASK_RATE = "autoExchangeAskRate";

    @SerializedName(SERIALIZED_NAME_AUTO_EXCHANGE_ASK_RATE)
    @jakarta.annotation.Nullable
    private String autoExchangeAskRate;

    public MultiAssetsModeAssetIndexResponse1() {}

    public MultiAssetsModeAssetIndexResponse1 symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public MultiAssetsModeAssetIndexResponse1 time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public MultiAssetsModeAssetIndexResponse1 index(@jakarta.annotation.Nullable String index) {
        this.index = index;
        return this;
    }

    /**
     * Get index
     *
     * @return index
     */
    @jakarta.annotation.Nullable
    public String getIndex() {
        return index;
    }

    public void setIndex(@jakarta.annotation.Nullable String index) {
        this.index = index;
    }

    public MultiAssetsModeAssetIndexResponse1 bidBuffer(
            @jakarta.annotation.Nullable String bidBuffer) {
        this.bidBuffer = bidBuffer;
        return this;
    }

    /**
     * Get bidBuffer
     *
     * @return bidBuffer
     */
    @jakarta.annotation.Nullable
    public String getBidBuffer() {
        return bidBuffer;
    }

    public void setBidBuffer(@jakarta.annotation.Nullable String bidBuffer) {
        this.bidBuffer = bidBuffer;
    }

    public MultiAssetsModeAssetIndexResponse1 askBuffer(
            @jakarta.annotation.Nullable String askBuffer) {
        this.askBuffer = askBuffer;
        return this;
    }

    /**
     * Get askBuffer
     *
     * @return askBuffer
     */
    @jakarta.annotation.Nullable
    public String getAskBuffer() {
        return askBuffer;
    }

    public void setAskBuffer(@jakarta.annotation.Nullable String askBuffer) {
        this.askBuffer = askBuffer;
    }

    public MultiAssetsModeAssetIndexResponse1 bidRate(@jakarta.annotation.Nullable String bidRate) {
        this.bidRate = bidRate;
        return this;
    }

    /**
     * Get bidRate
     *
     * @return bidRate
     */
    @jakarta.annotation.Nullable
    public String getBidRate() {
        return bidRate;
    }

    public void setBidRate(@jakarta.annotation.Nullable String bidRate) {
        this.bidRate = bidRate;
    }

    public MultiAssetsModeAssetIndexResponse1 askRate(@jakarta.annotation.Nullable String askRate) {
        this.askRate = askRate;
        return this;
    }

    /**
     * Get askRate
     *
     * @return askRate
     */
    @jakarta.annotation.Nullable
    public String getAskRate() {
        return askRate;
    }

    public void setAskRate(@jakarta.annotation.Nullable String askRate) {
        this.askRate = askRate;
    }

    public MultiAssetsModeAssetIndexResponse1 autoExchangeBidBuffer(
            @jakarta.annotation.Nullable String autoExchangeBidBuffer) {
        this.autoExchangeBidBuffer = autoExchangeBidBuffer;
        return this;
    }

    /**
     * Get autoExchangeBidBuffer
     *
     * @return autoExchangeBidBuffer
     */
    @jakarta.annotation.Nullable
    public String getAutoExchangeBidBuffer() {
        return autoExchangeBidBuffer;
    }

    public void setAutoExchangeBidBuffer(
            @jakarta.annotation.Nullable String autoExchangeBidBuffer) {
        this.autoExchangeBidBuffer = autoExchangeBidBuffer;
    }

    public MultiAssetsModeAssetIndexResponse1 autoExchangeAskBuffer(
            @jakarta.annotation.Nullable String autoExchangeAskBuffer) {
        this.autoExchangeAskBuffer = autoExchangeAskBuffer;
        return this;
    }

    /**
     * Get autoExchangeAskBuffer
     *
     * @return autoExchangeAskBuffer
     */
    @jakarta.annotation.Nullable
    public String getAutoExchangeAskBuffer() {
        return autoExchangeAskBuffer;
    }

    public void setAutoExchangeAskBuffer(
            @jakarta.annotation.Nullable String autoExchangeAskBuffer) {
        this.autoExchangeAskBuffer = autoExchangeAskBuffer;
    }

    public MultiAssetsModeAssetIndexResponse1 autoExchangeBidRate(
            @jakarta.annotation.Nullable String autoExchangeBidRate) {
        this.autoExchangeBidRate = autoExchangeBidRate;
        return this;
    }

    /**
     * Get autoExchangeBidRate
     *
     * @return autoExchangeBidRate
     */
    @jakarta.annotation.Nullable
    public String getAutoExchangeBidRate() {
        return autoExchangeBidRate;
    }

    public void setAutoExchangeBidRate(@jakarta.annotation.Nullable String autoExchangeBidRate) {
        this.autoExchangeBidRate = autoExchangeBidRate;
    }

    public MultiAssetsModeAssetIndexResponse1 autoExchangeAskRate(
            @jakarta.annotation.Nullable String autoExchangeAskRate) {
        this.autoExchangeAskRate = autoExchangeAskRate;
        return this;
    }

    /**
     * Get autoExchangeAskRate
     *
     * @return autoExchangeAskRate
     */
    @jakarta.annotation.Nullable
    public String getAutoExchangeAskRate() {
        return autoExchangeAskRate;
    }

    public void setAutoExchangeAskRate(@jakarta.annotation.Nullable String autoExchangeAskRate) {
        this.autoExchangeAskRate = autoExchangeAskRate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MultiAssetsModeAssetIndexResponse1 multiAssetsModeAssetIndexResponse1 =
                (MultiAssetsModeAssetIndexResponse1) o;
        return Objects.equals(this.symbol, multiAssetsModeAssetIndexResponse1.symbol)
                && Objects.equals(this.time, multiAssetsModeAssetIndexResponse1.time)
                && Objects.equals(this.index, multiAssetsModeAssetIndexResponse1.index)
                && Objects.equals(this.bidBuffer, multiAssetsModeAssetIndexResponse1.bidBuffer)
                && Objects.equals(this.askBuffer, multiAssetsModeAssetIndexResponse1.askBuffer)
                && Objects.equals(this.bidRate, multiAssetsModeAssetIndexResponse1.bidRate)
                && Objects.equals(this.askRate, multiAssetsModeAssetIndexResponse1.askRate)
                && Objects.equals(
                        this.autoExchangeBidBuffer,
                        multiAssetsModeAssetIndexResponse1.autoExchangeBidBuffer)
                && Objects.equals(
                        this.autoExchangeAskBuffer,
                        multiAssetsModeAssetIndexResponse1.autoExchangeAskBuffer)
                && Objects.equals(
                        this.autoExchangeBidRate,
                        multiAssetsModeAssetIndexResponse1.autoExchangeBidRate)
                && Objects.equals(
                        this.autoExchangeAskRate,
                        multiAssetsModeAssetIndexResponse1.autoExchangeAskRate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                time,
                index,
                bidBuffer,
                askBuffer,
                bidRate,
                askRate,
                autoExchangeBidBuffer,
                autoExchangeAskBuffer,
                autoExchangeBidRate,
                autoExchangeAskRate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MultiAssetsModeAssetIndexResponse1 {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		index: ").append(toIndentedString(index)).append("\n");
        sb.append("		bidBuffer: ").append(toIndentedString(bidBuffer)).append("\n");
        sb.append("		askBuffer: ").append(toIndentedString(askBuffer)).append("\n");
        sb.append("		bidRate: ").append(toIndentedString(bidRate)).append("\n");
        sb.append("		askRate: ").append(toIndentedString(askRate)).append("\n");
        sb.append("		autoExchangeBidBuffer: ")
                .append(toIndentedString(autoExchangeBidBuffer))
                .append("\n");
        sb.append("		autoExchangeAskBuffer: ")
                .append(toIndentedString(autoExchangeAskBuffer))
                .append("\n");
        sb.append("		autoExchangeBidRate: ")
                .append(toIndentedString(autoExchangeBidRate))
                .append("\n");
        sb.append("		autoExchangeAskRate: ")
                .append(toIndentedString(autoExchangeAskRate))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        Object indexValue = getIndex();
        String indexValueAsString = "";
        indexValueAsString = indexValue.toString();
        sb.append("index=").append(urlEncode(indexValueAsString)).append("");
        Object bidBufferValue = getBidBuffer();
        String bidBufferValueAsString = "";
        bidBufferValueAsString = bidBufferValue.toString();
        sb.append("bidBuffer=").append(urlEncode(bidBufferValueAsString)).append("");
        Object askBufferValue = getAskBuffer();
        String askBufferValueAsString = "";
        askBufferValueAsString = askBufferValue.toString();
        sb.append("askBuffer=").append(urlEncode(askBufferValueAsString)).append("");
        Object bidRateValue = getBidRate();
        String bidRateValueAsString = "";
        bidRateValueAsString = bidRateValue.toString();
        sb.append("bidRate=").append(urlEncode(bidRateValueAsString)).append("");
        Object askRateValue = getAskRate();
        String askRateValueAsString = "";
        askRateValueAsString = askRateValue.toString();
        sb.append("askRate=").append(urlEncode(askRateValueAsString)).append("");
        Object autoExchangeBidBufferValue = getAutoExchangeBidBuffer();
        String autoExchangeBidBufferValueAsString = "";
        autoExchangeBidBufferValueAsString = autoExchangeBidBufferValue.toString();
        sb.append("autoExchangeBidBuffer=")
                .append(urlEncode(autoExchangeBidBufferValueAsString))
                .append("");
        Object autoExchangeAskBufferValue = getAutoExchangeAskBuffer();
        String autoExchangeAskBufferValueAsString = "";
        autoExchangeAskBufferValueAsString = autoExchangeAskBufferValue.toString();
        sb.append("autoExchangeAskBuffer=")
                .append(urlEncode(autoExchangeAskBufferValueAsString))
                .append("");
        Object autoExchangeBidRateValue = getAutoExchangeBidRate();
        String autoExchangeBidRateValueAsString = "";
        autoExchangeBidRateValueAsString = autoExchangeBidRateValue.toString();
        sb.append("autoExchangeBidRate=")
                .append(urlEncode(autoExchangeBidRateValueAsString))
                .append("");
        Object autoExchangeAskRateValue = getAutoExchangeAskRate();
        String autoExchangeAskRateValueAsString = "";
        autoExchangeAskRateValueAsString = autoExchangeAskRateValue.toString();
        sb.append("autoExchangeAskRate=")
                .append(urlEncode(autoExchangeAskRateValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("time");
        openapiFields.add("index");
        openapiFields.add("bidBuffer");
        openapiFields.add("askBuffer");
        openapiFields.add("bidRate");
        openapiFields.add("askRate");
        openapiFields.add("autoExchangeBidBuffer");
        openapiFields.add("autoExchangeAskBuffer");
        openapiFields.add("autoExchangeBidRate");
        openapiFields.add("autoExchangeAskRate");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     MultiAssetsModeAssetIndexResponse1
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MultiAssetsModeAssetIndexResponse1.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MultiAssetsModeAssetIndexResponse1 is"
                                        + " not found in the empty JSON string",
                                MultiAssetsModeAssetIndexResponse1.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MultiAssetsModeAssetIndexResponse1.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `MultiAssetsModeAssetIndexResponse1` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("index") != null && !jsonObj.get("index").isJsonNull())
                && !jsonObj.get("index").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `index` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("index").toString()));
        }
        if ((jsonObj.get("bidBuffer") != null && !jsonObj.get("bidBuffer").isJsonNull())
                && !jsonObj.get("bidBuffer").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidBuffer` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("bidBuffer").toString()));
        }
        if ((jsonObj.get("askBuffer") != null && !jsonObj.get("askBuffer").isJsonNull())
                && !jsonObj.get("askBuffer").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askBuffer` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("askBuffer").toString()));
        }
        if ((jsonObj.get("bidRate") != null && !jsonObj.get("bidRate").isJsonNull())
                && !jsonObj.get("bidRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidRate` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("bidRate").toString()));
        }
        if ((jsonObj.get("askRate") != null && !jsonObj.get("askRate").isJsonNull())
                && !jsonObj.get("askRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askRate` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("askRate").toString()));
        }
        if ((jsonObj.get("autoExchangeBidBuffer") != null
                        && !jsonObj.get("autoExchangeBidBuffer").isJsonNull())
                && !jsonObj.get("autoExchangeBidBuffer").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `autoExchangeBidBuffer` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("autoExchangeBidBuffer").toString()));
        }
        if ((jsonObj.get("autoExchangeAskBuffer") != null
                        && !jsonObj.get("autoExchangeAskBuffer").isJsonNull())
                && !jsonObj.get("autoExchangeAskBuffer").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `autoExchangeAskBuffer` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("autoExchangeAskBuffer").toString()));
        }
        if ((jsonObj.get("autoExchangeBidRate") != null
                        && !jsonObj.get("autoExchangeBidRate").isJsonNull())
                && !jsonObj.get("autoExchangeBidRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `autoExchangeBidRate` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("autoExchangeBidRate").toString()));
        }
        if ((jsonObj.get("autoExchangeAskRate") != null
                        && !jsonObj.get("autoExchangeAskRate").isJsonNull())
                && !jsonObj.get("autoExchangeAskRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `autoExchangeAskRate` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("autoExchangeAskRate").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MultiAssetsModeAssetIndexResponse1.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MultiAssetsModeAssetIndexResponse1' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MultiAssetsModeAssetIndexResponse1> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(MultiAssetsModeAssetIndexResponse1.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MultiAssetsModeAssetIndexResponse1>() {
                        @Override
                        public void write(JsonWriter out, MultiAssetsModeAssetIndexResponse1 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MultiAssetsModeAssetIndexResponse1 read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MultiAssetsModeAssetIndexResponse1 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MultiAssetsModeAssetIndexResponse1
     * @throws IOException if the JSON string is invalid with respect to
     *     MultiAssetsModeAssetIndexResponse1
     */
    public static MultiAssetsModeAssetIndexResponse1 fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, MultiAssetsModeAssetIndexResponse1.class);
    }

    /**
     * Convert an instance of MultiAssetsModeAssetIndexResponse1 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
