/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AccountInformationV3Response1PositionsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountInformationV3Response1PositionsInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private String positionSide;

    public static final String SERIALIZED_NAME_POSITION_AMT = "positionAmt";

    @SerializedName(SERIALIZED_NAME_POSITION_AMT)
    @jakarta.annotation.Nullable
    private String positionAmt;

    public static final String SERIALIZED_NAME_UNREALIZED_PROFIT = "unrealizedProfit";

    @SerializedName(SERIALIZED_NAME_UNREALIZED_PROFIT)
    @jakarta.annotation.Nullable
    private String unrealizedProfit;

    public static final String SERIALIZED_NAME_ISOLATED_MARGIN = "isolatedMargin";

    @SerializedName(SERIALIZED_NAME_ISOLATED_MARGIN)
    @jakarta.annotation.Nullable
    private String isolatedMargin;

    public static final String SERIALIZED_NAME_NOTIONAL = "notional";

    @SerializedName(SERIALIZED_NAME_NOTIONAL)
    @jakarta.annotation.Nullable
    private String notional;

    public static final String SERIALIZED_NAME_ISOLATED_WALLET = "isolatedWallet";

    @SerializedName(SERIALIZED_NAME_ISOLATED_WALLET)
    @jakarta.annotation.Nullable
    private String isolatedWallet;

    public static final String SERIALIZED_NAME_INITIAL_MARGIN = "initialMargin";

    @SerializedName(SERIALIZED_NAME_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String initialMargin;

    public static final String SERIALIZED_NAME_MAINT_MARGIN = "maintMargin";

    @SerializedName(SERIALIZED_NAME_MAINT_MARGIN)
    @jakarta.annotation.Nullable
    private String maintMargin;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public AccountInformationV3Response1PositionsInner() {}

    public AccountInformationV3Response1PositionsInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public AccountInformationV3Response1PositionsInner positionSide(
            @jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    public String getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
    }

    public AccountInformationV3Response1PositionsInner positionAmt(
            @jakarta.annotation.Nullable String positionAmt) {
        this.positionAmt = positionAmt;
        return this;
    }

    /**
     * Get positionAmt
     *
     * @return positionAmt
     */
    @jakarta.annotation.Nullable
    public String getPositionAmt() {
        return positionAmt;
    }

    public void setPositionAmt(@jakarta.annotation.Nullable String positionAmt) {
        this.positionAmt = positionAmt;
    }

    public AccountInformationV3Response1PositionsInner unrealizedProfit(
            @jakarta.annotation.Nullable String unrealizedProfit) {
        this.unrealizedProfit = unrealizedProfit;
        return this;
    }

    /**
     * Get unrealizedProfit
     *
     * @return unrealizedProfit
     */
    @jakarta.annotation.Nullable
    public String getUnrealizedProfit() {
        return unrealizedProfit;
    }

    public void setUnrealizedProfit(@jakarta.annotation.Nullable String unrealizedProfit) {
        this.unrealizedProfit = unrealizedProfit;
    }

    public AccountInformationV3Response1PositionsInner isolatedMargin(
            @jakarta.annotation.Nullable String isolatedMargin) {
        this.isolatedMargin = isolatedMargin;
        return this;
    }

    /**
     * Get isolatedMargin
     *
     * @return isolatedMargin
     */
    @jakarta.annotation.Nullable
    public String getIsolatedMargin() {
        return isolatedMargin;
    }

    public void setIsolatedMargin(@jakarta.annotation.Nullable String isolatedMargin) {
        this.isolatedMargin = isolatedMargin;
    }

    public AccountInformationV3Response1PositionsInner notional(
            @jakarta.annotation.Nullable String notional) {
        this.notional = notional;
        return this;
    }

    /**
     * Get notional
     *
     * @return notional
     */
    @jakarta.annotation.Nullable
    public String getNotional() {
        return notional;
    }

    public void setNotional(@jakarta.annotation.Nullable String notional) {
        this.notional = notional;
    }

    public AccountInformationV3Response1PositionsInner isolatedWallet(
            @jakarta.annotation.Nullable String isolatedWallet) {
        this.isolatedWallet = isolatedWallet;
        return this;
    }

    /**
     * Get isolatedWallet
     *
     * @return isolatedWallet
     */
    @jakarta.annotation.Nullable
    public String getIsolatedWallet() {
        return isolatedWallet;
    }

    public void setIsolatedWallet(@jakarta.annotation.Nullable String isolatedWallet) {
        this.isolatedWallet = isolatedWallet;
    }

    public AccountInformationV3Response1PositionsInner initialMargin(
            @jakarta.annotation.Nullable String initialMargin) {
        this.initialMargin = initialMargin;
        return this;
    }

    /**
     * Get initialMargin
     *
     * @return initialMargin
     */
    @jakarta.annotation.Nullable
    public String getInitialMargin() {
        return initialMargin;
    }

    public void setInitialMargin(@jakarta.annotation.Nullable String initialMargin) {
        this.initialMargin = initialMargin;
    }

    public AccountInformationV3Response1PositionsInner maintMargin(
            @jakarta.annotation.Nullable String maintMargin) {
        this.maintMargin = maintMargin;
        return this;
    }

    /**
     * Get maintMargin
     *
     * @return maintMargin
     */
    @jakarta.annotation.Nullable
    public String getMaintMargin() {
        return maintMargin;
    }

    public void setMaintMargin(@jakarta.annotation.Nullable String maintMargin) {
        this.maintMargin = maintMargin;
    }

    public AccountInformationV3Response1PositionsInner updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountInformationV3Response1PositionsInner accountInformationV3Response1PositionsInner =
                (AccountInformationV3Response1PositionsInner) o;
        return Objects.equals(this.symbol, accountInformationV3Response1PositionsInner.symbol)
                && Objects.equals(
                        this.positionSide, accountInformationV3Response1PositionsInner.positionSide)
                && Objects.equals(
                        this.positionAmt, accountInformationV3Response1PositionsInner.positionAmt)
                && Objects.equals(
                        this.unrealizedProfit,
                        accountInformationV3Response1PositionsInner.unrealizedProfit)
                && Objects.equals(
                        this.isolatedMargin,
                        accountInformationV3Response1PositionsInner.isolatedMargin)
                && Objects.equals(
                        this.notional, accountInformationV3Response1PositionsInner.notional)
                && Objects.equals(
                        this.isolatedWallet,
                        accountInformationV3Response1PositionsInner.isolatedWallet)
                && Objects.equals(
                        this.initialMargin,
                        accountInformationV3Response1PositionsInner.initialMargin)
                && Objects.equals(
                        this.maintMargin, accountInformationV3Response1PositionsInner.maintMargin)
                && Objects.equals(
                        this.updateTime, accountInformationV3Response1PositionsInner.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                positionSide,
                positionAmt,
                unrealizedProfit,
                isolatedMargin,
                notional,
                isolatedWallet,
                initialMargin,
                maintMargin,
                updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountInformationV3Response1PositionsInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		positionAmt: ").append(toIndentedString(positionAmt)).append("\n");
        sb.append("		unrealizedProfit: ").append(toIndentedString(unrealizedProfit)).append("\n");
        sb.append("		isolatedMargin: ").append(toIndentedString(isolatedMargin)).append("\n");
        sb.append("		notional: ").append(toIndentedString(notional)).append("\n");
        sb.append("		isolatedWallet: ").append(toIndentedString(isolatedWallet)).append("\n");
        sb.append("		initialMargin: ").append(toIndentedString(initialMargin)).append("\n");
        sb.append("		maintMargin: ").append(toIndentedString(maintMargin)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object positionSideValue = getPositionSide();
        String positionSideValueAsString = "";
        positionSideValueAsString = positionSideValue.toString();
        sb.append("positionSide=").append(urlEncode(positionSideValueAsString)).append("");
        Object positionAmtValue = getPositionAmt();
        String positionAmtValueAsString = "";
        positionAmtValueAsString = positionAmtValue.toString();
        sb.append("positionAmt=").append(urlEncode(positionAmtValueAsString)).append("");
        Object unrealizedProfitValue = getUnrealizedProfit();
        String unrealizedProfitValueAsString = "";
        unrealizedProfitValueAsString = unrealizedProfitValue.toString();
        sb.append("unrealizedProfit=").append(urlEncode(unrealizedProfitValueAsString)).append("");
        Object isolatedMarginValue = getIsolatedMargin();
        String isolatedMarginValueAsString = "";
        isolatedMarginValueAsString = isolatedMarginValue.toString();
        sb.append("isolatedMargin=").append(urlEncode(isolatedMarginValueAsString)).append("");
        Object notionalValue = getNotional();
        String notionalValueAsString = "";
        notionalValueAsString = notionalValue.toString();
        sb.append("notional=").append(urlEncode(notionalValueAsString)).append("");
        Object isolatedWalletValue = getIsolatedWallet();
        String isolatedWalletValueAsString = "";
        isolatedWalletValueAsString = isolatedWalletValue.toString();
        sb.append("isolatedWallet=").append(urlEncode(isolatedWalletValueAsString)).append("");
        Object initialMarginValue = getInitialMargin();
        String initialMarginValueAsString = "";
        initialMarginValueAsString = initialMarginValue.toString();
        sb.append("initialMargin=").append(urlEncode(initialMarginValueAsString)).append("");
        Object maintMarginValue = getMaintMargin();
        String maintMarginValueAsString = "";
        maintMarginValueAsString = maintMarginValue.toString();
        sb.append("maintMargin=").append(urlEncode(maintMarginValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("positionSide");
        openapiFields.add("positionAmt");
        openapiFields.add("unrealizedProfit");
        openapiFields.add("isolatedMargin");
        openapiFields.add("notional");
        openapiFields.add("isolatedWallet");
        openapiFields.add("initialMargin");
        openapiFields.add("maintMargin");
        openapiFields.add("updateTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AccountInformationV3Response1PositionsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountInformationV3Response1PositionsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " AccountInformationV3Response1PositionsInner is not found in"
                                    + " the empty JSON string",
                                AccountInformationV3Response1PositionsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountInformationV3Response1PositionsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AccountInformationV3Response1PositionsInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull())
                && !jsonObj.get("positionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionSide").toString()));
        }
        if ((jsonObj.get("positionAmt") != null && !jsonObj.get("positionAmt").isJsonNull())
                && !jsonObj.get("positionAmt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionAmt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionAmt").toString()));
        }
        if ((jsonObj.get("unrealizedProfit") != null
                        && !jsonObj.get("unrealizedProfit").isJsonNull())
                && !jsonObj.get("unrealizedProfit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `unrealizedProfit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("unrealizedProfit").toString()));
        }
        if ((jsonObj.get("isolatedMargin") != null && !jsonObj.get("isolatedMargin").isJsonNull())
                && !jsonObj.get("isolatedMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isolatedMargin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isolatedMargin").toString()));
        }
        if ((jsonObj.get("notional") != null && !jsonObj.get("notional").isJsonNull())
                && !jsonObj.get("notional").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `notional` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("notional").toString()));
        }
        if ((jsonObj.get("isolatedWallet") != null && !jsonObj.get("isolatedWallet").isJsonNull())
                && !jsonObj.get("isolatedWallet").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isolatedWallet` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isolatedWallet").toString()));
        }
        if ((jsonObj.get("initialMargin") != null && !jsonObj.get("initialMargin").isJsonNull())
                && !jsonObj.get("initialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `initialMargin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("initialMargin").toString()));
        }
        if ((jsonObj.get("maintMargin") != null && !jsonObj.get("maintMargin").isJsonNull())
                && !jsonObj.get("maintMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maintMargin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maintMargin").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountInformationV3Response1PositionsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'AccountInformationV3Response1PositionsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountInformationV3Response1PositionsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AccountInformationV3Response1PositionsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountInformationV3Response1PositionsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, AccountInformationV3Response1PositionsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountInformationV3Response1PositionsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountInformationV3Response1PositionsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountInformationV3Response1PositionsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AccountInformationV3Response1PositionsInner
     */
    public static AccountInformationV3Response1PositionsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, AccountInformationV3Response1PositionsInner.class);
    }

    /**
     * Convert an instance of AccountInformationV3Response1PositionsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
