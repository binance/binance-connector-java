/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** ExchangeInformationResponseRateLimitsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ExchangeInformationResponseRateLimitsInner {
    public static final String SERIALIZED_NAME_INTERVAL = "interval";

    @SerializedName(SERIALIZED_NAME_INTERVAL)
    @jakarta.annotation.Nullable
    private String interval;

    public static final String SERIALIZED_NAME_INTERVAL_NUM = "intervalNum";

    @SerializedName(SERIALIZED_NAME_INTERVAL_NUM)
    @jakarta.annotation.Nullable
    private Long intervalNum;

    public static final String SERIALIZED_NAME_LIMIT = "limit";

    @SerializedName(SERIALIZED_NAME_LIMIT)
    @jakarta.annotation.Nullable
    private Long limit;

    public static final String SERIALIZED_NAME_RATE_LIMIT_TYPE = "rateLimitType";

    @SerializedName(SERIALIZED_NAME_RATE_LIMIT_TYPE)
    @jakarta.annotation.Nullable
    private String rateLimitType;

    public ExchangeInformationResponseRateLimitsInner() {}

    public ExchangeInformationResponseRateLimitsInner interval(
            @jakarta.annotation.Nullable String interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get interval
     *
     * @return interval
     */
    @jakarta.annotation.Nullable
    public String getInterval() {
        return interval;
    }

    public void setInterval(@jakarta.annotation.Nullable String interval) {
        this.interval = interval;
    }

    public ExchangeInformationResponseRateLimitsInner intervalNum(
            @jakarta.annotation.Nullable Long intervalNum) {
        this.intervalNum = intervalNum;
        return this;
    }

    /**
     * Get intervalNum
     *
     * @return intervalNum
     */
    @jakarta.annotation.Nullable
    public Long getIntervalNum() {
        return intervalNum;
    }

    public void setIntervalNum(@jakarta.annotation.Nullable Long intervalNum) {
        this.intervalNum = intervalNum;
    }

    public ExchangeInformationResponseRateLimitsInner limit(
            @jakarta.annotation.Nullable Long limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get limit
     *
     * @return limit
     */
    @jakarta.annotation.Nullable
    public Long getLimit() {
        return limit;
    }

    public void setLimit(@jakarta.annotation.Nullable Long limit) {
        this.limit = limit;
    }

    public ExchangeInformationResponseRateLimitsInner rateLimitType(
            @jakarta.annotation.Nullable String rateLimitType) {
        this.rateLimitType = rateLimitType;
        return this;
    }

    /**
     * Get rateLimitType
     *
     * @return rateLimitType
     */
    @jakarta.annotation.Nullable
    public String getRateLimitType() {
        return rateLimitType;
    }

    public void setRateLimitType(@jakarta.annotation.Nullable String rateLimitType) {
        this.rateLimitType = rateLimitType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExchangeInformationResponseRateLimitsInner exchangeInformationResponseRateLimitsInner =
                (ExchangeInformationResponseRateLimitsInner) o;
        return Objects.equals(this.interval, exchangeInformationResponseRateLimitsInner.interval)
                && Objects.equals(
                        this.intervalNum, exchangeInformationResponseRateLimitsInner.intervalNum)
                && Objects.equals(this.limit, exchangeInformationResponseRateLimitsInner.limit)
                && Objects.equals(
                        this.rateLimitType,
                        exchangeInformationResponseRateLimitsInner.rateLimitType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(interval, intervalNum, limit, rateLimitType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExchangeInformationResponseRateLimitsInner {\n");
        sb.append("		interval: ").append(toIndentedString(interval)).append("\n");
        sb.append("		intervalNum: ").append(toIndentedString(intervalNum)).append("\n");
        sb.append("		limit: ").append(toIndentedString(limit)).append("\n");
        sb.append("		rateLimitType: ").append(toIndentedString(rateLimitType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object intervalValue = getInterval();
        String intervalValueAsString = "";
        intervalValueAsString = intervalValue.toString();
        sb.append("interval=").append(urlEncode(intervalValueAsString)).append("");
        Object intervalNumValue = getIntervalNum();
        String intervalNumValueAsString = "";
        intervalNumValueAsString = intervalNumValue.toString();
        sb.append("intervalNum=").append(urlEncode(intervalNumValueAsString)).append("");
        Object limitValue = getLimit();
        String limitValueAsString = "";
        limitValueAsString = limitValue.toString();
        sb.append("limit=").append(urlEncode(limitValueAsString)).append("");
        Object rateLimitTypeValue = getRateLimitType();
        String rateLimitTypeValueAsString = "";
        rateLimitTypeValueAsString = rateLimitTypeValue.toString();
        sb.append("rateLimitType=").append(urlEncode(rateLimitTypeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("interval");
        openapiFields.add("intervalNum");
        openapiFields.add("limit");
        openapiFields.add("rateLimitType");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ExchangeInformationResponseRateLimitsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ExchangeInformationResponseRateLimitsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " ExchangeInformationResponseRateLimitsInner is not found in"
                                    + " the empty JSON string",
                                ExchangeInformationResponseRateLimitsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ExchangeInformationResponseRateLimitsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ExchangeInformationResponseRateLimitsInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull())
                && !jsonObj.get("interval").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `interval` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("interval").toString()));
        }
        if ((jsonObj.get("rateLimitType") != null && !jsonObj.get("rateLimitType").isJsonNull())
                && !jsonObj.get("rateLimitType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `rateLimitType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("rateLimitType").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ExchangeInformationResponseRateLimitsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'ExchangeInformationResponseRateLimitsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeInformationResponseRateLimitsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ExchangeInformationResponseRateLimitsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ExchangeInformationResponseRateLimitsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, ExchangeInformationResponseRateLimitsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ExchangeInformationResponseRateLimitsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ExchangeInformationResponseRateLimitsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ExchangeInformationResponseRateLimitsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     ExchangeInformationResponseRateLimitsInner
     */
    public static ExchangeInformationResponseRateLimitsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, ExchangeInformationResponseRateLimitsInner.class);
    }

    /**
     * Convert an instance of ExchangeInformationResponseRateLimitsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
