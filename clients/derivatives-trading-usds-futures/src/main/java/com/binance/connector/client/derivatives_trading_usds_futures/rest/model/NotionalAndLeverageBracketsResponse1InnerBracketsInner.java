/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** NotionalAndLeverageBracketsResponse1InnerBracketsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class NotionalAndLeverageBracketsResponse1InnerBracketsInner {
    public static final String SERIALIZED_NAME_BRACKET = "bracket";

    @SerializedName(SERIALIZED_NAME_BRACKET)
    @jakarta.annotation.Nullable
    private Long bracket;

    public static final String SERIALIZED_NAME_INITIAL_LEVERAGE = "initialLeverage";

    @SerializedName(SERIALIZED_NAME_INITIAL_LEVERAGE)
    @jakarta.annotation.Nullable
    private Long initialLeverage;

    public static final String SERIALIZED_NAME_NOTIONAL_CAP = "notionalCap";

    @SerializedName(SERIALIZED_NAME_NOTIONAL_CAP)
    @jakarta.annotation.Nullable
    private Long notionalCap;

    public static final String SERIALIZED_NAME_NOTIONAL_FLOOR = "notionalFloor";

    @SerializedName(SERIALIZED_NAME_NOTIONAL_FLOOR)
    @jakarta.annotation.Nullable
    private Long notionalFloor;

    public static final String SERIALIZED_NAME_MAINT_MARGIN_RATIO = "maintMarginRatio";

    @SerializedName(SERIALIZED_NAME_MAINT_MARGIN_RATIO)
    @jakarta.annotation.Nullable
    private Double maintMarginRatio;

    public static final String SERIALIZED_NAME_CUM = "cum";

    @SerializedName(SERIALIZED_NAME_CUM)
    @jakarta.annotation.Nullable
    private Long cum;

    public NotionalAndLeverageBracketsResponse1InnerBracketsInner() {}

    public NotionalAndLeverageBracketsResponse1InnerBracketsInner bracket(
            @jakarta.annotation.Nullable Long bracket) {
        this.bracket = bracket;
        return this;
    }

    /**
     * Get bracket
     *
     * @return bracket
     */
    @jakarta.annotation.Nullable
    public Long getBracket() {
        return bracket;
    }

    public void setBracket(@jakarta.annotation.Nullable Long bracket) {
        this.bracket = bracket;
    }

    public NotionalAndLeverageBracketsResponse1InnerBracketsInner initialLeverage(
            @jakarta.annotation.Nullable Long initialLeverage) {
        this.initialLeverage = initialLeverage;
        return this;
    }

    /**
     * Get initialLeverage
     *
     * @return initialLeverage
     */
    @jakarta.annotation.Nullable
    public Long getInitialLeverage() {
        return initialLeverage;
    }

    public void setInitialLeverage(@jakarta.annotation.Nullable Long initialLeverage) {
        this.initialLeverage = initialLeverage;
    }

    public NotionalAndLeverageBracketsResponse1InnerBracketsInner notionalCap(
            @jakarta.annotation.Nullable Long notionalCap) {
        this.notionalCap = notionalCap;
        return this;
    }

    /**
     * Get notionalCap
     *
     * @return notionalCap
     */
    @jakarta.annotation.Nullable
    public Long getNotionalCap() {
        return notionalCap;
    }

    public void setNotionalCap(@jakarta.annotation.Nullable Long notionalCap) {
        this.notionalCap = notionalCap;
    }

    public NotionalAndLeverageBracketsResponse1InnerBracketsInner notionalFloor(
            @jakarta.annotation.Nullable Long notionalFloor) {
        this.notionalFloor = notionalFloor;
        return this;
    }

    /**
     * Get notionalFloor
     *
     * @return notionalFloor
     */
    @jakarta.annotation.Nullable
    public Long getNotionalFloor() {
        return notionalFloor;
    }

    public void setNotionalFloor(@jakarta.annotation.Nullable Long notionalFloor) {
        this.notionalFloor = notionalFloor;
    }

    public NotionalAndLeverageBracketsResponse1InnerBracketsInner maintMarginRatio(
            @jakarta.annotation.Nullable Double maintMarginRatio) {
        this.maintMarginRatio = maintMarginRatio;
        return this;
    }

    /**
     * Get maintMarginRatio
     *
     * @return maintMarginRatio
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getMaintMarginRatio() {
        return maintMarginRatio;
    }

    public void setMaintMarginRatio(@jakarta.annotation.Nullable Double maintMarginRatio) {
        this.maintMarginRatio = maintMarginRatio;
    }

    public NotionalAndLeverageBracketsResponse1InnerBracketsInner cum(
            @jakarta.annotation.Nullable Long cum) {
        this.cum = cum;
        return this;
    }

    /**
     * Get cum
     *
     * @return cum
     */
    @jakarta.annotation.Nullable
    public Long getCum() {
        return cum;
    }

    public void setCum(@jakarta.annotation.Nullable Long cum) {
        this.cum = cum;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotionalAndLeverageBracketsResponse1InnerBracketsInner
                notionalAndLeverageBracketsResponse1InnerBracketsInner =
                        (NotionalAndLeverageBracketsResponse1InnerBracketsInner) o;
        return Objects.equals(
                        this.bracket,
                        notionalAndLeverageBracketsResponse1InnerBracketsInner.bracket)
                && Objects.equals(
                        this.initialLeverage,
                        notionalAndLeverageBracketsResponse1InnerBracketsInner.initialLeverage)
                && Objects.equals(
                        this.notionalCap,
                        notionalAndLeverageBracketsResponse1InnerBracketsInner.notionalCap)
                && Objects.equals(
                        this.notionalFloor,
                        notionalAndLeverageBracketsResponse1InnerBracketsInner.notionalFloor)
                && Objects.equals(
                        this.maintMarginRatio,
                        notionalAndLeverageBracketsResponse1InnerBracketsInner.maintMarginRatio)
                && Objects.equals(
                        this.cum, notionalAndLeverageBracketsResponse1InnerBracketsInner.cum);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                bracket, initialLeverage, notionalCap, notionalFloor, maintMarginRatio, cum);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NotionalAndLeverageBracketsResponse1InnerBracketsInner {\n");
        sb.append("		bracket: ").append(toIndentedString(bracket)).append("\n");
        sb.append("		initialLeverage: ").append(toIndentedString(initialLeverage)).append("\n");
        sb.append("		notionalCap: ").append(toIndentedString(notionalCap)).append("\n");
        sb.append("		notionalFloor: ").append(toIndentedString(notionalFloor)).append("\n");
        sb.append("		maintMarginRatio: ").append(toIndentedString(maintMarginRatio)).append("\n");
        sb.append("		cum: ").append(toIndentedString(cum)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object bracketValue = getBracket();
        String bracketValueAsString = "";
        bracketValueAsString = bracketValue.toString();
        sb.append("bracket=").append(urlEncode(bracketValueAsString)).append("");
        Object initialLeverageValue = getInitialLeverage();
        String initialLeverageValueAsString = "";
        initialLeverageValueAsString = initialLeverageValue.toString();
        sb.append("initialLeverage=").append(urlEncode(initialLeverageValueAsString)).append("");
        Object notionalCapValue = getNotionalCap();
        String notionalCapValueAsString = "";
        notionalCapValueAsString = notionalCapValue.toString();
        sb.append("notionalCap=").append(urlEncode(notionalCapValueAsString)).append("");
        Object notionalFloorValue = getNotionalFloor();
        String notionalFloorValueAsString = "";
        notionalFloorValueAsString = notionalFloorValue.toString();
        sb.append("notionalFloor=").append(urlEncode(notionalFloorValueAsString)).append("");
        Object maintMarginRatioValue = getMaintMarginRatio();
        String maintMarginRatioValueAsString = "";
        maintMarginRatioValueAsString = maintMarginRatioValue.toString();
        sb.append("maintMarginRatio=").append(urlEncode(maintMarginRatioValueAsString)).append("");
        Object cumValue = getCum();
        String cumValueAsString = "";
        cumValueAsString = cumValue.toString();
        sb.append("cum=").append(urlEncode(cumValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("bracket");
        openapiFields.add("initialLeverage");
        openapiFields.add("notionalCap");
        openapiFields.add("notionalFloor");
        openapiFields.add("maintMarginRatio");
        openapiFields.add("cum");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     NotionalAndLeverageBracketsResponse1InnerBracketsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!NotionalAndLeverageBracketsResponse1InnerBracketsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " NotionalAndLeverageBracketsResponse1InnerBracketsInner is"
                                    + " not found in the empty JSON string",
                                NotionalAndLeverageBracketsResponse1InnerBracketsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!NotionalAndLeverageBracketsResponse1InnerBracketsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `NotionalAndLeverageBracketsResponse1InnerBracketsInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NotionalAndLeverageBracketsResponse1InnerBracketsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'NotionalAndLeverageBracketsResponse1InnerBracketsInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NotionalAndLeverageBracketsResponse1InnerBracketsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    NotionalAndLeverageBracketsResponse1InnerBracketsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<NotionalAndLeverageBracketsResponse1InnerBracketsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                NotionalAndLeverageBracketsResponse1InnerBracketsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public NotionalAndLeverageBracketsResponse1InnerBracketsInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of NotionalAndLeverageBracketsResponse1InnerBracketsInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of NotionalAndLeverageBracketsResponse1InnerBracketsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     NotionalAndLeverageBracketsResponse1InnerBracketsInner
     */
    public static NotionalAndLeverageBracketsResponse1InnerBracketsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, NotionalAndLeverageBracketsResponse1InnerBracketsInner.class);
    }

    /**
     * Convert an instance of NotionalAndLeverageBracketsResponse1InnerBracketsInner to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
