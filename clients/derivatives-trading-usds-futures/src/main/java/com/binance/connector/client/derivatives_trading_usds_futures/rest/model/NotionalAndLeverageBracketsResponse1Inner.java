/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** NotionalAndLeverageBracketsResponse1Inner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class NotionalAndLeverageBracketsResponse1Inner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_NOTIONAL_COEF = "notionalCoef";

    @SerializedName(SERIALIZED_NAME_NOTIONAL_COEF)
    @jakarta.annotation.Nullable
    private Double notionalCoef;

    public static final String SERIALIZED_NAME_BRACKETS = "brackets";

    @SerializedName(SERIALIZED_NAME_BRACKETS)
    @jakarta.annotation.Nullable
    private List<@Valid NotionalAndLeverageBracketsResponse1InnerBracketsInner> brackets;

    public NotionalAndLeverageBracketsResponse1Inner() {}

    public NotionalAndLeverageBracketsResponse1Inner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public NotionalAndLeverageBracketsResponse1Inner notionalCoef(
            @jakarta.annotation.Nullable Double notionalCoef) {
        this.notionalCoef = notionalCoef;
        return this;
    }

    /**
     * Get notionalCoef
     *
     * @return notionalCoef
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getNotionalCoef() {
        return notionalCoef;
    }

    public void setNotionalCoef(@jakarta.annotation.Nullable Double notionalCoef) {
        this.notionalCoef = notionalCoef;
    }

    public NotionalAndLeverageBracketsResponse1Inner brackets(
            @jakarta.annotation.Nullable
                    List<@Valid NotionalAndLeverageBracketsResponse1InnerBracketsInner> brackets) {
        this.brackets = brackets;
        return this;
    }

    public NotionalAndLeverageBracketsResponse1Inner addBracketsItem(
            NotionalAndLeverageBracketsResponse1InnerBracketsInner bracketsItem) {
        if (this.brackets == null) {
            this.brackets = new ArrayList<>();
        }
        this.brackets.add(bracketsItem);
        return this;
    }

    /**
     * Get brackets
     *
     * @return brackets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid NotionalAndLeverageBracketsResponse1InnerBracketsInner> getBrackets() {
        return brackets;
    }

    public void setBrackets(
            @jakarta.annotation.Nullable
                    List<@Valid NotionalAndLeverageBracketsResponse1InnerBracketsInner> brackets) {
        this.brackets = brackets;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NotionalAndLeverageBracketsResponse1Inner notionalAndLeverageBracketsResponse1Inner =
                (NotionalAndLeverageBracketsResponse1Inner) o;
        return Objects.equals(this.symbol, notionalAndLeverageBracketsResponse1Inner.symbol)
                && Objects.equals(
                        this.notionalCoef, notionalAndLeverageBracketsResponse1Inner.notionalCoef)
                && Objects.equals(
                        this.brackets, notionalAndLeverageBracketsResponse1Inner.brackets);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbol, notionalCoef, brackets);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NotionalAndLeverageBracketsResponse1Inner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		notionalCoef: ").append(toIndentedString(notionalCoef)).append("\n");
        sb.append("		brackets: ").append(toIndentedString(brackets)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object notionalCoefValue = getNotionalCoef();
        String notionalCoefValueAsString = "";
        notionalCoefValueAsString = notionalCoefValue.toString();
        sb.append("notionalCoef=").append(urlEncode(notionalCoefValueAsString)).append("");
        Object bracketsValue = getBrackets();
        String bracketsValueAsString = "";
        bracketsValueAsString =
                (String)
                        ((Collection) bracketsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("brackets=").append(urlEncode(bracketsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("notionalCoef");
        openapiFields.add("brackets");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     NotionalAndLeverageBracketsResponse1Inner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!NotionalAndLeverageBracketsResponse1Inner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " NotionalAndLeverageBracketsResponse1Inner is not found in"
                                    + " the empty JSON string",
                                NotionalAndLeverageBracketsResponse1Inner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!NotionalAndLeverageBracketsResponse1Inner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `NotionalAndLeverageBracketsResponse1Inner` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if (jsonObj.get("brackets") != null && !jsonObj.get("brackets").isJsonNull()) {
            JsonArray jsonArraybrackets = jsonObj.getAsJsonArray("brackets");
            if (jsonArraybrackets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("brackets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `brackets` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("brackets").toString()));
                }

                // validate the optional field `brackets` (array)
                for (int i = 0; i < jsonArraybrackets.size(); i++) {
                    NotionalAndLeverageBracketsResponse1InnerBracketsInner.validateJsonElement(
                            jsonArraybrackets.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NotionalAndLeverageBracketsResponse1Inner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'NotionalAndLeverageBracketsResponse1Inner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NotionalAndLeverageBracketsResponse1Inner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(NotionalAndLeverageBracketsResponse1Inner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<NotionalAndLeverageBracketsResponse1Inner>() {
                        @Override
                        public void write(
                                JsonWriter out, NotionalAndLeverageBracketsResponse1Inner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public NotionalAndLeverageBracketsResponse1Inner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of NotionalAndLeverageBracketsResponse1Inner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NotionalAndLeverageBracketsResponse1Inner
     * @throws IOException if the JSON string is invalid with respect to
     *     NotionalAndLeverageBracketsResponse1Inner
     */
    public static NotionalAndLeverageBracketsResponse1Inner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, NotionalAndLeverageBracketsResponse1Inner.class);
    }

    /**
     * Convert an instance of NotionalAndLeverageBracketsResponse1Inner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
