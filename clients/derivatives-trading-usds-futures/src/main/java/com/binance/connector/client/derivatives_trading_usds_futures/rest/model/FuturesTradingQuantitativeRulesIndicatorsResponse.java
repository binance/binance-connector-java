/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.common.AbstractOpenApiSchema;
import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hibernate.validator.constraints.*;

@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FuturesTradingQuantitativeRulesIndicatorsResponse extends AbstractOpenApiSchema {
    private static final Logger log =
            Logger.getLogger(FuturesTradingQuantitativeRulesIndicatorsResponse.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FuturesTradingQuantitativeRulesIndicatorsResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'FuturesTradingQuantitativeRulesIndicatorsResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FuturesTradingQuantitativeRulesIndicatorsResponse1>
                    adapterFuturesTradingQuantitativeRulesIndicatorsResponse1 =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            FuturesTradingQuantitativeRulesIndicatorsResponse1
                                                    .class));
            final TypeAdapter<FuturesTradingQuantitativeRulesIndicatorsResponse2>
                    adapterFuturesTradingQuantitativeRulesIndicatorsResponse2 =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            FuturesTradingQuantitativeRulesIndicatorsResponse2
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FuturesTradingQuantitativeRulesIndicatorsResponse>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                FuturesTradingQuantitativeRulesIndicatorsResponse value)
                                throws IOException {
                            if (value == null || value.getActualInstance() == null) {
                                elementAdapter.write(out, null);
                                return;
                            }

                            // check if the actual instance is of the type
                            // `FuturesTradingQuantitativeRulesIndicatorsResponse1`
                            if (value.getActualInstance()
                                    instanceof FuturesTradingQuantitativeRulesIndicatorsResponse1) {
                                JsonElement element =
                                        adapterFuturesTradingQuantitativeRulesIndicatorsResponse1
                                                .toJsonTree(
                                                        (FuturesTradingQuantitativeRulesIndicatorsResponse1)
                                                                value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            // check if the actual instance is of the type
                            // `FuturesTradingQuantitativeRulesIndicatorsResponse2`
                            if (value.getActualInstance()
                                    instanceof FuturesTradingQuantitativeRulesIndicatorsResponse2) {
                                JsonElement element =
                                        adapterFuturesTradingQuantitativeRulesIndicatorsResponse2
                                                .toJsonTree(
                                                        (FuturesTradingQuantitativeRulesIndicatorsResponse2)
                                                                value.getActualInstance());
                                elementAdapter.write(out, element);
                                return;
                            }
                            throw new IOException(
                                    "Failed to serialize as the type doesn't match oneOf schemas:"
                                        + " FuturesTradingQuantitativeRulesIndicatorsResponse1,"
                                        + " FuturesTradingQuantitativeRulesIndicatorsResponse2");
                        }

                        @Override
                        public FuturesTradingQuantitativeRulesIndicatorsResponse read(JsonReader in)
                                throws IOException {
                            Object deserialized = null;
                            JsonElement jsonElement = elementAdapter.read(in);

                            int match = 0;
                            ArrayList<String> errorMessages = new ArrayList<>();
                            TypeAdapter actualAdapter = elementAdapter;

                            // deserialize FuturesTradingQuantitativeRulesIndicatorsResponse1
                            try {
                                // validate the JSON object to see if any exception is thrown
                                FuturesTradingQuantitativeRulesIndicatorsResponse1
                                        .validateJsonElement(jsonElement);
                                actualAdapter =
                                        adapterFuturesTradingQuantitativeRulesIndicatorsResponse1;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema"
                                            + " 'FuturesTradingQuantitativeRulesIndicatorsResponse1'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for"
                                                    + " FuturesTradingQuantitativeRulesIndicatorsResponse1"
                                                    + " failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema"
                                            + " 'FuturesTradingQuantitativeRulesIndicatorsResponse1'",
                                        e);
                            }
                            // deserialize FuturesTradingQuantitativeRulesIndicatorsResponse2
                            try {
                                // validate the JSON object to see if any exception is thrown

                                actualAdapter =
                                        adapterFuturesTradingQuantitativeRulesIndicatorsResponse2;
                                match++;
                                log.log(
                                        Level.FINER,
                                        "Input data matches schema"
                                            + " 'FuturesTradingQuantitativeRulesIndicatorsResponse2'");
                            } catch (Exception e) {
                                // deserialization failed, continue
                                errorMessages.add(
                                        String.format(
                                                "Deserialization for"
                                                    + " FuturesTradingQuantitativeRulesIndicatorsResponse2"
                                                    + " failed with `%s`.",
                                                e.getMessage()));
                                log.log(
                                        Level.FINER,
                                        "Input data does not match schema"
                                            + " 'FuturesTradingQuantitativeRulesIndicatorsResponse2'",
                                        e);
                            }

                            if (match == 1) {
                                FuturesTradingQuantitativeRulesIndicatorsResponse ret =
                                        new FuturesTradingQuantitativeRulesIndicatorsResponse();
                                ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                                return ret;
                            }

                            throw new IOException(
                                    String.format(
                                            "Failed deserialization for"
                                                + " FuturesTradingQuantitativeRulesIndicatorsResponse:"
                                                + " %d classes match result, expected 1. Detailed"
                                                + " failure message for oneOf schemas: %s. JSON:"
                                                + " %s",
                                            match, errorMessages, jsonElement.toString()));
                        }
                    }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public FuturesTradingQuantitativeRulesIndicatorsResponse() {
        super("oneOf", Boolean.FALSE);
    }

    public FuturesTradingQuantitativeRulesIndicatorsResponse(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put(
                "FuturesTradingQuantitativeRulesIndicatorsResponse1",
                FuturesTradingQuantitativeRulesIndicatorsResponse1.class);
        schemas.put(
                "FuturesTradingQuantitativeRulesIndicatorsResponse2",
                FuturesTradingQuantitativeRulesIndicatorsResponse2.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return FuturesTradingQuantitativeRulesIndicatorsResponse.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check the instance parameter is valid
     * against the oneOf child schemas: FuturesTradingQuantitativeRulesIndicatorsResponse1,
     * FuturesTradingQuantitativeRulesIndicatorsResponse2
     *
     * <p>It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof FuturesTradingQuantitativeRulesIndicatorsResponse1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FuturesTradingQuantitativeRulesIndicatorsResponse2) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException(
                "Invalid instance type. Must be FuturesTradingQuantitativeRulesIndicatorsResponse1,"
                        + " FuturesTradingQuantitativeRulesIndicatorsResponse2");
    }

    /**
     * Get the actual instance, which can be the following:
     * FuturesTradingQuantitativeRulesIndicatorsResponse1,
     * FuturesTradingQuantitativeRulesIndicatorsResponse2
     *
     * @return The actual instance (FuturesTradingQuantitativeRulesIndicatorsResponse1,
     *     FuturesTradingQuantitativeRulesIndicatorsResponse2)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `FuturesTradingQuantitativeRulesIndicatorsResponse1`. If the
     * actual instance is not `FuturesTradingQuantitativeRulesIndicatorsResponse1`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `FuturesTradingQuantitativeRulesIndicatorsResponse1`
     * @throws ClassCastException if the instance is not
     *     `FuturesTradingQuantitativeRulesIndicatorsResponse1`
     */
    public FuturesTradingQuantitativeRulesIndicatorsResponse1
            getFuturesTradingQuantitativeRulesIndicatorsResponse1() throws ClassCastException {
        return (FuturesTradingQuantitativeRulesIndicatorsResponse1) super.getActualInstance();
    }

    /**
     * Get the actual instance of `FuturesTradingQuantitativeRulesIndicatorsResponse2`. If the
     * actual instance is not `FuturesTradingQuantitativeRulesIndicatorsResponse2`, the
     * ClassCastException will be thrown.
     *
     * @return The actual instance of `FuturesTradingQuantitativeRulesIndicatorsResponse2`
     * @throws ClassCastException if the instance is not
     *     `FuturesTradingQuantitativeRulesIndicatorsResponse2`
     */
    public FuturesTradingQuantitativeRulesIndicatorsResponse2
            getFuturesTradingQuantitativeRulesIndicatorsResponse2() throws ClassCastException {
        return (FuturesTradingQuantitativeRulesIndicatorsResponse2) super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FuturesTradingQuantitativeRulesIndicatorsResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with FuturesTradingQuantitativeRulesIndicatorsResponse1
        try {
            FuturesTradingQuantitativeRulesIndicatorsResponse1.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for FuturesTradingQuantitativeRulesIndicatorsResponse1"
                                    + " failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FuturesTradingQuantitativeRulesIndicatorsResponse2
        try {
            FuturesTradingQuantitativeRulesIndicatorsResponse2.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(
                    String.format(
                            "Deserialization for FuturesTradingQuantitativeRulesIndicatorsResponse2"
                                    + " failed with `%s`.",
                            e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(
                    String.format(
                            "The JSON string is invalid for"
                                + " FuturesTradingQuantitativeRulesIndicatorsResponse with oneOf"
                                + " schemas: FuturesTradingQuantitativeRulesIndicatorsResponse1,"
                                + " FuturesTradingQuantitativeRulesIndicatorsResponse2. %d"
                                + " class(es) match the result, expected 1. Detailed failure"
                                + " message for oneOf schemas: %s. JSON: %s",
                            validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of FuturesTradingQuantitativeRulesIndicatorsResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FuturesTradingQuantitativeRulesIndicatorsResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     FuturesTradingQuantitativeRulesIndicatorsResponse
     */
    public static FuturesTradingQuantitativeRulesIndicatorsResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, FuturesTradingQuantitativeRulesIndicatorsResponse.class);
    }

    /**
     * Convert an instance of FuturesTradingQuantitativeRulesIndicatorsResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
