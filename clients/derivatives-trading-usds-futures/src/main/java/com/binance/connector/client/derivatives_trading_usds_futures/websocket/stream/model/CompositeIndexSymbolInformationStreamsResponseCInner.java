/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** CompositeIndexSymbolInformationStreamsResponseCInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class CompositeIndexSymbolInformationStreamsResponseCInner extends BaseDTO {
    public static final String SERIALIZED_NAME_B_LOWER_CASE = "b";

    @SerializedName(SERIALIZED_NAME_B_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String bLowerCase;

    public static final String SERIALIZED_NAME_Q_LOWER_CASE = "q";

    @SerializedName(SERIALIZED_NAME_Q_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String qLowerCase;

    public static final String SERIALIZED_NAME_W_LOWER_CASE = "w";

    @SerializedName(SERIALIZED_NAME_W_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String wLowerCase;

    public static final String SERIALIZED_NAME_W = "W";

    @SerializedName(SERIALIZED_NAME_W)
    @jakarta.annotation.Nullable
    private String W;

    public static final String SERIALIZED_NAME_I_LOWER_CASE = "i";

    @SerializedName(SERIALIZED_NAME_I_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String iLowerCase;

    public CompositeIndexSymbolInformationStreamsResponseCInner() {}

    public CompositeIndexSymbolInformationStreamsResponseCInner bLowerCase(
            @jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
        return this;
    }

    /**
     * Get bLowerCase
     *
     * @return bLowerCase
     */
    @jakarta.annotation.Nullable
    public String getbLowerCase() {
        return bLowerCase;
    }

    public void setbLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
    }

    public CompositeIndexSymbolInformationStreamsResponseCInner qLowerCase(
            @jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
        return this;
    }

    /**
     * Get qLowerCase
     *
     * @return qLowerCase
     */
    @jakarta.annotation.Nullable
    public String getqLowerCase() {
        return qLowerCase;
    }

    public void setqLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
    }

    public CompositeIndexSymbolInformationStreamsResponseCInner wLowerCase(
            @jakarta.annotation.Nullable String wLowerCase) {
        this.wLowerCase = wLowerCase;
        return this;
    }

    /**
     * Get wLowerCase
     *
     * @return wLowerCase
     */
    @jakarta.annotation.Nullable
    public String getwLowerCase() {
        return wLowerCase;
    }

    public void setwLowerCase(@jakarta.annotation.Nullable String wLowerCase) {
        this.wLowerCase = wLowerCase;
    }

    public CompositeIndexSymbolInformationStreamsResponseCInner W(
            @jakarta.annotation.Nullable String W) {
        this.W = W;
        return this;
    }

    /**
     * Get W
     *
     * @return W
     */
    @jakarta.annotation.Nullable
    public String getW() {
        return W;
    }

    public void setW(@jakarta.annotation.Nullable String W) {
        this.W = W;
    }

    public CompositeIndexSymbolInformationStreamsResponseCInner iLowerCase(
            @jakarta.annotation.Nullable String iLowerCase) {
        this.iLowerCase = iLowerCase;
        return this;
    }

    /**
     * Get iLowerCase
     *
     * @return iLowerCase
     */
    @jakarta.annotation.Nullable
    public String getiLowerCase() {
        return iLowerCase;
    }

    public void setiLowerCase(@jakarta.annotation.Nullable String iLowerCase) {
        this.iLowerCase = iLowerCase;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompositeIndexSymbolInformationStreamsResponseCInner
                compositeIndexSymbolInformationStreamsResponseCInner =
                        (CompositeIndexSymbolInformationStreamsResponseCInner) o;
        return Objects.equals(
                        this.bLowerCase,
                        compositeIndexSymbolInformationStreamsResponseCInner.bLowerCase)
                && Objects.equals(
                        this.qLowerCase,
                        compositeIndexSymbolInformationStreamsResponseCInner.qLowerCase)
                && Objects.equals(
                        this.wLowerCase,
                        compositeIndexSymbolInformationStreamsResponseCInner.wLowerCase)
                && Objects.equals(this.W, compositeIndexSymbolInformationStreamsResponseCInner.W)
                && Objects.equals(
                        this.iLowerCase,
                        compositeIndexSymbolInformationStreamsResponseCInner.iLowerCase);
    }

    @Override
    public int hashCode() {
        return Objects.hash(bLowerCase, qLowerCase, wLowerCase, W, iLowerCase);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CompositeIndexSymbolInformationStreamsResponseCInner {\n");
        sb.append("		bLowerCase: ").append(toIndentedString(bLowerCase)).append("\n");
        sb.append("		qLowerCase: ").append(toIndentedString(qLowerCase)).append("\n");
        sb.append("		wLowerCase: ").append(toIndentedString(wLowerCase)).append("\n");
        sb.append("		W: ").append(toIndentedString(W)).append("\n");
        sb.append("		iLowerCase: ").append(toIndentedString(iLowerCase)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            String bLowerCaseValueAsString = bLowerCaseValue.toString();
            valMap.put("bLowerCase", bLowerCaseValueAsString);
        }
        String qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            String qLowerCaseValueAsString = qLowerCaseValue.toString();
            valMap.put("qLowerCase", qLowerCaseValueAsString);
        }
        String wLowerCaseValue = getwLowerCase();
        if (wLowerCaseValue != null) {
            String wLowerCaseValueAsString = wLowerCaseValue.toString();
            valMap.put("wLowerCase", wLowerCaseValueAsString);
        }
        String WValue = getW();
        if (WValue != null) {
            String WValueAsString = WValue.toString();
            valMap.put("W", WValueAsString);
        }
        String iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            String iLowerCaseValueAsString = iLowerCaseValue.toString();
            valMap.put("iLowerCase", iLowerCaseValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            valMap.put("bLowerCase", bLowerCaseValue);
        }
        Object qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            valMap.put("qLowerCase", qLowerCaseValue);
        }
        Object wLowerCaseValue = getwLowerCase();
        if (wLowerCaseValue != null) {
            valMap.put("wLowerCase", wLowerCaseValue);
        }
        Object WValue = getW();
        if (WValue != null) {
            valMap.put("W", WValue);
        }
        Object iLowerCaseValue = getiLowerCase();
        if (iLowerCaseValue != null) {
            valMap.put("iLowerCase", iLowerCaseValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("b");
        openapiFields.add("q");
        openapiFields.add("w");
        openapiFields.add("W");
        openapiFields.add("i");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     CompositeIndexSymbolInformationStreamsResponseCInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CompositeIndexSymbolInformationStreamsResponseCInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " CompositeIndexSymbolInformationStreamsResponseCInner is not"
                                    + " found in the empty JSON string",
                                CompositeIndexSymbolInformationStreamsResponseCInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CompositeIndexSymbolInformationStreamsResponseCInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `CompositeIndexSymbolInformationStreamsResponseCInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("b") != null && !jsonObj.get("b").isJsonNull())
                && !jsonObj.get("b").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `b` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("b").toString()));
        }
        if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull())
                && !jsonObj.get("q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("q").toString()));
        }
        if ((jsonObj.get("w") != null && !jsonObj.get("w").isJsonNull())
                && !jsonObj.get("w").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `w` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("w").toString()));
        }
        if ((jsonObj.get("W") != null && !jsonObj.get("W").isJsonNull())
                && !jsonObj.get("W").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `W` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("W").toString()));
        }
        if ((jsonObj.get("i") != null && !jsonObj.get("i").isJsonNull())
                && !jsonObj.get("i").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `i` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("i").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CompositeIndexSymbolInformationStreamsResponseCInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'CompositeIndexSymbolInformationStreamsResponseCInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CompositeIndexSymbolInformationStreamsResponseCInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    CompositeIndexSymbolInformationStreamsResponseCInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CompositeIndexSymbolInformationStreamsResponseCInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                CompositeIndexSymbolInformationStreamsResponseCInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CompositeIndexSymbolInformationStreamsResponseCInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CompositeIndexSymbolInformationStreamsResponseCInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of CompositeIndexSymbolInformationStreamsResponseCInner
     * @throws IOException if the JSON string is invalid with respect to
     *     CompositeIndexSymbolInformationStreamsResponseCInner
     */
    public static CompositeIndexSymbolInformationStreamsResponseCInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, CompositeIndexSymbolInformationStreamsResponseCInner.class);
    }

    /**
     * Convert an instance of CompositeIndexSymbolInformationStreamsResponseCInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
