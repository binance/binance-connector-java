/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetOrderModifyHistoryResponseInnerAmendmentOrigQty */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetOrderModifyHistoryResponseInnerAmendmentOrigQty {
    public static final String SERIALIZED_NAME_BEFORE = "before";

    @SerializedName(SERIALIZED_NAME_BEFORE)
    @jakarta.annotation.Nullable
    private String before;

    public static final String SERIALIZED_NAME_AFTER = "after";

    @SerializedName(SERIALIZED_NAME_AFTER)
    @jakarta.annotation.Nullable
    private String after;

    public GetOrderModifyHistoryResponseInnerAmendmentOrigQty() {}

    public GetOrderModifyHistoryResponseInnerAmendmentOrigQty before(
            @jakarta.annotation.Nullable String before) {
        this.before = before;
        return this;
    }

    /**
     * Get before
     *
     * @return before
     */
    @jakarta.annotation.Nullable
    public String getBefore() {
        return before;
    }

    public void setBefore(@jakarta.annotation.Nullable String before) {
        this.before = before;
    }

    public GetOrderModifyHistoryResponseInnerAmendmentOrigQty after(
            @jakarta.annotation.Nullable String after) {
        this.after = after;
        return this;
    }

    /**
     * Get after
     *
     * @return after
     */
    @jakarta.annotation.Nullable
    public String getAfter() {
        return after;
    }

    public void setAfter(@jakarta.annotation.Nullable String after) {
        this.after = after;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOrderModifyHistoryResponseInnerAmendmentOrigQty
                getOrderModifyHistoryResponseInnerAmendmentOrigQty =
                        (GetOrderModifyHistoryResponseInnerAmendmentOrigQty) o;
        return Objects.equals(
                        this.before, getOrderModifyHistoryResponseInnerAmendmentOrigQty.before)
                && Objects.equals(
                        this.after, getOrderModifyHistoryResponseInnerAmendmentOrigQty.after);
    }

    @Override
    public int hashCode() {
        return Objects.hash(before, after);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetOrderModifyHistoryResponseInnerAmendmentOrigQty {\n");
        sb.append("		before: ").append(toIndentedString(before)).append("\n");
        sb.append("		after: ").append(toIndentedString(after)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object beforeValue = getBefore();
        String beforeValueAsString = "";
        beforeValueAsString = beforeValue.toString();
        sb.append("before=").append(urlEncode(beforeValueAsString)).append("");
        Object afterValue = getAfter();
        String afterValueAsString = "";
        afterValueAsString = afterValue.toString();
        sb.append("after=").append(urlEncode(afterValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("before");
        openapiFields.add("after");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetOrderModifyHistoryResponseInnerAmendmentOrigQty
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetOrderModifyHistoryResponseInnerAmendmentOrigQty.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetOrderModifyHistoryResponseInnerAmendmentOrigQty is not"
                                    + " found in the empty JSON string",
                                GetOrderModifyHistoryResponseInnerAmendmentOrigQty
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetOrderModifyHistoryResponseInnerAmendmentOrigQty.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetOrderModifyHistoryResponseInnerAmendmentOrigQty`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("before") != null && !jsonObj.get("before").isJsonNull())
                && !jsonObj.get("before").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `before` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("before").toString()));
        }
        if ((jsonObj.get("after") != null && !jsonObj.get("after").isJsonNull())
                && !jsonObj.get("after").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `after` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("after").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetOrderModifyHistoryResponseInnerAmendmentOrigQty.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetOrderModifyHistoryResponseInnerAmendmentOrigQty' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetOrderModifyHistoryResponseInnerAmendmentOrigQty> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    GetOrderModifyHistoryResponseInnerAmendmentOrigQty.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetOrderModifyHistoryResponseInnerAmendmentOrigQty>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetOrderModifyHistoryResponseInnerAmendmentOrigQty value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetOrderModifyHistoryResponseInnerAmendmentOrigQty read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetOrderModifyHistoryResponseInnerAmendmentOrigQty given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetOrderModifyHistoryResponseInnerAmendmentOrigQty
     * @throws IOException if the JSON string is invalid with respect to
     *     GetOrderModifyHistoryResponseInnerAmendmentOrigQty
     */
    public static GetOrderModifyHistoryResponseInnerAmendmentOrigQty fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetOrderModifyHistoryResponseInnerAmendmentOrigQty.class);
    }

    /**
     * Convert an instance of GetOrderModifyHistoryResponseInnerAmendmentOrigQty to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
