/*
 * Binance Derivatives Trading USDS Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.api;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.common.websocket.adapter.ConnectionInterface;
import com.binance.connector.client.common.websocket.dtos.ApiRequestWrapperDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.AccountInformationRequest;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.AccountInformationResponse;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.AccountInformationV2Request;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.AccountInformationV2Response;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.FuturesAccountBalanceRequest;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.FuturesAccountBalanceResponse;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.FuturesAccountBalanceV2Request;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.FuturesAccountBalanceV2Response;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class AccountApi {
    private ConnectionInterface connection;

    public AccountApi() {}

    public AccountApi(ConnectionInterface connection) {
        this.connection = connection;
    }

    /**
     * Account Information(USER_DATA) Get current account information. User in single-asset/
     * multi-assets mode will see different value, see comments in response section for detail.
     * Weight: 5
     *
     * @param accountInformationRequest (required)
     * @return AccountInformationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Account Information </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/account/websocket-api/Account-Information">Account
     *     Information(USER_DATA) Documentation</a>
     */
    public CompletableFuture<AccountInformationResponse> accountInformation(
            AccountInformationRequest accountInformationRequest) throws ApiException {
        accountInformationValidateBeforeCall(accountInformationRequest);
        String methodName = "/account.status".substring(1);
        ApiRequestWrapperDTO<AccountInformationRequest, AccountInformationResponse> build =
                new ApiRequestWrapperDTO.Builder<
                                AccountInformationRequest, AccountInformationResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(accountInformationRequest)
                        .responseType(AccountInformationResponse.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void accountInformationValidateBeforeCall(
            AccountInformationRequest accountInformationRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<AccountInformationRequest>> violations =
                    validator.validate(accountInformationRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Account Information V2(USER_DATA) Get current account information. User in single-asset/
     * multi-assets mode will see different value, see comments in response section for detail.
     * Weight: 5
     *
     * @param accountInformationV2Request (required)
     * @return AccountInformationV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Account Information V2 </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/account/websocket-api/Account-Information-V2">Account
     *     Information V2(USER_DATA) Documentation</a>
     */
    public CompletableFuture<AccountInformationV2Response> accountInformationV2(
            AccountInformationV2Request accountInformationV2Request) throws ApiException {
        accountInformationV2ValidateBeforeCall(accountInformationV2Request);
        String methodName = "/v2/account.status".substring(1);
        ApiRequestWrapperDTO<AccountInformationV2Request, AccountInformationV2Response> build =
                new ApiRequestWrapperDTO.Builder<
                                AccountInformationV2Request, AccountInformationV2Response>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(accountInformationV2Request)
                        .responseType(AccountInformationV2Response.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void accountInformationV2ValidateBeforeCall(
            AccountInformationV2Request accountInformationV2Request) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<AccountInformationV2Request>> violations =
                    validator.validate(accountInformationV2Request);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Futures Account Balance(USER_DATA) Query account balance info Weight: 5
     *
     * @param futuresAccountBalanceRequest (required)
     * @return FuturesAccountBalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Futures Account Balance </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/account/websocket-api/Futures-Account-Balance">Futures
     *     Account Balance(USER_DATA) Documentation</a>
     */
    public CompletableFuture<FuturesAccountBalanceResponse> futuresAccountBalance(
            FuturesAccountBalanceRequest futuresAccountBalanceRequest) throws ApiException {
        futuresAccountBalanceValidateBeforeCall(futuresAccountBalanceRequest);
        String methodName = "/account.balance".substring(1);
        ApiRequestWrapperDTO<FuturesAccountBalanceRequest, FuturesAccountBalanceResponse> build =
                new ApiRequestWrapperDTO.Builder<
                                FuturesAccountBalanceRequest, FuturesAccountBalanceResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(futuresAccountBalanceRequest)
                        .responseType(FuturesAccountBalanceResponse.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void futuresAccountBalanceValidateBeforeCall(
            FuturesAccountBalanceRequest futuresAccountBalanceRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<FuturesAccountBalanceRequest>> violations =
                    validator.validate(futuresAccountBalanceRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Futures Account Balance V2(USER_DATA) Query account balance info Weight: 5
     *
     * @param futuresAccountBalanceV2Request (required)
     * @return FuturesAccountBalanceV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Futures Account Balance V2 </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/account/websocket-api/Futures-Account-Balance-V2">Futures
     *     Account Balance V2(USER_DATA) Documentation</a>
     */
    public CompletableFuture<FuturesAccountBalanceV2Response> futuresAccountBalanceV2(
            FuturesAccountBalanceV2Request futuresAccountBalanceV2Request) throws ApiException {
        futuresAccountBalanceV2ValidateBeforeCall(futuresAccountBalanceV2Request);
        String methodName = "/v2/account.balance".substring(1);
        ApiRequestWrapperDTO<FuturesAccountBalanceV2Request, FuturesAccountBalanceV2Response>
                build =
                        new ApiRequestWrapperDTO.Builder<
                                        FuturesAccountBalanceV2Request,
                                        FuturesAccountBalanceV2Response>()
                                .id(getRequestID())
                                .method(methodName)
                                .params(futuresAccountBalanceV2Request)
                                .responseType(FuturesAccountBalanceV2Response.class)
                                .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void futuresAccountBalanceV2ValidateBeforeCall(
            FuturesAccountBalanceV2Request futuresAccountBalanceV2Request) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<FuturesAccountBalanceV2Request>> violations =
                    validator.validate(futuresAccountBalanceV2Request);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    public String getRequestID() {
        return UUID.randomUUID().toString();
    }
}
