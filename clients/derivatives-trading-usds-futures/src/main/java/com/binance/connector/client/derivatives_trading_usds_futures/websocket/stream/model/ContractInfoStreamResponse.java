/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** ContractInfoStreamResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ContractInfoStreamResponse extends BaseDTO {
    public static final String SERIALIZED_NAME_E_LOWER_CASE = "e";

    @SerializedName(SERIALIZED_NAME_E_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String eLowerCase;

    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_PS = "ps";

    @SerializedName(SERIALIZED_NAME_PS)
    @jakarta.annotation.Nullable
    private String ps;

    public static final String SERIALIZED_NAME_CT = "ct";

    @SerializedName(SERIALIZED_NAME_CT)
    @jakarta.annotation.Nullable
    private String ct;

    public static final String SERIALIZED_NAME_DT = "dt";

    @SerializedName(SERIALIZED_NAME_DT)
    @jakarta.annotation.Nullable
    private Long dt;

    public static final String SERIALIZED_NAME_OT = "ot";

    @SerializedName(SERIALIZED_NAME_OT)
    @jakarta.annotation.Nullable
    private Long ot;

    public static final String SERIALIZED_NAME_CS = "cs";

    @SerializedName(SERIALIZED_NAME_CS)
    @jakarta.annotation.Nullable
    private String cs;

    public static final String SERIALIZED_NAME_BKS = "bks";

    @SerializedName(SERIALIZED_NAME_BKS)
    @jakarta.annotation.Nullable
    private List<@Valid ContractInfoStreamResponseBksInner> bks;

    public ContractInfoStreamResponse() {}

    public ContractInfoStreamResponse eLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
        return this;
    }

    /**
     * Get eLowerCase
     *
     * @return eLowerCase
     */
    @jakarta.annotation.Nullable
    public String geteLowerCase() {
        return eLowerCase;
    }

    public void seteLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
    }

    public ContractInfoStreamResponse E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public ContractInfoStreamResponse sLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public ContractInfoStreamResponse ps(@jakarta.annotation.Nullable String ps) {
        this.ps = ps;
        return this;
    }

    /**
     * Get ps
     *
     * @return ps
     */
    @jakarta.annotation.Nullable
    public String getPs() {
        return ps;
    }

    public void setPs(@jakarta.annotation.Nullable String ps) {
        this.ps = ps;
    }

    public ContractInfoStreamResponse ct(@jakarta.annotation.Nullable String ct) {
        this.ct = ct;
        return this;
    }

    /**
     * Get ct
     *
     * @return ct
     */
    @jakarta.annotation.Nullable
    public String getCt() {
        return ct;
    }

    public void setCt(@jakarta.annotation.Nullable String ct) {
        this.ct = ct;
    }

    public ContractInfoStreamResponse dt(@jakarta.annotation.Nullable Long dt) {
        this.dt = dt;
        return this;
    }

    /**
     * Get dt
     *
     * @return dt
     */
    @jakarta.annotation.Nullable
    public Long getDt() {
        return dt;
    }

    public void setDt(@jakarta.annotation.Nullable Long dt) {
        this.dt = dt;
    }

    public ContractInfoStreamResponse ot(@jakarta.annotation.Nullable Long ot) {
        this.ot = ot;
        return this;
    }

    /**
     * Get ot
     *
     * @return ot
     */
    @jakarta.annotation.Nullable
    public Long getOt() {
        return ot;
    }

    public void setOt(@jakarta.annotation.Nullable Long ot) {
        this.ot = ot;
    }

    public ContractInfoStreamResponse cs(@jakarta.annotation.Nullable String cs) {
        this.cs = cs;
        return this;
    }

    /**
     * Get cs
     *
     * @return cs
     */
    @jakarta.annotation.Nullable
    public String getCs() {
        return cs;
    }

    public void setCs(@jakarta.annotation.Nullable String cs) {
        this.cs = cs;
    }

    public ContractInfoStreamResponse bks(
            @jakarta.annotation.Nullable List<@Valid ContractInfoStreamResponseBksInner> bks) {
        this.bks = bks;
        return this;
    }

    public ContractInfoStreamResponse addBksItem(ContractInfoStreamResponseBksInner bksItem) {
        if (this.bks == null) {
            this.bks = new ArrayList<>();
        }
        this.bks.add(bksItem);
        return this;
    }

    /**
     * Get bks
     *
     * @return bks
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ContractInfoStreamResponseBksInner> getBks() {
        return bks;
    }

    public void setBks(
            @jakarta.annotation.Nullable List<@Valid ContractInfoStreamResponseBksInner> bks) {
        this.bks = bks;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractInfoStreamResponse contractInfoStreamResponse = (ContractInfoStreamResponse) o;
        return Objects.equals(this.eLowerCase, contractInfoStreamResponse.eLowerCase)
                && Objects.equals(this.E, contractInfoStreamResponse.E)
                && Objects.equals(this.sLowerCase, contractInfoStreamResponse.sLowerCase)
                && Objects.equals(this.ps, contractInfoStreamResponse.ps)
                && Objects.equals(this.ct, contractInfoStreamResponse.ct)
                && Objects.equals(this.dt, contractInfoStreamResponse.dt)
                && Objects.equals(this.ot, contractInfoStreamResponse.ot)
                && Objects.equals(this.cs, contractInfoStreamResponse.cs)
                && Objects.equals(this.bks, contractInfoStreamResponse.bks);
    }

    @Override
    public int hashCode() {
        return Objects.hash(eLowerCase, E, sLowerCase, ps, ct, dt, ot, cs, bks);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ContractInfoStreamResponse {\n");
        sb.append("		eLowerCase: ").append(toIndentedString(eLowerCase)).append("\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		ps: ").append(toIndentedString(ps)).append("\n");
        sb.append("		ct: ").append(toIndentedString(ct)).append("\n");
        sb.append("		dt: ").append(toIndentedString(dt)).append("\n");
        sb.append("		ot: ").append(toIndentedString(ot)).append("\n");
        sb.append("		cs: ").append(toIndentedString(cs)).append("\n");
        sb.append("		bks: ").append(toIndentedString(bks)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            String eLowerCaseValueAsString = eLowerCaseValue.toString();
            valMap.put("eLowerCase", eLowerCaseValueAsString);
        }
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String psValue = getPs();
        if (psValue != null) {
            String psValueAsString = psValue.toString();
            valMap.put("ps", psValueAsString);
        }
        String ctValue = getCt();
        if (ctValue != null) {
            String ctValueAsString = ctValue.toString();
            valMap.put("ct", ctValueAsString);
        }
        Long dtValue = getDt();
        if (dtValue != null) {
            String dtValueAsString = dtValue.toString();
            valMap.put("dt", dtValueAsString);
        }
        Long otValue = getOt();
        if (otValue != null) {
            String otValueAsString = otValue.toString();
            valMap.put("ot", otValueAsString);
        }
        String csValue = getCs();
        if (csValue != null) {
            String csValueAsString = csValue.toString();
            valMap.put("cs", csValueAsString);
        }
        List<@Valid ContractInfoStreamResponseBksInner> bksValue = getBks();
        if (bksValue != null) {
            String bksValueAsString = JSON.getGson().toJson(bksValue);
            valMap.put("bks", bksValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            valMap.put("eLowerCase", eLowerCaseValue);
        }
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object psValue = getPs();
        if (psValue != null) {
            valMap.put("ps", psValue);
        }
        Object ctValue = getCt();
        if (ctValue != null) {
            valMap.put("ct", ctValue);
        }
        Object dtValue = getDt();
        if (dtValue != null) {
            valMap.put("dt", dtValue);
        }
        Object otValue = getOt();
        if (otValue != null) {
            valMap.put("ot", otValue);
        }
        Object csValue = getCs();
        if (csValue != null) {
            valMap.put("cs", csValue);
        }
        Object bksValue = getBks();
        if (bksValue != null) {
            valMap.put("bks", bksValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("e");
        openapiFields.add("E");
        openapiFields.add("s");
        openapiFields.add("ps");
        openapiFields.add("ct");
        openapiFields.add("dt");
        openapiFields.add("ot");
        openapiFields.add("cs");
        openapiFields.add("bks");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to ContractInfoStreamResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ContractInfoStreamResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ContractInfoStreamResponse is not"
                                        + " found in the empty JSON string",
                                ContractInfoStreamResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ContractInfoStreamResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ContractInfoStreamResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull())
                && !jsonObj.get("e").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `e` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("e").toString()));
        }
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("ps") != null && !jsonObj.get("ps").isJsonNull())
                && !jsonObj.get("ps").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ps` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ps").toString()));
        }
        if ((jsonObj.get("ct") != null && !jsonObj.get("ct").isJsonNull())
                && !jsonObj.get("ct").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ct` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ct").toString()));
        }
        if ((jsonObj.get("cs") != null && !jsonObj.get("cs").isJsonNull())
                && !jsonObj.get("cs").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cs` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("cs").toString()));
        }
        if (jsonObj.get("bks") != null && !jsonObj.get("bks").isJsonNull()) {
            JsonArray jsonArraybks = jsonObj.getAsJsonArray("bks");
            if (jsonArraybks != null) {
                // ensure the json data is an array
                if (!jsonObj.get("bks").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `bks` to be an array in the JSON string but"
                                            + " got `%s`",
                                    jsonObj.get("bks").toString()));
                }

                // validate the optional field `bks` (array)
                for (int i = 0; i < jsonArraybks.size(); i++) {
                    ContractInfoStreamResponseBksInner.validateJsonElement(jsonArraybks.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ContractInfoStreamResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ContractInfoStreamResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ContractInfoStreamResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ContractInfoStreamResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ContractInfoStreamResponse>() {
                        @Override
                        public void write(JsonWriter out, ContractInfoStreamResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ContractInfoStreamResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ContractInfoStreamResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ContractInfoStreamResponse
     * @throws IOException if the JSON string is invalid with respect to ContractInfoStreamResponse
     */
    public static ContractInfoStreamResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ContractInfoStreamResponse.class);
    }

    /**
     * Convert an instance of ContractInfoStreamResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
