/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** FuturesTradingQuantitativeRulesIndicatorsResponse2 */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FuturesTradingQuantitativeRulesIndicatorsResponse2 {
    public static final String SERIALIZED_NAME_INDICATORS = "indicators";

    @SerializedName(SERIALIZED_NAME_INDICATORS)
    @jakarta.annotation.Nullable
    private FuturesTradingQuantitativeRulesIndicatorsResponse2Indicators indicators;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public FuturesTradingQuantitativeRulesIndicatorsResponse2() {}

    public FuturesTradingQuantitativeRulesIndicatorsResponse2 indicators(
            @jakarta.annotation.Nullable
                    FuturesTradingQuantitativeRulesIndicatorsResponse2Indicators indicators) {
        this.indicators = indicators;
        return this;
    }

    /**
     * Get indicators
     *
     * @return indicators
     */
    @jakarta.annotation.Nullable
    @Valid
    public FuturesTradingQuantitativeRulesIndicatorsResponse2Indicators getIndicators() {
        return indicators;
    }

    public void setIndicators(
            @jakarta.annotation.Nullable
                    FuturesTradingQuantitativeRulesIndicatorsResponse2Indicators indicators) {
        this.indicators = indicators;
    }

    public FuturesTradingQuantitativeRulesIndicatorsResponse2 updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FuturesTradingQuantitativeRulesIndicatorsResponse2
                futuresTradingQuantitativeRulesIndicatorsResponse2 =
                        (FuturesTradingQuantitativeRulesIndicatorsResponse2) o;
        return Objects.equals(
                        this.indicators,
                        futuresTradingQuantitativeRulesIndicatorsResponse2.indicators)
                && Objects.equals(
                        this.updateTime,
                        futuresTradingQuantitativeRulesIndicatorsResponse2.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(indicators, updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FuturesTradingQuantitativeRulesIndicatorsResponse2 {\n");
        sb.append("		indicators: ").append(toIndentedString(indicators)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object indicatorsValue = getIndicators();
        String indicatorsValueAsString = "";
        indicatorsValueAsString = indicatorsValue.toString();
        sb.append("indicators=").append(urlEncode(indicatorsValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("indicators");
        openapiFields.add("updateTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FuturesTradingQuantitativeRulesIndicatorsResponse2
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FuturesTradingQuantitativeRulesIndicatorsResponse2.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " FuturesTradingQuantitativeRulesIndicatorsResponse2 is not"
                                    + " found in the empty JSON string",
                                FuturesTradingQuantitativeRulesIndicatorsResponse2
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FuturesTradingQuantitativeRulesIndicatorsResponse2.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FuturesTradingQuantitativeRulesIndicatorsResponse2`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // validate the optional field `indicators`
        if (jsonObj.get("indicators") != null && !jsonObj.get("indicators").isJsonNull()) {
            FuturesTradingQuantitativeRulesIndicatorsResponse2Indicators.validateJsonElement(
                    jsonObj.get("indicators"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FuturesTradingQuantitativeRulesIndicatorsResponse2.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'FuturesTradingQuantitativeRulesIndicatorsResponse2' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FuturesTradingQuantitativeRulesIndicatorsResponse2> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    FuturesTradingQuantitativeRulesIndicatorsResponse2.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FuturesTradingQuantitativeRulesIndicatorsResponse2>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                FuturesTradingQuantitativeRulesIndicatorsResponse2 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FuturesTradingQuantitativeRulesIndicatorsResponse2 read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FuturesTradingQuantitativeRulesIndicatorsResponse2 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FuturesTradingQuantitativeRulesIndicatorsResponse2
     * @throws IOException if the JSON string is invalid with respect to
     *     FuturesTradingQuantitativeRulesIndicatorsResponse2
     */
    public static FuturesTradingQuantitativeRulesIndicatorsResponse2 fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, FuturesTradingQuantitativeRulesIndicatorsResponse2.class);
    }

    /**
     * Convert an instance of FuturesTradingQuantitativeRulesIndicatorsResponse2 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
