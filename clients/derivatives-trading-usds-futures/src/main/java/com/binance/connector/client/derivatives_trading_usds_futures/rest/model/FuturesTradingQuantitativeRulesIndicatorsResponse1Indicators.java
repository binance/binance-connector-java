/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators {
    public static final String SERIALIZED_NAME_B_T_C_U_S_D_T = "BTCUSDT";

    @SerializedName(SERIALIZED_NAME_B_T_C_U_S_D_T)
    @jakarta.annotation.Nullable
    private List<@Valid FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner>
            BTCUSDT;

    public static final String SERIALIZED_NAME_E_T_H_U_S_D_T = "ETHUSDT";

    @SerializedName(SERIALIZED_NAME_E_T_H_U_S_D_T)
    @jakarta.annotation.Nullable
    private List<@Valid FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner>
            ETHUSDT;

    public FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators() {}

    public FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators BTCUSDT(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner>
                            BTCUSDT) {
        this.BTCUSDT = BTCUSDT;
        return this;
    }

    public FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators addBTCUSDTItem(
            FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner BTCUSDTItem) {
        if (this.BTCUSDT == null) {
            this.BTCUSDT = new ArrayList<>();
        }
        this.BTCUSDT.add(BTCUSDTItem);
        return this;
    }

    /**
     * Get BTCUSDT
     *
     * @return BTCUSDT
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner>
            getBTCUSDT() {
        return BTCUSDT;
    }

    public void setBTCUSDT(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner>
                            BTCUSDT) {
        this.BTCUSDT = BTCUSDT;
    }

    public FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators ETHUSDT(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner>
                            ETHUSDT) {
        this.ETHUSDT = ETHUSDT;
        return this;
    }

    public FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators addETHUSDTItem(
            FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner ETHUSDTItem) {
        if (this.ETHUSDT == null) {
            this.ETHUSDT = new ArrayList<>();
        }
        this.ETHUSDT.add(ETHUSDTItem);
        return this;
    }

    /**
     * Get ETHUSDT
     *
     * @return ETHUSDT
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner>
            getETHUSDT() {
        return ETHUSDT;
    }

    public void setETHUSDT(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner>
                            ETHUSDT) {
        this.ETHUSDT = ETHUSDT;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators
                futuresTradingQuantitativeRulesIndicatorsResponse1Indicators =
                        (FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators) o;
        return Objects.equals(
                        this.BTCUSDT,
                        futuresTradingQuantitativeRulesIndicatorsResponse1Indicators.BTCUSDT)
                && Objects.equals(
                        this.ETHUSDT,
                        futuresTradingQuantitativeRulesIndicatorsResponse1Indicators.ETHUSDT);
    }

    @Override
    public int hashCode() {
        return Objects.hash(BTCUSDT, ETHUSDT);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators {\n");
        sb.append("		BTCUSDT: ").append(toIndentedString(BTCUSDT)).append("\n");
        sb.append("		ETHUSDT: ").append(toIndentedString(ETHUSDT)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object BTCUSDTValue = getBTCUSDT();
        String BTCUSDTValueAsString = "";
        BTCUSDTValueAsString =
                (String)
                        ((Collection) BTCUSDTValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("BTCUSDT=").append(urlEncode(BTCUSDTValueAsString)).append("");
        Object ETHUSDTValue = getETHUSDT();
        String ETHUSDTValueAsString = "";
        ETHUSDTValueAsString =
                (String)
                        ((Collection) ETHUSDTValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("ETHUSDT=").append(urlEncode(ETHUSDTValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("BTCUSDT");
        openapiFields.add("ETHUSDT");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators"
                                    + " is not found in the empty JSON string",
                                FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators.openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("BTCUSDT") != null && !jsonObj.get("BTCUSDT").isJsonNull()) {
            JsonArray jsonArrayBTCUSDT = jsonObj.getAsJsonArray("BTCUSDT");
            if (jsonArrayBTCUSDT != null) {
                // ensure the json data is an array
                if (!jsonObj.get("BTCUSDT").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `BTCUSDT` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("BTCUSDT").toString()));
                }

                // validate the optional field `BTCUSDT` (array)
                for (int i = 0; i < jsonArrayBTCUSDT.size(); i++) {
                    FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner
                            .validateJsonElement(jsonArrayBTCUSDT.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("ETHUSDT") != null && !jsonObj.get("ETHUSDT").isJsonNull()) {
            JsonArray jsonArrayETHUSDT = jsonObj.getAsJsonArray("ETHUSDT");
            if (jsonArrayETHUSDT != null) {
                // ensure the json data is an array
                if (!jsonObj.get("ETHUSDT").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `ETHUSDT` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("ETHUSDT").toString()));
                }

                // validate the optional field `ETHUSDT` (array)
                for (int i = 0; i < jsonArrayETHUSDT.size(); i++) {
                    FuturesTradingQuantitativeRulesIndicatorsResponse1IndicatorsBTCUSDTInner
                            .validateJsonElement(jsonArrayETHUSDT.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators given an
     * JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators
     * @throws IOException if the JSON string is invalid with respect to
     *     FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators
     */
    public static FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators.class);
    }

    /**
     * Convert an instance of FuturesTradingQuantitativeRulesIndicatorsResponse1Indicators to an
     * JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
