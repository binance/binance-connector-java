/*
 * Binance Derivatives Trading USDS Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AccountInformationResponse2ResultPositionsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountInformationResponse2ResultPositionsInner extends BaseDTO {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_INITIAL_MARGIN = "initialMargin";

    @SerializedName(SERIALIZED_NAME_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String initialMargin;

    public static final String SERIALIZED_NAME_MAINT_MARGIN = "maintMargin";

    @SerializedName(SERIALIZED_NAME_MAINT_MARGIN)
    @jakarta.annotation.Nullable
    private String maintMargin;

    public static final String SERIALIZED_NAME_UNREALIZED_PROFIT = "unrealizedProfit";

    @SerializedName(SERIALIZED_NAME_UNREALIZED_PROFIT)
    @jakarta.annotation.Nullable
    private String unrealizedProfit;

    public static final String SERIALIZED_NAME_POSITION_INITIAL_MARGIN = "positionInitialMargin";

    @SerializedName(SERIALIZED_NAME_POSITION_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String positionInitialMargin;

    public static final String SERIALIZED_NAME_OPEN_ORDER_INITIAL_MARGIN = "openOrderInitialMargin";

    @SerializedName(SERIALIZED_NAME_OPEN_ORDER_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String openOrderInitialMargin;

    public static final String SERIALIZED_NAME_LEVERAGE = "leverage";

    @SerializedName(SERIALIZED_NAME_LEVERAGE)
    @jakarta.annotation.Nullable
    private String leverage;

    public static final String SERIALIZED_NAME_ISOLATED = "isolated";

    @SerializedName(SERIALIZED_NAME_ISOLATED)
    @jakarta.annotation.Nullable
    private Boolean isolated;

    public static final String SERIALIZED_NAME_ENTRY_PRICE = "entryPrice";

    @SerializedName(SERIALIZED_NAME_ENTRY_PRICE)
    @jakarta.annotation.Nullable
    private String entryPrice;

    public static final String SERIALIZED_NAME_BREAK_EVEN_PRICE = "breakEvenPrice";

    @SerializedName(SERIALIZED_NAME_BREAK_EVEN_PRICE)
    @jakarta.annotation.Nullable
    private String breakEvenPrice;

    public static final String SERIALIZED_NAME_MAX_NOTIONAL = "maxNotional";

    @SerializedName(SERIALIZED_NAME_MAX_NOTIONAL)
    @jakarta.annotation.Nullable
    private String maxNotional;

    public static final String SERIALIZED_NAME_BID_NOTIONAL = "bidNotional";

    @SerializedName(SERIALIZED_NAME_BID_NOTIONAL)
    @jakarta.annotation.Nullable
    private String bidNotional;

    public static final String SERIALIZED_NAME_ASK_NOTIONAL = "askNotional";

    @SerializedName(SERIALIZED_NAME_ASK_NOTIONAL)
    @jakarta.annotation.Nullable
    private String askNotional;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private String positionSide;

    public static final String SERIALIZED_NAME_POSITION_AMT = "positionAmt";

    @SerializedName(SERIALIZED_NAME_POSITION_AMT)
    @jakarta.annotation.Nullable
    private String positionAmt;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public AccountInformationResponse2ResultPositionsInner() {}

    public AccountInformationResponse2ResultPositionsInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public AccountInformationResponse2ResultPositionsInner initialMargin(
            @jakarta.annotation.Nullable String initialMargin) {
        this.initialMargin = initialMargin;
        return this;
    }

    /**
     * Get initialMargin
     *
     * @return initialMargin
     */
    @jakarta.annotation.Nullable
    public String getInitialMargin() {
        return initialMargin;
    }

    public void setInitialMargin(@jakarta.annotation.Nullable String initialMargin) {
        this.initialMargin = initialMargin;
    }

    public AccountInformationResponse2ResultPositionsInner maintMargin(
            @jakarta.annotation.Nullable String maintMargin) {
        this.maintMargin = maintMargin;
        return this;
    }

    /**
     * Get maintMargin
     *
     * @return maintMargin
     */
    @jakarta.annotation.Nullable
    public String getMaintMargin() {
        return maintMargin;
    }

    public void setMaintMargin(@jakarta.annotation.Nullable String maintMargin) {
        this.maintMargin = maintMargin;
    }

    public AccountInformationResponse2ResultPositionsInner unrealizedProfit(
            @jakarta.annotation.Nullable String unrealizedProfit) {
        this.unrealizedProfit = unrealizedProfit;
        return this;
    }

    /**
     * Get unrealizedProfit
     *
     * @return unrealizedProfit
     */
    @jakarta.annotation.Nullable
    public String getUnrealizedProfit() {
        return unrealizedProfit;
    }

    public void setUnrealizedProfit(@jakarta.annotation.Nullable String unrealizedProfit) {
        this.unrealizedProfit = unrealizedProfit;
    }

    public AccountInformationResponse2ResultPositionsInner positionInitialMargin(
            @jakarta.annotation.Nullable String positionInitialMargin) {
        this.positionInitialMargin = positionInitialMargin;
        return this;
    }

    /**
     * Get positionInitialMargin
     *
     * @return positionInitialMargin
     */
    @jakarta.annotation.Nullable
    public String getPositionInitialMargin() {
        return positionInitialMargin;
    }

    public void setPositionInitialMargin(
            @jakarta.annotation.Nullable String positionInitialMargin) {
        this.positionInitialMargin = positionInitialMargin;
    }

    public AccountInformationResponse2ResultPositionsInner openOrderInitialMargin(
            @jakarta.annotation.Nullable String openOrderInitialMargin) {
        this.openOrderInitialMargin = openOrderInitialMargin;
        return this;
    }

    /**
     * Get openOrderInitialMargin
     *
     * @return openOrderInitialMargin
     */
    @jakarta.annotation.Nullable
    public String getOpenOrderInitialMargin() {
        return openOrderInitialMargin;
    }

    public void setOpenOrderInitialMargin(
            @jakarta.annotation.Nullable String openOrderInitialMargin) {
        this.openOrderInitialMargin = openOrderInitialMargin;
    }

    public AccountInformationResponse2ResultPositionsInner leverage(
            @jakarta.annotation.Nullable String leverage) {
        this.leverage = leverage;
        return this;
    }

    /**
     * Get leverage
     *
     * @return leverage
     */
    @jakarta.annotation.Nullable
    public String getLeverage() {
        return leverage;
    }

    public void setLeverage(@jakarta.annotation.Nullable String leverage) {
        this.leverage = leverage;
    }

    public AccountInformationResponse2ResultPositionsInner isolated(
            @jakarta.annotation.Nullable Boolean isolated) {
        this.isolated = isolated;
        return this;
    }

    /**
     * Get isolated
     *
     * @return isolated
     */
    @jakarta.annotation.Nullable
    public Boolean getIsolated() {
        return isolated;
    }

    public void setIsolated(@jakarta.annotation.Nullable Boolean isolated) {
        this.isolated = isolated;
    }

    public AccountInformationResponse2ResultPositionsInner entryPrice(
            @jakarta.annotation.Nullable String entryPrice) {
        this.entryPrice = entryPrice;
        return this;
    }

    /**
     * Get entryPrice
     *
     * @return entryPrice
     */
    @jakarta.annotation.Nullable
    public String getEntryPrice() {
        return entryPrice;
    }

    public void setEntryPrice(@jakarta.annotation.Nullable String entryPrice) {
        this.entryPrice = entryPrice;
    }

    public AccountInformationResponse2ResultPositionsInner breakEvenPrice(
            @jakarta.annotation.Nullable String breakEvenPrice) {
        this.breakEvenPrice = breakEvenPrice;
        return this;
    }

    /**
     * Get breakEvenPrice
     *
     * @return breakEvenPrice
     */
    @jakarta.annotation.Nullable
    public String getBreakEvenPrice() {
        return breakEvenPrice;
    }

    public void setBreakEvenPrice(@jakarta.annotation.Nullable String breakEvenPrice) {
        this.breakEvenPrice = breakEvenPrice;
    }

    public AccountInformationResponse2ResultPositionsInner maxNotional(
            @jakarta.annotation.Nullable String maxNotional) {
        this.maxNotional = maxNotional;
        return this;
    }

    /**
     * Get maxNotional
     *
     * @return maxNotional
     */
    @jakarta.annotation.Nullable
    public String getMaxNotional() {
        return maxNotional;
    }

    public void setMaxNotional(@jakarta.annotation.Nullable String maxNotional) {
        this.maxNotional = maxNotional;
    }

    public AccountInformationResponse2ResultPositionsInner bidNotional(
            @jakarta.annotation.Nullable String bidNotional) {
        this.bidNotional = bidNotional;
        return this;
    }

    /**
     * Get bidNotional
     *
     * @return bidNotional
     */
    @jakarta.annotation.Nullable
    public String getBidNotional() {
        return bidNotional;
    }

    public void setBidNotional(@jakarta.annotation.Nullable String bidNotional) {
        this.bidNotional = bidNotional;
    }

    public AccountInformationResponse2ResultPositionsInner askNotional(
            @jakarta.annotation.Nullable String askNotional) {
        this.askNotional = askNotional;
        return this;
    }

    /**
     * Get askNotional
     *
     * @return askNotional
     */
    @jakarta.annotation.Nullable
    public String getAskNotional() {
        return askNotional;
    }

    public void setAskNotional(@jakarta.annotation.Nullable String askNotional) {
        this.askNotional = askNotional;
    }

    public AccountInformationResponse2ResultPositionsInner positionSide(
            @jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    public String getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
    }

    public AccountInformationResponse2ResultPositionsInner positionAmt(
            @jakarta.annotation.Nullable String positionAmt) {
        this.positionAmt = positionAmt;
        return this;
    }

    /**
     * Get positionAmt
     *
     * @return positionAmt
     */
    @jakarta.annotation.Nullable
    public String getPositionAmt() {
        return positionAmt;
    }

    public void setPositionAmt(@jakarta.annotation.Nullable String positionAmt) {
        this.positionAmt = positionAmt;
    }

    public AccountInformationResponse2ResultPositionsInner updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountInformationResponse2ResultPositionsInner
                accountInformationResponse2ResultPositionsInner =
                        (AccountInformationResponse2ResultPositionsInner) o;
        return Objects.equals(this.symbol, accountInformationResponse2ResultPositionsInner.symbol)
                && Objects.equals(
                        this.initialMargin,
                        accountInformationResponse2ResultPositionsInner.initialMargin)
                && Objects.equals(
                        this.maintMargin,
                        accountInformationResponse2ResultPositionsInner.maintMargin)
                && Objects.equals(
                        this.unrealizedProfit,
                        accountInformationResponse2ResultPositionsInner.unrealizedProfit)
                && Objects.equals(
                        this.positionInitialMargin,
                        accountInformationResponse2ResultPositionsInner.positionInitialMargin)
                && Objects.equals(
                        this.openOrderInitialMargin,
                        accountInformationResponse2ResultPositionsInner.openOrderInitialMargin)
                && Objects.equals(
                        this.leverage, accountInformationResponse2ResultPositionsInner.leverage)
                && Objects.equals(
                        this.isolated, accountInformationResponse2ResultPositionsInner.isolated)
                && Objects.equals(
                        this.entryPrice, accountInformationResponse2ResultPositionsInner.entryPrice)
                && Objects.equals(
                        this.breakEvenPrice,
                        accountInformationResponse2ResultPositionsInner.breakEvenPrice)
                && Objects.equals(
                        this.maxNotional,
                        accountInformationResponse2ResultPositionsInner.maxNotional)
                && Objects.equals(
                        this.bidNotional,
                        accountInformationResponse2ResultPositionsInner.bidNotional)
                && Objects.equals(
                        this.askNotional,
                        accountInformationResponse2ResultPositionsInner.askNotional)
                && Objects.equals(
                        this.positionSide,
                        accountInformationResponse2ResultPositionsInner.positionSide)
                && Objects.equals(
                        this.positionAmt,
                        accountInformationResponse2ResultPositionsInner.positionAmt)
                && Objects.equals(
                        this.updateTime,
                        accountInformationResponse2ResultPositionsInner.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                initialMargin,
                maintMargin,
                unrealizedProfit,
                positionInitialMargin,
                openOrderInitialMargin,
                leverage,
                isolated,
                entryPrice,
                breakEvenPrice,
                maxNotional,
                bidNotional,
                askNotional,
                positionSide,
                positionAmt,
                updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountInformationResponse2ResultPositionsInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		initialMargin: ").append(toIndentedString(initialMargin)).append("\n");
        sb.append("		maintMargin: ").append(toIndentedString(maintMargin)).append("\n");
        sb.append("		unrealizedProfit: ").append(toIndentedString(unrealizedProfit)).append("\n");
        sb.append("		positionInitialMargin: ")
                .append(toIndentedString(positionInitialMargin))
                .append("\n");
        sb.append("		openOrderInitialMargin: ")
                .append(toIndentedString(openOrderInitialMargin))
                .append("\n");
        sb.append("		leverage: ").append(toIndentedString(leverage)).append("\n");
        sb.append("		isolated: ").append(toIndentedString(isolated)).append("\n");
        sb.append("		entryPrice: ").append(toIndentedString(entryPrice)).append("\n");
        sb.append("		breakEvenPrice: ").append(toIndentedString(breakEvenPrice)).append("\n");
        sb.append("		maxNotional: ").append(toIndentedString(maxNotional)).append("\n");
        sb.append("		bidNotional: ").append(toIndentedString(bidNotional)).append("\n");
        sb.append("		askNotional: ").append(toIndentedString(askNotional)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		positionAmt: ").append(toIndentedString(positionAmt)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        String initialMarginValue = getInitialMargin();
        if (initialMarginValue != null) {
            String initialMarginValueAsString = initialMarginValue.toString();
            valMap.put("initialMargin", initialMarginValueAsString);
        }
        String maintMarginValue = getMaintMargin();
        if (maintMarginValue != null) {
            String maintMarginValueAsString = maintMarginValue.toString();
            valMap.put("maintMargin", maintMarginValueAsString);
        }
        String unrealizedProfitValue = getUnrealizedProfit();
        if (unrealizedProfitValue != null) {
            String unrealizedProfitValueAsString = unrealizedProfitValue.toString();
            valMap.put("unrealizedProfit", unrealizedProfitValueAsString);
        }
        String positionInitialMarginValue = getPositionInitialMargin();
        if (positionInitialMarginValue != null) {
            String positionInitialMarginValueAsString = positionInitialMarginValue.toString();
            valMap.put("positionInitialMargin", positionInitialMarginValueAsString);
        }
        String openOrderInitialMarginValue = getOpenOrderInitialMargin();
        if (openOrderInitialMarginValue != null) {
            String openOrderInitialMarginValueAsString = openOrderInitialMarginValue.toString();
            valMap.put("openOrderInitialMargin", openOrderInitialMarginValueAsString);
        }
        String leverageValue = getLeverage();
        if (leverageValue != null) {
            String leverageValueAsString = leverageValue.toString();
            valMap.put("leverage", leverageValueAsString);
        }
        Boolean isolatedValue = getIsolated();
        if (isolatedValue != null) {
            String isolatedValueAsString = isolatedValue.toString();
            valMap.put("isolated", isolatedValueAsString);
        }
        String entryPriceValue = getEntryPrice();
        if (entryPriceValue != null) {
            String entryPriceValueAsString = entryPriceValue.toString();
            valMap.put("entryPrice", entryPriceValueAsString);
        }
        String breakEvenPriceValue = getBreakEvenPrice();
        if (breakEvenPriceValue != null) {
            String breakEvenPriceValueAsString = breakEvenPriceValue.toString();
            valMap.put("breakEvenPrice", breakEvenPriceValueAsString);
        }
        String maxNotionalValue = getMaxNotional();
        if (maxNotionalValue != null) {
            String maxNotionalValueAsString = maxNotionalValue.toString();
            valMap.put("maxNotional", maxNotionalValueAsString);
        }
        String bidNotionalValue = getBidNotional();
        if (bidNotionalValue != null) {
            String bidNotionalValueAsString = bidNotionalValue.toString();
            valMap.put("bidNotional", bidNotionalValueAsString);
        }
        String askNotionalValue = getAskNotional();
        if (askNotionalValue != null) {
            String askNotionalValueAsString = askNotionalValue.toString();
            valMap.put("askNotional", askNotionalValueAsString);
        }
        String positionSideValue = getPositionSide();
        if (positionSideValue != null) {
            String positionSideValueAsString = positionSideValue.toString();
            valMap.put("positionSide", positionSideValueAsString);
        }
        String positionAmtValue = getPositionAmt();
        if (positionAmtValue != null) {
            String positionAmtValueAsString = positionAmtValue.toString();
            valMap.put("positionAmt", positionAmtValueAsString);
        }
        Long updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            String updateTimeValueAsString = updateTimeValue.toString();
            valMap.put("updateTime", updateTimeValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object initialMarginValue = getInitialMargin();
        if (initialMarginValue != null) {
            valMap.put("initialMargin", initialMarginValue);
        }
        Object maintMarginValue = getMaintMargin();
        if (maintMarginValue != null) {
            valMap.put("maintMargin", maintMarginValue);
        }
        Object unrealizedProfitValue = getUnrealizedProfit();
        if (unrealizedProfitValue != null) {
            valMap.put("unrealizedProfit", unrealizedProfitValue);
        }
        Object positionInitialMarginValue = getPositionInitialMargin();
        if (positionInitialMarginValue != null) {
            valMap.put("positionInitialMargin", positionInitialMarginValue);
        }
        Object openOrderInitialMarginValue = getOpenOrderInitialMargin();
        if (openOrderInitialMarginValue != null) {
            valMap.put("openOrderInitialMargin", openOrderInitialMarginValue);
        }
        Object leverageValue = getLeverage();
        if (leverageValue != null) {
            valMap.put("leverage", leverageValue);
        }
        Object isolatedValue = getIsolated();
        if (isolatedValue != null) {
            valMap.put("isolated", isolatedValue);
        }
        Object entryPriceValue = getEntryPrice();
        if (entryPriceValue != null) {
            valMap.put("entryPrice", entryPriceValue);
        }
        Object breakEvenPriceValue = getBreakEvenPrice();
        if (breakEvenPriceValue != null) {
            valMap.put("breakEvenPrice", breakEvenPriceValue);
        }
        Object maxNotionalValue = getMaxNotional();
        if (maxNotionalValue != null) {
            valMap.put("maxNotional", maxNotionalValue);
        }
        Object bidNotionalValue = getBidNotional();
        if (bidNotionalValue != null) {
            valMap.put("bidNotional", bidNotionalValue);
        }
        Object askNotionalValue = getAskNotional();
        if (askNotionalValue != null) {
            valMap.put("askNotional", askNotionalValue);
        }
        Object positionSideValue = getPositionSide();
        if (positionSideValue != null) {
            valMap.put("positionSide", positionSideValue);
        }
        Object positionAmtValue = getPositionAmt();
        if (positionAmtValue != null) {
            valMap.put("positionAmt", positionAmtValue);
        }
        Object updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            valMap.put("updateTime", updateTimeValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("initialMargin");
        openapiFields.add("maintMargin");
        openapiFields.add("unrealizedProfit");
        openapiFields.add("positionInitialMargin");
        openapiFields.add("openOrderInitialMargin");
        openapiFields.add("leverage");
        openapiFields.add("isolated");
        openapiFields.add("entryPrice");
        openapiFields.add("breakEvenPrice");
        openapiFields.add("maxNotional");
        openapiFields.add("bidNotional");
        openapiFields.add("askNotional");
        openapiFields.add("positionSide");
        openapiFields.add("positionAmt");
        openapiFields.add("updateTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AccountInformationResponse2ResultPositionsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountInformationResponse2ResultPositionsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " AccountInformationResponse2ResultPositionsInner is not"
                                        + " found in the empty JSON string",
                                AccountInformationResponse2ResultPositionsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountInformationResponse2ResultPositionsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AccountInformationResponse2ResultPositionsInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("initialMargin") != null && !jsonObj.get("initialMargin").isJsonNull())
                && !jsonObj.get("initialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `initialMargin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("initialMargin").toString()));
        }
        if ((jsonObj.get("maintMargin") != null && !jsonObj.get("maintMargin").isJsonNull())
                && !jsonObj.get("maintMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maintMargin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maintMargin").toString()));
        }
        if ((jsonObj.get("unrealizedProfit") != null
                        && !jsonObj.get("unrealizedProfit").isJsonNull())
                && !jsonObj.get("unrealizedProfit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `unrealizedProfit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("unrealizedProfit").toString()));
        }
        if ((jsonObj.get("positionInitialMargin") != null
                        && !jsonObj.get("positionInitialMargin").isJsonNull())
                && !jsonObj.get("positionInitialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionInitialMargin` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("positionInitialMargin").toString()));
        }
        if ((jsonObj.get("openOrderInitialMargin") != null
                        && !jsonObj.get("openOrderInitialMargin").isJsonNull())
                && !jsonObj.get("openOrderInitialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `openOrderInitialMargin` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("openOrderInitialMargin").toString()));
        }
        if ((jsonObj.get("leverage") != null && !jsonObj.get("leverage").isJsonNull())
                && !jsonObj.get("leverage").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `leverage` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("leverage").toString()));
        }
        if ((jsonObj.get("entryPrice") != null && !jsonObj.get("entryPrice").isJsonNull())
                && !jsonObj.get("entryPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `entryPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("entryPrice").toString()));
        }
        if ((jsonObj.get("breakEvenPrice") != null && !jsonObj.get("breakEvenPrice").isJsonNull())
                && !jsonObj.get("breakEvenPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `breakEvenPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("breakEvenPrice").toString()));
        }
        if ((jsonObj.get("maxNotional") != null && !jsonObj.get("maxNotional").isJsonNull())
                && !jsonObj.get("maxNotional").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxNotional` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maxNotional").toString()));
        }
        if ((jsonObj.get("bidNotional") != null && !jsonObj.get("bidNotional").isJsonNull())
                && !jsonObj.get("bidNotional").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidNotional` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("bidNotional").toString()));
        }
        if ((jsonObj.get("askNotional") != null && !jsonObj.get("askNotional").isJsonNull())
                && !jsonObj.get("askNotional").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askNotional` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("askNotional").toString()));
        }
        if ((jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull())
                && !jsonObj.get("positionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionSide").toString()));
        }
        if ((jsonObj.get("positionAmt") != null && !jsonObj.get("positionAmt").isJsonNull())
                && !jsonObj.get("positionAmt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionAmt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionAmt").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountInformationResponse2ResultPositionsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'AccountInformationResponse2ResultPositionsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountInformationResponse2ResultPositionsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(AccountInformationResponse2ResultPositionsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountInformationResponse2ResultPositionsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                AccountInformationResponse2ResultPositionsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountInformationResponse2ResultPositionsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountInformationResponse2ResultPositionsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountInformationResponse2ResultPositionsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AccountInformationResponse2ResultPositionsInner
     */
    public static AccountInformationResponse2ResultPositionsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, AccountInformationResponse2ResultPositionsInner.class);
    }

    /**
     * Convert an instance of AccountInformationResponse2ResultPositionsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
