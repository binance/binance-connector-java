/*
 * Binance Derivatives Trading USDS Futures WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AllMarketTickersStreamsResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AllMarketTickersStreamsResponseInner extends BaseDTO {
    public static final String SERIALIZED_NAME_E_LOWER_CASE = "e";

    @SerializedName(SERIALIZED_NAME_E_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String eLowerCase;

    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_P_LOWER_CASE = "p";

    @SerializedName(SERIALIZED_NAME_P_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String pLowerCase;

    public static final String SERIALIZED_NAME_P = "P";

    @SerializedName(SERIALIZED_NAME_P)
    @jakarta.annotation.Nullable
    private String P;

    public static final String SERIALIZED_NAME_W_LOWER_CASE = "w";

    @SerializedName(SERIALIZED_NAME_W_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String wLowerCase;

    public static final String SERIALIZED_NAME_C_LOWER_CASE = "c";

    @SerializedName(SERIALIZED_NAME_C_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String cLowerCase;

    public static final String SERIALIZED_NAME_Q = "Q";

    @SerializedName(SERIALIZED_NAME_Q)
    @jakarta.annotation.Nullable
    private String Q;

    public static final String SERIALIZED_NAME_O_LOWER_CASE = "o";

    @SerializedName(SERIALIZED_NAME_O_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String oLowerCase;

    public static final String SERIALIZED_NAME_H_LOWER_CASE = "h";

    @SerializedName(SERIALIZED_NAME_H_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String hLowerCase;

    public static final String SERIALIZED_NAME_L_LOWER_CASE = "l";

    @SerializedName(SERIALIZED_NAME_L_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String lLowerCase;

    public static final String SERIALIZED_NAME_V_LOWER_CASE = "v";

    @SerializedName(SERIALIZED_NAME_V_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String vLowerCase;

    public static final String SERIALIZED_NAME_Q_LOWER_CASE = "q";

    @SerializedName(SERIALIZED_NAME_Q_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String qLowerCase;

    public static final String SERIALIZED_NAME_O = "O";

    @SerializedName(SERIALIZED_NAME_O)
    @jakarta.annotation.Nullable
    private Long O;

    public static final String SERIALIZED_NAME_C = "C";

    @SerializedName(SERIALIZED_NAME_C)
    @jakarta.annotation.Nullable
    private Long C;

    public static final String SERIALIZED_NAME_F = "F";

    @SerializedName(SERIALIZED_NAME_F)
    @jakarta.annotation.Nullable
    private Long F;

    public static final String SERIALIZED_NAME_L = "L";

    @SerializedName(SERIALIZED_NAME_L)
    @jakarta.annotation.Nullable
    private Long L;

    public static final String SERIALIZED_NAME_N_LOWER_CASE = "n";

    @SerializedName(SERIALIZED_NAME_N_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long nLowerCase;

    public AllMarketTickersStreamsResponseInner() {}

    public AllMarketTickersStreamsResponseInner eLowerCase(
            @jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
        return this;
    }

    /**
     * Get eLowerCase
     *
     * @return eLowerCase
     */
    @jakarta.annotation.Nullable
    public String geteLowerCase() {
        return eLowerCase;
    }

    public void seteLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
    }

    public AllMarketTickersStreamsResponseInner E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public AllMarketTickersStreamsResponseInner sLowerCase(
            @jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public AllMarketTickersStreamsResponseInner pLowerCase(
            @jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
        return this;
    }

    /**
     * Get pLowerCase
     *
     * @return pLowerCase
     */
    @jakarta.annotation.Nullable
    public String getpLowerCase() {
        return pLowerCase;
    }

    public void setpLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
    }

    public AllMarketTickersStreamsResponseInner P(@jakarta.annotation.Nullable String P) {
        this.P = P;
        return this;
    }

    /**
     * Get P
     *
     * @return P
     */
    @jakarta.annotation.Nullable
    public String getP() {
        return P;
    }

    public void setP(@jakarta.annotation.Nullable String P) {
        this.P = P;
    }

    public AllMarketTickersStreamsResponseInner wLowerCase(
            @jakarta.annotation.Nullable String wLowerCase) {
        this.wLowerCase = wLowerCase;
        return this;
    }

    /**
     * Get wLowerCase
     *
     * @return wLowerCase
     */
    @jakarta.annotation.Nullable
    public String getwLowerCase() {
        return wLowerCase;
    }

    public void setwLowerCase(@jakarta.annotation.Nullable String wLowerCase) {
        this.wLowerCase = wLowerCase;
    }

    public AllMarketTickersStreamsResponseInner cLowerCase(
            @jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
        return this;
    }

    /**
     * Get cLowerCase
     *
     * @return cLowerCase
     */
    @jakarta.annotation.Nullable
    public String getcLowerCase() {
        return cLowerCase;
    }

    public void setcLowerCase(@jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
    }

    public AllMarketTickersStreamsResponseInner Q(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
        return this;
    }

    /**
     * Get Q
     *
     * @return Q
     */
    @jakarta.annotation.Nullable
    public String getQ() {
        return Q;
    }

    public void setQ(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
    }

    public AllMarketTickersStreamsResponseInner oLowerCase(
            @jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
        return this;
    }

    /**
     * Get oLowerCase
     *
     * @return oLowerCase
     */
    @jakarta.annotation.Nullable
    public String getoLowerCase() {
        return oLowerCase;
    }

    public void setoLowerCase(@jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
    }

    public AllMarketTickersStreamsResponseInner hLowerCase(
            @jakarta.annotation.Nullable String hLowerCase) {
        this.hLowerCase = hLowerCase;
        return this;
    }

    /**
     * Get hLowerCase
     *
     * @return hLowerCase
     */
    @jakarta.annotation.Nullable
    public String gethLowerCase() {
        return hLowerCase;
    }

    public void sethLowerCase(@jakarta.annotation.Nullable String hLowerCase) {
        this.hLowerCase = hLowerCase;
    }

    public AllMarketTickersStreamsResponseInner lLowerCase(
            @jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
        return this;
    }

    /**
     * Get lLowerCase
     *
     * @return lLowerCase
     */
    @jakarta.annotation.Nullable
    public String getlLowerCase() {
        return lLowerCase;
    }

    public void setlLowerCase(@jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
    }

    public AllMarketTickersStreamsResponseInner vLowerCase(
            @jakarta.annotation.Nullable String vLowerCase) {
        this.vLowerCase = vLowerCase;
        return this;
    }

    /**
     * Get vLowerCase
     *
     * @return vLowerCase
     */
    @jakarta.annotation.Nullable
    public String getvLowerCase() {
        return vLowerCase;
    }

    public void setvLowerCase(@jakarta.annotation.Nullable String vLowerCase) {
        this.vLowerCase = vLowerCase;
    }

    public AllMarketTickersStreamsResponseInner qLowerCase(
            @jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
        return this;
    }

    /**
     * Get qLowerCase
     *
     * @return qLowerCase
     */
    @jakarta.annotation.Nullable
    public String getqLowerCase() {
        return qLowerCase;
    }

    public void setqLowerCase(@jakarta.annotation.Nullable String qLowerCase) {
        this.qLowerCase = qLowerCase;
    }

    public AllMarketTickersStreamsResponseInner O(@jakarta.annotation.Nullable Long O) {
        this.O = O;
        return this;
    }

    /**
     * Get O
     *
     * @return O
     */
    @jakarta.annotation.Nullable
    public Long getO() {
        return O;
    }

    public void setO(@jakarta.annotation.Nullable Long O) {
        this.O = O;
    }

    public AllMarketTickersStreamsResponseInner C(@jakarta.annotation.Nullable Long C) {
        this.C = C;
        return this;
    }

    /**
     * Get C
     *
     * @return C
     */
    @jakarta.annotation.Nullable
    public Long getC() {
        return C;
    }

    public void setC(@jakarta.annotation.Nullable Long C) {
        this.C = C;
    }

    public AllMarketTickersStreamsResponseInner F(@jakarta.annotation.Nullable Long F) {
        this.F = F;
        return this;
    }

    /**
     * Get F
     *
     * @return F
     */
    @jakarta.annotation.Nullable
    public Long getF() {
        return F;
    }

    public void setF(@jakarta.annotation.Nullable Long F) {
        this.F = F;
    }

    public AllMarketTickersStreamsResponseInner L(@jakarta.annotation.Nullable Long L) {
        this.L = L;
        return this;
    }

    /**
     * Get L
     *
     * @return L
     */
    @jakarta.annotation.Nullable
    public Long getL() {
        return L;
    }

    public void setL(@jakarta.annotation.Nullable Long L) {
        this.L = L;
    }

    public AllMarketTickersStreamsResponseInner nLowerCase(
            @jakarta.annotation.Nullable Long nLowerCase) {
        this.nLowerCase = nLowerCase;
        return this;
    }

    /**
     * Get nLowerCase
     *
     * @return nLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getnLowerCase() {
        return nLowerCase;
    }

    public void setnLowerCase(@jakarta.annotation.Nullable Long nLowerCase) {
        this.nLowerCase = nLowerCase;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AllMarketTickersStreamsResponseInner allMarketTickersStreamsResponseInner =
                (AllMarketTickersStreamsResponseInner) o;
        return Objects.equals(this.eLowerCase, allMarketTickersStreamsResponseInner.eLowerCase)
                && Objects.equals(this.E, allMarketTickersStreamsResponseInner.E)
                && Objects.equals(this.sLowerCase, allMarketTickersStreamsResponseInner.sLowerCase)
                && Objects.equals(this.pLowerCase, allMarketTickersStreamsResponseInner.pLowerCase)
                && Objects.equals(this.P, allMarketTickersStreamsResponseInner.P)
                && Objects.equals(this.wLowerCase, allMarketTickersStreamsResponseInner.wLowerCase)
                && Objects.equals(this.cLowerCase, allMarketTickersStreamsResponseInner.cLowerCase)
                && Objects.equals(this.Q, allMarketTickersStreamsResponseInner.Q)
                && Objects.equals(this.oLowerCase, allMarketTickersStreamsResponseInner.oLowerCase)
                && Objects.equals(this.hLowerCase, allMarketTickersStreamsResponseInner.hLowerCase)
                && Objects.equals(this.lLowerCase, allMarketTickersStreamsResponseInner.lLowerCase)
                && Objects.equals(this.vLowerCase, allMarketTickersStreamsResponseInner.vLowerCase)
                && Objects.equals(this.qLowerCase, allMarketTickersStreamsResponseInner.qLowerCase)
                && Objects.equals(this.O, allMarketTickersStreamsResponseInner.O)
                && Objects.equals(this.C, allMarketTickersStreamsResponseInner.C)
                && Objects.equals(this.F, allMarketTickersStreamsResponseInner.F)
                && Objects.equals(this.L, allMarketTickersStreamsResponseInner.L)
                && Objects.equals(this.nLowerCase, allMarketTickersStreamsResponseInner.nLowerCase);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                eLowerCase,
                E,
                sLowerCase,
                pLowerCase,
                P,
                wLowerCase,
                cLowerCase,
                Q,
                oLowerCase,
                hLowerCase,
                lLowerCase,
                vLowerCase,
                qLowerCase,
                O,
                C,
                F,
                L,
                nLowerCase);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AllMarketTickersStreamsResponseInner {\n");
        sb.append("		eLowerCase: ").append(toIndentedString(eLowerCase)).append("\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		pLowerCase: ").append(toIndentedString(pLowerCase)).append("\n");
        sb.append("		P: ").append(toIndentedString(P)).append("\n");
        sb.append("		wLowerCase: ").append(toIndentedString(wLowerCase)).append("\n");
        sb.append("		cLowerCase: ").append(toIndentedString(cLowerCase)).append("\n");
        sb.append("		Q: ").append(toIndentedString(Q)).append("\n");
        sb.append("		oLowerCase: ").append(toIndentedString(oLowerCase)).append("\n");
        sb.append("		hLowerCase: ").append(toIndentedString(hLowerCase)).append("\n");
        sb.append("		lLowerCase: ").append(toIndentedString(lLowerCase)).append("\n");
        sb.append("		vLowerCase: ").append(toIndentedString(vLowerCase)).append("\n");
        sb.append("		qLowerCase: ").append(toIndentedString(qLowerCase)).append("\n");
        sb.append("		O: ").append(toIndentedString(O)).append("\n");
        sb.append("		C: ").append(toIndentedString(C)).append("\n");
        sb.append("		F: ").append(toIndentedString(F)).append("\n");
        sb.append("		L: ").append(toIndentedString(L)).append("\n");
        sb.append("		nLowerCase: ").append(toIndentedString(nLowerCase)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            String eLowerCaseValueAsString = eLowerCaseValue.toString();
            valMap.put("eLowerCase", eLowerCaseValueAsString);
        }
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            String pLowerCaseValueAsString = pLowerCaseValue.toString();
            valMap.put("pLowerCase", pLowerCaseValueAsString);
        }
        String PValue = getP();
        if (PValue != null) {
            String PValueAsString = PValue.toString();
            valMap.put("P", PValueAsString);
        }
        String wLowerCaseValue = getwLowerCase();
        if (wLowerCaseValue != null) {
            String wLowerCaseValueAsString = wLowerCaseValue.toString();
            valMap.put("wLowerCase", wLowerCaseValueAsString);
        }
        String cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            String cLowerCaseValueAsString = cLowerCaseValue.toString();
            valMap.put("cLowerCase", cLowerCaseValueAsString);
        }
        String QValue = getQ();
        if (QValue != null) {
            String QValueAsString = QValue.toString();
            valMap.put("Q", QValueAsString);
        }
        String oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            String oLowerCaseValueAsString = oLowerCaseValue.toString();
            valMap.put("oLowerCase", oLowerCaseValueAsString);
        }
        String hLowerCaseValue = gethLowerCase();
        if (hLowerCaseValue != null) {
            String hLowerCaseValueAsString = hLowerCaseValue.toString();
            valMap.put("hLowerCase", hLowerCaseValueAsString);
        }
        String lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            String lLowerCaseValueAsString = lLowerCaseValue.toString();
            valMap.put("lLowerCase", lLowerCaseValueAsString);
        }
        String vLowerCaseValue = getvLowerCase();
        if (vLowerCaseValue != null) {
            String vLowerCaseValueAsString = vLowerCaseValue.toString();
            valMap.put("vLowerCase", vLowerCaseValueAsString);
        }
        String qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            String qLowerCaseValueAsString = qLowerCaseValue.toString();
            valMap.put("qLowerCase", qLowerCaseValueAsString);
        }
        Long OValue = getO();
        if (OValue != null) {
            String OValueAsString = OValue.toString();
            valMap.put("O", OValueAsString);
        }
        Long CValue = getC();
        if (CValue != null) {
            String CValueAsString = CValue.toString();
            valMap.put("C", CValueAsString);
        }
        Long FValue = getF();
        if (FValue != null) {
            String FValueAsString = FValue.toString();
            valMap.put("F", FValueAsString);
        }
        Long LValue = getL();
        if (LValue != null) {
            String LValueAsString = LValue.toString();
            valMap.put("L", LValueAsString);
        }
        Long nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            String nLowerCaseValueAsString = nLowerCaseValue.toString();
            valMap.put("nLowerCase", nLowerCaseValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            valMap.put("eLowerCase", eLowerCaseValue);
        }
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            valMap.put("pLowerCase", pLowerCaseValue);
        }
        Object PValue = getP();
        if (PValue != null) {
            valMap.put("P", PValue);
        }
        Object wLowerCaseValue = getwLowerCase();
        if (wLowerCaseValue != null) {
            valMap.put("wLowerCase", wLowerCaseValue);
        }
        Object cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            valMap.put("cLowerCase", cLowerCaseValue);
        }
        Object QValue = getQ();
        if (QValue != null) {
            valMap.put("Q", QValue);
        }
        Object oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            valMap.put("oLowerCase", oLowerCaseValue);
        }
        Object hLowerCaseValue = gethLowerCase();
        if (hLowerCaseValue != null) {
            valMap.put("hLowerCase", hLowerCaseValue);
        }
        Object lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            valMap.put("lLowerCase", lLowerCaseValue);
        }
        Object vLowerCaseValue = getvLowerCase();
        if (vLowerCaseValue != null) {
            valMap.put("vLowerCase", vLowerCaseValue);
        }
        Object qLowerCaseValue = getqLowerCase();
        if (qLowerCaseValue != null) {
            valMap.put("qLowerCase", qLowerCaseValue);
        }
        Object OValue = getO();
        if (OValue != null) {
            valMap.put("O", OValue);
        }
        Object CValue = getC();
        if (CValue != null) {
            valMap.put("C", CValue);
        }
        Object FValue = getF();
        if (FValue != null) {
            valMap.put("F", FValue);
        }
        Object LValue = getL();
        if (LValue != null) {
            valMap.put("L", LValue);
        }
        Object nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            valMap.put("nLowerCase", nLowerCaseValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("e");
        openapiFields.add("E");
        openapiFields.add("s");
        openapiFields.add("p");
        openapiFields.add("P");
        openapiFields.add("w");
        openapiFields.add("c");
        openapiFields.add("Q");
        openapiFields.add("o");
        openapiFields.add("h");
        openapiFields.add("l");
        openapiFields.add("v");
        openapiFields.add("q");
        openapiFields.add("O");
        openapiFields.add("C");
        openapiFields.add("F");
        openapiFields.add("L");
        openapiFields.add("n");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AllMarketTickersStreamsResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AllMarketTickersStreamsResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AllMarketTickersStreamsResponseInner"
                                        + " is not found in the empty JSON string",
                                AllMarketTickersStreamsResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AllMarketTickersStreamsResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AllMarketTickersStreamsResponseInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull())
                && !jsonObj.get("e").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `e` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("e").toString()));
        }
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("p") != null && !jsonObj.get("p").isJsonNull())
                && !jsonObj.get("p").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `p` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("p").toString()));
        }
        if ((jsonObj.get("P") != null && !jsonObj.get("P").isJsonNull())
                && !jsonObj.get("P").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `P` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("P").toString()));
        }
        if ((jsonObj.get("w") != null && !jsonObj.get("w").isJsonNull())
                && !jsonObj.get("w").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `w` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("w").toString()));
        }
        if ((jsonObj.get("c") != null && !jsonObj.get("c").isJsonNull())
                && !jsonObj.get("c").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `c` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("c").toString()));
        }
        if ((jsonObj.get("Q") != null && !jsonObj.get("Q").isJsonNull())
                && !jsonObj.get("Q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Q").toString()));
        }
        if ((jsonObj.get("o") != null && !jsonObj.get("o").isJsonNull())
                && !jsonObj.get("o").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `o` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("o").toString()));
        }
        if ((jsonObj.get("h") != null && !jsonObj.get("h").isJsonNull())
                && !jsonObj.get("h").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `h` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("h").toString()));
        }
        if ((jsonObj.get("l") != null && !jsonObj.get("l").isJsonNull())
                && !jsonObj.get("l").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `l` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("l").toString()));
        }
        if ((jsonObj.get("v") != null && !jsonObj.get("v").isJsonNull())
                && !jsonObj.get("v").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `v` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("v").toString()));
        }
        if ((jsonObj.get("q") != null && !jsonObj.get("q").isJsonNull())
                && !jsonObj.get("q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("q").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AllMarketTickersStreamsResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AllMarketTickersStreamsResponseInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AllMarketTickersStreamsResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AllMarketTickersStreamsResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AllMarketTickersStreamsResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, AllMarketTickersStreamsResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AllMarketTickersStreamsResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AllMarketTickersStreamsResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AllMarketTickersStreamsResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AllMarketTickersStreamsResponseInner
     */
    public static AllMarketTickersStreamsResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, AllMarketTickersStreamsResponseInner.class);
    }

    /**
     * Convert an instance of AllMarketTickersStreamsResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
