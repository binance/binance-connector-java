/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** ExchangeInformationResponseSymbolsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ExchangeInformationResponseSymbolsInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_PAIR = "pair";

    @SerializedName(SERIALIZED_NAME_PAIR)
    @jakarta.annotation.Nullable
    private String pair;

    public static final String SERIALIZED_NAME_CONTRACT_TYPE = "contractType";

    @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
    @jakarta.annotation.Nullable
    private String contractType;

    public static final String SERIALIZED_NAME_DELIVERY_DATE = "deliveryDate";

    @SerializedName(SERIALIZED_NAME_DELIVERY_DATE)
    @jakarta.annotation.Nullable
    private Long deliveryDate;

    public static final String SERIALIZED_NAME_ONBOARD_DATE = "onboardDate";

    @SerializedName(SERIALIZED_NAME_ONBOARD_DATE)
    @jakarta.annotation.Nullable
    private Long onboardDate;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_MAINT_MARGIN_PERCENT = "maintMarginPercent";

    @SerializedName(SERIALIZED_NAME_MAINT_MARGIN_PERCENT)
    @jakarta.annotation.Nullable
    private String maintMarginPercent;

    public static final String SERIALIZED_NAME_REQUIRED_MARGIN_PERCENT = "requiredMarginPercent";

    @SerializedName(SERIALIZED_NAME_REQUIRED_MARGIN_PERCENT)
    @jakarta.annotation.Nullable
    private String requiredMarginPercent;

    public static final String SERIALIZED_NAME_BASE_ASSET = "baseAsset";

    @SerializedName(SERIALIZED_NAME_BASE_ASSET)
    @jakarta.annotation.Nullable
    private String baseAsset;

    public static final String SERIALIZED_NAME_QUOTE_ASSET = "quoteAsset";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET)
    @jakarta.annotation.Nullable
    private String quoteAsset;

    public static final String SERIALIZED_NAME_MARGIN_ASSET = "marginAsset";

    @SerializedName(SERIALIZED_NAME_MARGIN_ASSET)
    @jakarta.annotation.Nullable
    private String marginAsset;

    public static final String SERIALIZED_NAME_PRICE_PRECISION = "pricePrecision";

    @SerializedName(SERIALIZED_NAME_PRICE_PRECISION)
    @jakarta.annotation.Nullable
    private Long pricePrecision;

    public static final String SERIALIZED_NAME_QUANTITY_PRECISION = "quantityPrecision";

    @SerializedName(SERIALIZED_NAME_QUANTITY_PRECISION)
    @jakarta.annotation.Nullable
    private Long quantityPrecision;

    public static final String SERIALIZED_NAME_BASE_ASSET_PRECISION = "baseAssetPrecision";

    @SerializedName(SERIALIZED_NAME_BASE_ASSET_PRECISION)
    @jakarta.annotation.Nullable
    private Long baseAssetPrecision;

    public static final String SERIALIZED_NAME_QUOTE_PRECISION = "quotePrecision";

    @SerializedName(SERIALIZED_NAME_QUOTE_PRECISION)
    @jakarta.annotation.Nullable
    private Long quotePrecision;

    public static final String SERIALIZED_NAME_UNDERLYING_TYPE = "underlyingType";

    @SerializedName(SERIALIZED_NAME_UNDERLYING_TYPE)
    @jakarta.annotation.Nullable
    private String underlyingType;

    public static final String SERIALIZED_NAME_UNDERLYING_SUB_TYPE = "underlyingSubType";

    @SerializedName(SERIALIZED_NAME_UNDERLYING_SUB_TYPE)
    @jakarta.annotation.Nullable
    private List<String> underlyingSubType;

    public static final String SERIALIZED_NAME_SETTLE_PLAN = "settlePlan";

    @SerializedName(SERIALIZED_NAME_SETTLE_PLAN)
    @jakarta.annotation.Nullable
    private Long settlePlan;

    public static final String SERIALIZED_NAME_TRIGGER_PROTECT = "triggerProtect";

    @SerializedName(SERIALIZED_NAME_TRIGGER_PROTECT)
    @jakarta.annotation.Nullable
    private String triggerProtect;

    public static final String SERIALIZED_NAME_FILTERS = "filters";

    @SerializedName(SERIALIZED_NAME_FILTERS)
    @jakarta.annotation.Nullable
    private List<@Valid ExchangeInformationResponseSymbolsInnerFiltersInner> filters;

    public static final String SERIALIZED_NAME_ORDER_TYPE = "OrderType";

    @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
    @jakarta.annotation.Nullable
    private List<String> orderType;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private List<String> timeInForce;

    public static final String SERIALIZED_NAME_LIQUIDATION_FEE = "liquidationFee";

    @SerializedName(SERIALIZED_NAME_LIQUIDATION_FEE)
    @jakarta.annotation.Nullable
    private String liquidationFee;

    public static final String SERIALIZED_NAME_MARKET_TAKE_BOUND = "marketTakeBound";

    @SerializedName(SERIALIZED_NAME_MARKET_TAKE_BOUND)
    @jakarta.annotation.Nullable
    private String marketTakeBound;

    public ExchangeInformationResponseSymbolsInner() {}

    public ExchangeInformationResponseSymbolsInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public ExchangeInformationResponseSymbolsInner pair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
        return this;
    }

    /**
     * Get pair
     *
     * @return pair
     */
    @jakarta.annotation.Nullable
    public String getPair() {
        return pair;
    }

    public void setPair(@jakarta.annotation.Nullable String pair) {
        this.pair = pair;
    }

    public ExchangeInformationResponseSymbolsInner contractType(
            @jakarta.annotation.Nullable String contractType) {
        this.contractType = contractType;
        return this;
    }

    /**
     * Get contractType
     *
     * @return contractType
     */
    @jakarta.annotation.Nullable
    public String getContractType() {
        return contractType;
    }

    public void setContractType(@jakarta.annotation.Nullable String contractType) {
        this.contractType = contractType;
    }

    public ExchangeInformationResponseSymbolsInner deliveryDate(
            @jakarta.annotation.Nullable Long deliveryDate) {
        this.deliveryDate = deliveryDate;
        return this;
    }

    /**
     * Get deliveryDate
     *
     * @return deliveryDate
     */
    @jakarta.annotation.Nullable
    public Long getDeliveryDate() {
        return deliveryDate;
    }

    public void setDeliveryDate(@jakarta.annotation.Nullable Long deliveryDate) {
        this.deliveryDate = deliveryDate;
    }

    public ExchangeInformationResponseSymbolsInner onboardDate(
            @jakarta.annotation.Nullable Long onboardDate) {
        this.onboardDate = onboardDate;
        return this;
    }

    /**
     * Get onboardDate
     *
     * @return onboardDate
     */
    @jakarta.annotation.Nullable
    public Long getOnboardDate() {
        return onboardDate;
    }

    public void setOnboardDate(@jakarta.annotation.Nullable Long onboardDate) {
        this.onboardDate = onboardDate;
    }

    public ExchangeInformationResponseSymbolsInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public ExchangeInformationResponseSymbolsInner maintMarginPercent(
            @jakarta.annotation.Nullable String maintMarginPercent) {
        this.maintMarginPercent = maintMarginPercent;
        return this;
    }

    /**
     * Get maintMarginPercent
     *
     * @return maintMarginPercent
     */
    @jakarta.annotation.Nullable
    public String getMaintMarginPercent() {
        return maintMarginPercent;
    }

    public void setMaintMarginPercent(@jakarta.annotation.Nullable String maintMarginPercent) {
        this.maintMarginPercent = maintMarginPercent;
    }

    public ExchangeInformationResponseSymbolsInner requiredMarginPercent(
            @jakarta.annotation.Nullable String requiredMarginPercent) {
        this.requiredMarginPercent = requiredMarginPercent;
        return this;
    }

    /**
     * Get requiredMarginPercent
     *
     * @return requiredMarginPercent
     */
    @jakarta.annotation.Nullable
    public String getRequiredMarginPercent() {
        return requiredMarginPercent;
    }

    public void setRequiredMarginPercent(
            @jakarta.annotation.Nullable String requiredMarginPercent) {
        this.requiredMarginPercent = requiredMarginPercent;
    }

    public ExchangeInformationResponseSymbolsInner baseAsset(
            @jakarta.annotation.Nullable String baseAsset) {
        this.baseAsset = baseAsset;
        return this;
    }

    /**
     * Get baseAsset
     *
     * @return baseAsset
     */
    @jakarta.annotation.Nullable
    public String getBaseAsset() {
        return baseAsset;
    }

    public void setBaseAsset(@jakarta.annotation.Nullable String baseAsset) {
        this.baseAsset = baseAsset;
    }

    public ExchangeInformationResponseSymbolsInner quoteAsset(
            @jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
        return this;
    }

    /**
     * Get quoteAsset
     *
     * @return quoteAsset
     */
    @jakarta.annotation.Nullable
    public String getQuoteAsset() {
        return quoteAsset;
    }

    public void setQuoteAsset(@jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
    }

    public ExchangeInformationResponseSymbolsInner marginAsset(
            @jakarta.annotation.Nullable String marginAsset) {
        this.marginAsset = marginAsset;
        return this;
    }

    /**
     * Get marginAsset
     *
     * @return marginAsset
     */
    @jakarta.annotation.Nullable
    public String getMarginAsset() {
        return marginAsset;
    }

    public void setMarginAsset(@jakarta.annotation.Nullable String marginAsset) {
        this.marginAsset = marginAsset;
    }

    public ExchangeInformationResponseSymbolsInner pricePrecision(
            @jakarta.annotation.Nullable Long pricePrecision) {
        this.pricePrecision = pricePrecision;
        return this;
    }

    /**
     * Get pricePrecision
     *
     * @return pricePrecision
     */
    @jakarta.annotation.Nullable
    public Long getPricePrecision() {
        return pricePrecision;
    }

    public void setPricePrecision(@jakarta.annotation.Nullable Long pricePrecision) {
        this.pricePrecision = pricePrecision;
    }

    public ExchangeInformationResponseSymbolsInner quantityPrecision(
            @jakarta.annotation.Nullable Long quantityPrecision) {
        this.quantityPrecision = quantityPrecision;
        return this;
    }

    /**
     * Get quantityPrecision
     *
     * @return quantityPrecision
     */
    @jakarta.annotation.Nullable
    public Long getQuantityPrecision() {
        return quantityPrecision;
    }

    public void setQuantityPrecision(@jakarta.annotation.Nullable Long quantityPrecision) {
        this.quantityPrecision = quantityPrecision;
    }

    public ExchangeInformationResponseSymbolsInner baseAssetPrecision(
            @jakarta.annotation.Nullable Long baseAssetPrecision) {
        this.baseAssetPrecision = baseAssetPrecision;
        return this;
    }

    /**
     * Get baseAssetPrecision
     *
     * @return baseAssetPrecision
     */
    @jakarta.annotation.Nullable
    public Long getBaseAssetPrecision() {
        return baseAssetPrecision;
    }

    public void setBaseAssetPrecision(@jakarta.annotation.Nullable Long baseAssetPrecision) {
        this.baseAssetPrecision = baseAssetPrecision;
    }

    public ExchangeInformationResponseSymbolsInner quotePrecision(
            @jakarta.annotation.Nullable Long quotePrecision) {
        this.quotePrecision = quotePrecision;
        return this;
    }

    /**
     * Get quotePrecision
     *
     * @return quotePrecision
     */
    @jakarta.annotation.Nullable
    public Long getQuotePrecision() {
        return quotePrecision;
    }

    public void setQuotePrecision(@jakarta.annotation.Nullable Long quotePrecision) {
        this.quotePrecision = quotePrecision;
    }

    public ExchangeInformationResponseSymbolsInner underlyingType(
            @jakarta.annotation.Nullable String underlyingType) {
        this.underlyingType = underlyingType;
        return this;
    }

    /**
     * Get underlyingType
     *
     * @return underlyingType
     */
    @jakarta.annotation.Nullable
    public String getUnderlyingType() {
        return underlyingType;
    }

    public void setUnderlyingType(@jakarta.annotation.Nullable String underlyingType) {
        this.underlyingType = underlyingType;
    }

    public ExchangeInformationResponseSymbolsInner underlyingSubType(
            @jakarta.annotation.Nullable List<String> underlyingSubType) {
        this.underlyingSubType = underlyingSubType;
        return this;
    }

    public ExchangeInformationResponseSymbolsInner addUnderlyingSubTypeItem(
            String underlyingSubTypeItem) {
        if (this.underlyingSubType == null) {
            this.underlyingSubType = new ArrayList<>();
        }
        this.underlyingSubType.add(underlyingSubTypeItem);
        return this;
    }

    /**
     * Get underlyingSubType
     *
     * @return underlyingSubType
     */
    @jakarta.annotation.Nullable
    public List<String> getUnderlyingSubType() {
        return underlyingSubType;
    }

    public void setUnderlyingSubType(@jakarta.annotation.Nullable List<String> underlyingSubType) {
        this.underlyingSubType = underlyingSubType;
    }

    public ExchangeInformationResponseSymbolsInner settlePlan(
            @jakarta.annotation.Nullable Long settlePlan) {
        this.settlePlan = settlePlan;
        return this;
    }

    /**
     * Get settlePlan
     *
     * @return settlePlan
     */
    @jakarta.annotation.Nullable
    public Long getSettlePlan() {
        return settlePlan;
    }

    public void setSettlePlan(@jakarta.annotation.Nullable Long settlePlan) {
        this.settlePlan = settlePlan;
    }

    public ExchangeInformationResponseSymbolsInner triggerProtect(
            @jakarta.annotation.Nullable String triggerProtect) {
        this.triggerProtect = triggerProtect;
        return this;
    }

    /**
     * Get triggerProtect
     *
     * @return triggerProtect
     */
    @jakarta.annotation.Nullable
    public String getTriggerProtect() {
        return triggerProtect;
    }

    public void setTriggerProtect(@jakarta.annotation.Nullable String triggerProtect) {
        this.triggerProtect = triggerProtect;
    }

    public ExchangeInformationResponseSymbolsInner filters(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseSymbolsInnerFiltersInner> filters) {
        this.filters = filters;
        return this;
    }

    public ExchangeInformationResponseSymbolsInner addFiltersItem(
            ExchangeInformationResponseSymbolsInnerFiltersInner filtersItem) {
        if (this.filters == null) {
            this.filters = new ArrayList<>();
        }
        this.filters.add(filtersItem);
        return this;
    }

    /**
     * Get filters
     *
     * @return filters
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ExchangeInformationResponseSymbolsInnerFiltersInner> getFilters() {
        return filters;
    }

    public void setFilters(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseSymbolsInnerFiltersInner> filters) {
        this.filters = filters;
    }

    public ExchangeInformationResponseSymbolsInner orderType(
            @jakarta.annotation.Nullable List<String> orderType) {
        this.orderType = orderType;
        return this;
    }

    public ExchangeInformationResponseSymbolsInner addOrderTypeItem(String orderTypeItem) {
        if (this.orderType == null) {
            this.orderType = new ArrayList<>();
        }
        this.orderType.add(orderTypeItem);
        return this;
    }

    /**
     * Get orderType
     *
     * @return orderType
     */
    @jakarta.annotation.Nullable
    public List<String> getOrderType() {
        return orderType;
    }

    public void setOrderType(@jakarta.annotation.Nullable List<String> orderType) {
        this.orderType = orderType;
    }

    public ExchangeInformationResponseSymbolsInner timeInForce(
            @jakarta.annotation.Nullable List<String> timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    public ExchangeInformationResponseSymbolsInner addTimeInForceItem(String timeInForceItem) {
        if (this.timeInForce == null) {
            this.timeInForce = new ArrayList<>();
        }
        this.timeInForce.add(timeInForceItem);
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public List<String> getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable List<String> timeInForce) {
        this.timeInForce = timeInForce;
    }

    public ExchangeInformationResponseSymbolsInner liquidationFee(
            @jakarta.annotation.Nullable String liquidationFee) {
        this.liquidationFee = liquidationFee;
        return this;
    }

    /**
     * Get liquidationFee
     *
     * @return liquidationFee
     */
    @jakarta.annotation.Nullable
    public String getLiquidationFee() {
        return liquidationFee;
    }

    public void setLiquidationFee(@jakarta.annotation.Nullable String liquidationFee) {
        this.liquidationFee = liquidationFee;
    }

    public ExchangeInformationResponseSymbolsInner marketTakeBound(
            @jakarta.annotation.Nullable String marketTakeBound) {
        this.marketTakeBound = marketTakeBound;
        return this;
    }

    /**
     * Get marketTakeBound
     *
     * @return marketTakeBound
     */
    @jakarta.annotation.Nullable
    public String getMarketTakeBound() {
        return marketTakeBound;
    }

    public void setMarketTakeBound(@jakarta.annotation.Nullable String marketTakeBound) {
        this.marketTakeBound = marketTakeBound;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExchangeInformationResponseSymbolsInner exchangeInformationResponseSymbolsInner =
                (ExchangeInformationResponseSymbolsInner) o;
        return Objects.equals(this.symbol, exchangeInformationResponseSymbolsInner.symbol)
                && Objects.equals(this.pair, exchangeInformationResponseSymbolsInner.pair)
                && Objects.equals(
                        this.contractType, exchangeInformationResponseSymbolsInner.contractType)
                && Objects.equals(
                        this.deliveryDate, exchangeInformationResponseSymbolsInner.deliveryDate)
                && Objects.equals(
                        this.onboardDate, exchangeInformationResponseSymbolsInner.onboardDate)
                && Objects.equals(this.status, exchangeInformationResponseSymbolsInner.status)
                && Objects.equals(
                        this.maintMarginPercent,
                        exchangeInformationResponseSymbolsInner.maintMarginPercent)
                && Objects.equals(
                        this.requiredMarginPercent,
                        exchangeInformationResponseSymbolsInner.requiredMarginPercent)
                && Objects.equals(this.baseAsset, exchangeInformationResponseSymbolsInner.baseAsset)
                && Objects.equals(
                        this.quoteAsset, exchangeInformationResponseSymbolsInner.quoteAsset)
                && Objects.equals(
                        this.marginAsset, exchangeInformationResponseSymbolsInner.marginAsset)
                && Objects.equals(
                        this.pricePrecision, exchangeInformationResponseSymbolsInner.pricePrecision)
                && Objects.equals(
                        this.quantityPrecision,
                        exchangeInformationResponseSymbolsInner.quantityPrecision)
                && Objects.equals(
                        this.baseAssetPrecision,
                        exchangeInformationResponseSymbolsInner.baseAssetPrecision)
                && Objects.equals(
                        this.quotePrecision, exchangeInformationResponseSymbolsInner.quotePrecision)
                && Objects.equals(
                        this.underlyingType, exchangeInformationResponseSymbolsInner.underlyingType)
                && Objects.equals(
                        this.underlyingSubType,
                        exchangeInformationResponseSymbolsInner.underlyingSubType)
                && Objects.equals(
                        this.settlePlan, exchangeInformationResponseSymbolsInner.settlePlan)
                && Objects.equals(
                        this.triggerProtect, exchangeInformationResponseSymbolsInner.triggerProtect)
                && Objects.equals(this.filters, exchangeInformationResponseSymbolsInner.filters)
                && Objects.equals(this.orderType, exchangeInformationResponseSymbolsInner.orderType)
                && Objects.equals(
                        this.timeInForce, exchangeInformationResponseSymbolsInner.timeInForce)
                && Objects.equals(
                        this.liquidationFee, exchangeInformationResponseSymbolsInner.liquidationFee)
                && Objects.equals(
                        this.marketTakeBound,
                        exchangeInformationResponseSymbolsInner.marketTakeBound);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                pair,
                contractType,
                deliveryDate,
                onboardDate,
                status,
                maintMarginPercent,
                requiredMarginPercent,
                baseAsset,
                quoteAsset,
                marginAsset,
                pricePrecision,
                quantityPrecision,
                baseAssetPrecision,
                quotePrecision,
                underlyingType,
                underlyingSubType,
                settlePlan,
                triggerProtect,
                filters,
                orderType,
                timeInForce,
                liquidationFee,
                marketTakeBound);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExchangeInformationResponseSymbolsInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		pair: ").append(toIndentedString(pair)).append("\n");
        sb.append("		contractType: ").append(toIndentedString(contractType)).append("\n");
        sb.append("		deliveryDate: ").append(toIndentedString(deliveryDate)).append("\n");
        sb.append("		onboardDate: ").append(toIndentedString(onboardDate)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		maintMarginPercent: ")
                .append(toIndentedString(maintMarginPercent))
                .append("\n");
        sb.append("		requiredMarginPercent: ")
                .append(toIndentedString(requiredMarginPercent))
                .append("\n");
        sb.append("		baseAsset: ").append(toIndentedString(baseAsset)).append("\n");
        sb.append("		quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
        sb.append("		marginAsset: ").append(toIndentedString(marginAsset)).append("\n");
        sb.append("		pricePrecision: ").append(toIndentedString(pricePrecision)).append("\n");
        sb.append("		quantityPrecision: ").append(toIndentedString(quantityPrecision)).append("\n");
        sb.append("		baseAssetPrecision: ")
                .append(toIndentedString(baseAssetPrecision))
                .append("\n");
        sb.append("		quotePrecision: ").append(toIndentedString(quotePrecision)).append("\n");
        sb.append("		underlyingType: ").append(toIndentedString(underlyingType)).append("\n");
        sb.append("		underlyingSubType: ").append(toIndentedString(underlyingSubType)).append("\n");
        sb.append("		settlePlan: ").append(toIndentedString(settlePlan)).append("\n");
        sb.append("		triggerProtect: ").append(toIndentedString(triggerProtect)).append("\n");
        sb.append("		filters: ").append(toIndentedString(filters)).append("\n");
        sb.append("		orderType: ").append(toIndentedString(orderType)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		liquidationFee: ").append(toIndentedString(liquidationFee)).append("\n");
        sb.append("		marketTakeBound: ").append(toIndentedString(marketTakeBound)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object pairValue = getPair();
        String pairValueAsString = "";
        pairValueAsString = pairValue.toString();
        sb.append("pair=").append(urlEncode(pairValueAsString)).append("");
        Object contractTypeValue = getContractType();
        String contractTypeValueAsString = "";
        contractTypeValueAsString = contractTypeValue.toString();
        sb.append("contractType=").append(urlEncode(contractTypeValueAsString)).append("");
        Object deliveryDateValue = getDeliveryDate();
        String deliveryDateValueAsString = "";
        deliveryDateValueAsString = deliveryDateValue.toString();
        sb.append("deliveryDate=").append(urlEncode(deliveryDateValueAsString)).append("");
        Object onboardDateValue = getOnboardDate();
        String onboardDateValueAsString = "";
        onboardDateValueAsString = onboardDateValue.toString();
        sb.append("onboardDate=").append(urlEncode(onboardDateValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object maintMarginPercentValue = getMaintMarginPercent();
        String maintMarginPercentValueAsString = "";
        maintMarginPercentValueAsString = maintMarginPercentValue.toString();
        sb.append("maintMarginPercent=")
                .append(urlEncode(maintMarginPercentValueAsString))
                .append("");
        Object requiredMarginPercentValue = getRequiredMarginPercent();
        String requiredMarginPercentValueAsString = "";
        requiredMarginPercentValueAsString = requiredMarginPercentValue.toString();
        sb.append("requiredMarginPercent=")
                .append(urlEncode(requiredMarginPercentValueAsString))
                .append("");
        Object baseAssetValue = getBaseAsset();
        String baseAssetValueAsString = "";
        baseAssetValueAsString = baseAssetValue.toString();
        sb.append("baseAsset=").append(urlEncode(baseAssetValueAsString)).append("");
        Object quoteAssetValue = getQuoteAsset();
        String quoteAssetValueAsString = "";
        quoteAssetValueAsString = quoteAssetValue.toString();
        sb.append("quoteAsset=").append(urlEncode(quoteAssetValueAsString)).append("");
        Object marginAssetValue = getMarginAsset();
        String marginAssetValueAsString = "";
        marginAssetValueAsString = marginAssetValue.toString();
        sb.append("marginAsset=").append(urlEncode(marginAssetValueAsString)).append("");
        Object pricePrecisionValue = getPricePrecision();
        String pricePrecisionValueAsString = "";
        pricePrecisionValueAsString = pricePrecisionValue.toString();
        sb.append("pricePrecision=").append(urlEncode(pricePrecisionValueAsString)).append("");
        Object quantityPrecisionValue = getQuantityPrecision();
        String quantityPrecisionValueAsString = "";
        quantityPrecisionValueAsString = quantityPrecisionValue.toString();
        sb.append("quantityPrecision=")
                .append(urlEncode(quantityPrecisionValueAsString))
                .append("");
        Object baseAssetPrecisionValue = getBaseAssetPrecision();
        String baseAssetPrecisionValueAsString = "";
        baseAssetPrecisionValueAsString = baseAssetPrecisionValue.toString();
        sb.append("baseAssetPrecision=")
                .append(urlEncode(baseAssetPrecisionValueAsString))
                .append("");
        Object quotePrecisionValue = getQuotePrecision();
        String quotePrecisionValueAsString = "";
        quotePrecisionValueAsString = quotePrecisionValue.toString();
        sb.append("quotePrecision=").append(urlEncode(quotePrecisionValueAsString)).append("");
        Object underlyingTypeValue = getUnderlyingType();
        String underlyingTypeValueAsString = "";
        underlyingTypeValueAsString = underlyingTypeValue.toString();
        sb.append("underlyingType=").append(urlEncode(underlyingTypeValueAsString)).append("");
        Object underlyingSubTypeValue = getUnderlyingSubType();
        String underlyingSubTypeValueAsString = "";
        underlyingSubTypeValueAsString =
                (String)
                        ((Collection) underlyingSubTypeValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("underlyingSubType=")
                .append(urlEncode(underlyingSubTypeValueAsString))
                .append("");
        Object settlePlanValue = getSettlePlan();
        String settlePlanValueAsString = "";
        settlePlanValueAsString = settlePlanValue.toString();
        sb.append("settlePlan=").append(urlEncode(settlePlanValueAsString)).append("");
        Object triggerProtectValue = getTriggerProtect();
        String triggerProtectValueAsString = "";
        triggerProtectValueAsString = triggerProtectValue.toString();
        sb.append("triggerProtect=").append(urlEncode(triggerProtectValueAsString)).append("");
        Object filtersValue = getFilters();
        String filtersValueAsString = "";
        filtersValueAsString =
                (String)
                        ((Collection) filtersValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("filters=").append(urlEncode(filtersValueAsString)).append("");
        Object orderTypeValue = getOrderType();
        String orderTypeValueAsString = "";
        orderTypeValueAsString =
                (String)
                        ((Collection) orderTypeValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("orderType=").append(urlEncode(orderTypeValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString =
                (String)
                        ((Collection) timeInForceValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object liquidationFeeValue = getLiquidationFee();
        String liquidationFeeValueAsString = "";
        liquidationFeeValueAsString = liquidationFeeValue.toString();
        sb.append("liquidationFee=").append(urlEncode(liquidationFeeValueAsString)).append("");
        Object marketTakeBoundValue = getMarketTakeBound();
        String marketTakeBoundValueAsString = "";
        marketTakeBoundValueAsString = marketTakeBoundValue.toString();
        sb.append("marketTakeBound=").append(urlEncode(marketTakeBoundValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("pair");
        openapiFields.add("contractType");
        openapiFields.add("deliveryDate");
        openapiFields.add("onboardDate");
        openapiFields.add("status");
        openapiFields.add("maintMarginPercent");
        openapiFields.add("requiredMarginPercent");
        openapiFields.add("baseAsset");
        openapiFields.add("quoteAsset");
        openapiFields.add("marginAsset");
        openapiFields.add("pricePrecision");
        openapiFields.add("quantityPrecision");
        openapiFields.add("baseAssetPrecision");
        openapiFields.add("quotePrecision");
        openapiFields.add("underlyingType");
        openapiFields.add("underlyingSubType");
        openapiFields.add("settlePlan");
        openapiFields.add("triggerProtect");
        openapiFields.add("filters");
        openapiFields.add("OrderType");
        openapiFields.add("timeInForce");
        openapiFields.add("liquidationFee");
        openapiFields.add("marketTakeBound");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ExchangeInformationResponseSymbolsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ExchangeInformationResponseSymbolsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " ExchangeInformationResponseSymbolsInner is not found in the"
                                    + " empty JSON string",
                                ExchangeInformationResponseSymbolsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ExchangeInformationResponseSymbolsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ExchangeInformationResponseSymbolsInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("pair") != null && !jsonObj.get("pair").isJsonNull())
                && !jsonObj.get("pair").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pair` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("pair").toString()));
        }
        if ((jsonObj.get("contractType") != null && !jsonObj.get("contractType").isJsonNull())
                && !jsonObj.get("contractType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `contractType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("contractType").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("maintMarginPercent") != null
                        && !jsonObj.get("maintMarginPercent").isJsonNull())
                && !jsonObj.get("maintMarginPercent").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maintMarginPercent` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("maintMarginPercent").toString()));
        }
        if ((jsonObj.get("requiredMarginPercent") != null
                        && !jsonObj.get("requiredMarginPercent").isJsonNull())
                && !jsonObj.get("requiredMarginPercent").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `requiredMarginPercent` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("requiredMarginPercent").toString()));
        }
        if ((jsonObj.get("baseAsset") != null && !jsonObj.get("baseAsset").isJsonNull())
                && !jsonObj.get("baseAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `baseAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("baseAsset").toString()));
        }
        if ((jsonObj.get("quoteAsset") != null && !jsonObj.get("quoteAsset").isJsonNull())
                && !jsonObj.get("quoteAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteAsset").toString()));
        }
        if ((jsonObj.get("marginAsset") != null && !jsonObj.get("marginAsset").isJsonNull())
                && !jsonObj.get("marginAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `marginAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("marginAsset").toString()));
        }
        if ((jsonObj.get("underlyingType") != null && !jsonObj.get("underlyingType").isJsonNull())
                && !jsonObj.get("underlyingType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `underlyingType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("underlyingType").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("underlyingSubType") != null
                && !jsonObj.get("underlyingSubType").isJsonNull()
                && !jsonObj.get("underlyingSubType").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `underlyingSubType` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("underlyingSubType").toString()));
        }
        if ((jsonObj.get("triggerProtect") != null && !jsonObj.get("triggerProtect").isJsonNull())
                && !jsonObj.get("triggerProtect").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `triggerProtect` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("triggerProtect").toString()));
        }
        if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
            JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
            if (jsonArrayfilters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("filters").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `filters` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("filters").toString()));
                }

                // validate the optional field `filters` (array)
                for (int i = 0; i < jsonArrayfilters.size(); i++) {
                    ExchangeInformationResponseSymbolsInnerFiltersInner.validateJsonElement(
                            jsonArrayfilters.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("OrderType") != null
                && !jsonObj.get("OrderType").isJsonNull()
                && !jsonObj.get("OrderType").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `OrderType` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("OrderType").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("timeInForce") != null
                && !jsonObj.get("timeInForce").isJsonNull()
                && !jsonObj.get("timeInForce").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        if ((jsonObj.get("liquidationFee") != null && !jsonObj.get("liquidationFee").isJsonNull())
                && !jsonObj.get("liquidationFee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `liquidationFee` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("liquidationFee").toString()));
        }
        if ((jsonObj.get("marketTakeBound") != null && !jsonObj.get("marketTakeBound").isJsonNull())
                && !jsonObj.get("marketTakeBound").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `marketTakeBound` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("marketTakeBound").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ExchangeInformationResponseSymbolsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'ExchangeInformationResponseSymbolsInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeInformationResponseSymbolsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ExchangeInformationResponseSymbolsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ExchangeInformationResponseSymbolsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, ExchangeInformationResponseSymbolsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ExchangeInformationResponseSymbolsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ExchangeInformationResponseSymbolsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ExchangeInformationResponseSymbolsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     ExchangeInformationResponseSymbolsInner
     */
    public static ExchangeInformationResponseSymbolsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, ExchangeInformationResponseSymbolsInner.class);
    }

    /**
     * Convert an instance of ExchangeInformationResponseSymbolsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
