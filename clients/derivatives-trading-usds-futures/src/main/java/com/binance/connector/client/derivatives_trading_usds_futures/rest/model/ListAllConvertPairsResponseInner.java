/*
 * Binance Derivatives Trading USDS Futures REST API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.rest.model;

import com.binance.connector.client.derivatives_trading_usds_futures.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** ListAllConvertPairsResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ListAllConvertPairsResponseInner {
    public static final String SERIALIZED_NAME_FROM_ASSET = "fromAsset";

    @SerializedName(SERIALIZED_NAME_FROM_ASSET)
    @jakarta.annotation.Nullable
    private String fromAsset;

    public static final String SERIALIZED_NAME_TO_ASSET = "toAsset";

    @SerializedName(SERIALIZED_NAME_TO_ASSET)
    @jakarta.annotation.Nullable
    private String toAsset;

    public static final String SERIALIZED_NAME_FROM_ASSET_MIN_AMOUNT = "fromAssetMinAmount";

    @SerializedName(SERIALIZED_NAME_FROM_ASSET_MIN_AMOUNT)
    @jakarta.annotation.Nullable
    private String fromAssetMinAmount;

    public static final String SERIALIZED_NAME_FROM_ASSET_MAX_AMOUNT = "fromAssetMaxAmount";

    @SerializedName(SERIALIZED_NAME_FROM_ASSET_MAX_AMOUNT)
    @jakarta.annotation.Nullable
    private String fromAssetMaxAmount;

    public static final String SERIALIZED_NAME_TO_ASSET_MIN_AMOUNT = "toAssetMinAmount";

    @SerializedName(SERIALIZED_NAME_TO_ASSET_MIN_AMOUNT)
    @jakarta.annotation.Nullable
    private String toAssetMinAmount;

    public static final String SERIALIZED_NAME_TO_ASSET_MAX_AMOUNT = "toAssetMaxAmount";

    @SerializedName(SERIALIZED_NAME_TO_ASSET_MAX_AMOUNT)
    @jakarta.annotation.Nullable
    private String toAssetMaxAmount;

    public ListAllConvertPairsResponseInner() {}

    public ListAllConvertPairsResponseInner fromAsset(
            @jakarta.annotation.Nullable String fromAsset) {
        this.fromAsset = fromAsset;
        return this;
    }

    /**
     * Get fromAsset
     *
     * @return fromAsset
     */
    @jakarta.annotation.Nullable
    public String getFromAsset() {
        return fromAsset;
    }

    public void setFromAsset(@jakarta.annotation.Nullable String fromAsset) {
        this.fromAsset = fromAsset;
    }

    public ListAllConvertPairsResponseInner toAsset(@jakarta.annotation.Nullable String toAsset) {
        this.toAsset = toAsset;
        return this;
    }

    /**
     * Get toAsset
     *
     * @return toAsset
     */
    @jakarta.annotation.Nullable
    public String getToAsset() {
        return toAsset;
    }

    public void setToAsset(@jakarta.annotation.Nullable String toAsset) {
        this.toAsset = toAsset;
    }

    public ListAllConvertPairsResponseInner fromAssetMinAmount(
            @jakarta.annotation.Nullable String fromAssetMinAmount) {
        this.fromAssetMinAmount = fromAssetMinAmount;
        return this;
    }

    /**
     * Get fromAssetMinAmount
     *
     * @return fromAssetMinAmount
     */
    @jakarta.annotation.Nullable
    public String getFromAssetMinAmount() {
        return fromAssetMinAmount;
    }

    public void setFromAssetMinAmount(@jakarta.annotation.Nullable String fromAssetMinAmount) {
        this.fromAssetMinAmount = fromAssetMinAmount;
    }

    public ListAllConvertPairsResponseInner fromAssetMaxAmount(
            @jakarta.annotation.Nullable String fromAssetMaxAmount) {
        this.fromAssetMaxAmount = fromAssetMaxAmount;
        return this;
    }

    /**
     * Get fromAssetMaxAmount
     *
     * @return fromAssetMaxAmount
     */
    @jakarta.annotation.Nullable
    public String getFromAssetMaxAmount() {
        return fromAssetMaxAmount;
    }

    public void setFromAssetMaxAmount(@jakarta.annotation.Nullable String fromAssetMaxAmount) {
        this.fromAssetMaxAmount = fromAssetMaxAmount;
    }

    public ListAllConvertPairsResponseInner toAssetMinAmount(
            @jakarta.annotation.Nullable String toAssetMinAmount) {
        this.toAssetMinAmount = toAssetMinAmount;
        return this;
    }

    /**
     * Get toAssetMinAmount
     *
     * @return toAssetMinAmount
     */
    @jakarta.annotation.Nullable
    public String getToAssetMinAmount() {
        return toAssetMinAmount;
    }

    public void setToAssetMinAmount(@jakarta.annotation.Nullable String toAssetMinAmount) {
        this.toAssetMinAmount = toAssetMinAmount;
    }

    public ListAllConvertPairsResponseInner toAssetMaxAmount(
            @jakarta.annotation.Nullable String toAssetMaxAmount) {
        this.toAssetMaxAmount = toAssetMaxAmount;
        return this;
    }

    /**
     * Get toAssetMaxAmount
     *
     * @return toAssetMaxAmount
     */
    @jakarta.annotation.Nullable
    public String getToAssetMaxAmount() {
        return toAssetMaxAmount;
    }

    public void setToAssetMaxAmount(@jakarta.annotation.Nullable String toAssetMaxAmount) {
        this.toAssetMaxAmount = toAssetMaxAmount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAllConvertPairsResponseInner listAllConvertPairsResponseInner =
                (ListAllConvertPairsResponseInner) o;
        return Objects.equals(this.fromAsset, listAllConvertPairsResponseInner.fromAsset)
                && Objects.equals(this.toAsset, listAllConvertPairsResponseInner.toAsset)
                && Objects.equals(
                        this.fromAssetMinAmount,
                        listAllConvertPairsResponseInner.fromAssetMinAmount)
                && Objects.equals(
                        this.fromAssetMaxAmount,
                        listAllConvertPairsResponseInner.fromAssetMaxAmount)
                && Objects.equals(
                        this.toAssetMinAmount, listAllConvertPairsResponseInner.toAssetMinAmount)
                && Objects.equals(
                        this.toAssetMaxAmount, listAllConvertPairsResponseInner.toAssetMaxAmount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                fromAsset,
                toAsset,
                fromAssetMinAmount,
                fromAssetMaxAmount,
                toAssetMinAmount,
                toAssetMaxAmount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ListAllConvertPairsResponseInner {\n");
        sb.append("		fromAsset: ").append(toIndentedString(fromAsset)).append("\n");
        sb.append("		toAsset: ").append(toIndentedString(toAsset)).append("\n");
        sb.append("		fromAssetMinAmount: ")
                .append(toIndentedString(fromAssetMinAmount))
                .append("\n");
        sb.append("		fromAssetMaxAmount: ")
                .append(toIndentedString(fromAssetMaxAmount))
                .append("\n");
        sb.append("		toAssetMinAmount: ").append(toIndentedString(toAssetMinAmount)).append("\n");
        sb.append("		toAssetMaxAmount: ").append(toIndentedString(toAssetMaxAmount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object fromAssetValue = getFromAsset();
        String fromAssetValueAsString = "";
        fromAssetValueAsString = fromAssetValue.toString();
        sb.append("fromAsset=").append(urlEncode(fromAssetValueAsString)).append("");
        Object toAssetValue = getToAsset();
        String toAssetValueAsString = "";
        toAssetValueAsString = toAssetValue.toString();
        sb.append("toAsset=").append(urlEncode(toAssetValueAsString)).append("");
        Object fromAssetMinAmountValue = getFromAssetMinAmount();
        String fromAssetMinAmountValueAsString = "";
        fromAssetMinAmountValueAsString = fromAssetMinAmountValue.toString();
        sb.append("fromAssetMinAmount=")
                .append(urlEncode(fromAssetMinAmountValueAsString))
                .append("");
        Object fromAssetMaxAmountValue = getFromAssetMaxAmount();
        String fromAssetMaxAmountValueAsString = "";
        fromAssetMaxAmountValueAsString = fromAssetMaxAmountValue.toString();
        sb.append("fromAssetMaxAmount=")
                .append(urlEncode(fromAssetMaxAmountValueAsString))
                .append("");
        Object toAssetMinAmountValue = getToAssetMinAmount();
        String toAssetMinAmountValueAsString = "";
        toAssetMinAmountValueAsString = toAssetMinAmountValue.toString();
        sb.append("toAssetMinAmount=").append(urlEncode(toAssetMinAmountValueAsString)).append("");
        Object toAssetMaxAmountValue = getToAssetMaxAmount();
        String toAssetMaxAmountValueAsString = "";
        toAssetMaxAmountValueAsString = toAssetMaxAmountValue.toString();
        sb.append("toAssetMaxAmount=").append(urlEncode(toAssetMaxAmountValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("fromAsset");
        openapiFields.add("toAsset");
        openapiFields.add("fromAssetMinAmount");
        openapiFields.add("fromAssetMaxAmount");
        openapiFields.add("toAssetMinAmount");
        openapiFields.add("toAssetMaxAmount");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ListAllConvertPairsResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ListAllConvertPairsResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ListAllConvertPairsResponseInner is"
                                        + " not found in the empty JSON string",
                                ListAllConvertPairsResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ListAllConvertPairsResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ListAllConvertPairsResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("fromAsset") != null && !jsonObj.get("fromAsset").isJsonNull())
                && !jsonObj.get("fromAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fromAsset").toString()));
        }
        if ((jsonObj.get("toAsset") != null && !jsonObj.get("toAsset").isJsonNull())
                && !jsonObj.get("toAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toAsset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("toAsset").toString()));
        }
        if ((jsonObj.get("fromAssetMinAmount") != null
                        && !jsonObj.get("fromAssetMinAmount").isJsonNull())
                && !jsonObj.get("fromAssetMinAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromAssetMinAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("fromAssetMinAmount").toString()));
        }
        if ((jsonObj.get("fromAssetMaxAmount") != null
                        && !jsonObj.get("fromAssetMaxAmount").isJsonNull())
                && !jsonObj.get("fromAssetMaxAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromAssetMaxAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("fromAssetMaxAmount").toString()));
        }
        if ((jsonObj.get("toAssetMinAmount") != null
                        && !jsonObj.get("toAssetMinAmount").isJsonNull())
                && !jsonObj.get("toAssetMinAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toAssetMinAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("toAssetMinAmount").toString()));
        }
        if ((jsonObj.get("toAssetMaxAmount") != null
                        && !jsonObj.get("toAssetMaxAmount").isJsonNull())
                && !jsonObj.get("toAssetMaxAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toAssetMaxAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("toAssetMaxAmount").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ListAllConvertPairsResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ListAllConvertPairsResponseInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ListAllConvertPairsResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ListAllConvertPairsResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ListAllConvertPairsResponseInner>() {
                        @Override
                        public void write(JsonWriter out, ListAllConvertPairsResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ListAllConvertPairsResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ListAllConvertPairsResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ListAllConvertPairsResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     ListAllConvertPairsResponseInner
     */
    public static ListAllConvertPairsResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ListAllConvertPairsResponseInner.class);
    }

    /**
     * Convert an instance of ListAllConvertPairsResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
