/*
 * Binance Derivatives Trading USDS Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.api;

import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.common.websocket.adapter.ConnectionInterface;
import com.binance.connector.client.common.websocket.dtos.ApiRequestWrapperDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.CancelOrderRequest;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.CancelOrderResponse;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.ModifyOrderRequest;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.ModifyOrderResponse;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.NewOrderRequest;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.NewOrderResponse;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.PositionInformationRequest;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.PositionInformationResponse;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.PositionInformationV2Request;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.PositionInformationV2Response;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.QueryOrderRequest;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model.QueryOrderResponse;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class TradeApi {
    private ConnectionInterface connection;

    public TradeApi() {}

    public TradeApi(ConnectionInterface connection) {
        this.connection = connection;
    }

    /**
     * Cancel Order (TRADE) Cancel an active order. * Either &#x60;orderId&#x60; or
     * &#x60;origClientOrderId&#x60; must be sent. Weight: 1
     *
     * @param cancelOrderRequest (required)
     * @return CancelOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Cancel Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Cancel-Order">Cancel
     *     Order (TRADE) Documentation</a>
     */
    public CompletableFuture<CancelOrderResponse> cancelOrder(CancelOrderRequest cancelOrderRequest)
            throws ApiException {
        cancelOrderValidateBeforeCall(cancelOrderRequest);
        String methodName = "/order.cancel".substring(1);
        ApiRequestWrapperDTO<CancelOrderRequest, CancelOrderResponse> build =
                new ApiRequestWrapperDTO.Builder<CancelOrderRequest, CancelOrderResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(cancelOrderRequest)
                        .responseType(CancelOrderResponse.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void cancelOrderValidateBeforeCall(CancelOrderRequest cancelOrderRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<CancelOrderRequest>> violations =
                    validator.validate(cancelOrderRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Modify Order (TRADE) Order modify function, currently only LIMIT order modification is
     * supported, modified orders will be reordered in the match queue * Either &#x60;orderId&#x60;
     * or &#x60;origClientOrderId&#x60; must be sent, and the &#x60;orderId&#x60; will prevail if
     * both are sent. * Both &#x60;quantity&#x60; and &#x60;price&#x60; must be sent, which is
     * different from dapi modify order endpoint. * When the new &#x60;quantity&#x60; or
     * &#x60;price&#x60; doesn&#39;t satisfy PRICE_FILTER / PERCENT_FILTER / LOT_SIZE, amendment
     * will be rejected and the order will stay as it is. * However the order will be cancelled by
     * the amendment in the following situations: * when the order is in partially filled status and
     * the new &#x60;quantity&#x60; &lt;&#x3D; &#x60;executedQty&#x60; * When the order is
     * &#x60;GTX&#x60; and the new price will cause it to be executed immediately * One order can
     * only be modfied for less than 10000 times Weight: 1 on 10s order rate
     * limit(X-MBX-ORDER-COUNT-10S); 1 on 1min order rate limit(X-MBX-ORDER-COUNT-1M); 1 on IP rate
     * limit(x-mbx-used-weight-1m)
     *
     * @param modifyOrderRequest (required)
     * @return ModifyOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Modify Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Modify-Order">Modify
     *     Order (TRADE) Documentation</a>
     */
    public CompletableFuture<ModifyOrderResponse> modifyOrder(ModifyOrderRequest modifyOrderRequest)
            throws ApiException {
        modifyOrderValidateBeforeCall(modifyOrderRequest);
        String methodName = "/order.modify".substring(1);
        ApiRequestWrapperDTO<ModifyOrderRequest, ModifyOrderResponse> build =
                new ApiRequestWrapperDTO.Builder<ModifyOrderRequest, ModifyOrderResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(modifyOrderRequest)
                        .responseType(ModifyOrderResponse.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void modifyOrderValidateBeforeCall(ModifyOrderRequest modifyOrderRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<ModifyOrderRequest>> violations =
                    validator.validate(modifyOrderRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * New Order(TRADE) Send in a new order. * Order with type &#x60;STOP&#x60;, parameter
     * &#x60;timeInForce&#x60; can be sent ( default &#x60;GTC&#x60;). * Order with type
     * &#x60;TAKE_PROFIT&#x60;, parameter &#x60;timeInForce&#x60; can be sent ( default
     * &#x60;GTC&#x60;). * Condition orders will be triggered when: * If
     * parameter&#x60;priceProtect&#x60;is sent as true: * when price reaches the
     * &#x60;stopPrice&#x60; ï¼Œthe difference rate between \&quot;MARK_PRICE\&quot; and
     * \&quot;CONTRACT_PRICE\&quot; cannot be larger than the \&quot;triggerProtect\&quot; of the
     * symbol * \&quot;triggerProtect\&quot; of a symbol can be got from &#x60;GET
     * /fapi/v1/exchangeInfo&#x60; * &#x60;STOP&#x60;, &#x60;STOP_MARKET&#x60;: * BUY: latest price
     * (\&quot;MARK_PRICE\&quot; or \&quot;CONTRACT_PRICE\&quot;) &gt;&#x3D; &#x60;stopPrice&#x60; *
     * SELL: latest price (\&quot;MARK_PRICE\&quot; or \&quot;CONTRACT_PRICE\&quot;) &lt;&#x3D;
     * &#x60;stopPrice&#x60; * &#x60;TAKE_PROFIT&#x60;, &#x60;TAKE_PROFIT_MARKET&#x60;: * BUY:
     * latest price (\&quot;MARK_PRICE\&quot; or \&quot;CONTRACT_PRICE\&quot;) &lt;&#x3D;
     * &#x60;stopPrice&#x60; * SELL: latest price (\&quot;MARK_PRICE\&quot; or
     * \&quot;CONTRACT_PRICE\&quot;) &gt;&#x3D; &#x60;stopPrice&#x60; *
     * &#x60;TRAILING_STOP_MARKET&#x60;: * BUY: the lowest price after order placed &#x60;&lt;&#x3D;
     * &#x60;activationPrice&#x60;, and the latest price &gt;&#x60;&#x3D; the lowest price * (1 +
     * &#x60;callbackRate&#x60;) * SELL: the highest price after order placed &gt;&#x3D;
     * &#x60;activationPrice&#x60;, and the latest price &lt;&#x3D; the highest price * (1 -
     * &#x60;callbackRate&#x60;) * For &#x60;TRAILING_STOP_MARKET&#x60;, if you got such error code.
     * &#x60;&#x60;{\&quot;code\&quot;: -2021, \&quot;msg\&quot;: \&quot;Order would immediately
     * trigger.\&quot;}&#x60;&#x60; means that the parameters you send do not meet the following
     * requirements: * BUY: &#x60;activationPrice&#x60; should be smaller than latest price. * SELL:
     * &#x60;activationPrice&#x60; should be larger than latest price. * If &#x60;newOrderRespType
     * &#x60; is sent as &#x60;RESULT&#x60; : * &#x60;MARKET&#x60; order: the final FILLED result of
     * the order will be return directly. * &#x60;LIMIT&#x60; order with special
     * &#x60;timeInForce&#x60;: the final status result of the order(FILLED or EXPIRED) will be
     * returned directly. * &#x60;STOP_MARKET&#x60;, &#x60;TAKE_PROFIT_MARKET&#x60; with
     * &#x60;closePosition&#x60;&#x3D;&#x60;true&#x60;: * Follow the same rules for condition
     * orders. * If triggeredï¼Œ**close all** current long position( if &#x60;SELL&#x60;) or current
     * short position( if &#x60;BUY&#x60;). * Cannot be used with &#x60;quantity&#x60; paremeter *
     * Cannot be used with &#x60;reduceOnly&#x60; parameter * In Hedge Mode,cannot be used with
     * &#x60;BUY&#x60; orders in &#x60;LONG&#x60; position side. and cannot be used with
     * &#x60;SELL&#x60; orders in &#x60;SHORT&#x60; position side Weight: 0
     *
     * @param newOrderRequest (required)
     * @return NewOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> New Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/New-Order">New
     *     Order(TRADE) Documentation</a>
     */
    public CompletableFuture<NewOrderResponse> newOrder(NewOrderRequest newOrderRequest)
            throws ApiException {
        newOrderValidateBeforeCall(newOrderRequest);
        String methodName = "/order.place".substring(1);
        ApiRequestWrapperDTO<NewOrderRequest, NewOrderResponse> build =
                new ApiRequestWrapperDTO.Builder<NewOrderRequest, NewOrderResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(newOrderRequest)
                        .responseType(NewOrderResponse.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void newOrderValidateBeforeCall(NewOrderRequest newOrderRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<NewOrderRequest>> violations =
                    validator.validate(newOrderRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Position Information (USER_DATA) Get current position information. * Please use with user
     * data stream &#x60;ACCOUNT_UPDATE&#x60; to meet your timeliness and accuracy needs. Weight: 5
     *
     * @param positionInformationRequest (required)
     * @return PositionInformationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Position Information </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Position-Information">Position
     *     Information (USER_DATA) Documentation</a>
     */
    public CompletableFuture<PositionInformationResponse> positionInformation(
            PositionInformationRequest positionInformationRequest) throws ApiException {
        positionInformationValidateBeforeCall(positionInformationRequest);
        String methodName = "/account.position".substring(1);
        ApiRequestWrapperDTO<PositionInformationRequest, PositionInformationResponse> build =
                new ApiRequestWrapperDTO.Builder<
                                PositionInformationRequest, PositionInformationResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(positionInformationRequest)
                        .responseType(PositionInformationResponse.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void positionInformationValidateBeforeCall(
            PositionInformationRequest positionInformationRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<PositionInformationRequest>> violations =
                    validator.validate(positionInformationRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Position Information V2 (USER_DATA) Get current position information(only symbol that has
     * position or open orders will be returned). * Please use with user data stream
     * &#x60;ACCOUNT_UPDATE&#x60; to meet your timeliness and accuracy needs. Weight: 5
     *
     * @param positionInformationV2Request (required)
     * @return PositionInformationV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Position Information V2 </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Position-Info-V2">Position
     *     Information V2 (USER_DATA) Documentation</a>
     */
    public CompletableFuture<PositionInformationV2Response> positionInformationV2(
            PositionInformationV2Request positionInformationV2Request) throws ApiException {
        positionInformationV2ValidateBeforeCall(positionInformationV2Request);
        String methodName = "/v2/account.position".substring(1);
        ApiRequestWrapperDTO<PositionInformationV2Request, PositionInformationV2Response> build =
                new ApiRequestWrapperDTO.Builder<
                                PositionInformationV2Request, PositionInformationV2Response>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(positionInformationV2Request)
                        .responseType(PositionInformationV2Response.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void positionInformationV2ValidateBeforeCall(
            PositionInformationV2Request positionInformationV2Request) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<PositionInformationV2Request>> violations =
                    validator.validate(positionInformationV2Request);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Order (USER_DATA) Check an order&#39;s status. * These orders will not be found: *
     * order status is &#x60;CANCELED&#x60; or &#x60;EXPIRED&#x60; **AND** order has NO filled trade
     * **AND** created time + 3 days &lt; current time * order create time + 90 days &lt; current
     * time * Either &#x60;orderId&#x60; or &#x60;origClientOrderId&#x60; must be sent. *
     * &#x60;orderId&#x60; is self-increment for each specific &#x60;symbol&#x60; Weight: 1
     *
     * @param queryOrderRequest (required)
     * @return QueryOrderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/usds-margined-futures/trade/websocket-api/Query-Order">Query
     *     Order (USER_DATA) Documentation</a>
     */
    public CompletableFuture<QueryOrderResponse> queryOrder(QueryOrderRequest queryOrderRequest)
            throws ApiException {
        queryOrderValidateBeforeCall(queryOrderRequest);
        String methodName = "/order.status".substring(1);
        ApiRequestWrapperDTO<QueryOrderRequest, QueryOrderResponse> build =
                new ApiRequestWrapperDTO.Builder<QueryOrderRequest, QueryOrderResponse>()
                        .id(getRequestID())
                        .method(methodName)
                        .params(queryOrderRequest)
                        .responseType(QueryOrderResponse.class)
                        .build();

        try {
            connection.send(build);
        } catch (InterruptedException e) {
            throw new ApiException(e);
        }
        return build.getResponseCallback();
    }

    @SuppressWarnings("rawtypes")
    private void queryOrderValidateBeforeCall(QueryOrderRequest queryOrderRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();

            Set<ConstraintViolation<QueryOrderRequest>> violations =
                    validator.validate(queryOrderRequest);

            if (!violations.isEmpty()) {
                throw new ConstraintViolationException(violations);
            }
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    public String getRequestID() {
        return UUID.randomUUID().toString();
    }
}
