/*
 * Binance Derivatives Trading USDS Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** FuturesAccountBalanceV2ResponseResultInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FuturesAccountBalanceV2ResponseResultInner extends BaseDTO {
    public static final String SERIALIZED_NAME_ACCOUNT_ALIAS = "accountAlias";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_ALIAS)
    @jakarta.annotation.Nullable
    private String accountAlias;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_BALANCE = "balance";

    @SerializedName(SERIALIZED_NAME_BALANCE)
    @jakarta.annotation.Nullable
    private String balance;

    public static final String SERIALIZED_NAME_CROSS_WALLET_BALANCE = "crossWalletBalance";

    @SerializedName(SERIALIZED_NAME_CROSS_WALLET_BALANCE)
    @jakarta.annotation.Nullable
    private String crossWalletBalance;

    public static final String SERIALIZED_NAME_CROSS_UN_PNL = "crossUnPnl";

    @SerializedName(SERIALIZED_NAME_CROSS_UN_PNL)
    @jakarta.annotation.Nullable
    private String crossUnPnl;

    public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";

    @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
    @jakarta.annotation.Nullable
    private String availableBalance;

    public static final String SERIALIZED_NAME_MAX_WITHDRAW_AMOUNT = "maxWithdrawAmount";

    @SerializedName(SERIALIZED_NAME_MAX_WITHDRAW_AMOUNT)
    @jakarta.annotation.Nullable
    private String maxWithdrawAmount;

    public static final String SERIALIZED_NAME_MARGIN_AVAILABLE = "marginAvailable";

    @SerializedName(SERIALIZED_NAME_MARGIN_AVAILABLE)
    @jakarta.annotation.Nullable
    private Boolean marginAvailable;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public FuturesAccountBalanceV2ResponseResultInner() {}

    public FuturesAccountBalanceV2ResponseResultInner accountAlias(
            @jakarta.annotation.Nullable String accountAlias) {
        this.accountAlias = accountAlias;
        return this;
    }

    /**
     * Get accountAlias
     *
     * @return accountAlias
     */
    @jakarta.annotation.Nullable
    public String getAccountAlias() {
        return accountAlias;
    }

    public void setAccountAlias(@jakarta.annotation.Nullable String accountAlias) {
        this.accountAlias = accountAlias;
    }

    public FuturesAccountBalanceV2ResponseResultInner asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public FuturesAccountBalanceV2ResponseResultInner balance(
            @jakarta.annotation.Nullable String balance) {
        this.balance = balance;
        return this;
    }

    /**
     * Get balance
     *
     * @return balance
     */
    @jakarta.annotation.Nullable
    public String getBalance() {
        return balance;
    }

    public void setBalance(@jakarta.annotation.Nullable String balance) {
        this.balance = balance;
    }

    public FuturesAccountBalanceV2ResponseResultInner crossWalletBalance(
            @jakarta.annotation.Nullable String crossWalletBalance) {
        this.crossWalletBalance = crossWalletBalance;
        return this;
    }

    /**
     * Get crossWalletBalance
     *
     * @return crossWalletBalance
     */
    @jakarta.annotation.Nullable
    public String getCrossWalletBalance() {
        return crossWalletBalance;
    }

    public void setCrossWalletBalance(@jakarta.annotation.Nullable String crossWalletBalance) {
        this.crossWalletBalance = crossWalletBalance;
    }

    public FuturesAccountBalanceV2ResponseResultInner crossUnPnl(
            @jakarta.annotation.Nullable String crossUnPnl) {
        this.crossUnPnl = crossUnPnl;
        return this;
    }

    /**
     * Get crossUnPnl
     *
     * @return crossUnPnl
     */
    @jakarta.annotation.Nullable
    public String getCrossUnPnl() {
        return crossUnPnl;
    }

    public void setCrossUnPnl(@jakarta.annotation.Nullable String crossUnPnl) {
        this.crossUnPnl = crossUnPnl;
    }

    public FuturesAccountBalanceV2ResponseResultInner availableBalance(
            @jakarta.annotation.Nullable String availableBalance) {
        this.availableBalance = availableBalance;
        return this;
    }

    /**
     * Get availableBalance
     *
     * @return availableBalance
     */
    @jakarta.annotation.Nullable
    public String getAvailableBalance() {
        return availableBalance;
    }

    public void setAvailableBalance(@jakarta.annotation.Nullable String availableBalance) {
        this.availableBalance = availableBalance;
    }

    public FuturesAccountBalanceV2ResponseResultInner maxWithdrawAmount(
            @jakarta.annotation.Nullable String maxWithdrawAmount) {
        this.maxWithdrawAmount = maxWithdrawAmount;
        return this;
    }

    /**
     * Get maxWithdrawAmount
     *
     * @return maxWithdrawAmount
     */
    @jakarta.annotation.Nullable
    public String getMaxWithdrawAmount() {
        return maxWithdrawAmount;
    }

    public void setMaxWithdrawAmount(@jakarta.annotation.Nullable String maxWithdrawAmount) {
        this.maxWithdrawAmount = maxWithdrawAmount;
    }

    public FuturesAccountBalanceV2ResponseResultInner marginAvailable(
            @jakarta.annotation.Nullable Boolean marginAvailable) {
        this.marginAvailable = marginAvailable;
        return this;
    }

    /**
     * Get marginAvailable
     *
     * @return marginAvailable
     */
    @jakarta.annotation.Nullable
    public Boolean getMarginAvailable() {
        return marginAvailable;
    }

    public void setMarginAvailable(@jakarta.annotation.Nullable Boolean marginAvailable) {
        this.marginAvailable = marginAvailable;
    }

    public FuturesAccountBalanceV2ResponseResultInner updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FuturesAccountBalanceV2ResponseResultInner futuresAccountBalanceV2ResponseResultInner =
                (FuturesAccountBalanceV2ResponseResultInner) o;
        return Objects.equals(
                        this.accountAlias, futuresAccountBalanceV2ResponseResultInner.accountAlias)
                && Objects.equals(this.asset, futuresAccountBalanceV2ResponseResultInner.asset)
                && Objects.equals(this.balance, futuresAccountBalanceV2ResponseResultInner.balance)
                && Objects.equals(
                        this.crossWalletBalance,
                        futuresAccountBalanceV2ResponseResultInner.crossWalletBalance)
                && Objects.equals(
                        this.crossUnPnl, futuresAccountBalanceV2ResponseResultInner.crossUnPnl)
                && Objects.equals(
                        this.availableBalance,
                        futuresAccountBalanceV2ResponseResultInner.availableBalance)
                && Objects.equals(
                        this.maxWithdrawAmount,
                        futuresAccountBalanceV2ResponseResultInner.maxWithdrawAmount)
                && Objects.equals(
                        this.marginAvailable,
                        futuresAccountBalanceV2ResponseResultInner.marginAvailable)
                && Objects.equals(
                        this.updateTime, futuresAccountBalanceV2ResponseResultInner.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                accountAlias,
                asset,
                balance,
                crossWalletBalance,
                crossUnPnl,
                availableBalance,
                maxWithdrawAmount,
                marginAvailable,
                updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FuturesAccountBalanceV2ResponseResultInner {\n");
        sb.append("		accountAlias: ").append(toIndentedString(accountAlias)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		balance: ").append(toIndentedString(balance)).append("\n");
        sb.append("		crossWalletBalance: ")
                .append(toIndentedString(crossWalletBalance))
                .append("\n");
        sb.append("		crossUnPnl: ").append(toIndentedString(crossUnPnl)).append("\n");
        sb.append("		availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
        sb.append("		maxWithdrawAmount: ").append(toIndentedString(maxWithdrawAmount)).append("\n");
        sb.append("		marginAvailable: ").append(toIndentedString(marginAvailable)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String accountAliasValue = getAccountAlias();
        if (accountAliasValue != null) {
            String accountAliasValueAsString = accountAliasValue.toString();
            valMap.put("accountAlias", accountAliasValueAsString);
        }
        String assetValue = getAsset();
        if (assetValue != null) {
            String assetValueAsString = assetValue.toString();
            valMap.put("asset", assetValueAsString);
        }
        String balanceValue = getBalance();
        if (balanceValue != null) {
            String balanceValueAsString = balanceValue.toString();
            valMap.put("balance", balanceValueAsString);
        }
        String crossWalletBalanceValue = getCrossWalletBalance();
        if (crossWalletBalanceValue != null) {
            String crossWalletBalanceValueAsString = crossWalletBalanceValue.toString();
            valMap.put("crossWalletBalance", crossWalletBalanceValueAsString);
        }
        String crossUnPnlValue = getCrossUnPnl();
        if (crossUnPnlValue != null) {
            String crossUnPnlValueAsString = crossUnPnlValue.toString();
            valMap.put("crossUnPnl", crossUnPnlValueAsString);
        }
        String availableBalanceValue = getAvailableBalance();
        if (availableBalanceValue != null) {
            String availableBalanceValueAsString = availableBalanceValue.toString();
            valMap.put("availableBalance", availableBalanceValueAsString);
        }
        String maxWithdrawAmountValue = getMaxWithdrawAmount();
        if (maxWithdrawAmountValue != null) {
            String maxWithdrawAmountValueAsString = maxWithdrawAmountValue.toString();
            valMap.put("maxWithdrawAmount", maxWithdrawAmountValueAsString);
        }
        Boolean marginAvailableValue = getMarginAvailable();
        if (marginAvailableValue != null) {
            String marginAvailableValueAsString = marginAvailableValue.toString();
            valMap.put("marginAvailable", marginAvailableValueAsString);
        }
        Long updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            String updateTimeValueAsString = updateTimeValue.toString();
            valMap.put("updateTime", updateTimeValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object accountAliasValue = getAccountAlias();
        if (accountAliasValue != null) {
            valMap.put("accountAlias", accountAliasValue);
        }
        Object assetValue = getAsset();
        if (assetValue != null) {
            valMap.put("asset", assetValue);
        }
        Object balanceValue = getBalance();
        if (balanceValue != null) {
            valMap.put("balance", balanceValue);
        }
        Object crossWalletBalanceValue = getCrossWalletBalance();
        if (crossWalletBalanceValue != null) {
            valMap.put("crossWalletBalance", crossWalletBalanceValue);
        }
        Object crossUnPnlValue = getCrossUnPnl();
        if (crossUnPnlValue != null) {
            valMap.put("crossUnPnl", crossUnPnlValue);
        }
        Object availableBalanceValue = getAvailableBalance();
        if (availableBalanceValue != null) {
            valMap.put("availableBalance", availableBalanceValue);
        }
        Object maxWithdrawAmountValue = getMaxWithdrawAmount();
        if (maxWithdrawAmountValue != null) {
            valMap.put("maxWithdrawAmount", maxWithdrawAmountValue);
        }
        Object marginAvailableValue = getMarginAvailable();
        if (marginAvailableValue != null) {
            valMap.put("marginAvailable", marginAvailableValue);
        }
        Object updateTimeValue = getUpdateTime();
        if (updateTimeValue != null) {
            valMap.put("updateTime", updateTimeValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("accountAlias");
        openapiFields.add("asset");
        openapiFields.add("balance");
        openapiFields.add("crossWalletBalance");
        openapiFields.add("crossUnPnl");
        openapiFields.add("availableBalance");
        openapiFields.add("maxWithdrawAmount");
        openapiFields.add("marginAvailable");
        openapiFields.add("updateTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FuturesAccountBalanceV2ResponseResultInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FuturesAccountBalanceV2ResponseResultInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " FuturesAccountBalanceV2ResponseResultInner is not found in"
                                    + " the empty JSON string",
                                FuturesAccountBalanceV2ResponseResultInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FuturesAccountBalanceV2ResponseResultInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `FuturesAccountBalanceV2ResponseResultInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("accountAlias") != null && !jsonObj.get("accountAlias").isJsonNull())
                && !jsonObj.get("accountAlias").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `accountAlias` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("accountAlias").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("balance") != null && !jsonObj.get("balance").isJsonNull())
                && !jsonObj.get("balance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `balance` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("balance").toString()));
        }
        if ((jsonObj.get("crossWalletBalance") != null
                        && !jsonObj.get("crossWalletBalance").isJsonNull())
                && !jsonObj.get("crossWalletBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossWalletBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("crossWalletBalance").toString()));
        }
        if ((jsonObj.get("crossUnPnl") != null && !jsonObj.get("crossUnPnl").isJsonNull())
                && !jsonObj.get("crossUnPnl").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossUnPnl` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("crossUnPnl").toString()));
        }
        if ((jsonObj.get("availableBalance") != null
                        && !jsonObj.get("availableBalance").isJsonNull())
                && !jsonObj.get("availableBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `availableBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("availableBalance").toString()));
        }
        if ((jsonObj.get("maxWithdrawAmount") != null
                        && !jsonObj.get("maxWithdrawAmount").isJsonNull())
                && !jsonObj.get("maxWithdrawAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxWithdrawAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("maxWithdrawAmount").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FuturesAccountBalanceV2ResponseResultInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'FuturesAccountBalanceV2ResponseResultInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FuturesAccountBalanceV2ResponseResultInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(FuturesAccountBalanceV2ResponseResultInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FuturesAccountBalanceV2ResponseResultInner>() {
                        @Override
                        public void write(
                                JsonWriter out, FuturesAccountBalanceV2ResponseResultInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FuturesAccountBalanceV2ResponseResultInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FuturesAccountBalanceV2ResponseResultInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FuturesAccountBalanceV2ResponseResultInner
     * @throws IOException if the JSON string is invalid with respect to
     *     FuturesAccountBalanceV2ResponseResultInner
     */
    public static FuturesAccountBalanceV2ResponseResultInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, FuturesAccountBalanceV2ResponseResultInner.class);
    }

    /**
     * Convert an instance of FuturesAccountBalanceV2ResponseResultInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
