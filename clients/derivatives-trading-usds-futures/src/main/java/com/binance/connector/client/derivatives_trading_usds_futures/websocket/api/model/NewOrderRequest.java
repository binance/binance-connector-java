/*
 * Binance Derivatives Trading USDS Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model;

import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** NewOrderRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class NewOrderRequest extends BaseDTO {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private String id;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nonnull
    private Side side;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private PositionSide positionSide;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nonnull
    private String type;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private TimeInForce timeInForce;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private Double quantity;

    public static final String SERIALIZED_NAME_REDUCE_ONLY = "reduceOnly";

    @SerializedName(SERIALIZED_NAME_REDUCE_ONLY)
    @jakarta.annotation.Nullable
    private String reduceOnly;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private Double price;

    public static final String SERIALIZED_NAME_NEW_CLIENT_ORDER_ID = "newClientOrderId";

    @SerializedName(SERIALIZED_NAME_NEW_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String newClientOrderId;

    public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";

    @SerializedName(SERIALIZED_NAME_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double stopPrice;

    public static final String SERIALIZED_NAME_CLOSE_POSITION = "closePosition";

    @SerializedName(SERIALIZED_NAME_CLOSE_POSITION)
    @jakarta.annotation.Nullable
    private String closePosition;

    public static final String SERIALIZED_NAME_ACTIVATION_PRICE = "activationPrice";

    @SerializedName(SERIALIZED_NAME_ACTIVATION_PRICE)
    @jakarta.annotation.Nullable
    private Double activationPrice;

    public static final String SERIALIZED_NAME_CALLBACK_RATE = "callbackRate";

    @SerializedName(SERIALIZED_NAME_CALLBACK_RATE)
    @jakarta.annotation.Nullable
    private Double callbackRate;

    public static final String SERIALIZED_NAME_WORKING_TYPE = "workingType";

    @SerializedName(SERIALIZED_NAME_WORKING_TYPE)
    @jakarta.annotation.Nullable
    private WorkingType workingType;

    public static final String SERIALIZED_NAME_PRICE_PROTECT = "priceProtect";

    @SerializedName(SERIALIZED_NAME_PRICE_PROTECT)
    @jakarta.annotation.Nullable
    private String priceProtect;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespType newOrderRespType;

    public static final String SERIALIZED_NAME_PRICE_MATCH = "priceMatch";

    @SerializedName(SERIALIZED_NAME_PRICE_MATCH)
    @jakarta.annotation.Nullable
    private PriceMatch priceMatch;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private SelfTradePreventionMode selfTradePreventionMode;

    public static final String SERIALIZED_NAME_GOOD_TILL_DATE = "goodTillDate";

    @SerializedName(SERIALIZED_NAME_GOOD_TILL_DATE)
    @jakarta.annotation.Nullable
    private Long goodTillDate;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public NewOrderRequest() {}

    public NewOrderRequest id(@jakarta.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable String id) {
        this.id = id;
    }

    public NewOrderRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public NewOrderRequest side(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Side getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
    }

    public NewOrderRequest positionSide(@jakarta.annotation.Nullable PositionSide positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    @Valid
    public PositionSide getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable PositionSide positionSide) {
        this.positionSide = positionSide;
    }

    public NewOrderRequest type(@jakarta.annotation.Nonnull String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nonnull String type) {
        this.type = type;
    }

    public NewOrderRequest timeInForce(@jakarta.annotation.Nullable TimeInForce timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public TimeInForce getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable TimeInForce timeInForce) {
        this.timeInForce = timeInForce;
    }

    public NewOrderRequest quantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
    }

    public NewOrderRequest reduceOnly(@jakarta.annotation.Nullable String reduceOnly) {
        this.reduceOnly = reduceOnly;
        return this;
    }

    /**
     * Get reduceOnly
     *
     * @return reduceOnly
     */
    @jakarta.annotation.Nullable
    public String getReduceOnly() {
        return reduceOnly;
    }

    public void setReduceOnly(@jakarta.annotation.Nullable String reduceOnly) {
        this.reduceOnly = reduceOnly;
    }

    public NewOrderRequest price(@jakarta.annotation.Nullable Double price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable Double price) {
        this.price = price;
    }

    public NewOrderRequest newClientOrderId(@jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
        return this;
    }

    /**
     * Get newClientOrderId
     *
     * @return newClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getNewClientOrderId() {
        return newClientOrderId;
    }

    public void setNewClientOrderId(@jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
    }

    public NewOrderRequest stopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
        return this;
    }

    /**
     * Get stopPrice
     *
     * @return stopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
    }

    public NewOrderRequest closePosition(@jakarta.annotation.Nullable String closePosition) {
        this.closePosition = closePosition;
        return this;
    }

    /**
     * Get closePosition
     *
     * @return closePosition
     */
    @jakarta.annotation.Nullable
    public String getClosePosition() {
        return closePosition;
    }

    public void setClosePosition(@jakarta.annotation.Nullable String closePosition) {
        this.closePosition = closePosition;
    }

    public NewOrderRequest activationPrice(@jakarta.annotation.Nullable Double activationPrice) {
        this.activationPrice = activationPrice;
        return this;
    }

    /**
     * Get activationPrice
     *
     * @return activationPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getActivationPrice() {
        return activationPrice;
    }

    public void setActivationPrice(@jakarta.annotation.Nullable Double activationPrice) {
        this.activationPrice = activationPrice;
    }

    public NewOrderRequest callbackRate(@jakarta.annotation.Nullable Double callbackRate) {
        this.callbackRate = callbackRate;
        return this;
    }

    /**
     * Get callbackRate
     *
     * @return callbackRate
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getCallbackRate() {
        return callbackRate;
    }

    public void setCallbackRate(@jakarta.annotation.Nullable Double callbackRate) {
        this.callbackRate = callbackRate;
    }

    public NewOrderRequest workingType(@jakarta.annotation.Nullable WorkingType workingType) {
        this.workingType = workingType;
        return this;
    }

    /**
     * Get workingType
     *
     * @return workingType
     */
    @jakarta.annotation.Nullable
    @Valid
    public WorkingType getWorkingType() {
        return workingType;
    }

    public void setWorkingType(@jakarta.annotation.Nullable WorkingType workingType) {
        this.workingType = workingType;
    }

    public NewOrderRequest priceProtect(@jakarta.annotation.Nullable String priceProtect) {
        this.priceProtect = priceProtect;
        return this;
    }

    /**
     * Get priceProtect
     *
     * @return priceProtect
     */
    @jakarta.annotation.Nullable
    public String getPriceProtect() {
        return priceProtect;
    }

    public void setPriceProtect(@jakarta.annotation.Nullable String priceProtect) {
        this.priceProtect = priceProtect;
    }

    public NewOrderRequest newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    @Valid
    public NewOrderRespType getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public NewOrderRequest priceMatch(@jakarta.annotation.Nullable PriceMatch priceMatch) {
        this.priceMatch = priceMatch;
        return this;
    }

    /**
     * Get priceMatch
     *
     * @return priceMatch
     */
    @jakarta.annotation.Nullable
    @Valid
    public PriceMatch getPriceMatch() {
        return priceMatch;
    }

    public void setPriceMatch(@jakarta.annotation.Nullable PriceMatch priceMatch) {
        this.priceMatch = priceMatch;
    }

    public NewOrderRequest selfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    @Valid
    public SelfTradePreventionMode getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public NewOrderRequest goodTillDate(@jakarta.annotation.Nullable Long goodTillDate) {
        this.goodTillDate = goodTillDate;
        return this;
    }

    /**
     * Get goodTillDate
     *
     * @return goodTillDate
     */
    @jakarta.annotation.Nullable
    public Long getGoodTillDate() {
        return goodTillDate;
    }

    public void setGoodTillDate(@jakarta.annotation.Nullable Long goodTillDate) {
        this.goodTillDate = goodTillDate;
    }

    public NewOrderRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NewOrderRequest newOrderRequest = (NewOrderRequest) o;
        return Objects.equals(this.id, newOrderRequest.id)
                && Objects.equals(this.symbol, newOrderRequest.symbol)
                && Objects.equals(this.side, newOrderRequest.side)
                && Objects.equals(this.positionSide, newOrderRequest.positionSide)
                && Objects.equals(this.type, newOrderRequest.type)
                && Objects.equals(this.timeInForce, newOrderRequest.timeInForce)
                && Objects.equals(this.quantity, newOrderRequest.quantity)
                && Objects.equals(this.reduceOnly, newOrderRequest.reduceOnly)
                && Objects.equals(this.price, newOrderRequest.price)
                && Objects.equals(this.newClientOrderId, newOrderRequest.newClientOrderId)
                && Objects.equals(this.stopPrice, newOrderRequest.stopPrice)
                && Objects.equals(this.closePosition, newOrderRequest.closePosition)
                && Objects.equals(this.activationPrice, newOrderRequest.activationPrice)
                && Objects.equals(this.callbackRate, newOrderRequest.callbackRate)
                && Objects.equals(this.workingType, newOrderRequest.workingType)
                && Objects.equals(this.priceProtect, newOrderRequest.priceProtect)
                && Objects.equals(this.newOrderRespType, newOrderRequest.newOrderRespType)
                && Objects.equals(this.priceMatch, newOrderRequest.priceMatch)
                && Objects.equals(
                        this.selfTradePreventionMode, newOrderRequest.selfTradePreventionMode)
                && Objects.equals(this.goodTillDate, newOrderRequest.goodTillDate)
                && Objects.equals(this.recvWindow, newOrderRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                symbol,
                side,
                positionSide,
                type,
                timeInForce,
                quantity,
                reduceOnly,
                price,
                newClientOrderId,
                stopPrice,
                closePosition,
                activationPrice,
                callbackRate,
                workingType,
                priceProtect,
                newOrderRespType,
                priceMatch,
                selfTradePreventionMode,
                goodTillDate,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NewOrderRequest {\n");
        sb.append("		id: ").append(toIndentedString(id)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		reduceOnly: ").append(toIndentedString(reduceOnly)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		newClientOrderId: ").append(toIndentedString(newClientOrderId)).append("\n");
        sb.append("		stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
        sb.append("		closePosition: ").append(toIndentedString(closePosition)).append("\n");
        sb.append("		activationPrice: ").append(toIndentedString(activationPrice)).append("\n");
        sb.append("		callbackRate: ").append(toIndentedString(callbackRate)).append("\n");
        sb.append("		workingType: ").append(toIndentedString(workingType)).append("\n");
        sb.append("		priceProtect: ").append(toIndentedString(priceProtect)).append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		priceMatch: ").append(toIndentedString(priceMatch)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		goodTillDate: ").append(toIndentedString(goodTillDate)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String idValue = getId();
        if (idValue != null) {
            String idValueAsString = idValue.toString();
            valMap.put("id", idValueAsString);
        }
        String symbolValue = getSymbol();
        if (symbolValue != null) {
            String symbolValueAsString = symbolValue.toString();
            valMap.put("symbol", symbolValueAsString);
        }
        Side sideValue = getSide();
        if (sideValue != null) {
            String sideValueAsString = sideValue.toString();
            valMap.put("side", sideValueAsString);
        }
        PositionSide positionSideValue = getPositionSide();
        if (positionSideValue != null) {
            String positionSideValueAsString = positionSideValue.toString();
            valMap.put("positionSide", positionSideValueAsString);
        }
        String typeValue = getType();
        if (typeValue != null) {
            String typeValueAsString = typeValue.toString();
            valMap.put("type", typeValueAsString);
        }
        TimeInForce timeInForceValue = getTimeInForce();
        if (timeInForceValue != null) {
            String timeInForceValueAsString = timeInForceValue.toString();
            valMap.put("timeInForce", timeInForceValueAsString);
        }
        Double quantityValue = getQuantity();
        if (quantityValue != null) {
            String quantityValueAsString = DecimalFormatter.getFormatter().format(quantityValue);
            valMap.put("quantity", quantityValueAsString);
        }
        String reduceOnlyValue = getReduceOnly();
        if (reduceOnlyValue != null) {
            String reduceOnlyValueAsString = reduceOnlyValue.toString();
            valMap.put("reduceOnly", reduceOnlyValueAsString);
        }
        Double priceValue = getPrice();
        if (priceValue != null) {
            String priceValueAsString = DecimalFormatter.getFormatter().format(priceValue);
            valMap.put("price", priceValueAsString);
        }
        String newClientOrderIdValue = getNewClientOrderId();
        if (newClientOrderIdValue != null) {
            String newClientOrderIdValueAsString = newClientOrderIdValue.toString();
            valMap.put("newClientOrderId", newClientOrderIdValueAsString);
        }
        Double stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            String stopPriceValueAsString = DecimalFormatter.getFormatter().format(stopPriceValue);
            valMap.put("stopPrice", stopPriceValueAsString);
        }
        String closePositionValue = getClosePosition();
        if (closePositionValue != null) {
            String closePositionValueAsString = closePositionValue.toString();
            valMap.put("closePosition", closePositionValueAsString);
        }
        Double activationPriceValue = getActivationPrice();
        if (activationPriceValue != null) {
            String activationPriceValueAsString =
                    DecimalFormatter.getFormatter().format(activationPriceValue);
            valMap.put("activationPrice", activationPriceValueAsString);
        }
        Double callbackRateValue = getCallbackRate();
        if (callbackRateValue != null) {
            String callbackRateValueAsString =
                    DecimalFormatter.getFormatter().format(callbackRateValue);
            valMap.put("callbackRate", callbackRateValueAsString);
        }
        WorkingType workingTypeValue = getWorkingType();
        if (workingTypeValue != null) {
            String workingTypeValueAsString = workingTypeValue.toString();
            valMap.put("workingType", workingTypeValueAsString);
        }
        String priceProtectValue = getPriceProtect();
        if (priceProtectValue != null) {
            String priceProtectValueAsString = priceProtectValue.toString();
            valMap.put("priceProtect", priceProtectValueAsString);
        }
        NewOrderRespType newOrderRespTypeValue = getNewOrderRespType();
        if (newOrderRespTypeValue != null) {
            String newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
            valMap.put("newOrderRespType", newOrderRespTypeValueAsString);
        }
        PriceMatch priceMatchValue = getPriceMatch();
        if (priceMatchValue != null) {
            String priceMatchValueAsString = priceMatchValue.toString();
            valMap.put("priceMatch", priceMatchValueAsString);
        }
        SelfTradePreventionMode selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            String selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValueAsString);
        }
        Long goodTillDateValue = getGoodTillDate();
        if (goodTillDateValue != null) {
            String goodTillDateValueAsString = goodTillDateValue.toString();
            valMap.put("goodTillDate", goodTillDateValueAsString);
        }
        Long recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            String recvWindowValueAsString = recvWindowValue.toString();
            valMap.put("recvWindow", recvWindowValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object idValue = getId();
        if (idValue != null) {
            valMap.put("id", idValue);
        }
        Object symbolValue = getSymbol();
        if (symbolValue != null) {
            valMap.put("symbol", symbolValue);
        }
        Object sideValue = getSide();
        if (sideValue != null) {
            valMap.put("side", sideValue);
        }
        Object positionSideValue = getPositionSide();
        if (positionSideValue != null) {
            valMap.put("positionSide", positionSideValue);
        }
        Object typeValue = getType();
        if (typeValue != null) {
            valMap.put("type", typeValue);
        }
        Object timeInForceValue = getTimeInForce();
        if (timeInForceValue != null) {
            valMap.put("timeInForce", timeInForceValue);
        }
        Object quantityValue = getQuantity();
        if (quantityValue != null) {
            valMap.put("quantity", quantityValue);
        }
        Object reduceOnlyValue = getReduceOnly();
        if (reduceOnlyValue != null) {
            valMap.put("reduceOnly", reduceOnlyValue);
        }
        Object priceValue = getPrice();
        if (priceValue != null) {
            valMap.put("price", priceValue);
        }
        Object newClientOrderIdValue = getNewClientOrderId();
        if (newClientOrderIdValue != null) {
            valMap.put("newClientOrderId", newClientOrderIdValue);
        }
        Object stopPriceValue = getStopPrice();
        if (stopPriceValue != null) {
            valMap.put("stopPrice", stopPriceValue);
        }
        Object closePositionValue = getClosePosition();
        if (closePositionValue != null) {
            valMap.put("closePosition", closePositionValue);
        }
        Object activationPriceValue = getActivationPrice();
        if (activationPriceValue != null) {
            valMap.put("activationPrice", activationPriceValue);
        }
        Object callbackRateValue = getCallbackRate();
        if (callbackRateValue != null) {
            valMap.put("callbackRate", callbackRateValue);
        }
        Object workingTypeValue = getWorkingType();
        if (workingTypeValue != null) {
            valMap.put("workingType", workingTypeValue);
        }
        Object priceProtectValue = getPriceProtect();
        if (priceProtectValue != null) {
            valMap.put("priceProtect", priceProtectValue);
        }
        Object newOrderRespTypeValue = getNewOrderRespType();
        if (newOrderRespTypeValue != null) {
            valMap.put("newOrderRespType", newOrderRespTypeValue);
        }
        Object priceMatchValue = getPriceMatch();
        if (priceMatchValue != null) {
            valMap.put("priceMatch", priceMatchValue);
        }
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        if (selfTradePreventionModeValue != null) {
            valMap.put("selfTradePreventionMode", selfTradePreventionModeValue);
        }
        Object goodTillDateValue = getGoodTillDate();
        if (goodTillDateValue != null) {
            valMap.put("goodTillDate", goodTillDateValue);
        }
        Object recvWindowValue = getRecvWindow();
        if (recvWindowValue != null) {
            valMap.put("recvWindow", recvWindowValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("symbol");
        openapiFields.add("side");
        openapiFields.add("positionSide");
        openapiFields.add("type");
        openapiFields.add("timeInForce");
        openapiFields.add("quantity");
        openapiFields.add("reduceOnly");
        openapiFields.add("price");
        openapiFields.add("newClientOrderId");
        openapiFields.add("stopPrice");
        openapiFields.add("closePosition");
        openapiFields.add("activationPrice");
        openapiFields.add("callbackRate");
        openapiFields.add("workingType");
        openapiFields.add("priceProtect");
        openapiFields.add("newOrderRespType");
        openapiFields.add("priceMatch");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("goodTillDate");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("side");
        openapiRequiredFields.add("type");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NewOrderRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!NewOrderRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in NewOrderRequest is not found in the"
                                        + " empty JSON string",
                                NewOrderRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!NewOrderRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `NewOrderRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : NewOrderRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
                && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        // validate the required field `side`
        Side.validateJsonElement(jsonObj.get("side"));
        // validate the optional field `positionSide`
        if (jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull()) {
            PositionSide.validateJsonElement(jsonObj.get("positionSide"));
        }
        if (!jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        // validate the optional field `timeInForce`
        if (jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) {
            TimeInForce.validateJsonElement(jsonObj.get("timeInForce"));
        }
        if ((jsonObj.get("reduceOnly") != null && !jsonObj.get("reduceOnly").isJsonNull())
                && !jsonObj.get("reduceOnly").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `reduceOnly` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("reduceOnly").toString()));
        }
        if ((jsonObj.get("newClientOrderId") != null
                        && !jsonObj.get("newClientOrderId").isJsonNull())
                && !jsonObj.get("newClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("newClientOrderId").toString()));
        }
        if ((jsonObj.get("closePosition") != null && !jsonObj.get("closePosition").isJsonNull())
                && !jsonObj.get("closePosition").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `closePosition` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("closePosition").toString()));
        }
        // validate the optional field `workingType`
        if (jsonObj.get("workingType") != null && !jsonObj.get("workingType").isJsonNull()) {
            WorkingType.validateJsonElement(jsonObj.get("workingType"));
        }
        if ((jsonObj.get("priceProtect") != null && !jsonObj.get("priceProtect").isJsonNull())
                && !jsonObj.get("priceProtect").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceProtect` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("priceProtect").toString()));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespType.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        // validate the optional field `priceMatch`
        if (jsonObj.get("priceMatch") != null && !jsonObj.get("priceMatch").isJsonNull()) {
            PriceMatch.validateJsonElement(jsonObj.get("priceMatch"));
        }
        // validate the optional field `selfTradePreventionMode`
        if (jsonObj.get("selfTradePreventionMode") != null
                && !jsonObj.get("selfTradePreventionMode").isJsonNull()) {
            SelfTradePreventionMode.validateJsonElement(jsonObj.get("selfTradePreventionMode"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NewOrderRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NewOrderRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NewOrderRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(NewOrderRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<NewOrderRequest>() {
                        @Override
                        public void write(JsonWriter out, NewOrderRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public NewOrderRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of NewOrderRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NewOrderRequest
     * @throws IOException if the JSON string is invalid with respect to NewOrderRequest
     */
    public static NewOrderRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NewOrderRequest.class);
    }

    /**
     * Convert an instance of NewOrderRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
