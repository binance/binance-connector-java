/*
 * Binance Derivatives Trading USDS Futures WebSocket API
 * OpenAPI Specification for the Binance Derivatives Trading USDS Futures WebSocket API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_usds_futures.websocket.api.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** SymbolOrderBookTickerResponse2 */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SymbolOrderBookTickerResponse2 extends BaseDTO {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private String id;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private Long status;

    public static final String SERIALIZED_NAME_RESULT = "result";

    @SerializedName(SERIALIZED_NAME_RESULT)
    @jakarta.annotation.Nullable
    private List<@Valid SymbolOrderBookTickerResponse1Result> result;

    public static final String SERIALIZED_NAME_RATE_LIMITS = "rateLimits";

    @SerializedName(SERIALIZED_NAME_RATE_LIMITS)
    @jakarta.annotation.Nullable
    private List<@Valid SymbolOrderBookTickerResponse1RateLimitsInner> rateLimits;

    public SymbolOrderBookTickerResponse2() {}

    public SymbolOrderBookTickerResponse2 id(@jakarta.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable String id) {
        this.id = id;
    }

    public SymbolOrderBookTickerResponse2 status(@jakarta.annotation.Nullable Long status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public Long getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable Long status) {
        this.status = status;
    }

    public SymbolOrderBookTickerResponse2 result(
            @jakarta.annotation.Nullable List<@Valid SymbolOrderBookTickerResponse1Result> result) {
        this.result = result;
        return this;
    }

    public SymbolOrderBookTickerResponse2 addResultItem(
            SymbolOrderBookTickerResponse1Result resultItem) {
        if (this.result == null) {
            this.result = new ArrayList<>();
        }
        this.result.add(resultItem);
        return this;
    }

    /**
     * Get result
     *
     * @return result
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid SymbolOrderBookTickerResponse1Result> getResult() {
        return result;
    }

    public void setResult(
            @jakarta.annotation.Nullable List<@Valid SymbolOrderBookTickerResponse1Result> result) {
        this.result = result;
    }

    public SymbolOrderBookTickerResponse2 rateLimits(
            @jakarta.annotation.Nullable
                    List<@Valid SymbolOrderBookTickerResponse1RateLimitsInner> rateLimits) {
        this.rateLimits = rateLimits;
        return this;
    }

    public SymbolOrderBookTickerResponse2 addRateLimitsItem(
            SymbolOrderBookTickerResponse1RateLimitsInner rateLimitsItem) {
        if (this.rateLimits == null) {
            this.rateLimits = new ArrayList<>();
        }
        this.rateLimits.add(rateLimitsItem);
        return this;
    }

    /**
     * Get rateLimits
     *
     * @return rateLimits
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid SymbolOrderBookTickerResponse1RateLimitsInner> getRateLimits() {
        return rateLimits;
    }

    public void setRateLimits(
            @jakarta.annotation.Nullable
                    List<@Valid SymbolOrderBookTickerResponse1RateLimitsInner> rateLimits) {
        this.rateLimits = rateLimits;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SymbolOrderBookTickerResponse2 symbolOrderBookTickerResponse2 =
                (SymbolOrderBookTickerResponse2) o;
        return Objects.equals(this.id, symbolOrderBookTickerResponse2.id)
                && Objects.equals(this.status, symbolOrderBookTickerResponse2.status)
                && Objects.equals(this.result, symbolOrderBookTickerResponse2.result)
                && Objects.equals(this.rateLimits, symbolOrderBookTickerResponse2.rateLimits);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, status, result, rateLimits);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SymbolOrderBookTickerResponse2 {\n");
        sb.append("		id: ").append(toIndentedString(id)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		result: ").append(toIndentedString(result)).append("\n");
        sb.append("		rateLimits: ").append(toIndentedString(rateLimits)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String idValue = getId();
        if (idValue != null) {
            String idValueAsString = idValue.toString();
            valMap.put("id", idValueAsString);
        }
        Long statusValue = getStatus();
        if (statusValue != null) {
            String statusValueAsString = statusValue.toString();
            valMap.put("status", statusValueAsString);
        }
        List<@Valid SymbolOrderBookTickerResponse1Result> resultValue = getResult();
        if (resultValue != null) {
            String resultValueAsString = JSON.getGson().toJson(resultValue);
            valMap.put("result", resultValueAsString);
        }
        List<@Valid SymbolOrderBookTickerResponse1RateLimitsInner> rateLimitsValue =
                getRateLimits();
        if (rateLimitsValue != null) {
            String rateLimitsValueAsString = JSON.getGson().toJson(rateLimitsValue);
            valMap.put("rateLimits", rateLimitsValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object idValue = getId();
        if (idValue != null) {
            valMap.put("id", idValue);
        }
        Object statusValue = getStatus();
        if (statusValue != null) {
            valMap.put("status", statusValue);
        }
        Object resultValue = getResult();
        if (resultValue != null) {
            valMap.put("result", resultValue);
        }
        Object rateLimitsValue = getRateLimits();
        if (rateLimitsValue != null) {
            valMap.put("rateLimits", rateLimitsValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("status");
        openapiFields.add("result");
        openapiFields.add("rateLimits");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     SymbolOrderBookTickerResponse2
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SymbolOrderBookTickerResponse2.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SymbolOrderBookTickerResponse2 is not"
                                        + " found in the empty JSON string",
                                SymbolOrderBookTickerResponse2.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SymbolOrderBookTickerResponse2.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SymbolOrderBookTickerResponse2` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
                && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
            JsonArray jsonArrayresult = jsonObj.getAsJsonArray("result");
            if (jsonArrayresult != null) {
                // ensure the json data is an array
                if (!jsonObj.get("result").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `result` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("result").toString()));
                }

                // validate the optional field `result` (array)
                for (int i = 0; i < jsonArrayresult.size(); i++) {
                    SymbolOrderBookTickerResponse1Result.validateJsonElement(
                            jsonArrayresult.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("rateLimits") != null && !jsonObj.get("rateLimits").isJsonNull()) {
            JsonArray jsonArrayrateLimits = jsonObj.getAsJsonArray("rateLimits");
            if (jsonArrayrateLimits != null) {
                // ensure the json data is an array
                if (!jsonObj.get("rateLimits").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `rateLimits` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("rateLimits").toString()));
                }

                // validate the optional field `rateLimits` (array)
                for (int i = 0; i < jsonArrayrateLimits.size(); i++) {
                    SymbolOrderBookTickerResponse1RateLimitsInner.validateJsonElement(
                            jsonArrayrateLimits.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SymbolOrderBookTickerResponse2.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SymbolOrderBookTickerResponse2' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SymbolOrderBookTickerResponse2> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(SymbolOrderBookTickerResponse2.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SymbolOrderBookTickerResponse2>() {
                        @Override
                        public void write(JsonWriter out, SymbolOrderBookTickerResponse2 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SymbolOrderBookTickerResponse2 read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SymbolOrderBookTickerResponse2 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SymbolOrderBookTickerResponse2
     * @throws IOException if the JSON string is invalid with respect to
     *     SymbolOrderBookTickerResponse2
     */
    public static SymbolOrderBookTickerResponse2 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SymbolOrderBookTickerResponse2.class);
    }

    /**
     * Convert an instance of SymbolOrderBookTickerResponse2 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
