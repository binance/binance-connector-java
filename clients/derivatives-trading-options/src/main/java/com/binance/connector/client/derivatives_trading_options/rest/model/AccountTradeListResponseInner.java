/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AccountTradeListResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountTradeListResponseInner {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private Long id;

    public static final String SERIALIZED_NAME_TRADE_ID = "tradeId";

    @SerializedName(SERIALIZED_NAME_TRADE_ID)
    @jakarta.annotation.Nullable
    private Long tradeId;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private String quantity;

    public static final String SERIALIZED_NAME_FEE = "fee";

    @SerializedName(SERIALIZED_NAME_FEE)
    @jakarta.annotation.Nullable
    private String fee;

    public static final String SERIALIZED_NAME_REALIZED_PROFIT = "realizedProfit";

    @SerializedName(SERIALIZED_NAME_REALIZED_PROFIT)
    @jakarta.annotation.Nullable
    private String realizedProfit;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_VOLATILITY = "volatility";

    @SerializedName(SERIALIZED_NAME_VOLATILITY)
    @jakarta.annotation.Nullable
    private String volatility;

    public static final String SERIALIZED_NAME_LIQUIDITY = "liquidity";

    @SerializedName(SERIALIZED_NAME_LIQUIDITY)
    @jakarta.annotation.Nullable
    private String liquidity;

    public static final String SERIALIZED_NAME_QUOTE_ASSET = "quoteAsset";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET)
    @jakarta.annotation.Nullable
    private String quoteAsset;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_PRICE_SCALE = "priceScale";

    @SerializedName(SERIALIZED_NAME_PRICE_SCALE)
    @jakarta.annotation.Nullable
    private Long priceScale;

    public static final String SERIALIZED_NAME_QUANTITY_SCALE = "quantityScale";

    @SerializedName(SERIALIZED_NAME_QUANTITY_SCALE)
    @jakarta.annotation.Nullable
    private Long quantityScale;

    public static final String SERIALIZED_NAME_OPTION_SIDE = "optionSide";

    @SerializedName(SERIALIZED_NAME_OPTION_SIDE)
    @jakarta.annotation.Nullable
    private String optionSide;

    public AccountTradeListResponseInner() {}

    public AccountTradeListResponseInner id(@jakarta.annotation.Nullable Long id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public Long getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable Long id) {
        this.id = id;
    }

    public AccountTradeListResponseInner tradeId(@jakarta.annotation.Nullable Long tradeId) {
        this.tradeId = tradeId;
        return this;
    }

    /**
     * Get tradeId
     *
     * @return tradeId
     */
    @jakarta.annotation.Nullable
    public Long getTradeId() {
        return tradeId;
    }

    public void setTradeId(@jakarta.annotation.Nullable Long tradeId) {
        this.tradeId = tradeId;
    }

    public AccountTradeListResponseInner orderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public AccountTradeListResponseInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public AccountTradeListResponseInner price(@jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public AccountTradeListResponseInner quantity(@jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    public String getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
    }

    public AccountTradeListResponseInner fee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
        return this;
    }

    /**
     * Get fee
     *
     * @return fee
     */
    @jakarta.annotation.Nullable
    public String getFee() {
        return fee;
    }

    public void setFee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
    }

    public AccountTradeListResponseInner realizedProfit(
            @jakarta.annotation.Nullable String realizedProfit) {
        this.realizedProfit = realizedProfit;
        return this;
    }

    /**
     * Get realizedProfit
     *
     * @return realizedProfit
     */
    @jakarta.annotation.Nullable
    public String getRealizedProfit() {
        return realizedProfit;
    }

    public void setRealizedProfit(@jakarta.annotation.Nullable String realizedProfit) {
        this.realizedProfit = realizedProfit;
    }

    public AccountTradeListResponseInner side(@jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public AccountTradeListResponseInner type(@jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public AccountTradeListResponseInner volatility(
            @jakarta.annotation.Nullable String volatility) {
        this.volatility = volatility;
        return this;
    }

    /**
     * Get volatility
     *
     * @return volatility
     */
    @jakarta.annotation.Nullable
    public String getVolatility() {
        return volatility;
    }

    public void setVolatility(@jakarta.annotation.Nullable String volatility) {
        this.volatility = volatility;
    }

    public AccountTradeListResponseInner liquidity(@jakarta.annotation.Nullable String liquidity) {
        this.liquidity = liquidity;
        return this;
    }

    /**
     * Get liquidity
     *
     * @return liquidity
     */
    @jakarta.annotation.Nullable
    public String getLiquidity() {
        return liquidity;
    }

    public void setLiquidity(@jakarta.annotation.Nullable String liquidity) {
        this.liquidity = liquidity;
    }

    public AccountTradeListResponseInner quoteAsset(
            @jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
        return this;
    }

    /**
     * Get quoteAsset
     *
     * @return quoteAsset
     */
    @jakarta.annotation.Nullable
    public String getQuoteAsset() {
        return quoteAsset;
    }

    public void setQuoteAsset(@jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
    }

    public AccountTradeListResponseInner time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public AccountTradeListResponseInner priceScale(@jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
        return this;
    }

    /**
     * Get priceScale
     *
     * @return priceScale
     */
    @jakarta.annotation.Nullable
    public Long getPriceScale() {
        return priceScale;
    }

    public void setPriceScale(@jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
    }

    public AccountTradeListResponseInner quantityScale(
            @jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
        return this;
    }

    /**
     * Get quantityScale
     *
     * @return quantityScale
     */
    @jakarta.annotation.Nullable
    public Long getQuantityScale() {
        return quantityScale;
    }

    public void setQuantityScale(@jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
    }

    public AccountTradeListResponseInner optionSide(
            @jakarta.annotation.Nullable String optionSide) {
        this.optionSide = optionSide;
        return this;
    }

    /**
     * Get optionSide
     *
     * @return optionSide
     */
    @jakarta.annotation.Nullable
    public String getOptionSide() {
        return optionSide;
    }

    public void setOptionSide(@jakarta.annotation.Nullable String optionSide) {
        this.optionSide = optionSide;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountTradeListResponseInner accountTradeListResponseInner =
                (AccountTradeListResponseInner) o;
        return Objects.equals(this.id, accountTradeListResponseInner.id)
                && Objects.equals(this.tradeId, accountTradeListResponseInner.tradeId)
                && Objects.equals(this.orderId, accountTradeListResponseInner.orderId)
                && Objects.equals(this.symbol, accountTradeListResponseInner.symbol)
                && Objects.equals(this.price, accountTradeListResponseInner.price)
                && Objects.equals(this.quantity, accountTradeListResponseInner.quantity)
                && Objects.equals(this.fee, accountTradeListResponseInner.fee)
                && Objects.equals(this.realizedProfit, accountTradeListResponseInner.realizedProfit)
                && Objects.equals(this.side, accountTradeListResponseInner.side)
                && Objects.equals(this.type, accountTradeListResponseInner.type)
                && Objects.equals(this.volatility, accountTradeListResponseInner.volatility)
                && Objects.equals(this.liquidity, accountTradeListResponseInner.liquidity)
                && Objects.equals(this.quoteAsset, accountTradeListResponseInner.quoteAsset)
                && Objects.equals(this.time, accountTradeListResponseInner.time)
                && Objects.equals(this.priceScale, accountTradeListResponseInner.priceScale)
                && Objects.equals(this.quantityScale, accountTradeListResponseInner.quantityScale)
                && Objects.equals(this.optionSide, accountTradeListResponseInner.optionSide);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                tradeId,
                orderId,
                symbol,
                price,
                quantity,
                fee,
                realizedProfit,
                side,
                type,
                volatility,
                liquidity,
                quoteAsset,
                time,
                priceScale,
                quantityScale,
                optionSide);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountTradeListResponseInner {\n");
        sb.append("		id: ").append(toIndentedString(id)).append("\n");
        sb.append("		tradeId: ").append(toIndentedString(tradeId)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("		realizedProfit: ").append(toIndentedString(realizedProfit)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		volatility: ").append(toIndentedString(volatility)).append("\n");
        sb.append("		liquidity: ").append(toIndentedString(liquidity)).append("\n");
        sb.append("		quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		priceScale: ").append(toIndentedString(priceScale)).append("\n");
        sb.append("		quantityScale: ").append(toIndentedString(quantityScale)).append("\n");
        sb.append("		optionSide: ").append(toIndentedString(optionSide)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object idValue = getId();
        String idValueAsString = "";
        idValueAsString = idValue.toString();
        sb.append("id=").append(urlEncode(idValueAsString)).append("");
        Object tradeIdValue = getTradeId();
        String tradeIdValueAsString = "";
        tradeIdValueAsString = tradeIdValue.toString();
        sb.append("tradeId=").append(urlEncode(tradeIdValueAsString)).append("");
        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object feeValue = getFee();
        String feeValueAsString = "";
        feeValueAsString = feeValue.toString();
        sb.append("fee=").append(urlEncode(feeValueAsString)).append("");
        Object realizedProfitValue = getRealizedProfit();
        String realizedProfitValueAsString = "";
        realizedProfitValueAsString = realizedProfitValue.toString();
        sb.append("realizedProfit=").append(urlEncode(realizedProfitValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object volatilityValue = getVolatility();
        String volatilityValueAsString = "";
        volatilityValueAsString = volatilityValue.toString();
        sb.append("volatility=").append(urlEncode(volatilityValueAsString)).append("");
        Object liquidityValue = getLiquidity();
        String liquidityValueAsString = "";
        liquidityValueAsString = liquidityValue.toString();
        sb.append("liquidity=").append(urlEncode(liquidityValueAsString)).append("");
        Object quoteAssetValue = getQuoteAsset();
        String quoteAssetValueAsString = "";
        quoteAssetValueAsString = quoteAssetValue.toString();
        sb.append("quoteAsset=").append(urlEncode(quoteAssetValueAsString)).append("");
        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        Object priceScaleValue = getPriceScale();
        String priceScaleValueAsString = "";
        priceScaleValueAsString = priceScaleValue.toString();
        sb.append("priceScale=").append(urlEncode(priceScaleValueAsString)).append("");
        Object quantityScaleValue = getQuantityScale();
        String quantityScaleValueAsString = "";
        quantityScaleValueAsString = quantityScaleValue.toString();
        sb.append("quantityScale=").append(urlEncode(quantityScaleValueAsString)).append("");
        Object optionSideValue = getOptionSide();
        String optionSideValueAsString = "";
        optionSideValueAsString = optionSideValue.toString();
        sb.append("optionSide=").append(urlEncode(optionSideValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("tradeId");
        openapiFields.add("orderId");
        openapiFields.add("symbol");
        openapiFields.add("price");
        openapiFields.add("quantity");
        openapiFields.add("fee");
        openapiFields.add("realizedProfit");
        openapiFields.add("side");
        openapiFields.add("type");
        openapiFields.add("volatility");
        openapiFields.add("liquidity");
        openapiFields.add("quoteAsset");
        openapiFields.add("time");
        openapiFields.add("priceScale");
        openapiFields.add("quantityScale");
        openapiFields.add("optionSide");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AccountTradeListResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountTradeListResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountTradeListResponseInner is not"
                                        + " found in the empty JSON string",
                                AccountTradeListResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountTradeListResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AccountTradeListResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull())
                && !jsonObj.get("quantity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quantity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quantity").toString()));
        }
        if ((jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull())
                && !jsonObj.get("fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fee` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("fee").toString()));
        }
        if ((jsonObj.get("realizedProfit") != null && !jsonObj.get("realizedProfit").isJsonNull())
                && !jsonObj.get("realizedProfit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `realizedProfit` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("realizedProfit").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("volatility") != null && !jsonObj.get("volatility").isJsonNull())
                && !jsonObj.get("volatility").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `volatility` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("volatility").toString()));
        }
        if ((jsonObj.get("liquidity") != null && !jsonObj.get("liquidity").isJsonNull())
                && !jsonObj.get("liquidity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `liquidity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("liquidity").toString()));
        }
        if ((jsonObj.get("quoteAsset") != null && !jsonObj.get("quoteAsset").isJsonNull())
                && !jsonObj.get("quoteAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteAsset").toString()));
        }
        if ((jsonObj.get("optionSide") != null && !jsonObj.get("optionSide").isJsonNull())
                && !jsonObj.get("optionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `optionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("optionSide").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountTradeListResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountTradeListResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountTradeListResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AccountTradeListResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountTradeListResponseInner>() {
                        @Override
                        public void write(JsonWriter out, AccountTradeListResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountTradeListResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountTradeListResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountTradeListResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AccountTradeListResponseInner
     */
    public static AccountTradeListResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountTradeListResponseInner.class);
    }

    /**
     * Convert an instance of AccountTradeListResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
