/*
 * Binance Derivatives Trading Options WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading Options WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_options.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** NewSymbolInfoResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class NewSymbolInfoResponse extends BaseDTO {
    public static final String SERIALIZED_NAME_E_LOWER_CASE = "e";

    @SerializedName(SERIALIZED_NAME_E_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String eLowerCase;

    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_U_LOWER_CASE = "u";

    @SerializedName(SERIALIZED_NAME_U_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String uLowerCase;

    public static final String SERIALIZED_NAME_QA = "qa";

    @SerializedName(SERIALIZED_NAME_QA)
    @jakarta.annotation.Nullable
    private String qa;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_UNIT = "unit";

    @SerializedName(SERIALIZED_NAME_UNIT)
    @jakarta.annotation.Nullable
    private Long unit;

    public static final String SERIALIZED_NAME_MQ = "mq";

    @SerializedName(SERIALIZED_NAME_MQ)
    @jakarta.annotation.Nullable
    private String mq;

    public static final String SERIALIZED_NAME_D_LOWER_CASE = "d";

    @SerializedName(SERIALIZED_NAME_D_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String dLowerCase;

    public static final String SERIALIZED_NAME_SP = "sp";

    @SerializedName(SERIALIZED_NAME_SP)
    @jakarta.annotation.Nullable
    private String sp;

    public static final String SERIALIZED_NAME_ED = "ed";

    @SerializedName(SERIALIZED_NAME_ED)
    @jakarta.annotation.Nullable
    private Long ed;

    public NewSymbolInfoResponse() {}

    public NewSymbolInfoResponse eLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
        return this;
    }

    /**
     * Get eLowerCase
     *
     * @return eLowerCase
     */
    @jakarta.annotation.Nullable
    public String geteLowerCase() {
        return eLowerCase;
    }

    public void seteLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
    }

    public NewSymbolInfoResponse E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public NewSymbolInfoResponse uLowerCase(@jakarta.annotation.Nullable String uLowerCase) {
        this.uLowerCase = uLowerCase;
        return this;
    }

    /**
     * Get uLowerCase
     *
     * @return uLowerCase
     */
    @jakarta.annotation.Nullable
    public String getuLowerCase() {
        return uLowerCase;
    }

    public void setuLowerCase(@jakarta.annotation.Nullable String uLowerCase) {
        this.uLowerCase = uLowerCase;
    }

    public NewSymbolInfoResponse qa(@jakarta.annotation.Nullable String qa) {
        this.qa = qa;
        return this;
    }

    /**
     * Get qa
     *
     * @return qa
     */
    @jakarta.annotation.Nullable
    public String getQa() {
        return qa;
    }

    public void setQa(@jakarta.annotation.Nullable String qa) {
        this.qa = qa;
    }

    public NewSymbolInfoResponse sLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public NewSymbolInfoResponse unit(@jakarta.annotation.Nullable Long unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get unit
     *
     * @return unit
     */
    @jakarta.annotation.Nullable
    public Long getUnit() {
        return unit;
    }

    public void setUnit(@jakarta.annotation.Nullable Long unit) {
        this.unit = unit;
    }

    public NewSymbolInfoResponse mq(@jakarta.annotation.Nullable String mq) {
        this.mq = mq;
        return this;
    }

    /**
     * Get mq
     *
     * @return mq
     */
    @jakarta.annotation.Nullable
    public String getMq() {
        return mq;
    }

    public void setMq(@jakarta.annotation.Nullable String mq) {
        this.mq = mq;
    }

    public NewSymbolInfoResponse dLowerCase(@jakarta.annotation.Nullable String dLowerCase) {
        this.dLowerCase = dLowerCase;
        return this;
    }

    /**
     * Get dLowerCase
     *
     * @return dLowerCase
     */
    @jakarta.annotation.Nullable
    public String getdLowerCase() {
        return dLowerCase;
    }

    public void setdLowerCase(@jakarta.annotation.Nullable String dLowerCase) {
        this.dLowerCase = dLowerCase;
    }

    public NewSymbolInfoResponse sp(@jakarta.annotation.Nullable String sp) {
        this.sp = sp;
        return this;
    }

    /**
     * Get sp
     *
     * @return sp
     */
    @jakarta.annotation.Nullable
    public String getSp() {
        return sp;
    }

    public void setSp(@jakarta.annotation.Nullable String sp) {
        this.sp = sp;
    }

    public NewSymbolInfoResponse ed(@jakarta.annotation.Nullable Long ed) {
        this.ed = ed;
        return this;
    }

    /**
     * Get ed
     *
     * @return ed
     */
    @jakarta.annotation.Nullable
    public Long getEd() {
        return ed;
    }

    public void setEd(@jakarta.annotation.Nullable Long ed) {
        this.ed = ed;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NewSymbolInfoResponse newSymbolInfoResponse = (NewSymbolInfoResponse) o;
        return Objects.equals(this.eLowerCase, newSymbolInfoResponse.eLowerCase)
                && Objects.equals(this.E, newSymbolInfoResponse.E)
                && Objects.equals(this.uLowerCase, newSymbolInfoResponse.uLowerCase)
                && Objects.equals(this.qa, newSymbolInfoResponse.qa)
                && Objects.equals(this.sLowerCase, newSymbolInfoResponse.sLowerCase)
                && Objects.equals(this.unit, newSymbolInfoResponse.unit)
                && Objects.equals(this.mq, newSymbolInfoResponse.mq)
                && Objects.equals(this.dLowerCase, newSymbolInfoResponse.dLowerCase)
                && Objects.equals(this.sp, newSymbolInfoResponse.sp)
                && Objects.equals(this.ed, newSymbolInfoResponse.ed);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                eLowerCase, E, uLowerCase, qa, sLowerCase, unit, mq, dLowerCase, sp, ed);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NewSymbolInfoResponse {\n");
        sb.append("		eLowerCase: ").append(toIndentedString(eLowerCase)).append("\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		uLowerCase: ").append(toIndentedString(uLowerCase)).append("\n");
        sb.append("		qa: ").append(toIndentedString(qa)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		unit: ").append(toIndentedString(unit)).append("\n");
        sb.append("		mq: ").append(toIndentedString(mq)).append("\n");
        sb.append("		dLowerCase: ").append(toIndentedString(dLowerCase)).append("\n");
        sb.append("		sp: ").append(toIndentedString(sp)).append("\n");
        sb.append("		ed: ").append(toIndentedString(ed)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            String eLowerCaseValueAsString = eLowerCaseValue.toString();
            valMap.put("eLowerCase", eLowerCaseValueAsString);
        }
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        String uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            String uLowerCaseValueAsString = uLowerCaseValue.toString();
            valMap.put("uLowerCase", uLowerCaseValueAsString);
        }
        String qaValue = getQa();
        if (qaValue != null) {
            String qaValueAsString = qaValue.toString();
            valMap.put("qa", qaValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        Long unitValue = getUnit();
        if (unitValue != null) {
            String unitValueAsString = unitValue.toString();
            valMap.put("unit", unitValueAsString);
        }
        String mqValue = getMq();
        if (mqValue != null) {
            String mqValueAsString = mqValue.toString();
            valMap.put("mq", mqValueAsString);
        }
        String dLowerCaseValue = getdLowerCase();
        if (dLowerCaseValue != null) {
            String dLowerCaseValueAsString = dLowerCaseValue.toString();
            valMap.put("dLowerCase", dLowerCaseValueAsString);
        }
        String spValue = getSp();
        if (spValue != null) {
            String spValueAsString = spValue.toString();
            valMap.put("sp", spValueAsString);
        }
        Long edValue = getEd();
        if (edValue != null) {
            String edValueAsString = edValue.toString();
            valMap.put("ed", edValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            valMap.put("eLowerCase", eLowerCaseValue);
        }
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object uLowerCaseValue = getuLowerCase();
        if (uLowerCaseValue != null) {
            valMap.put("uLowerCase", uLowerCaseValue);
        }
        Object qaValue = getQa();
        if (qaValue != null) {
            valMap.put("qa", qaValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object unitValue = getUnit();
        if (unitValue != null) {
            valMap.put("unit", unitValue);
        }
        Object mqValue = getMq();
        if (mqValue != null) {
            valMap.put("mq", mqValue);
        }
        Object dLowerCaseValue = getdLowerCase();
        if (dLowerCaseValue != null) {
            valMap.put("dLowerCase", dLowerCaseValue);
        }
        Object spValue = getSp();
        if (spValue != null) {
            valMap.put("sp", spValue);
        }
        Object edValue = getEd();
        if (edValue != null) {
            valMap.put("ed", edValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("e");
        openapiFields.add("E");
        openapiFields.add("u");
        openapiFields.add("qa");
        openapiFields.add("s");
        openapiFields.add("unit");
        openapiFields.add("mq");
        openapiFields.add("d");
        openapiFields.add("sp");
        openapiFields.add("ed");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NewSymbolInfoResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!NewSymbolInfoResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in NewSymbolInfoResponse is not found in"
                                        + " the empty JSON string",
                                NewSymbolInfoResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!NewSymbolInfoResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `NewSymbolInfoResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull())
                && !jsonObj.get("e").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `e` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("e").toString()));
        }
        if ((jsonObj.get("u") != null && !jsonObj.get("u").isJsonNull())
                && !jsonObj.get("u").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `u` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("u").toString()));
        }
        if ((jsonObj.get("qa") != null && !jsonObj.get("qa").isJsonNull())
                && !jsonObj.get("qa").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `qa` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("qa").toString()));
        }
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("mq") != null && !jsonObj.get("mq").isJsonNull())
                && !jsonObj.get("mq").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `mq` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("mq").toString()));
        }
        if ((jsonObj.get("d") != null && !jsonObj.get("d").isJsonNull())
                && !jsonObj.get("d").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `d` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("d").toString()));
        }
        if ((jsonObj.get("sp") != null && !jsonObj.get("sp").isJsonNull())
                && !jsonObj.get("sp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sp` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("sp").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NewSymbolInfoResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NewSymbolInfoResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NewSymbolInfoResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(NewSymbolInfoResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<NewSymbolInfoResponse>() {
                        @Override
                        public void write(JsonWriter out, NewSymbolInfoResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public NewSymbolInfoResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of NewSymbolInfoResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NewSymbolInfoResponse
     * @throws IOException if the JSON string is invalid with respect to NewSymbolInfoResponse
     */
    public static NewSymbolInfoResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NewSymbolInfoResponse.class);
    }

    /**
     * Convert an instance of NewSymbolInfoResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
