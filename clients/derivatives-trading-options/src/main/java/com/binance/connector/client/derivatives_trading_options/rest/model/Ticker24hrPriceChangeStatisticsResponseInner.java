/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** Ticker24hrPriceChangeStatisticsResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class Ticker24hrPriceChangeStatisticsResponseInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_PRICE_CHANGE = "priceChange";

    @SerializedName(SERIALIZED_NAME_PRICE_CHANGE)
    @jakarta.annotation.Nullable
    private String priceChange;

    public static final String SERIALIZED_NAME_PRICE_CHANGE_PERCENT = "priceChangePercent";

    @SerializedName(SERIALIZED_NAME_PRICE_CHANGE_PERCENT)
    @jakarta.annotation.Nullable
    private String priceChangePercent;

    public static final String SERIALIZED_NAME_LAST_PRICE = "lastPrice";

    @SerializedName(SERIALIZED_NAME_LAST_PRICE)
    @jakarta.annotation.Nullable
    private String lastPrice;

    public static final String SERIALIZED_NAME_LAST_QTY = "lastQty";

    @SerializedName(SERIALIZED_NAME_LAST_QTY)
    @jakarta.annotation.Nullable
    private String lastQty;

    public static final String SERIALIZED_NAME_OPEN = "open";

    @SerializedName(SERIALIZED_NAME_OPEN)
    @jakarta.annotation.Nullable
    private String open;

    public static final String SERIALIZED_NAME_HIGH = "high";

    @SerializedName(SERIALIZED_NAME_HIGH)
    @jakarta.annotation.Nullable
    private String high;

    public static final String SERIALIZED_NAME_LOW = "low";

    @SerializedName(SERIALIZED_NAME_LOW)
    @jakarta.annotation.Nullable
    private String low;

    public static final String SERIALIZED_NAME_VOLUME = "volume";

    @SerializedName(SERIALIZED_NAME_VOLUME)
    @jakarta.annotation.Nullable
    private String volume;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_BID_PRICE = "bidPrice";

    @SerializedName(SERIALIZED_NAME_BID_PRICE)
    @jakarta.annotation.Nullable
    private String bidPrice;

    public static final String SERIALIZED_NAME_ASK_PRICE = "askPrice";

    @SerializedName(SERIALIZED_NAME_ASK_PRICE)
    @jakarta.annotation.Nullable
    private String askPrice;

    public static final String SERIALIZED_NAME_OPEN_TIME = "openTime";

    @SerializedName(SERIALIZED_NAME_OPEN_TIME)
    @jakarta.annotation.Nullable
    private Long openTime;

    public static final String SERIALIZED_NAME_CLOSE_TIME = "closeTime";

    @SerializedName(SERIALIZED_NAME_CLOSE_TIME)
    @jakarta.annotation.Nullable
    private Long closeTime;

    public static final String SERIALIZED_NAME_FIRST_TRADE_ID = "firstTradeId";

    @SerializedName(SERIALIZED_NAME_FIRST_TRADE_ID)
    @jakarta.annotation.Nullable
    private Long firstTradeId;

    public static final String SERIALIZED_NAME_TRADE_COUNT = "tradeCount";

    @SerializedName(SERIALIZED_NAME_TRADE_COUNT)
    @jakarta.annotation.Nullable
    private Long tradeCount;

    public static final String SERIALIZED_NAME_STRIKE_PRICE = "strikePrice";

    @SerializedName(SERIALIZED_NAME_STRIKE_PRICE)
    @jakarta.annotation.Nullable
    private String strikePrice;

    public static final String SERIALIZED_NAME_EXERCISE_PRICE = "exercisePrice";

    @SerializedName(SERIALIZED_NAME_EXERCISE_PRICE)
    @jakarta.annotation.Nullable
    private String exercisePrice;

    public Ticker24hrPriceChangeStatisticsResponseInner() {}

    public Ticker24hrPriceChangeStatisticsResponseInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner priceChange(
            @jakarta.annotation.Nullable String priceChange) {
        this.priceChange = priceChange;
        return this;
    }

    /**
     * Get priceChange
     *
     * @return priceChange
     */
    @jakarta.annotation.Nullable
    public String getPriceChange() {
        return priceChange;
    }

    public void setPriceChange(@jakarta.annotation.Nullable String priceChange) {
        this.priceChange = priceChange;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner priceChangePercent(
            @jakarta.annotation.Nullable String priceChangePercent) {
        this.priceChangePercent = priceChangePercent;
        return this;
    }

    /**
     * Get priceChangePercent
     *
     * @return priceChangePercent
     */
    @jakarta.annotation.Nullable
    public String getPriceChangePercent() {
        return priceChangePercent;
    }

    public void setPriceChangePercent(@jakarta.annotation.Nullable String priceChangePercent) {
        this.priceChangePercent = priceChangePercent;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner lastPrice(
            @jakarta.annotation.Nullable String lastPrice) {
        this.lastPrice = lastPrice;
        return this;
    }

    /**
     * Get lastPrice
     *
     * @return lastPrice
     */
    @jakarta.annotation.Nullable
    public String getLastPrice() {
        return lastPrice;
    }

    public void setLastPrice(@jakarta.annotation.Nullable String lastPrice) {
        this.lastPrice = lastPrice;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner lastQty(
            @jakarta.annotation.Nullable String lastQty) {
        this.lastQty = lastQty;
        return this;
    }

    /**
     * Get lastQty
     *
     * @return lastQty
     */
    @jakarta.annotation.Nullable
    public String getLastQty() {
        return lastQty;
    }

    public void setLastQty(@jakarta.annotation.Nullable String lastQty) {
        this.lastQty = lastQty;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner open(
            @jakarta.annotation.Nullable String open) {
        this.open = open;
        return this;
    }

    /**
     * Get open
     *
     * @return open
     */
    @jakarta.annotation.Nullable
    public String getOpen() {
        return open;
    }

    public void setOpen(@jakarta.annotation.Nullable String open) {
        this.open = open;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner high(
            @jakarta.annotation.Nullable String high) {
        this.high = high;
        return this;
    }

    /**
     * Get high
     *
     * @return high
     */
    @jakarta.annotation.Nullable
    public String getHigh() {
        return high;
    }

    public void setHigh(@jakarta.annotation.Nullable String high) {
        this.high = high;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner low(
            @jakarta.annotation.Nullable String low) {
        this.low = low;
        return this;
    }

    /**
     * Get low
     *
     * @return low
     */
    @jakarta.annotation.Nullable
    public String getLow() {
        return low;
    }

    public void setLow(@jakarta.annotation.Nullable String low) {
        this.low = low;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner volume(
            @jakarta.annotation.Nullable String volume) {
        this.volume = volume;
        return this;
    }

    /**
     * Get volume
     *
     * @return volume
     */
    @jakarta.annotation.Nullable
    public String getVolume() {
        return volume;
    }

    public void setVolume(@jakarta.annotation.Nullable String volume) {
        this.volume = volume;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner bidPrice(
            @jakarta.annotation.Nullable String bidPrice) {
        this.bidPrice = bidPrice;
        return this;
    }

    /**
     * Get bidPrice
     *
     * @return bidPrice
     */
    @jakarta.annotation.Nullable
    public String getBidPrice() {
        return bidPrice;
    }

    public void setBidPrice(@jakarta.annotation.Nullable String bidPrice) {
        this.bidPrice = bidPrice;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner askPrice(
            @jakarta.annotation.Nullable String askPrice) {
        this.askPrice = askPrice;
        return this;
    }

    /**
     * Get askPrice
     *
     * @return askPrice
     */
    @jakarta.annotation.Nullable
    public String getAskPrice() {
        return askPrice;
    }

    public void setAskPrice(@jakarta.annotation.Nullable String askPrice) {
        this.askPrice = askPrice;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner openTime(
            @jakarta.annotation.Nullable Long openTime) {
        this.openTime = openTime;
        return this;
    }

    /**
     * Get openTime
     *
     * @return openTime
     */
    @jakarta.annotation.Nullable
    public Long getOpenTime() {
        return openTime;
    }

    public void setOpenTime(@jakarta.annotation.Nullable Long openTime) {
        this.openTime = openTime;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner closeTime(
            @jakarta.annotation.Nullable Long closeTime) {
        this.closeTime = closeTime;
        return this;
    }

    /**
     * Get closeTime
     *
     * @return closeTime
     */
    @jakarta.annotation.Nullable
    public Long getCloseTime() {
        return closeTime;
    }

    public void setCloseTime(@jakarta.annotation.Nullable Long closeTime) {
        this.closeTime = closeTime;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner firstTradeId(
            @jakarta.annotation.Nullable Long firstTradeId) {
        this.firstTradeId = firstTradeId;
        return this;
    }

    /**
     * Get firstTradeId
     *
     * @return firstTradeId
     */
    @jakarta.annotation.Nullable
    public Long getFirstTradeId() {
        return firstTradeId;
    }

    public void setFirstTradeId(@jakarta.annotation.Nullable Long firstTradeId) {
        this.firstTradeId = firstTradeId;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner tradeCount(
            @jakarta.annotation.Nullable Long tradeCount) {
        this.tradeCount = tradeCount;
        return this;
    }

    /**
     * Get tradeCount
     *
     * @return tradeCount
     */
    @jakarta.annotation.Nullable
    public Long getTradeCount() {
        return tradeCount;
    }

    public void setTradeCount(@jakarta.annotation.Nullable Long tradeCount) {
        this.tradeCount = tradeCount;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner strikePrice(
            @jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
        return this;
    }

    /**
     * Get strikePrice
     *
     * @return strikePrice
     */
    @jakarta.annotation.Nullable
    public String getStrikePrice() {
        return strikePrice;
    }

    public void setStrikePrice(@jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
    }

    public Ticker24hrPriceChangeStatisticsResponseInner exercisePrice(
            @jakarta.annotation.Nullable String exercisePrice) {
        this.exercisePrice = exercisePrice;
        return this;
    }

    /**
     * Get exercisePrice
     *
     * @return exercisePrice
     */
    @jakarta.annotation.Nullable
    public String getExercisePrice() {
        return exercisePrice;
    }

    public void setExercisePrice(@jakarta.annotation.Nullable String exercisePrice) {
        this.exercisePrice = exercisePrice;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Ticker24hrPriceChangeStatisticsResponseInner ticker24hrPriceChangeStatisticsResponseInner =
                (Ticker24hrPriceChangeStatisticsResponseInner) o;
        return Objects.equals(this.symbol, ticker24hrPriceChangeStatisticsResponseInner.symbol)
                && Objects.equals(
                        this.priceChange, ticker24hrPriceChangeStatisticsResponseInner.priceChange)
                && Objects.equals(
                        this.priceChangePercent,
                        ticker24hrPriceChangeStatisticsResponseInner.priceChangePercent)
                && Objects.equals(
                        this.lastPrice, ticker24hrPriceChangeStatisticsResponseInner.lastPrice)
                && Objects.equals(
                        this.lastQty, ticker24hrPriceChangeStatisticsResponseInner.lastQty)
                && Objects.equals(this.open, ticker24hrPriceChangeStatisticsResponseInner.open)
                && Objects.equals(this.high, ticker24hrPriceChangeStatisticsResponseInner.high)
                && Objects.equals(this.low, ticker24hrPriceChangeStatisticsResponseInner.low)
                && Objects.equals(this.volume, ticker24hrPriceChangeStatisticsResponseInner.volume)
                && Objects.equals(this.amount, ticker24hrPriceChangeStatisticsResponseInner.amount)
                && Objects.equals(
                        this.bidPrice, ticker24hrPriceChangeStatisticsResponseInner.bidPrice)
                && Objects.equals(
                        this.askPrice, ticker24hrPriceChangeStatisticsResponseInner.askPrice)
                && Objects.equals(
                        this.openTime, ticker24hrPriceChangeStatisticsResponseInner.openTime)
                && Objects.equals(
                        this.closeTime, ticker24hrPriceChangeStatisticsResponseInner.closeTime)
                && Objects.equals(
                        this.firstTradeId,
                        ticker24hrPriceChangeStatisticsResponseInner.firstTradeId)
                && Objects.equals(
                        this.tradeCount, ticker24hrPriceChangeStatisticsResponseInner.tradeCount)
                && Objects.equals(
                        this.strikePrice, ticker24hrPriceChangeStatisticsResponseInner.strikePrice)
                && Objects.equals(
                        this.exercisePrice,
                        ticker24hrPriceChangeStatisticsResponseInner.exercisePrice);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                priceChange,
                priceChangePercent,
                lastPrice,
                lastQty,
                open,
                high,
                low,
                volume,
                amount,
                bidPrice,
                askPrice,
                openTime,
                closeTime,
                firstTradeId,
                tradeCount,
                strikePrice,
                exercisePrice);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Ticker24hrPriceChangeStatisticsResponseInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		priceChange: ").append(toIndentedString(priceChange)).append("\n");
        sb.append("		priceChangePercent: ")
                .append(toIndentedString(priceChangePercent))
                .append("\n");
        sb.append("		lastPrice: ").append(toIndentedString(lastPrice)).append("\n");
        sb.append("		lastQty: ").append(toIndentedString(lastQty)).append("\n");
        sb.append("		open: ").append(toIndentedString(open)).append("\n");
        sb.append("		high: ").append(toIndentedString(high)).append("\n");
        sb.append("		low: ").append(toIndentedString(low)).append("\n");
        sb.append("		volume: ").append(toIndentedString(volume)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		bidPrice: ").append(toIndentedString(bidPrice)).append("\n");
        sb.append("		askPrice: ").append(toIndentedString(askPrice)).append("\n");
        sb.append("		openTime: ").append(toIndentedString(openTime)).append("\n");
        sb.append("		closeTime: ").append(toIndentedString(closeTime)).append("\n");
        sb.append("		firstTradeId: ").append(toIndentedString(firstTradeId)).append("\n");
        sb.append("		tradeCount: ").append(toIndentedString(tradeCount)).append("\n");
        sb.append("		strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
        sb.append("		exercisePrice: ").append(toIndentedString(exercisePrice)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object priceChangeValue = getPriceChange();
        String priceChangeValueAsString = "";
        priceChangeValueAsString = priceChangeValue.toString();
        sb.append("priceChange=").append(urlEncode(priceChangeValueAsString)).append("");
        Object priceChangePercentValue = getPriceChangePercent();
        String priceChangePercentValueAsString = "";
        priceChangePercentValueAsString = priceChangePercentValue.toString();
        sb.append("priceChangePercent=")
                .append(urlEncode(priceChangePercentValueAsString))
                .append("");
        Object lastPriceValue = getLastPrice();
        String lastPriceValueAsString = "";
        lastPriceValueAsString = lastPriceValue.toString();
        sb.append("lastPrice=").append(urlEncode(lastPriceValueAsString)).append("");
        Object lastQtyValue = getLastQty();
        String lastQtyValueAsString = "";
        lastQtyValueAsString = lastQtyValue.toString();
        sb.append("lastQty=").append(urlEncode(lastQtyValueAsString)).append("");
        Object openValue = getOpen();
        String openValueAsString = "";
        openValueAsString = openValue.toString();
        sb.append("open=").append(urlEncode(openValueAsString)).append("");
        Object highValue = getHigh();
        String highValueAsString = "";
        highValueAsString = highValue.toString();
        sb.append("high=").append(urlEncode(highValueAsString)).append("");
        Object lowValue = getLow();
        String lowValueAsString = "";
        lowValueAsString = lowValue.toString();
        sb.append("low=").append(urlEncode(lowValueAsString)).append("");
        Object volumeValue = getVolume();
        String volumeValueAsString = "";
        volumeValueAsString = volumeValue.toString();
        sb.append("volume=").append(urlEncode(volumeValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object bidPriceValue = getBidPrice();
        String bidPriceValueAsString = "";
        bidPriceValueAsString = bidPriceValue.toString();
        sb.append("bidPrice=").append(urlEncode(bidPriceValueAsString)).append("");
        Object askPriceValue = getAskPrice();
        String askPriceValueAsString = "";
        askPriceValueAsString = askPriceValue.toString();
        sb.append("askPrice=").append(urlEncode(askPriceValueAsString)).append("");
        Object openTimeValue = getOpenTime();
        String openTimeValueAsString = "";
        openTimeValueAsString = openTimeValue.toString();
        sb.append("openTime=").append(urlEncode(openTimeValueAsString)).append("");
        Object closeTimeValue = getCloseTime();
        String closeTimeValueAsString = "";
        closeTimeValueAsString = closeTimeValue.toString();
        sb.append("closeTime=").append(urlEncode(closeTimeValueAsString)).append("");
        Object firstTradeIdValue = getFirstTradeId();
        String firstTradeIdValueAsString = "";
        firstTradeIdValueAsString = firstTradeIdValue.toString();
        sb.append("firstTradeId=").append(urlEncode(firstTradeIdValueAsString)).append("");
        Object tradeCountValue = getTradeCount();
        String tradeCountValueAsString = "";
        tradeCountValueAsString = tradeCountValue.toString();
        sb.append("tradeCount=").append(urlEncode(tradeCountValueAsString)).append("");
        Object strikePriceValue = getStrikePrice();
        String strikePriceValueAsString = "";
        strikePriceValueAsString = strikePriceValue.toString();
        sb.append("strikePrice=").append(urlEncode(strikePriceValueAsString)).append("");
        Object exercisePriceValue = getExercisePrice();
        String exercisePriceValueAsString = "";
        exercisePriceValueAsString = exercisePriceValue.toString();
        sb.append("exercisePrice=").append(urlEncode(exercisePriceValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("priceChange");
        openapiFields.add("priceChangePercent");
        openapiFields.add("lastPrice");
        openapiFields.add("lastQty");
        openapiFields.add("open");
        openapiFields.add("high");
        openapiFields.add("low");
        openapiFields.add("volume");
        openapiFields.add("amount");
        openapiFields.add("bidPrice");
        openapiFields.add("askPrice");
        openapiFields.add("openTime");
        openapiFields.add("closeTime");
        openapiFields.add("firstTradeId");
        openapiFields.add("tradeCount");
        openapiFields.add("strikePrice");
        openapiFields.add("exercisePrice");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     Ticker24hrPriceChangeStatisticsResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!Ticker24hrPriceChangeStatisticsResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " Ticker24hrPriceChangeStatisticsResponseInner is not found"
                                    + " in the empty JSON string",
                                Ticker24hrPriceChangeStatisticsResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!Ticker24hrPriceChangeStatisticsResponseInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `Ticker24hrPriceChangeStatisticsResponseInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("priceChange") != null && !jsonObj.get("priceChange").isJsonNull())
                && !jsonObj.get("priceChange").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceChange` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("priceChange").toString()));
        }
        if ((jsonObj.get("priceChangePercent") != null
                        && !jsonObj.get("priceChangePercent").isJsonNull())
                && !jsonObj.get("priceChangePercent").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceChangePercent` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("priceChangePercent").toString()));
        }
        if ((jsonObj.get("lastPrice") != null && !jsonObj.get("lastPrice").isJsonNull())
                && !jsonObj.get("lastPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `lastPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("lastPrice").toString()));
        }
        if ((jsonObj.get("lastQty") != null && !jsonObj.get("lastQty").isJsonNull())
                && !jsonObj.get("lastQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `lastQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("lastQty").toString()));
        }
        if ((jsonObj.get("open") != null && !jsonObj.get("open").isJsonNull())
                && !jsonObj.get("open").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `open` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("open").toString()));
        }
        if ((jsonObj.get("high") != null && !jsonObj.get("high").isJsonNull())
                && !jsonObj.get("high").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `high` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("high").toString()));
        }
        if ((jsonObj.get("low") != null && !jsonObj.get("low").isJsonNull())
                && !jsonObj.get("low").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `low` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("low").toString()));
        }
        if ((jsonObj.get("volume") != null && !jsonObj.get("volume").isJsonNull())
                && !jsonObj.get("volume").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `volume` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("volume").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("bidPrice") != null && !jsonObj.get("bidPrice").isJsonNull())
                && !jsonObj.get("bidPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("bidPrice").toString()));
        }
        if ((jsonObj.get("askPrice") != null && !jsonObj.get("askPrice").isJsonNull())
                && !jsonObj.get("askPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("askPrice").toString()));
        }
        if ((jsonObj.get("strikePrice") != null && !jsonObj.get("strikePrice").isJsonNull())
                && !jsonObj.get("strikePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strikePrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strikePrice").toString()));
        }
        if ((jsonObj.get("exercisePrice") != null && !jsonObj.get("exercisePrice").isJsonNull())
                && !jsonObj.get("exercisePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `exercisePrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("exercisePrice").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Ticker24hrPriceChangeStatisticsResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'Ticker24hrPriceChangeStatisticsResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Ticker24hrPriceChangeStatisticsResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(Ticker24hrPriceChangeStatisticsResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Ticker24hrPriceChangeStatisticsResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, Ticker24hrPriceChangeStatisticsResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Ticker24hrPriceChangeStatisticsResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Ticker24hrPriceChangeStatisticsResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Ticker24hrPriceChangeStatisticsResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     Ticker24hrPriceChangeStatisticsResponseInner
     */
    public static Ticker24hrPriceChangeStatisticsResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, Ticker24hrPriceChangeStatisticsResponseInner.class);
    }

    /**
     * Convert an instance of Ticker24hrPriceChangeStatisticsResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
