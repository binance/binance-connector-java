/*
 * Binance Derivatives Trading Options WebSocket Market Streams
 * OpenAPI Specification for the Binance Derivatives Trading Options WebSocket Market Streams
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.websocket.stream.model;

import com.binance.connector.client.common.websocket.dtos.BaseDTO;
import com.binance.connector.client.derivatives_trading_options.websocket.stream.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** Ticker24HourResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class Ticker24HourResponse extends BaseDTO {
    public static final String SERIALIZED_NAME_E_LOWER_CASE = "e";

    @SerializedName(SERIALIZED_NAME_E_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String eLowerCase;

    public static final String SERIALIZED_NAME_E = "E";

    @SerializedName(SERIALIZED_NAME_E)
    @jakarta.annotation.Nullable
    private Long E;

    public static final String SERIALIZED_NAME_T = "T";

    @SerializedName(SERIALIZED_NAME_T)
    @jakarta.annotation.Nullable
    private Long T;

    public static final String SERIALIZED_NAME_S_LOWER_CASE = "s";

    @SerializedName(SERIALIZED_NAME_S_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String sLowerCase;

    public static final String SERIALIZED_NAME_O_LOWER_CASE = "o";

    @SerializedName(SERIALIZED_NAME_O_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String oLowerCase;

    public static final String SERIALIZED_NAME_H_LOWER_CASE = "h";

    @SerializedName(SERIALIZED_NAME_H_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String hLowerCase;

    public static final String SERIALIZED_NAME_L_LOWER_CASE = "l";

    @SerializedName(SERIALIZED_NAME_L_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String lLowerCase;

    public static final String SERIALIZED_NAME_C_LOWER_CASE = "c";

    @SerializedName(SERIALIZED_NAME_C_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String cLowerCase;

    public static final String SERIALIZED_NAME_V = "V";

    @SerializedName(SERIALIZED_NAME_V)
    @jakarta.annotation.Nullable
    private String V;

    public static final String SERIALIZED_NAME_A = "A";

    @SerializedName(SERIALIZED_NAME_A)
    @jakarta.annotation.Nullable
    private String A;

    public static final String SERIALIZED_NAME_P = "P";

    @SerializedName(SERIALIZED_NAME_P)
    @jakarta.annotation.Nullable
    private String P;

    public static final String SERIALIZED_NAME_P_LOWER_CASE = "p";

    @SerializedName(SERIALIZED_NAME_P_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String pLowerCase;

    public static final String SERIALIZED_NAME_Q = "Q";

    @SerializedName(SERIALIZED_NAME_Q)
    @jakarta.annotation.Nullable
    private String Q;

    public static final String SERIALIZED_NAME_F = "F";

    @SerializedName(SERIALIZED_NAME_F)
    @jakarta.annotation.Nullable
    private String F;

    public static final String SERIALIZED_NAME_L = "L";

    @SerializedName(SERIALIZED_NAME_L)
    @jakarta.annotation.Nullable
    private String L;

    public static final String SERIALIZED_NAME_N_LOWER_CASE = "n";

    @SerializedName(SERIALIZED_NAME_N_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long nLowerCase;

    public static final String SERIALIZED_NAME_BO = "bo";

    @SerializedName(SERIALIZED_NAME_BO)
    @jakarta.annotation.Nullable
    private String bo;

    public static final String SERIALIZED_NAME_AO = "ao";

    @SerializedName(SERIALIZED_NAME_AO)
    @jakarta.annotation.Nullable
    private String ao;

    public static final String SERIALIZED_NAME_BQ = "bq";

    @SerializedName(SERIALIZED_NAME_BQ)
    @jakarta.annotation.Nullable
    private String bq;

    public static final String SERIALIZED_NAME_AQ = "aq";

    @SerializedName(SERIALIZED_NAME_AQ)
    @jakarta.annotation.Nullable
    private String aq;

    public static final String SERIALIZED_NAME_B_LOWER_CASE = "b";

    @SerializedName(SERIALIZED_NAME_B_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String bLowerCase;

    public static final String SERIALIZED_NAME_A_LOWER_CASE = "a";

    @SerializedName(SERIALIZED_NAME_A_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String aLowerCase;

    public static final String SERIALIZED_NAME_D_LOWER_CASE = "d";

    @SerializedName(SERIALIZED_NAME_D_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String dLowerCase;

    public static final String SERIALIZED_NAME_T_LOWER_CASE = "t";

    @SerializedName(SERIALIZED_NAME_T_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String tLowerCase;

    public static final String SERIALIZED_NAME_G_LOWER_CASE = "g";

    @SerializedName(SERIALIZED_NAME_G_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String gLowerCase;

    public static final String SERIALIZED_NAME_V_LOWER_CASE = "v";

    @SerializedName(SERIALIZED_NAME_V_LOWER_CASE)
    @jakarta.annotation.Nullable
    private String vLowerCase;

    public static final String SERIALIZED_NAME_VO = "vo";

    @SerializedName(SERIALIZED_NAME_VO)
    @jakarta.annotation.Nullable
    private String vo;

    public static final String SERIALIZED_NAME_MP = "mp";

    @SerializedName(SERIALIZED_NAME_MP)
    @jakarta.annotation.Nullable
    private String mp;

    public static final String SERIALIZED_NAME_HL = "hl";

    @SerializedName(SERIALIZED_NAME_HL)
    @jakarta.annotation.Nullable
    private String hl;

    public static final String SERIALIZED_NAME_LL = "ll";

    @SerializedName(SERIALIZED_NAME_LL)
    @jakarta.annotation.Nullable
    private String ll;

    public static final String SERIALIZED_NAME_EEP = "eep";

    @SerializedName(SERIALIZED_NAME_EEP)
    @jakarta.annotation.Nullable
    private String eep;

    public Ticker24HourResponse() {}

    public Ticker24HourResponse eLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
        return this;
    }

    /**
     * Get eLowerCase
     *
     * @return eLowerCase
     */
    @jakarta.annotation.Nullable
    public String geteLowerCase() {
        return eLowerCase;
    }

    public void seteLowerCase(@jakarta.annotation.Nullable String eLowerCase) {
        this.eLowerCase = eLowerCase;
    }

    public Ticker24HourResponse E(@jakarta.annotation.Nullable Long E) {
        this.E = E;
        return this;
    }

    /**
     * Get E
     *
     * @return E
     */
    @jakarta.annotation.Nullable
    public Long getE() {
        return E;
    }

    public void setE(@jakarta.annotation.Nullable Long E) {
        this.E = E;
    }

    public Ticker24HourResponse T(@jakarta.annotation.Nullable Long T) {
        this.T = T;
        return this;
    }

    /**
     * Get T
     *
     * @return T
     */
    @jakarta.annotation.Nullable
    public Long getT() {
        return T;
    }

    public void setT(@jakarta.annotation.Nullable Long T) {
        this.T = T;
    }

    public Ticker24HourResponse sLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
        return this;
    }

    /**
     * Get sLowerCase
     *
     * @return sLowerCase
     */
    @jakarta.annotation.Nullable
    public String getsLowerCase() {
        return sLowerCase;
    }

    public void setsLowerCase(@jakarta.annotation.Nullable String sLowerCase) {
        this.sLowerCase = sLowerCase;
    }

    public Ticker24HourResponse oLowerCase(@jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
        return this;
    }

    /**
     * Get oLowerCase
     *
     * @return oLowerCase
     */
    @jakarta.annotation.Nullable
    public String getoLowerCase() {
        return oLowerCase;
    }

    public void setoLowerCase(@jakarta.annotation.Nullable String oLowerCase) {
        this.oLowerCase = oLowerCase;
    }

    public Ticker24HourResponse hLowerCase(@jakarta.annotation.Nullable String hLowerCase) {
        this.hLowerCase = hLowerCase;
        return this;
    }

    /**
     * Get hLowerCase
     *
     * @return hLowerCase
     */
    @jakarta.annotation.Nullable
    public String gethLowerCase() {
        return hLowerCase;
    }

    public void sethLowerCase(@jakarta.annotation.Nullable String hLowerCase) {
        this.hLowerCase = hLowerCase;
    }

    public Ticker24HourResponse lLowerCase(@jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
        return this;
    }

    /**
     * Get lLowerCase
     *
     * @return lLowerCase
     */
    @jakarta.annotation.Nullable
    public String getlLowerCase() {
        return lLowerCase;
    }

    public void setlLowerCase(@jakarta.annotation.Nullable String lLowerCase) {
        this.lLowerCase = lLowerCase;
    }

    public Ticker24HourResponse cLowerCase(@jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
        return this;
    }

    /**
     * Get cLowerCase
     *
     * @return cLowerCase
     */
    @jakarta.annotation.Nullable
    public String getcLowerCase() {
        return cLowerCase;
    }

    public void setcLowerCase(@jakarta.annotation.Nullable String cLowerCase) {
        this.cLowerCase = cLowerCase;
    }

    public Ticker24HourResponse V(@jakarta.annotation.Nullable String V) {
        this.V = V;
        return this;
    }

    /**
     * Get V
     *
     * @return V
     */
    @jakarta.annotation.Nullable
    public String getV() {
        return V;
    }

    public void setV(@jakarta.annotation.Nullable String V) {
        this.V = V;
    }

    public Ticker24HourResponse A(@jakarta.annotation.Nullable String A) {
        this.A = A;
        return this;
    }

    /**
     * Get A
     *
     * @return A
     */
    @jakarta.annotation.Nullable
    public String getA() {
        return A;
    }

    public void setA(@jakarta.annotation.Nullable String A) {
        this.A = A;
    }

    public Ticker24HourResponse P(@jakarta.annotation.Nullable String P) {
        this.P = P;
        return this;
    }

    /**
     * Get P
     *
     * @return P
     */
    @jakarta.annotation.Nullable
    public String getP() {
        return P;
    }

    public void setP(@jakarta.annotation.Nullable String P) {
        this.P = P;
    }

    public Ticker24HourResponse pLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
        return this;
    }

    /**
     * Get pLowerCase
     *
     * @return pLowerCase
     */
    @jakarta.annotation.Nullable
    public String getpLowerCase() {
        return pLowerCase;
    }

    public void setpLowerCase(@jakarta.annotation.Nullable String pLowerCase) {
        this.pLowerCase = pLowerCase;
    }

    public Ticker24HourResponse Q(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
        return this;
    }

    /**
     * Get Q
     *
     * @return Q
     */
    @jakarta.annotation.Nullable
    public String getQ() {
        return Q;
    }

    public void setQ(@jakarta.annotation.Nullable String Q) {
        this.Q = Q;
    }

    public Ticker24HourResponse F(@jakarta.annotation.Nullable String F) {
        this.F = F;
        return this;
    }

    /**
     * Get F
     *
     * @return F
     */
    @jakarta.annotation.Nullable
    public String getF() {
        return F;
    }

    public void setF(@jakarta.annotation.Nullable String F) {
        this.F = F;
    }

    public Ticker24HourResponse L(@jakarta.annotation.Nullable String L) {
        this.L = L;
        return this;
    }

    /**
     * Get L
     *
     * @return L
     */
    @jakarta.annotation.Nullable
    public String getL() {
        return L;
    }

    public void setL(@jakarta.annotation.Nullable String L) {
        this.L = L;
    }

    public Ticker24HourResponse nLowerCase(@jakarta.annotation.Nullable Long nLowerCase) {
        this.nLowerCase = nLowerCase;
        return this;
    }

    /**
     * Get nLowerCase
     *
     * @return nLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getnLowerCase() {
        return nLowerCase;
    }

    public void setnLowerCase(@jakarta.annotation.Nullable Long nLowerCase) {
        this.nLowerCase = nLowerCase;
    }

    public Ticker24HourResponse bo(@jakarta.annotation.Nullable String bo) {
        this.bo = bo;
        return this;
    }

    /**
     * Get bo
     *
     * @return bo
     */
    @jakarta.annotation.Nullable
    public String getBo() {
        return bo;
    }

    public void setBo(@jakarta.annotation.Nullable String bo) {
        this.bo = bo;
    }

    public Ticker24HourResponse ao(@jakarta.annotation.Nullable String ao) {
        this.ao = ao;
        return this;
    }

    /**
     * Get ao
     *
     * @return ao
     */
    @jakarta.annotation.Nullable
    public String getAo() {
        return ao;
    }

    public void setAo(@jakarta.annotation.Nullable String ao) {
        this.ao = ao;
    }

    public Ticker24HourResponse bq(@jakarta.annotation.Nullable String bq) {
        this.bq = bq;
        return this;
    }

    /**
     * Get bq
     *
     * @return bq
     */
    @jakarta.annotation.Nullable
    public String getBq() {
        return bq;
    }

    public void setBq(@jakarta.annotation.Nullable String bq) {
        this.bq = bq;
    }

    public Ticker24HourResponse aq(@jakarta.annotation.Nullable String aq) {
        this.aq = aq;
        return this;
    }

    /**
     * Get aq
     *
     * @return aq
     */
    @jakarta.annotation.Nullable
    public String getAq() {
        return aq;
    }

    public void setAq(@jakarta.annotation.Nullable String aq) {
        this.aq = aq;
    }

    public Ticker24HourResponse bLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
        return this;
    }

    /**
     * Get bLowerCase
     *
     * @return bLowerCase
     */
    @jakarta.annotation.Nullable
    public String getbLowerCase() {
        return bLowerCase;
    }

    public void setbLowerCase(@jakarta.annotation.Nullable String bLowerCase) {
        this.bLowerCase = bLowerCase;
    }

    public Ticker24HourResponse aLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
        return this;
    }

    /**
     * Get aLowerCase
     *
     * @return aLowerCase
     */
    @jakarta.annotation.Nullable
    public String getaLowerCase() {
        return aLowerCase;
    }

    public void setaLowerCase(@jakarta.annotation.Nullable String aLowerCase) {
        this.aLowerCase = aLowerCase;
    }

    public Ticker24HourResponse dLowerCase(@jakarta.annotation.Nullable String dLowerCase) {
        this.dLowerCase = dLowerCase;
        return this;
    }

    /**
     * Get dLowerCase
     *
     * @return dLowerCase
     */
    @jakarta.annotation.Nullable
    public String getdLowerCase() {
        return dLowerCase;
    }

    public void setdLowerCase(@jakarta.annotation.Nullable String dLowerCase) {
        this.dLowerCase = dLowerCase;
    }

    public Ticker24HourResponse tLowerCase(@jakarta.annotation.Nullable String tLowerCase) {
        this.tLowerCase = tLowerCase;
        return this;
    }

    /**
     * Get tLowerCase
     *
     * @return tLowerCase
     */
    @jakarta.annotation.Nullable
    public String gettLowerCase() {
        return tLowerCase;
    }

    public void settLowerCase(@jakarta.annotation.Nullable String tLowerCase) {
        this.tLowerCase = tLowerCase;
    }

    public Ticker24HourResponse gLowerCase(@jakarta.annotation.Nullable String gLowerCase) {
        this.gLowerCase = gLowerCase;
        return this;
    }

    /**
     * Get gLowerCase
     *
     * @return gLowerCase
     */
    @jakarta.annotation.Nullable
    public String getgLowerCase() {
        return gLowerCase;
    }

    public void setgLowerCase(@jakarta.annotation.Nullable String gLowerCase) {
        this.gLowerCase = gLowerCase;
    }

    public Ticker24HourResponse vLowerCase(@jakarta.annotation.Nullable String vLowerCase) {
        this.vLowerCase = vLowerCase;
        return this;
    }

    /**
     * Get vLowerCase
     *
     * @return vLowerCase
     */
    @jakarta.annotation.Nullable
    public String getvLowerCase() {
        return vLowerCase;
    }

    public void setvLowerCase(@jakarta.annotation.Nullable String vLowerCase) {
        this.vLowerCase = vLowerCase;
    }

    public Ticker24HourResponse vo(@jakarta.annotation.Nullable String vo) {
        this.vo = vo;
        return this;
    }

    /**
     * Get vo
     *
     * @return vo
     */
    @jakarta.annotation.Nullable
    public String getVo() {
        return vo;
    }

    public void setVo(@jakarta.annotation.Nullable String vo) {
        this.vo = vo;
    }

    public Ticker24HourResponse mp(@jakarta.annotation.Nullable String mp) {
        this.mp = mp;
        return this;
    }

    /**
     * Get mp
     *
     * @return mp
     */
    @jakarta.annotation.Nullable
    public String getMp() {
        return mp;
    }

    public void setMp(@jakarta.annotation.Nullable String mp) {
        this.mp = mp;
    }

    public Ticker24HourResponse hl(@jakarta.annotation.Nullable String hl) {
        this.hl = hl;
        return this;
    }

    /**
     * Get hl
     *
     * @return hl
     */
    @jakarta.annotation.Nullable
    public String getHl() {
        return hl;
    }

    public void setHl(@jakarta.annotation.Nullable String hl) {
        this.hl = hl;
    }

    public Ticker24HourResponse ll(@jakarta.annotation.Nullable String ll) {
        this.ll = ll;
        return this;
    }

    /**
     * Get ll
     *
     * @return ll
     */
    @jakarta.annotation.Nullable
    public String getLl() {
        return ll;
    }

    public void setLl(@jakarta.annotation.Nullable String ll) {
        this.ll = ll;
    }

    public Ticker24HourResponse eep(@jakarta.annotation.Nullable String eep) {
        this.eep = eep;
        return this;
    }

    /**
     * Get eep
     *
     * @return eep
     */
    @jakarta.annotation.Nullable
    public String getEep() {
        return eep;
    }

    public void setEep(@jakarta.annotation.Nullable String eep) {
        this.eep = eep;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Ticker24HourResponse ticker24HourResponse = (Ticker24HourResponse) o;
        return Objects.equals(this.eLowerCase, ticker24HourResponse.eLowerCase)
                && Objects.equals(this.E, ticker24HourResponse.E)
                && Objects.equals(this.T, ticker24HourResponse.T)
                && Objects.equals(this.sLowerCase, ticker24HourResponse.sLowerCase)
                && Objects.equals(this.oLowerCase, ticker24HourResponse.oLowerCase)
                && Objects.equals(this.hLowerCase, ticker24HourResponse.hLowerCase)
                && Objects.equals(this.lLowerCase, ticker24HourResponse.lLowerCase)
                && Objects.equals(this.cLowerCase, ticker24HourResponse.cLowerCase)
                && Objects.equals(this.V, ticker24HourResponse.V)
                && Objects.equals(this.A, ticker24HourResponse.A)
                && Objects.equals(this.P, ticker24HourResponse.P)
                && Objects.equals(this.pLowerCase, ticker24HourResponse.pLowerCase)
                && Objects.equals(this.Q, ticker24HourResponse.Q)
                && Objects.equals(this.F, ticker24HourResponse.F)
                && Objects.equals(this.L, ticker24HourResponse.L)
                && Objects.equals(this.nLowerCase, ticker24HourResponse.nLowerCase)
                && Objects.equals(this.bo, ticker24HourResponse.bo)
                && Objects.equals(this.ao, ticker24HourResponse.ao)
                && Objects.equals(this.bq, ticker24HourResponse.bq)
                && Objects.equals(this.aq, ticker24HourResponse.aq)
                && Objects.equals(this.bLowerCase, ticker24HourResponse.bLowerCase)
                && Objects.equals(this.aLowerCase, ticker24HourResponse.aLowerCase)
                && Objects.equals(this.dLowerCase, ticker24HourResponse.dLowerCase)
                && Objects.equals(this.tLowerCase, ticker24HourResponse.tLowerCase)
                && Objects.equals(this.gLowerCase, ticker24HourResponse.gLowerCase)
                && Objects.equals(this.vLowerCase, ticker24HourResponse.vLowerCase)
                && Objects.equals(this.vo, ticker24HourResponse.vo)
                && Objects.equals(this.mp, ticker24HourResponse.mp)
                && Objects.equals(this.hl, ticker24HourResponse.hl)
                && Objects.equals(this.ll, ticker24HourResponse.ll)
                && Objects.equals(this.eep, ticker24HourResponse.eep);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                eLowerCase,
                E,
                T,
                sLowerCase,
                oLowerCase,
                hLowerCase,
                lLowerCase,
                cLowerCase,
                V,
                A,
                P,
                pLowerCase,
                Q,
                F,
                L,
                nLowerCase,
                bo,
                ao,
                bq,
                aq,
                bLowerCase,
                aLowerCase,
                dLowerCase,
                tLowerCase,
                gLowerCase,
                vLowerCase,
                vo,
                mp,
                hl,
                ll,
                eep);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Ticker24HourResponse {\n");
        sb.append("		eLowerCase: ").append(toIndentedString(eLowerCase)).append("\n");
        sb.append("		E: ").append(toIndentedString(E)).append("\n");
        sb.append("		T: ").append(toIndentedString(T)).append("\n");
        sb.append("		sLowerCase: ").append(toIndentedString(sLowerCase)).append("\n");
        sb.append("		oLowerCase: ").append(toIndentedString(oLowerCase)).append("\n");
        sb.append("		hLowerCase: ").append(toIndentedString(hLowerCase)).append("\n");
        sb.append("		lLowerCase: ").append(toIndentedString(lLowerCase)).append("\n");
        sb.append("		cLowerCase: ").append(toIndentedString(cLowerCase)).append("\n");
        sb.append("		V: ").append(toIndentedString(V)).append("\n");
        sb.append("		A: ").append(toIndentedString(A)).append("\n");
        sb.append("		P: ").append(toIndentedString(P)).append("\n");
        sb.append("		pLowerCase: ").append(toIndentedString(pLowerCase)).append("\n");
        sb.append("		Q: ").append(toIndentedString(Q)).append("\n");
        sb.append("		F: ").append(toIndentedString(F)).append("\n");
        sb.append("		L: ").append(toIndentedString(L)).append("\n");
        sb.append("		nLowerCase: ").append(toIndentedString(nLowerCase)).append("\n");
        sb.append("		bo: ").append(toIndentedString(bo)).append("\n");
        sb.append("		ao: ").append(toIndentedString(ao)).append("\n");
        sb.append("		bq: ").append(toIndentedString(bq)).append("\n");
        sb.append("		aq: ").append(toIndentedString(aq)).append("\n");
        sb.append("		bLowerCase: ").append(toIndentedString(bLowerCase)).append("\n");
        sb.append("		aLowerCase: ").append(toIndentedString(aLowerCase)).append("\n");
        sb.append("		dLowerCase: ").append(toIndentedString(dLowerCase)).append("\n");
        sb.append("		tLowerCase: ").append(toIndentedString(tLowerCase)).append("\n");
        sb.append("		gLowerCase: ").append(toIndentedString(gLowerCase)).append("\n");
        sb.append("		vLowerCase: ").append(toIndentedString(vLowerCase)).append("\n");
        sb.append("		vo: ").append(toIndentedString(vo)).append("\n");
        sb.append("		mp: ").append(toIndentedString(mp)).append("\n");
        sb.append("		hl: ").append(toIndentedString(hl)).append("\n");
        sb.append("		ll: ").append(toIndentedString(ll)).append("\n");
        sb.append("		eep: ").append(toIndentedString(eep)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        String eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            String eLowerCaseValueAsString = eLowerCaseValue.toString();
            valMap.put("eLowerCase", eLowerCaseValueAsString);
        }
        Long EValue = getE();
        if (EValue != null) {
            String EValueAsString = EValue.toString();
            valMap.put("E", EValueAsString);
        }
        Long TValue = getT();
        if (TValue != null) {
            String TValueAsString = TValue.toString();
            valMap.put("T", TValueAsString);
        }
        String sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            String sLowerCaseValueAsString = sLowerCaseValue.toString();
            valMap.put("sLowerCase", sLowerCaseValueAsString);
        }
        String oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            String oLowerCaseValueAsString = oLowerCaseValue.toString();
            valMap.put("oLowerCase", oLowerCaseValueAsString);
        }
        String hLowerCaseValue = gethLowerCase();
        if (hLowerCaseValue != null) {
            String hLowerCaseValueAsString = hLowerCaseValue.toString();
            valMap.put("hLowerCase", hLowerCaseValueAsString);
        }
        String lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            String lLowerCaseValueAsString = lLowerCaseValue.toString();
            valMap.put("lLowerCase", lLowerCaseValueAsString);
        }
        String cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            String cLowerCaseValueAsString = cLowerCaseValue.toString();
            valMap.put("cLowerCase", cLowerCaseValueAsString);
        }
        String VValue = getV();
        if (VValue != null) {
            String VValueAsString = VValue.toString();
            valMap.put("V", VValueAsString);
        }
        String AValue = getA();
        if (AValue != null) {
            String AValueAsString = AValue.toString();
            valMap.put("A", AValueAsString);
        }
        String PValue = getP();
        if (PValue != null) {
            String PValueAsString = PValue.toString();
            valMap.put("P", PValueAsString);
        }
        String pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            String pLowerCaseValueAsString = pLowerCaseValue.toString();
            valMap.put("pLowerCase", pLowerCaseValueAsString);
        }
        String QValue = getQ();
        if (QValue != null) {
            String QValueAsString = QValue.toString();
            valMap.put("Q", QValueAsString);
        }
        String FValue = getF();
        if (FValue != null) {
            String FValueAsString = FValue.toString();
            valMap.put("F", FValueAsString);
        }
        String LValue = getL();
        if (LValue != null) {
            String LValueAsString = LValue.toString();
            valMap.put("L", LValueAsString);
        }
        Long nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            String nLowerCaseValueAsString = nLowerCaseValue.toString();
            valMap.put("nLowerCase", nLowerCaseValueAsString);
        }
        String boValue = getBo();
        if (boValue != null) {
            String boValueAsString = boValue.toString();
            valMap.put("bo", boValueAsString);
        }
        String aoValue = getAo();
        if (aoValue != null) {
            String aoValueAsString = aoValue.toString();
            valMap.put("ao", aoValueAsString);
        }
        String bqValue = getBq();
        if (bqValue != null) {
            String bqValueAsString = bqValue.toString();
            valMap.put("bq", bqValueAsString);
        }
        String aqValue = getAq();
        if (aqValue != null) {
            String aqValueAsString = aqValue.toString();
            valMap.put("aq", aqValueAsString);
        }
        String bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            String bLowerCaseValueAsString = bLowerCaseValue.toString();
            valMap.put("bLowerCase", bLowerCaseValueAsString);
        }
        String aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            String aLowerCaseValueAsString = aLowerCaseValue.toString();
            valMap.put("aLowerCase", aLowerCaseValueAsString);
        }
        String dLowerCaseValue = getdLowerCase();
        if (dLowerCaseValue != null) {
            String dLowerCaseValueAsString = dLowerCaseValue.toString();
            valMap.put("dLowerCase", dLowerCaseValueAsString);
        }
        String tLowerCaseValue = gettLowerCase();
        if (tLowerCaseValue != null) {
            String tLowerCaseValueAsString = tLowerCaseValue.toString();
            valMap.put("tLowerCase", tLowerCaseValueAsString);
        }
        String gLowerCaseValue = getgLowerCase();
        if (gLowerCaseValue != null) {
            String gLowerCaseValueAsString = gLowerCaseValue.toString();
            valMap.put("gLowerCase", gLowerCaseValueAsString);
        }
        String vLowerCaseValue = getvLowerCase();
        if (vLowerCaseValue != null) {
            String vLowerCaseValueAsString = vLowerCaseValue.toString();
            valMap.put("vLowerCase", vLowerCaseValueAsString);
        }
        String voValue = getVo();
        if (voValue != null) {
            String voValueAsString = voValue.toString();
            valMap.put("vo", voValueAsString);
        }
        String mpValue = getMp();
        if (mpValue != null) {
            String mpValueAsString = mpValue.toString();
            valMap.put("mp", mpValueAsString);
        }
        String hlValue = getHl();
        if (hlValue != null) {
            String hlValueAsString = hlValue.toString();
            valMap.put("hl", hlValueAsString);
        }
        String llValue = getLl();
        if (llValue != null) {
            String llValueAsString = llValue.toString();
            valMap.put("ll", llValueAsString);
        }
        String eepValue = getEep();
        if (eepValue != null) {
            String eepValueAsString = eepValue.toString();
            valMap.put("eep", eepValueAsString);
        }

        valMap.put("timestamp", getTimestamp());
        return asciiEncode(
                valMap.keySet().stream()
                        .map(key -> key + "=" + valMap.get(key))
                        .collect(Collectors.joining("&")));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object eLowerCaseValue = geteLowerCase();
        if (eLowerCaseValue != null) {
            valMap.put("eLowerCase", eLowerCaseValue);
        }
        Object EValue = getE();
        if (EValue != null) {
            valMap.put("E", EValue);
        }
        Object TValue = getT();
        if (TValue != null) {
            valMap.put("T", TValue);
        }
        Object sLowerCaseValue = getsLowerCase();
        if (sLowerCaseValue != null) {
            valMap.put("sLowerCase", sLowerCaseValue);
        }
        Object oLowerCaseValue = getoLowerCase();
        if (oLowerCaseValue != null) {
            valMap.put("oLowerCase", oLowerCaseValue);
        }
        Object hLowerCaseValue = gethLowerCase();
        if (hLowerCaseValue != null) {
            valMap.put("hLowerCase", hLowerCaseValue);
        }
        Object lLowerCaseValue = getlLowerCase();
        if (lLowerCaseValue != null) {
            valMap.put("lLowerCase", lLowerCaseValue);
        }
        Object cLowerCaseValue = getcLowerCase();
        if (cLowerCaseValue != null) {
            valMap.put("cLowerCase", cLowerCaseValue);
        }
        Object VValue = getV();
        if (VValue != null) {
            valMap.put("V", VValue);
        }
        Object AValue = getA();
        if (AValue != null) {
            valMap.put("A", AValue);
        }
        Object PValue = getP();
        if (PValue != null) {
            valMap.put("P", PValue);
        }
        Object pLowerCaseValue = getpLowerCase();
        if (pLowerCaseValue != null) {
            valMap.put("pLowerCase", pLowerCaseValue);
        }
        Object QValue = getQ();
        if (QValue != null) {
            valMap.put("Q", QValue);
        }
        Object FValue = getF();
        if (FValue != null) {
            valMap.put("F", FValue);
        }
        Object LValue = getL();
        if (LValue != null) {
            valMap.put("L", LValue);
        }
        Object nLowerCaseValue = getnLowerCase();
        if (nLowerCaseValue != null) {
            valMap.put("nLowerCase", nLowerCaseValue);
        }
        Object boValue = getBo();
        if (boValue != null) {
            valMap.put("bo", boValue);
        }
        Object aoValue = getAo();
        if (aoValue != null) {
            valMap.put("ao", aoValue);
        }
        Object bqValue = getBq();
        if (bqValue != null) {
            valMap.put("bq", bqValue);
        }
        Object aqValue = getAq();
        if (aqValue != null) {
            valMap.put("aq", aqValue);
        }
        Object bLowerCaseValue = getbLowerCase();
        if (bLowerCaseValue != null) {
            valMap.put("bLowerCase", bLowerCaseValue);
        }
        Object aLowerCaseValue = getaLowerCase();
        if (aLowerCaseValue != null) {
            valMap.put("aLowerCase", aLowerCaseValue);
        }
        Object dLowerCaseValue = getdLowerCase();
        if (dLowerCaseValue != null) {
            valMap.put("dLowerCase", dLowerCaseValue);
        }
        Object tLowerCaseValue = gettLowerCase();
        if (tLowerCaseValue != null) {
            valMap.put("tLowerCase", tLowerCaseValue);
        }
        Object gLowerCaseValue = getgLowerCase();
        if (gLowerCaseValue != null) {
            valMap.put("gLowerCase", gLowerCaseValue);
        }
        Object vLowerCaseValue = getvLowerCase();
        if (vLowerCaseValue != null) {
            valMap.put("vLowerCase", vLowerCaseValue);
        }
        Object voValue = getVo();
        if (voValue != null) {
            valMap.put("vo", voValue);
        }
        Object mpValue = getMp();
        if (mpValue != null) {
            valMap.put("mp", mpValue);
        }
        Object hlValue = getHl();
        if (hlValue != null) {
            valMap.put("hl", hlValue);
        }
        Object llValue = getLl();
        if (llValue != null) {
            valMap.put("ll", llValue);
        }
        Object eepValue = getEep();
        if (eepValue != null) {
            valMap.put("eep", eepValue);
        }

        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String asciiEncode(String s) {
        return new String(s.getBytes(), StandardCharsets.US_ASCII);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("e");
        openapiFields.add("E");
        openapiFields.add("T");
        openapiFields.add("s");
        openapiFields.add("o");
        openapiFields.add("h");
        openapiFields.add("l");
        openapiFields.add("c");
        openapiFields.add("V");
        openapiFields.add("A");
        openapiFields.add("P");
        openapiFields.add("p");
        openapiFields.add("Q");
        openapiFields.add("F");
        openapiFields.add("L");
        openapiFields.add("n");
        openapiFields.add("bo");
        openapiFields.add("ao");
        openapiFields.add("bq");
        openapiFields.add("aq");
        openapiFields.add("b");
        openapiFields.add("a");
        openapiFields.add("d");
        openapiFields.add("t");
        openapiFields.add("g");
        openapiFields.add("v");
        openapiFields.add("vo");
        openapiFields.add("mp");
        openapiFields.add("hl");
        openapiFields.add("ll");
        openapiFields.add("eep");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to Ticker24HourResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!Ticker24HourResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in Ticker24HourResponse is not found in"
                                        + " the empty JSON string",
                                Ticker24HourResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!Ticker24HourResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `Ticker24HourResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("e") != null && !jsonObj.get("e").isJsonNull())
                && !jsonObj.get("e").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `e` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("e").toString()));
        }
        if ((jsonObj.get("s") != null && !jsonObj.get("s").isJsonNull())
                && !jsonObj.get("s").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `s` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("s").toString()));
        }
        if ((jsonObj.get("o") != null && !jsonObj.get("o").isJsonNull())
                && !jsonObj.get("o").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `o` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("o").toString()));
        }
        if ((jsonObj.get("h") != null && !jsonObj.get("h").isJsonNull())
                && !jsonObj.get("h").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `h` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("h").toString()));
        }
        if ((jsonObj.get("l") != null && !jsonObj.get("l").isJsonNull())
                && !jsonObj.get("l").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `l` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("l").toString()));
        }
        if ((jsonObj.get("c") != null && !jsonObj.get("c").isJsonNull())
                && !jsonObj.get("c").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `c` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("c").toString()));
        }
        if ((jsonObj.get("V") != null && !jsonObj.get("V").isJsonNull())
                && !jsonObj.get("V").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `V` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("V").toString()));
        }
        if ((jsonObj.get("A") != null && !jsonObj.get("A").isJsonNull())
                && !jsonObj.get("A").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `A` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("A").toString()));
        }
        if ((jsonObj.get("P") != null && !jsonObj.get("P").isJsonNull())
                && !jsonObj.get("P").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `P` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("P").toString()));
        }
        if ((jsonObj.get("p") != null && !jsonObj.get("p").isJsonNull())
                && !jsonObj.get("p").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `p` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("p").toString()));
        }
        if ((jsonObj.get("Q") != null && !jsonObj.get("Q").isJsonNull())
                && !jsonObj.get("Q").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `Q` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("Q").toString()));
        }
        if ((jsonObj.get("F") != null && !jsonObj.get("F").isJsonNull())
                && !jsonObj.get("F").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `F` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("F").toString()));
        }
        if ((jsonObj.get("L") != null && !jsonObj.get("L").isJsonNull())
                && !jsonObj.get("L").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `L` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("L").toString()));
        }
        if ((jsonObj.get("bo") != null && !jsonObj.get("bo").isJsonNull())
                && !jsonObj.get("bo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bo` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("bo").toString()));
        }
        if ((jsonObj.get("ao") != null && !jsonObj.get("ao").isJsonNull())
                && !jsonObj.get("ao").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ao` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ao").toString()));
        }
        if ((jsonObj.get("bq") != null && !jsonObj.get("bq").isJsonNull())
                && !jsonObj.get("bq").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bq` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("bq").toString()));
        }
        if ((jsonObj.get("aq") != null && !jsonObj.get("aq").isJsonNull())
                && !jsonObj.get("aq").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `aq` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("aq").toString()));
        }
        if ((jsonObj.get("b") != null && !jsonObj.get("b").isJsonNull())
                && !jsonObj.get("b").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `b` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("b").toString()));
        }
        if ((jsonObj.get("a") != null && !jsonObj.get("a").isJsonNull())
                && !jsonObj.get("a").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `a` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("a").toString()));
        }
        if ((jsonObj.get("d") != null && !jsonObj.get("d").isJsonNull())
                && !jsonObj.get("d").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `d` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("d").toString()));
        }
        if ((jsonObj.get("t") != null && !jsonObj.get("t").isJsonNull())
                && !jsonObj.get("t").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `t` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("t").toString()));
        }
        if ((jsonObj.get("g") != null && !jsonObj.get("g").isJsonNull())
                && !jsonObj.get("g").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `g` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("g").toString()));
        }
        if ((jsonObj.get("v") != null && !jsonObj.get("v").isJsonNull())
                && !jsonObj.get("v").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `v` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("v").toString()));
        }
        if ((jsonObj.get("vo") != null && !jsonObj.get("vo").isJsonNull())
                && !jsonObj.get("vo").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `vo` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("vo").toString()));
        }
        if ((jsonObj.get("mp") != null && !jsonObj.get("mp").isJsonNull())
                && !jsonObj.get("mp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `mp` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("mp").toString()));
        }
        if ((jsonObj.get("hl") != null && !jsonObj.get("hl").isJsonNull())
                && !jsonObj.get("hl").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `hl` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("hl").toString()));
        }
        if ((jsonObj.get("ll") != null && !jsonObj.get("ll").isJsonNull())
                && !jsonObj.get("ll").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ll` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ll").toString()));
        }
        if ((jsonObj.get("eep") != null && !jsonObj.get("eep").isJsonNull())
                && !jsonObj.get("eep").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `eep` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("eep").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!Ticker24HourResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'Ticker24HourResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<Ticker24HourResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(Ticker24HourResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<Ticker24HourResponse>() {
                        @Override
                        public void write(JsonWriter out, Ticker24HourResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public Ticker24HourResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of Ticker24HourResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of Ticker24HourResponse
     * @throws IOException if the JSON string is invalid with respect to Ticker24HourResponse
     */
    public static Ticker24HourResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, Ticker24HourResponse.class);
    }

    /**
     * Convert an instance of Ticker24HourResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
