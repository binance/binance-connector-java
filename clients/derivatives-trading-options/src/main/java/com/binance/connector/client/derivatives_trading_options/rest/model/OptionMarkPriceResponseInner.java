/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** OptionMarkPriceResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OptionMarkPriceResponseInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_MARK_PRICE = "markPrice";

    @SerializedName(SERIALIZED_NAME_MARK_PRICE)
    @jakarta.annotation.Nullable
    private String markPrice;

    public static final String SERIALIZED_NAME_BID_I_V = "bidIV";

    @SerializedName(SERIALIZED_NAME_BID_I_V)
    @jakarta.annotation.Nullable
    private String bidIV;

    public static final String SERIALIZED_NAME_ASK_I_V = "askIV";

    @SerializedName(SERIALIZED_NAME_ASK_I_V)
    @jakarta.annotation.Nullable
    private String askIV;

    public static final String SERIALIZED_NAME_MARK_I_V = "markIV";

    @SerializedName(SERIALIZED_NAME_MARK_I_V)
    @jakarta.annotation.Nullable
    private String markIV;

    public static final String SERIALIZED_NAME_DELTA = "delta";

    @SerializedName(SERIALIZED_NAME_DELTA)
    @jakarta.annotation.Nullable
    private String delta;

    public static final String SERIALIZED_NAME_THETA = "theta";

    @SerializedName(SERIALIZED_NAME_THETA)
    @jakarta.annotation.Nullable
    private String theta;

    public static final String SERIALIZED_NAME_GAMMA = "gamma";

    @SerializedName(SERIALIZED_NAME_GAMMA)
    @jakarta.annotation.Nullable
    private String gamma;

    public static final String SERIALIZED_NAME_VEGA = "vega";

    @SerializedName(SERIALIZED_NAME_VEGA)
    @jakarta.annotation.Nullable
    private String vega;

    public static final String SERIALIZED_NAME_HIGH_PRICE_LIMIT = "highPriceLimit";

    @SerializedName(SERIALIZED_NAME_HIGH_PRICE_LIMIT)
    @jakarta.annotation.Nullable
    private String highPriceLimit;

    public static final String SERIALIZED_NAME_LOW_PRICE_LIMIT = "lowPriceLimit";

    @SerializedName(SERIALIZED_NAME_LOW_PRICE_LIMIT)
    @jakarta.annotation.Nullable
    private String lowPriceLimit;

    public static final String SERIALIZED_NAME_RISK_FREE_INTEREST = "riskFreeInterest";

    @SerializedName(SERIALIZED_NAME_RISK_FREE_INTEREST)
    @jakarta.annotation.Nullable
    private String riskFreeInterest;

    public OptionMarkPriceResponseInner() {}

    public OptionMarkPriceResponseInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public OptionMarkPriceResponseInner markPrice(@jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
        return this;
    }

    /**
     * Get markPrice
     *
     * @return markPrice
     */
    @jakarta.annotation.Nullable
    public String getMarkPrice() {
        return markPrice;
    }

    public void setMarkPrice(@jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
    }

    public OptionMarkPriceResponseInner bidIV(@jakarta.annotation.Nullable String bidIV) {
        this.bidIV = bidIV;
        return this;
    }

    /**
     * Get bidIV
     *
     * @return bidIV
     */
    @jakarta.annotation.Nullable
    public String getBidIV() {
        return bidIV;
    }

    public void setBidIV(@jakarta.annotation.Nullable String bidIV) {
        this.bidIV = bidIV;
    }

    public OptionMarkPriceResponseInner askIV(@jakarta.annotation.Nullable String askIV) {
        this.askIV = askIV;
        return this;
    }

    /**
     * Get askIV
     *
     * @return askIV
     */
    @jakarta.annotation.Nullable
    public String getAskIV() {
        return askIV;
    }

    public void setAskIV(@jakarta.annotation.Nullable String askIV) {
        this.askIV = askIV;
    }

    public OptionMarkPriceResponseInner markIV(@jakarta.annotation.Nullable String markIV) {
        this.markIV = markIV;
        return this;
    }

    /**
     * Get markIV
     *
     * @return markIV
     */
    @jakarta.annotation.Nullable
    public String getMarkIV() {
        return markIV;
    }

    public void setMarkIV(@jakarta.annotation.Nullable String markIV) {
        this.markIV = markIV;
    }

    public OptionMarkPriceResponseInner delta(@jakarta.annotation.Nullable String delta) {
        this.delta = delta;
        return this;
    }

    /**
     * Get delta
     *
     * @return delta
     */
    @jakarta.annotation.Nullable
    public String getDelta() {
        return delta;
    }

    public void setDelta(@jakarta.annotation.Nullable String delta) {
        this.delta = delta;
    }

    public OptionMarkPriceResponseInner theta(@jakarta.annotation.Nullable String theta) {
        this.theta = theta;
        return this;
    }

    /**
     * Get theta
     *
     * @return theta
     */
    @jakarta.annotation.Nullable
    public String getTheta() {
        return theta;
    }

    public void setTheta(@jakarta.annotation.Nullable String theta) {
        this.theta = theta;
    }

    public OptionMarkPriceResponseInner gamma(@jakarta.annotation.Nullable String gamma) {
        this.gamma = gamma;
        return this;
    }

    /**
     * Get gamma
     *
     * @return gamma
     */
    @jakarta.annotation.Nullable
    public String getGamma() {
        return gamma;
    }

    public void setGamma(@jakarta.annotation.Nullable String gamma) {
        this.gamma = gamma;
    }

    public OptionMarkPriceResponseInner vega(@jakarta.annotation.Nullable String vega) {
        this.vega = vega;
        return this;
    }

    /**
     * Get vega
     *
     * @return vega
     */
    @jakarta.annotation.Nullable
    public String getVega() {
        return vega;
    }

    public void setVega(@jakarta.annotation.Nullable String vega) {
        this.vega = vega;
    }

    public OptionMarkPriceResponseInner highPriceLimit(
            @jakarta.annotation.Nullable String highPriceLimit) {
        this.highPriceLimit = highPriceLimit;
        return this;
    }

    /**
     * Get highPriceLimit
     *
     * @return highPriceLimit
     */
    @jakarta.annotation.Nullable
    public String getHighPriceLimit() {
        return highPriceLimit;
    }

    public void setHighPriceLimit(@jakarta.annotation.Nullable String highPriceLimit) {
        this.highPriceLimit = highPriceLimit;
    }

    public OptionMarkPriceResponseInner lowPriceLimit(
            @jakarta.annotation.Nullable String lowPriceLimit) {
        this.lowPriceLimit = lowPriceLimit;
        return this;
    }

    /**
     * Get lowPriceLimit
     *
     * @return lowPriceLimit
     */
    @jakarta.annotation.Nullable
    public String getLowPriceLimit() {
        return lowPriceLimit;
    }

    public void setLowPriceLimit(@jakarta.annotation.Nullable String lowPriceLimit) {
        this.lowPriceLimit = lowPriceLimit;
    }

    public OptionMarkPriceResponseInner riskFreeInterest(
            @jakarta.annotation.Nullable String riskFreeInterest) {
        this.riskFreeInterest = riskFreeInterest;
        return this;
    }

    /**
     * Get riskFreeInterest
     *
     * @return riskFreeInterest
     */
    @jakarta.annotation.Nullable
    public String getRiskFreeInterest() {
        return riskFreeInterest;
    }

    public void setRiskFreeInterest(@jakarta.annotation.Nullable String riskFreeInterest) {
        this.riskFreeInterest = riskFreeInterest;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OptionMarkPriceResponseInner optionMarkPriceResponseInner =
                (OptionMarkPriceResponseInner) o;
        return Objects.equals(this.symbol, optionMarkPriceResponseInner.symbol)
                && Objects.equals(this.markPrice, optionMarkPriceResponseInner.markPrice)
                && Objects.equals(this.bidIV, optionMarkPriceResponseInner.bidIV)
                && Objects.equals(this.askIV, optionMarkPriceResponseInner.askIV)
                && Objects.equals(this.markIV, optionMarkPriceResponseInner.markIV)
                && Objects.equals(this.delta, optionMarkPriceResponseInner.delta)
                && Objects.equals(this.theta, optionMarkPriceResponseInner.theta)
                && Objects.equals(this.gamma, optionMarkPriceResponseInner.gamma)
                && Objects.equals(this.vega, optionMarkPriceResponseInner.vega)
                && Objects.equals(this.highPriceLimit, optionMarkPriceResponseInner.highPriceLimit)
                && Objects.equals(this.lowPriceLimit, optionMarkPriceResponseInner.lowPriceLimit)
                && Objects.equals(
                        this.riskFreeInterest, optionMarkPriceResponseInner.riskFreeInterest);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                markPrice,
                bidIV,
                askIV,
                markIV,
                delta,
                theta,
                gamma,
                vega,
                highPriceLimit,
                lowPriceLimit,
                riskFreeInterest);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OptionMarkPriceResponseInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		markPrice: ").append(toIndentedString(markPrice)).append("\n");
        sb.append("		bidIV: ").append(toIndentedString(bidIV)).append("\n");
        sb.append("		askIV: ").append(toIndentedString(askIV)).append("\n");
        sb.append("		markIV: ").append(toIndentedString(markIV)).append("\n");
        sb.append("		delta: ").append(toIndentedString(delta)).append("\n");
        sb.append("		theta: ").append(toIndentedString(theta)).append("\n");
        sb.append("		gamma: ").append(toIndentedString(gamma)).append("\n");
        sb.append("		vega: ").append(toIndentedString(vega)).append("\n");
        sb.append("		highPriceLimit: ").append(toIndentedString(highPriceLimit)).append("\n");
        sb.append("		lowPriceLimit: ").append(toIndentedString(lowPriceLimit)).append("\n");
        sb.append("		riskFreeInterest: ").append(toIndentedString(riskFreeInterest)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object markPriceValue = getMarkPrice();
        String markPriceValueAsString = "";
        markPriceValueAsString = markPriceValue.toString();
        sb.append("markPrice=").append(urlEncode(markPriceValueAsString)).append("");
        Object bidIVValue = getBidIV();
        String bidIVValueAsString = "";
        bidIVValueAsString = bidIVValue.toString();
        sb.append("bidIV=").append(urlEncode(bidIVValueAsString)).append("");
        Object askIVValue = getAskIV();
        String askIVValueAsString = "";
        askIVValueAsString = askIVValue.toString();
        sb.append("askIV=").append(urlEncode(askIVValueAsString)).append("");
        Object markIVValue = getMarkIV();
        String markIVValueAsString = "";
        markIVValueAsString = markIVValue.toString();
        sb.append("markIV=").append(urlEncode(markIVValueAsString)).append("");
        Object deltaValue = getDelta();
        String deltaValueAsString = "";
        deltaValueAsString = deltaValue.toString();
        sb.append("delta=").append(urlEncode(deltaValueAsString)).append("");
        Object thetaValue = getTheta();
        String thetaValueAsString = "";
        thetaValueAsString = thetaValue.toString();
        sb.append("theta=").append(urlEncode(thetaValueAsString)).append("");
        Object gammaValue = getGamma();
        String gammaValueAsString = "";
        gammaValueAsString = gammaValue.toString();
        sb.append("gamma=").append(urlEncode(gammaValueAsString)).append("");
        Object vegaValue = getVega();
        String vegaValueAsString = "";
        vegaValueAsString = vegaValue.toString();
        sb.append("vega=").append(urlEncode(vegaValueAsString)).append("");
        Object highPriceLimitValue = getHighPriceLimit();
        String highPriceLimitValueAsString = "";
        highPriceLimitValueAsString = highPriceLimitValue.toString();
        sb.append("highPriceLimit=").append(urlEncode(highPriceLimitValueAsString)).append("");
        Object lowPriceLimitValue = getLowPriceLimit();
        String lowPriceLimitValueAsString = "";
        lowPriceLimitValueAsString = lowPriceLimitValue.toString();
        sb.append("lowPriceLimit=").append(urlEncode(lowPriceLimitValueAsString)).append("");
        Object riskFreeInterestValue = getRiskFreeInterest();
        String riskFreeInterestValueAsString = "";
        riskFreeInterestValueAsString = riskFreeInterestValue.toString();
        sb.append("riskFreeInterest=").append(urlEncode(riskFreeInterestValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("markPrice");
        openapiFields.add("bidIV");
        openapiFields.add("askIV");
        openapiFields.add("markIV");
        openapiFields.add("delta");
        openapiFields.add("theta");
        openapiFields.add("gamma");
        openapiFields.add("vega");
        openapiFields.add("highPriceLimit");
        openapiFields.add("lowPriceLimit");
        openapiFields.add("riskFreeInterest");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OptionMarkPriceResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OptionMarkPriceResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OptionMarkPriceResponseInner is not"
                                        + " found in the empty JSON string",
                                OptionMarkPriceResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OptionMarkPriceResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OptionMarkPriceResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("markPrice") != null && !jsonObj.get("markPrice").isJsonNull())
                && !jsonObj.get("markPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `markPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("markPrice").toString()));
        }
        if ((jsonObj.get("bidIV") != null && !jsonObj.get("bidIV").isJsonNull())
                && !jsonObj.get("bidIV").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bidIV` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("bidIV").toString()));
        }
        if ((jsonObj.get("askIV") != null && !jsonObj.get("askIV").isJsonNull())
                && !jsonObj.get("askIV").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `askIV` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("askIV").toString()));
        }
        if ((jsonObj.get("markIV") != null && !jsonObj.get("markIV").isJsonNull())
                && !jsonObj.get("markIV").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `markIV` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("markIV").toString()));
        }
        if ((jsonObj.get("delta") != null && !jsonObj.get("delta").isJsonNull())
                && !jsonObj.get("delta").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `delta` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("delta").toString()));
        }
        if ((jsonObj.get("theta") != null && !jsonObj.get("theta").isJsonNull())
                && !jsonObj.get("theta").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `theta` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("theta").toString()));
        }
        if ((jsonObj.get("gamma") != null && !jsonObj.get("gamma").isJsonNull())
                && !jsonObj.get("gamma").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `gamma` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("gamma").toString()));
        }
        if ((jsonObj.get("vega") != null && !jsonObj.get("vega").isJsonNull())
                && !jsonObj.get("vega").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `vega` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("vega").toString()));
        }
        if ((jsonObj.get("highPriceLimit") != null && !jsonObj.get("highPriceLimit").isJsonNull())
                && !jsonObj.get("highPriceLimit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `highPriceLimit` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("highPriceLimit").toString()));
        }
        if ((jsonObj.get("lowPriceLimit") != null && !jsonObj.get("lowPriceLimit").isJsonNull())
                && !jsonObj.get("lowPriceLimit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `lowPriceLimit` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("lowPriceLimit").toString()));
        }
        if ((jsonObj.get("riskFreeInterest") != null
                        && !jsonObj.get("riskFreeInterest").isJsonNull())
                && !jsonObj.get("riskFreeInterest").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `riskFreeInterest` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("riskFreeInterest").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OptionMarkPriceResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OptionMarkPriceResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OptionMarkPriceResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(OptionMarkPriceResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OptionMarkPriceResponseInner>() {
                        @Override
                        public void write(JsonWriter out, OptionMarkPriceResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OptionMarkPriceResponseInner read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OptionMarkPriceResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OptionMarkPriceResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     OptionMarkPriceResponseInner
     */
    public static OptionMarkPriceResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OptionMarkPriceResponseInner.class);
    }

    /**
     * Convert an instance of OptionMarkPriceResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
