/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** OptionAccountInformationResponseAssetInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OptionAccountInformationResponseAssetInner {
    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_MARGIN_BALANCE = "marginBalance";

    @SerializedName(SERIALIZED_NAME_MARGIN_BALANCE)
    @jakarta.annotation.Nullable
    private String marginBalance;

    public static final String SERIALIZED_NAME_EQUITY = "equity";

    @SerializedName(SERIALIZED_NAME_EQUITY)
    @jakarta.annotation.Nullable
    private String equity;

    public static final String SERIALIZED_NAME_AVAILABLE = "available";

    @SerializedName(SERIALIZED_NAME_AVAILABLE)
    @jakarta.annotation.Nullable
    private String available;

    public static final String SERIALIZED_NAME_LOCKED = "locked";

    @SerializedName(SERIALIZED_NAME_LOCKED)
    @jakarta.annotation.Nullable
    private String locked;

    public static final String SERIALIZED_NAME_UNREALIZED_P_N_L = "unrealizedPNL";

    @SerializedName(SERIALIZED_NAME_UNREALIZED_P_N_L)
    @jakarta.annotation.Nullable
    private String unrealizedPNL;

    public OptionAccountInformationResponseAssetInner() {}

    public OptionAccountInformationResponseAssetInner asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public OptionAccountInformationResponseAssetInner marginBalance(
            @jakarta.annotation.Nullable String marginBalance) {
        this.marginBalance = marginBalance;
        return this;
    }

    /**
     * Get marginBalance
     *
     * @return marginBalance
     */
    @jakarta.annotation.Nullable
    public String getMarginBalance() {
        return marginBalance;
    }

    public void setMarginBalance(@jakarta.annotation.Nullable String marginBalance) {
        this.marginBalance = marginBalance;
    }

    public OptionAccountInformationResponseAssetInner equity(
            @jakarta.annotation.Nullable String equity) {
        this.equity = equity;
        return this;
    }

    /**
     * Get equity
     *
     * @return equity
     */
    @jakarta.annotation.Nullable
    public String getEquity() {
        return equity;
    }

    public void setEquity(@jakarta.annotation.Nullable String equity) {
        this.equity = equity;
    }

    public OptionAccountInformationResponseAssetInner available(
            @jakarta.annotation.Nullable String available) {
        this.available = available;
        return this;
    }

    /**
     * Get available
     *
     * @return available
     */
    @jakarta.annotation.Nullable
    public String getAvailable() {
        return available;
    }

    public void setAvailable(@jakarta.annotation.Nullable String available) {
        this.available = available;
    }

    public OptionAccountInformationResponseAssetInner locked(
            @jakarta.annotation.Nullable String locked) {
        this.locked = locked;
        return this;
    }

    /**
     * Get locked
     *
     * @return locked
     */
    @jakarta.annotation.Nullable
    public String getLocked() {
        return locked;
    }

    public void setLocked(@jakarta.annotation.Nullable String locked) {
        this.locked = locked;
    }

    public OptionAccountInformationResponseAssetInner unrealizedPNL(
            @jakarta.annotation.Nullable String unrealizedPNL) {
        this.unrealizedPNL = unrealizedPNL;
        return this;
    }

    /**
     * Get unrealizedPNL
     *
     * @return unrealizedPNL
     */
    @jakarta.annotation.Nullable
    public String getUnrealizedPNL() {
        return unrealizedPNL;
    }

    public void setUnrealizedPNL(@jakarta.annotation.Nullable String unrealizedPNL) {
        this.unrealizedPNL = unrealizedPNL;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OptionAccountInformationResponseAssetInner optionAccountInformationResponseAssetInner =
                (OptionAccountInformationResponseAssetInner) o;
        return Objects.equals(this.asset, optionAccountInformationResponseAssetInner.asset)
                && Objects.equals(
                        this.marginBalance,
                        optionAccountInformationResponseAssetInner.marginBalance)
                && Objects.equals(this.equity, optionAccountInformationResponseAssetInner.equity)
                && Objects.equals(
                        this.available, optionAccountInformationResponseAssetInner.available)
                && Objects.equals(this.locked, optionAccountInformationResponseAssetInner.locked)
                && Objects.equals(
                        this.unrealizedPNL,
                        optionAccountInformationResponseAssetInner.unrealizedPNL);
    }

    @Override
    public int hashCode() {
        return Objects.hash(asset, marginBalance, equity, available, locked, unrealizedPNL);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OptionAccountInformationResponseAssetInner {\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		marginBalance: ").append(toIndentedString(marginBalance)).append("\n");
        sb.append("		equity: ").append(toIndentedString(equity)).append("\n");
        sb.append("		available: ").append(toIndentedString(available)).append("\n");
        sb.append("		locked: ").append(toIndentedString(locked)).append("\n");
        sb.append("		unrealizedPNL: ").append(toIndentedString(unrealizedPNL)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object marginBalanceValue = getMarginBalance();
        String marginBalanceValueAsString = "";
        marginBalanceValueAsString = marginBalanceValue.toString();
        sb.append("marginBalance=").append(urlEncode(marginBalanceValueAsString)).append("");
        Object equityValue = getEquity();
        String equityValueAsString = "";
        equityValueAsString = equityValue.toString();
        sb.append("equity=").append(urlEncode(equityValueAsString)).append("");
        Object availableValue = getAvailable();
        String availableValueAsString = "";
        availableValueAsString = availableValue.toString();
        sb.append("available=").append(urlEncode(availableValueAsString)).append("");
        Object lockedValue = getLocked();
        String lockedValueAsString = "";
        lockedValueAsString = lockedValue.toString();
        sb.append("locked=").append(urlEncode(lockedValueAsString)).append("");
        Object unrealizedPNLValue = getUnrealizedPNL();
        String unrealizedPNLValueAsString = "";
        unrealizedPNLValueAsString = unrealizedPNLValue.toString();
        sb.append("unrealizedPNL=").append(urlEncode(unrealizedPNLValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("asset");
        openapiFields.add("marginBalance");
        openapiFields.add("equity");
        openapiFields.add("available");
        openapiFields.add("locked");
        openapiFields.add("unrealizedPNL");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OptionAccountInformationResponseAssetInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OptionAccountInformationResponseAssetInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " OptionAccountInformationResponseAssetInner is not found in"
                                    + " the empty JSON string",
                                OptionAccountInformationResponseAssetInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OptionAccountInformationResponseAssetInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `OptionAccountInformationResponseAssetInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("marginBalance") != null && !jsonObj.get("marginBalance").isJsonNull())
                && !jsonObj.get("marginBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `marginBalance` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("marginBalance").toString()));
        }
        if ((jsonObj.get("equity") != null && !jsonObj.get("equity").isJsonNull())
                && !jsonObj.get("equity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `equity` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("equity").toString()));
        }
        if ((jsonObj.get("available") != null && !jsonObj.get("available").isJsonNull())
                && !jsonObj.get("available").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `available` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("available").toString()));
        }
        if ((jsonObj.get("locked") != null && !jsonObj.get("locked").isJsonNull())
                && !jsonObj.get("locked").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `locked` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("locked").toString()));
        }
        if ((jsonObj.get("unrealizedPNL") != null && !jsonObj.get("unrealizedPNL").isJsonNull())
                && !jsonObj.get("unrealizedPNL").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `unrealizedPNL` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("unrealizedPNL").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OptionAccountInformationResponseAssetInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'OptionAccountInformationResponseAssetInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OptionAccountInformationResponseAssetInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(OptionAccountInformationResponseAssetInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OptionAccountInformationResponseAssetInner>() {
                        @Override
                        public void write(
                                JsonWriter out, OptionAccountInformationResponseAssetInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OptionAccountInformationResponseAssetInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OptionAccountInformationResponseAssetInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OptionAccountInformationResponseAssetInner
     * @throws IOException if the JSON string is invalid with respect to
     *     OptionAccountInformationResponseAssetInner
     */
    public static OptionAccountInformationResponseAssetInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, OptionAccountInformationResponseAssetInner.class);
    }

    /**
     * Convert an instance of OptionAccountInformationResponseAssetInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
