/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** KlineCandlestickDataResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class KlineCandlestickDataResponseInner {
    public static final String SERIALIZED_NAME_OPEN = "open";

    @SerializedName(SERIALIZED_NAME_OPEN)
    @jakarta.annotation.Nullable
    private String open;

    public static final String SERIALIZED_NAME_HIGH = "high";

    @SerializedName(SERIALIZED_NAME_HIGH)
    @jakarta.annotation.Nullable
    private String high;

    public static final String SERIALIZED_NAME_LOW = "low";

    @SerializedName(SERIALIZED_NAME_LOW)
    @jakarta.annotation.Nullable
    private String low;

    public static final String SERIALIZED_NAME_CLOSE = "close";

    @SerializedName(SERIALIZED_NAME_CLOSE)
    @jakarta.annotation.Nullable
    private String close;

    public static final String SERIALIZED_NAME_VOLUME = "volume";

    @SerializedName(SERIALIZED_NAME_VOLUME)
    @jakarta.annotation.Nullable
    private String volume;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_INTERVAL = "interval";

    @SerializedName(SERIALIZED_NAME_INTERVAL)
    @jakarta.annotation.Nullable
    private String interval;

    public static final String SERIALIZED_NAME_TRADE_COUNT = "tradeCount";

    @SerializedName(SERIALIZED_NAME_TRADE_COUNT)
    @jakarta.annotation.Nullable
    private Long tradeCount;

    public static final String SERIALIZED_NAME_TAKER_VOLUME = "takerVolume";

    @SerializedName(SERIALIZED_NAME_TAKER_VOLUME)
    @jakarta.annotation.Nullable
    private String takerVolume;

    public static final String SERIALIZED_NAME_TAKER_AMOUNT = "takerAmount";

    @SerializedName(SERIALIZED_NAME_TAKER_AMOUNT)
    @jakarta.annotation.Nullable
    private String takerAmount;

    public static final String SERIALIZED_NAME_OPEN_TIME = "openTime";

    @SerializedName(SERIALIZED_NAME_OPEN_TIME)
    @jakarta.annotation.Nullable
    private Long openTime;

    public static final String SERIALIZED_NAME_CLOSE_TIME = "closeTime";

    @SerializedName(SERIALIZED_NAME_CLOSE_TIME)
    @jakarta.annotation.Nullable
    private Long closeTime;

    public KlineCandlestickDataResponseInner() {}

    public KlineCandlestickDataResponseInner open(@jakarta.annotation.Nullable String open) {
        this.open = open;
        return this;
    }

    /**
     * Get open
     *
     * @return open
     */
    @jakarta.annotation.Nullable
    public String getOpen() {
        return open;
    }

    public void setOpen(@jakarta.annotation.Nullable String open) {
        this.open = open;
    }

    public KlineCandlestickDataResponseInner high(@jakarta.annotation.Nullable String high) {
        this.high = high;
        return this;
    }

    /**
     * Get high
     *
     * @return high
     */
    @jakarta.annotation.Nullable
    public String getHigh() {
        return high;
    }

    public void setHigh(@jakarta.annotation.Nullable String high) {
        this.high = high;
    }

    public KlineCandlestickDataResponseInner low(@jakarta.annotation.Nullable String low) {
        this.low = low;
        return this;
    }

    /**
     * Get low
     *
     * @return low
     */
    @jakarta.annotation.Nullable
    public String getLow() {
        return low;
    }

    public void setLow(@jakarta.annotation.Nullable String low) {
        this.low = low;
    }

    public KlineCandlestickDataResponseInner close(@jakarta.annotation.Nullable String close) {
        this.close = close;
        return this;
    }

    /**
     * Get close
     *
     * @return close
     */
    @jakarta.annotation.Nullable
    public String getClose() {
        return close;
    }

    public void setClose(@jakarta.annotation.Nullable String close) {
        this.close = close;
    }

    public KlineCandlestickDataResponseInner volume(@jakarta.annotation.Nullable String volume) {
        this.volume = volume;
        return this;
    }

    /**
     * Get volume
     *
     * @return volume
     */
    @jakarta.annotation.Nullable
    public String getVolume() {
        return volume;
    }

    public void setVolume(@jakarta.annotation.Nullable String volume) {
        this.volume = volume;
    }

    public KlineCandlestickDataResponseInner amount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public KlineCandlestickDataResponseInner interval(
            @jakarta.annotation.Nullable String interval) {
        this.interval = interval;
        return this;
    }

    /**
     * Get interval
     *
     * @return interval
     */
    @jakarta.annotation.Nullable
    public String getInterval() {
        return interval;
    }

    public void setInterval(@jakarta.annotation.Nullable String interval) {
        this.interval = interval;
    }

    public KlineCandlestickDataResponseInner tradeCount(
            @jakarta.annotation.Nullable Long tradeCount) {
        this.tradeCount = tradeCount;
        return this;
    }

    /**
     * Get tradeCount
     *
     * @return tradeCount
     */
    @jakarta.annotation.Nullable
    public Long getTradeCount() {
        return tradeCount;
    }

    public void setTradeCount(@jakarta.annotation.Nullable Long tradeCount) {
        this.tradeCount = tradeCount;
    }

    public KlineCandlestickDataResponseInner takerVolume(
            @jakarta.annotation.Nullable String takerVolume) {
        this.takerVolume = takerVolume;
        return this;
    }

    /**
     * Get takerVolume
     *
     * @return takerVolume
     */
    @jakarta.annotation.Nullable
    public String getTakerVolume() {
        return takerVolume;
    }

    public void setTakerVolume(@jakarta.annotation.Nullable String takerVolume) {
        this.takerVolume = takerVolume;
    }

    public KlineCandlestickDataResponseInner takerAmount(
            @jakarta.annotation.Nullable String takerAmount) {
        this.takerAmount = takerAmount;
        return this;
    }

    /**
     * Get takerAmount
     *
     * @return takerAmount
     */
    @jakarta.annotation.Nullable
    public String getTakerAmount() {
        return takerAmount;
    }

    public void setTakerAmount(@jakarta.annotation.Nullable String takerAmount) {
        this.takerAmount = takerAmount;
    }

    public KlineCandlestickDataResponseInner openTime(@jakarta.annotation.Nullable Long openTime) {
        this.openTime = openTime;
        return this;
    }

    /**
     * Get openTime
     *
     * @return openTime
     */
    @jakarta.annotation.Nullable
    public Long getOpenTime() {
        return openTime;
    }

    public void setOpenTime(@jakarta.annotation.Nullable Long openTime) {
        this.openTime = openTime;
    }

    public KlineCandlestickDataResponseInner closeTime(
            @jakarta.annotation.Nullable Long closeTime) {
        this.closeTime = closeTime;
        return this;
    }

    /**
     * Get closeTime
     *
     * @return closeTime
     */
    @jakarta.annotation.Nullable
    public Long getCloseTime() {
        return closeTime;
    }

    public void setCloseTime(@jakarta.annotation.Nullable Long closeTime) {
        this.closeTime = closeTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KlineCandlestickDataResponseInner klineCandlestickDataResponseInner =
                (KlineCandlestickDataResponseInner) o;
        return Objects.equals(this.open, klineCandlestickDataResponseInner.open)
                && Objects.equals(this.high, klineCandlestickDataResponseInner.high)
                && Objects.equals(this.low, klineCandlestickDataResponseInner.low)
                && Objects.equals(this.close, klineCandlestickDataResponseInner.close)
                && Objects.equals(this.volume, klineCandlestickDataResponseInner.volume)
                && Objects.equals(this.amount, klineCandlestickDataResponseInner.amount)
                && Objects.equals(this.interval, klineCandlestickDataResponseInner.interval)
                && Objects.equals(this.tradeCount, klineCandlestickDataResponseInner.tradeCount)
                && Objects.equals(this.takerVolume, klineCandlestickDataResponseInner.takerVolume)
                && Objects.equals(this.takerAmount, klineCandlestickDataResponseInner.takerAmount)
                && Objects.equals(this.openTime, klineCandlestickDataResponseInner.openTime)
                && Objects.equals(this.closeTime, klineCandlestickDataResponseInner.closeTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                open,
                high,
                low,
                close,
                volume,
                amount,
                interval,
                tradeCount,
                takerVolume,
                takerAmount,
                openTime,
                closeTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class KlineCandlestickDataResponseInner {\n");
        sb.append("		open: ").append(toIndentedString(open)).append("\n");
        sb.append("		high: ").append(toIndentedString(high)).append("\n");
        sb.append("		low: ").append(toIndentedString(low)).append("\n");
        sb.append("		close: ").append(toIndentedString(close)).append("\n");
        sb.append("		volume: ").append(toIndentedString(volume)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		interval: ").append(toIndentedString(interval)).append("\n");
        sb.append("		tradeCount: ").append(toIndentedString(tradeCount)).append("\n");
        sb.append("		takerVolume: ").append(toIndentedString(takerVolume)).append("\n");
        sb.append("		takerAmount: ").append(toIndentedString(takerAmount)).append("\n");
        sb.append("		openTime: ").append(toIndentedString(openTime)).append("\n");
        sb.append("		closeTime: ").append(toIndentedString(closeTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object openValue = getOpen();
        String openValueAsString = "";
        openValueAsString = openValue.toString();
        sb.append("open=").append(urlEncode(openValueAsString)).append("");
        Object highValue = getHigh();
        String highValueAsString = "";
        highValueAsString = highValue.toString();
        sb.append("high=").append(urlEncode(highValueAsString)).append("");
        Object lowValue = getLow();
        String lowValueAsString = "";
        lowValueAsString = lowValue.toString();
        sb.append("low=").append(urlEncode(lowValueAsString)).append("");
        Object closeValue = getClose();
        String closeValueAsString = "";
        closeValueAsString = closeValue.toString();
        sb.append("close=").append(urlEncode(closeValueAsString)).append("");
        Object volumeValue = getVolume();
        String volumeValueAsString = "";
        volumeValueAsString = volumeValue.toString();
        sb.append("volume=").append(urlEncode(volumeValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object intervalValue = getInterval();
        String intervalValueAsString = "";
        intervalValueAsString = intervalValue.toString();
        sb.append("interval=").append(urlEncode(intervalValueAsString)).append("");
        Object tradeCountValue = getTradeCount();
        String tradeCountValueAsString = "";
        tradeCountValueAsString = tradeCountValue.toString();
        sb.append("tradeCount=").append(urlEncode(tradeCountValueAsString)).append("");
        Object takerVolumeValue = getTakerVolume();
        String takerVolumeValueAsString = "";
        takerVolumeValueAsString = takerVolumeValue.toString();
        sb.append("takerVolume=").append(urlEncode(takerVolumeValueAsString)).append("");
        Object takerAmountValue = getTakerAmount();
        String takerAmountValueAsString = "";
        takerAmountValueAsString = takerAmountValue.toString();
        sb.append("takerAmount=").append(urlEncode(takerAmountValueAsString)).append("");
        Object openTimeValue = getOpenTime();
        String openTimeValueAsString = "";
        openTimeValueAsString = openTimeValue.toString();
        sb.append("openTime=").append(urlEncode(openTimeValueAsString)).append("");
        Object closeTimeValue = getCloseTime();
        String closeTimeValueAsString = "";
        closeTimeValueAsString = closeTimeValue.toString();
        sb.append("closeTime=").append(urlEncode(closeTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("open");
        openapiFields.add("high");
        openapiFields.add("low");
        openapiFields.add("close");
        openapiFields.add("volume");
        openapiFields.add("amount");
        openapiFields.add("interval");
        openapiFields.add("tradeCount");
        openapiFields.add("takerVolume");
        openapiFields.add("takerAmount");
        openapiFields.add("openTime");
        openapiFields.add("closeTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     KlineCandlestickDataResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!KlineCandlestickDataResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in KlineCandlestickDataResponseInner is"
                                        + " not found in the empty JSON string",
                                KlineCandlestickDataResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!KlineCandlestickDataResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `KlineCandlestickDataResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("open") != null && !jsonObj.get("open").isJsonNull())
                && !jsonObj.get("open").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `open` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("open").toString()));
        }
        if ((jsonObj.get("high") != null && !jsonObj.get("high").isJsonNull())
                && !jsonObj.get("high").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `high` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("high").toString()));
        }
        if ((jsonObj.get("low") != null && !jsonObj.get("low").isJsonNull())
                && !jsonObj.get("low").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `low` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("low").toString()));
        }
        if ((jsonObj.get("close") != null && !jsonObj.get("close").isJsonNull())
                && !jsonObj.get("close").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `close` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("close").toString()));
        }
        if ((jsonObj.get("volume") != null && !jsonObj.get("volume").isJsonNull())
                && !jsonObj.get("volume").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `volume` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("volume").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("interval") != null && !jsonObj.get("interval").isJsonNull())
                && !jsonObj.get("interval").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `interval` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("interval").toString()));
        }
        if ((jsonObj.get("takerVolume") != null && !jsonObj.get("takerVolume").isJsonNull())
                && !jsonObj.get("takerVolume").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `takerVolume` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("takerVolume").toString()));
        }
        if ((jsonObj.get("takerAmount") != null && !jsonObj.get("takerAmount").isJsonNull())
                && !jsonObj.get("takerAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `takerAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("takerAmount").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!KlineCandlestickDataResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'KlineCandlestickDataResponseInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<KlineCandlestickDataResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(KlineCandlestickDataResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<KlineCandlestickDataResponseInner>() {
                        @Override
                        public void write(JsonWriter out, KlineCandlestickDataResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public KlineCandlestickDataResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of KlineCandlestickDataResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of KlineCandlestickDataResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     KlineCandlestickDataResponseInner
     */
    public static KlineCandlestickDataResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, KlineCandlestickDataResponseInner.class);
    }

    /**
     * Convert an instance of KlineCandlestickDataResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
