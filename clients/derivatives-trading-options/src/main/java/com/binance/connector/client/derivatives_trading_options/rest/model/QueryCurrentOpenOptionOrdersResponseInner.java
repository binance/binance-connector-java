/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryCurrentOpenOptionOrdersResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryCurrentOpenOptionOrdersResponseInner {
    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private String quantity;

    public static final String SERIALIZED_NAME_EXECUTED_QTY = "executedQty";

    @SerializedName(SERIALIZED_NAME_EXECUTED_QTY)
    @jakarta.annotation.Nullable
    private String executedQty;

    public static final String SERIALIZED_NAME_FEE = "fee";

    @SerializedName(SERIALIZED_NAME_FEE)
    @jakarta.annotation.Nullable
    private String fee;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String timeInForce;

    public static final String SERIALIZED_NAME_REDUCE_ONLY = "reduceOnly";

    @SerializedName(SERIALIZED_NAME_REDUCE_ONLY)
    @jakarta.annotation.Nullable
    private Boolean reduceOnly;

    public static final String SERIALIZED_NAME_POST_ONLY = "postOnly";

    @SerializedName(SERIALIZED_NAME_POST_ONLY)
    @jakarta.annotation.Nullable
    private Boolean postOnly;

    public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";

    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    @jakarta.annotation.Nullable
    private Long createTime;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_AVG_PRICE = "avgPrice";

    @SerializedName(SERIALIZED_NAME_AVG_PRICE)
    @jakarta.annotation.Nullable
    private String avgPrice;

    public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "clientOrderId";

    @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String clientOrderId;

    public static final String SERIALIZED_NAME_PRICE_SCALE = "priceScale";

    @SerializedName(SERIALIZED_NAME_PRICE_SCALE)
    @jakarta.annotation.Nullable
    private Long priceScale;

    public static final String SERIALIZED_NAME_QUANTITY_SCALE = "quantityScale";

    @SerializedName(SERIALIZED_NAME_QUANTITY_SCALE)
    @jakarta.annotation.Nullable
    private Long quantityScale;

    public static final String SERIALIZED_NAME_OPTION_SIDE = "optionSide";

    @SerializedName(SERIALIZED_NAME_OPTION_SIDE)
    @jakarta.annotation.Nullable
    private String optionSide;

    public static final String SERIALIZED_NAME_QUOTE_ASSET = "quoteAsset";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET)
    @jakarta.annotation.Nullable
    private String quoteAsset;

    public static final String SERIALIZED_NAME_MMP = "mmp";

    @SerializedName(SERIALIZED_NAME_MMP)
    @jakarta.annotation.Nullable
    private Boolean mmp;

    public QueryCurrentOpenOptionOrdersResponseInner() {}

    public QueryCurrentOpenOptionOrdersResponseInner orderId(
            @jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public QueryCurrentOpenOptionOrdersResponseInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public QueryCurrentOpenOptionOrdersResponseInner price(
            @jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public QueryCurrentOpenOptionOrdersResponseInner quantity(
            @jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    public String getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
    }

    public QueryCurrentOpenOptionOrdersResponseInner executedQty(
            @jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
        return this;
    }

    /**
     * Get executedQty
     *
     * @return executedQty
     */
    @jakarta.annotation.Nullable
    public String getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
    }

    public QueryCurrentOpenOptionOrdersResponseInner fee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
        return this;
    }

    /**
     * Get fee
     *
     * @return fee
     */
    @jakarta.annotation.Nullable
    public String getFee() {
        return fee;
    }

    public void setFee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
    }

    public QueryCurrentOpenOptionOrdersResponseInner side(
            @jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public QueryCurrentOpenOptionOrdersResponseInner type(
            @jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public QueryCurrentOpenOptionOrdersResponseInner timeInForce(
            @jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public String getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
    }

    public QueryCurrentOpenOptionOrdersResponseInner reduceOnly(
            @jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
        return this;
    }

    /**
     * Get reduceOnly
     *
     * @return reduceOnly
     */
    @jakarta.annotation.Nullable
    public Boolean getReduceOnly() {
        return reduceOnly;
    }

    public void setReduceOnly(@jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
    }

    public QueryCurrentOpenOptionOrdersResponseInner postOnly(
            @jakarta.annotation.Nullable Boolean postOnly) {
        this.postOnly = postOnly;
        return this;
    }

    /**
     * Get postOnly
     *
     * @return postOnly
     */
    @jakarta.annotation.Nullable
    public Boolean getPostOnly() {
        return postOnly;
    }

    public void setPostOnly(@jakarta.annotation.Nullable Boolean postOnly) {
        this.postOnly = postOnly;
    }

    public QueryCurrentOpenOptionOrdersResponseInner createTime(
            @jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get createTime
     *
     * @return createTime
     */
    @jakarta.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(@jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
    }

    public QueryCurrentOpenOptionOrdersResponseInner updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    public QueryCurrentOpenOptionOrdersResponseInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public QueryCurrentOpenOptionOrdersResponseInner avgPrice(
            @jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
        return this;
    }

    /**
     * Get avgPrice
     *
     * @return avgPrice
     */
    @jakarta.annotation.Nullable
    public String getAvgPrice() {
        return avgPrice;
    }

    public void setAvgPrice(@jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
    }

    public QueryCurrentOpenOptionOrdersResponseInner clientOrderId(
            @jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
        return this;
    }

    /**
     * Get clientOrderId
     *
     * @return clientOrderId
     */
    @jakarta.annotation.Nullable
    public String getClientOrderId() {
        return clientOrderId;
    }

    public void setClientOrderId(@jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }

    public QueryCurrentOpenOptionOrdersResponseInner priceScale(
            @jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
        return this;
    }

    /**
     * Get priceScale
     *
     * @return priceScale
     */
    @jakarta.annotation.Nullable
    public Long getPriceScale() {
        return priceScale;
    }

    public void setPriceScale(@jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
    }

    public QueryCurrentOpenOptionOrdersResponseInner quantityScale(
            @jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
        return this;
    }

    /**
     * Get quantityScale
     *
     * @return quantityScale
     */
    @jakarta.annotation.Nullable
    public Long getQuantityScale() {
        return quantityScale;
    }

    public void setQuantityScale(@jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
    }

    public QueryCurrentOpenOptionOrdersResponseInner optionSide(
            @jakarta.annotation.Nullable String optionSide) {
        this.optionSide = optionSide;
        return this;
    }

    /**
     * Get optionSide
     *
     * @return optionSide
     */
    @jakarta.annotation.Nullable
    public String getOptionSide() {
        return optionSide;
    }

    public void setOptionSide(@jakarta.annotation.Nullable String optionSide) {
        this.optionSide = optionSide;
    }

    public QueryCurrentOpenOptionOrdersResponseInner quoteAsset(
            @jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
        return this;
    }

    /**
     * Get quoteAsset
     *
     * @return quoteAsset
     */
    @jakarta.annotation.Nullable
    public String getQuoteAsset() {
        return quoteAsset;
    }

    public void setQuoteAsset(@jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
    }

    public QueryCurrentOpenOptionOrdersResponseInner mmp(@jakarta.annotation.Nullable Boolean mmp) {
        this.mmp = mmp;
        return this;
    }

    /**
     * Get mmp
     *
     * @return mmp
     */
    @jakarta.annotation.Nullable
    public Boolean getMmp() {
        return mmp;
    }

    public void setMmp(@jakarta.annotation.Nullable Boolean mmp) {
        this.mmp = mmp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryCurrentOpenOptionOrdersResponseInner queryCurrentOpenOptionOrdersResponseInner =
                (QueryCurrentOpenOptionOrdersResponseInner) o;
        return Objects.equals(this.orderId, queryCurrentOpenOptionOrdersResponseInner.orderId)
                && Objects.equals(this.symbol, queryCurrentOpenOptionOrdersResponseInner.symbol)
                && Objects.equals(this.price, queryCurrentOpenOptionOrdersResponseInner.price)
                && Objects.equals(this.quantity, queryCurrentOpenOptionOrdersResponseInner.quantity)
                && Objects.equals(
                        this.executedQty, queryCurrentOpenOptionOrdersResponseInner.executedQty)
                && Objects.equals(this.fee, queryCurrentOpenOptionOrdersResponseInner.fee)
                && Objects.equals(this.side, queryCurrentOpenOptionOrdersResponseInner.side)
                && Objects.equals(this.type, queryCurrentOpenOptionOrdersResponseInner.type)
                && Objects.equals(
                        this.timeInForce, queryCurrentOpenOptionOrdersResponseInner.timeInForce)
                && Objects.equals(
                        this.reduceOnly, queryCurrentOpenOptionOrdersResponseInner.reduceOnly)
                && Objects.equals(this.postOnly, queryCurrentOpenOptionOrdersResponseInner.postOnly)
                && Objects.equals(
                        this.createTime, queryCurrentOpenOptionOrdersResponseInner.createTime)
                && Objects.equals(
                        this.updateTime, queryCurrentOpenOptionOrdersResponseInner.updateTime)
                && Objects.equals(this.status, queryCurrentOpenOptionOrdersResponseInner.status)
                && Objects.equals(this.avgPrice, queryCurrentOpenOptionOrdersResponseInner.avgPrice)
                && Objects.equals(
                        this.clientOrderId, queryCurrentOpenOptionOrdersResponseInner.clientOrderId)
                && Objects.equals(
                        this.priceScale, queryCurrentOpenOptionOrdersResponseInner.priceScale)
                && Objects.equals(
                        this.quantityScale, queryCurrentOpenOptionOrdersResponseInner.quantityScale)
                && Objects.equals(
                        this.optionSide, queryCurrentOpenOptionOrdersResponseInner.optionSide)
                && Objects.equals(
                        this.quoteAsset, queryCurrentOpenOptionOrdersResponseInner.quoteAsset)
                && Objects.equals(this.mmp, queryCurrentOpenOptionOrdersResponseInner.mmp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                orderId,
                symbol,
                price,
                quantity,
                executedQty,
                fee,
                side,
                type,
                timeInForce,
                reduceOnly,
                postOnly,
                createTime,
                updateTime,
                status,
                avgPrice,
                clientOrderId,
                priceScale,
                quantityScale,
                optionSide,
                quoteAsset,
                mmp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryCurrentOpenOptionOrdersResponseInner {\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		executedQty: ").append(toIndentedString(executedQty)).append("\n");
        sb.append("		fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		reduceOnly: ").append(toIndentedString(reduceOnly)).append("\n");
        sb.append("		postOnly: ").append(toIndentedString(postOnly)).append("\n");
        sb.append("		createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		avgPrice: ").append(toIndentedString(avgPrice)).append("\n");
        sb.append("		clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
        sb.append("		priceScale: ").append(toIndentedString(priceScale)).append("\n");
        sb.append("		quantityScale: ").append(toIndentedString(quantityScale)).append("\n");
        sb.append("		optionSide: ").append(toIndentedString(optionSide)).append("\n");
        sb.append("		quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
        sb.append("		mmp: ").append(toIndentedString(mmp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object executedQtyValue = getExecutedQty();
        String executedQtyValueAsString = "";
        executedQtyValueAsString = executedQtyValue.toString();
        sb.append("executedQty=").append(urlEncode(executedQtyValueAsString)).append("");
        Object feeValue = getFee();
        String feeValueAsString = "";
        feeValueAsString = feeValue.toString();
        sb.append("fee=").append(urlEncode(feeValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString = timeInForceValue.toString();
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object reduceOnlyValue = getReduceOnly();
        String reduceOnlyValueAsString = "";
        reduceOnlyValueAsString = reduceOnlyValue.toString();
        sb.append("reduceOnly=").append(urlEncode(reduceOnlyValueAsString)).append("");
        Object postOnlyValue = getPostOnly();
        String postOnlyValueAsString = "";
        postOnlyValueAsString = postOnlyValue.toString();
        sb.append("postOnly=").append(urlEncode(postOnlyValueAsString)).append("");
        Object createTimeValue = getCreateTime();
        String createTimeValueAsString = "";
        createTimeValueAsString = createTimeValue.toString();
        sb.append("createTime=").append(urlEncode(createTimeValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object avgPriceValue = getAvgPrice();
        String avgPriceValueAsString = "";
        avgPriceValueAsString = avgPriceValue.toString();
        sb.append("avgPrice=").append(urlEncode(avgPriceValueAsString)).append("");
        Object clientOrderIdValue = getClientOrderId();
        String clientOrderIdValueAsString = "";
        clientOrderIdValueAsString = clientOrderIdValue.toString();
        sb.append("clientOrderId=").append(urlEncode(clientOrderIdValueAsString)).append("");
        Object priceScaleValue = getPriceScale();
        String priceScaleValueAsString = "";
        priceScaleValueAsString = priceScaleValue.toString();
        sb.append("priceScale=").append(urlEncode(priceScaleValueAsString)).append("");
        Object quantityScaleValue = getQuantityScale();
        String quantityScaleValueAsString = "";
        quantityScaleValueAsString = quantityScaleValue.toString();
        sb.append("quantityScale=").append(urlEncode(quantityScaleValueAsString)).append("");
        Object optionSideValue = getOptionSide();
        String optionSideValueAsString = "";
        optionSideValueAsString = optionSideValue.toString();
        sb.append("optionSide=").append(urlEncode(optionSideValueAsString)).append("");
        Object quoteAssetValue = getQuoteAsset();
        String quoteAssetValueAsString = "";
        quoteAssetValueAsString = quoteAssetValue.toString();
        sb.append("quoteAsset=").append(urlEncode(quoteAssetValueAsString)).append("");
        Object mmpValue = getMmp();
        String mmpValueAsString = "";
        mmpValueAsString = mmpValue.toString();
        sb.append("mmp=").append(urlEncode(mmpValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderId");
        openapiFields.add("symbol");
        openapiFields.add("price");
        openapiFields.add("quantity");
        openapiFields.add("executedQty");
        openapiFields.add("fee");
        openapiFields.add("side");
        openapiFields.add("type");
        openapiFields.add("timeInForce");
        openapiFields.add("reduceOnly");
        openapiFields.add("postOnly");
        openapiFields.add("createTime");
        openapiFields.add("updateTime");
        openapiFields.add("status");
        openapiFields.add("avgPrice");
        openapiFields.add("clientOrderId");
        openapiFields.add("priceScale");
        openapiFields.add("quantityScale");
        openapiFields.add("optionSide");
        openapiFields.add("quoteAsset");
        openapiFields.add("mmp");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryCurrentOpenOptionOrdersResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryCurrentOpenOptionOrdersResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryCurrentOpenOptionOrdersResponseInner is not found in"
                                    + " the empty JSON string",
                                QueryCurrentOpenOptionOrdersResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryCurrentOpenOptionOrdersResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QueryCurrentOpenOptionOrdersResponseInner` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull())
                && !jsonObj.get("quantity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quantity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quantity").toString()));
        }
        if ((jsonObj.get("executedQty") != null && !jsonObj.get("executedQty").isJsonNull())
                && !jsonObj.get("executedQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedQty").toString()));
        }
        if ((jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull())
                && !jsonObj.get("fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fee` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("fee").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull())
                && !jsonObj.get("timeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("avgPrice") != null && !jsonObj.get("avgPrice").isJsonNull())
                && !jsonObj.get("avgPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `avgPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("avgPrice").toString()));
        }
        if ((jsonObj.get("clientOrderId") != null && !jsonObj.get("clientOrderId").isJsonNull())
                && !jsonObj.get("clientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `clientOrderId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("clientOrderId").toString()));
        }
        if ((jsonObj.get("optionSide") != null && !jsonObj.get("optionSide").isJsonNull())
                && !jsonObj.get("optionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `optionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("optionSide").toString()));
        }
        if ((jsonObj.get("quoteAsset") != null && !jsonObj.get("quoteAsset").isJsonNull())
                && !jsonObj.get("quoteAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteAsset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryCurrentOpenOptionOrdersResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryCurrentOpenOptionOrdersResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryCurrentOpenOptionOrdersResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryCurrentOpenOptionOrdersResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryCurrentOpenOptionOrdersResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryCurrentOpenOptionOrdersResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryCurrentOpenOptionOrdersResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryCurrentOpenOptionOrdersResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryCurrentOpenOptionOrdersResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryCurrentOpenOptionOrdersResponseInner
     */
    public static QueryCurrentOpenOptionOrdersResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, QueryCurrentOpenOptionOrdersResponseInner.class);
    }

    /**
     * Convert an instance of QueryCurrentOpenOptionOrdersResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
