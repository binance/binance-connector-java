/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** ExchangeInformationResponseOptionSymbolsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ExchangeInformationResponseOptionSymbolsInner {
    public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";

    @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
    @jakarta.annotation.Nullable
    private Long expiryDate;

    public static final String SERIALIZED_NAME_FILTERS = "filters";

    @SerializedName(SERIALIZED_NAME_FILTERS)
    @jakarta.annotation.Nullable
    private List<@Valid ExchangeInformationResponseOptionSymbolsInnerFiltersInner> filters;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_STRIKE_PRICE = "strikePrice";

    @SerializedName(SERIALIZED_NAME_STRIKE_PRICE)
    @jakarta.annotation.Nullable
    private String strikePrice;

    public static final String SERIALIZED_NAME_UNDERLYING = "underlying";

    @SerializedName(SERIALIZED_NAME_UNDERLYING)
    @jakarta.annotation.Nullable
    private String underlying;

    public static final String SERIALIZED_NAME_UNIT = "unit";

    @SerializedName(SERIALIZED_NAME_UNIT)
    @jakarta.annotation.Nullable
    private Long unit;

    public static final String SERIALIZED_NAME_MAKER_FEE_RATE = "makerFeeRate";

    @SerializedName(SERIALIZED_NAME_MAKER_FEE_RATE)
    @jakarta.annotation.Nullable
    private String makerFeeRate;

    public static final String SERIALIZED_NAME_TAKER_FEE_RATE = "takerFeeRate";

    @SerializedName(SERIALIZED_NAME_TAKER_FEE_RATE)
    @jakarta.annotation.Nullable
    private String takerFeeRate;

    public static final String SERIALIZED_NAME_MIN_QTY = "minQty";

    @SerializedName(SERIALIZED_NAME_MIN_QTY)
    @jakarta.annotation.Nullable
    private String minQty;

    public static final String SERIALIZED_NAME_MAX_QTY = "maxQty";

    @SerializedName(SERIALIZED_NAME_MAX_QTY)
    @jakarta.annotation.Nullable
    private String maxQty;

    public static final String SERIALIZED_NAME_INITIAL_MARGIN = "initialMargin";

    @SerializedName(SERIALIZED_NAME_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String initialMargin;

    public static final String SERIALIZED_NAME_MAINTENANCE_MARGIN = "maintenanceMargin";

    @SerializedName(SERIALIZED_NAME_MAINTENANCE_MARGIN)
    @jakarta.annotation.Nullable
    private String maintenanceMargin;

    public static final String SERIALIZED_NAME_MIN_INITIAL_MARGIN = "minInitialMargin";

    @SerializedName(SERIALIZED_NAME_MIN_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String minInitialMargin;

    public static final String SERIALIZED_NAME_MIN_MAINTENANCE_MARGIN = "minMaintenanceMargin";

    @SerializedName(SERIALIZED_NAME_MIN_MAINTENANCE_MARGIN)
    @jakarta.annotation.Nullable
    private String minMaintenanceMargin;

    public static final String SERIALIZED_NAME_PRICE_SCALE = "priceScale";

    @SerializedName(SERIALIZED_NAME_PRICE_SCALE)
    @jakarta.annotation.Nullable
    private Long priceScale;

    public static final String SERIALIZED_NAME_QUANTITY_SCALE = "quantityScale";

    @SerializedName(SERIALIZED_NAME_QUANTITY_SCALE)
    @jakarta.annotation.Nullable
    private Long quantityScale;

    public static final String SERIALIZED_NAME_QUOTE_ASSET = "quoteAsset";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET)
    @jakarta.annotation.Nullable
    private String quoteAsset;

    public ExchangeInformationResponseOptionSymbolsInner() {}

    public ExchangeInformationResponseOptionSymbolsInner expiryDate(
            @jakarta.annotation.Nullable Long expiryDate) {
        this.expiryDate = expiryDate;
        return this;
    }

    /**
     * Get expiryDate
     *
     * @return expiryDate
     */
    @jakarta.annotation.Nullable
    public Long getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(@jakarta.annotation.Nullable Long expiryDate) {
        this.expiryDate = expiryDate;
    }

    public ExchangeInformationResponseOptionSymbolsInner filters(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseOptionSymbolsInnerFiltersInner>
                            filters) {
        this.filters = filters;
        return this;
    }

    public ExchangeInformationResponseOptionSymbolsInner addFiltersItem(
            ExchangeInformationResponseOptionSymbolsInnerFiltersInner filtersItem) {
        if (this.filters == null) {
            this.filters = new ArrayList<>();
        }
        this.filters.add(filtersItem);
        return this;
    }

    /**
     * Get filters
     *
     * @return filters
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ExchangeInformationResponseOptionSymbolsInnerFiltersInner> getFilters() {
        return filters;
    }

    public void setFilters(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseOptionSymbolsInnerFiltersInner>
                            filters) {
        this.filters = filters;
    }

    public ExchangeInformationResponseOptionSymbolsInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public ExchangeInformationResponseOptionSymbolsInner side(
            @jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public ExchangeInformationResponseOptionSymbolsInner strikePrice(
            @jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
        return this;
    }

    /**
     * Get strikePrice
     *
     * @return strikePrice
     */
    @jakarta.annotation.Nullable
    public String getStrikePrice() {
        return strikePrice;
    }

    public void setStrikePrice(@jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
    }

    public ExchangeInformationResponseOptionSymbolsInner underlying(
            @jakarta.annotation.Nullable String underlying) {
        this.underlying = underlying;
        return this;
    }

    /**
     * Get underlying
     *
     * @return underlying
     */
    @jakarta.annotation.Nullable
    public String getUnderlying() {
        return underlying;
    }

    public void setUnderlying(@jakarta.annotation.Nullable String underlying) {
        this.underlying = underlying;
    }

    public ExchangeInformationResponseOptionSymbolsInner unit(
            @jakarta.annotation.Nullable Long unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get unit
     *
     * @return unit
     */
    @jakarta.annotation.Nullable
    public Long getUnit() {
        return unit;
    }

    public void setUnit(@jakarta.annotation.Nullable Long unit) {
        this.unit = unit;
    }

    public ExchangeInformationResponseOptionSymbolsInner makerFeeRate(
            @jakarta.annotation.Nullable String makerFeeRate) {
        this.makerFeeRate = makerFeeRate;
        return this;
    }

    /**
     * Get makerFeeRate
     *
     * @return makerFeeRate
     */
    @jakarta.annotation.Nullable
    public String getMakerFeeRate() {
        return makerFeeRate;
    }

    public void setMakerFeeRate(@jakarta.annotation.Nullable String makerFeeRate) {
        this.makerFeeRate = makerFeeRate;
    }

    public ExchangeInformationResponseOptionSymbolsInner takerFeeRate(
            @jakarta.annotation.Nullable String takerFeeRate) {
        this.takerFeeRate = takerFeeRate;
        return this;
    }

    /**
     * Get takerFeeRate
     *
     * @return takerFeeRate
     */
    @jakarta.annotation.Nullable
    public String getTakerFeeRate() {
        return takerFeeRate;
    }

    public void setTakerFeeRate(@jakarta.annotation.Nullable String takerFeeRate) {
        this.takerFeeRate = takerFeeRate;
    }

    public ExchangeInformationResponseOptionSymbolsInner minQty(
            @jakarta.annotation.Nullable String minQty) {
        this.minQty = minQty;
        return this;
    }

    /**
     * Get minQty
     *
     * @return minQty
     */
    @jakarta.annotation.Nullable
    public String getMinQty() {
        return minQty;
    }

    public void setMinQty(@jakarta.annotation.Nullable String minQty) {
        this.minQty = minQty;
    }

    public ExchangeInformationResponseOptionSymbolsInner maxQty(
            @jakarta.annotation.Nullable String maxQty) {
        this.maxQty = maxQty;
        return this;
    }

    /**
     * Get maxQty
     *
     * @return maxQty
     */
    @jakarta.annotation.Nullable
    public String getMaxQty() {
        return maxQty;
    }

    public void setMaxQty(@jakarta.annotation.Nullable String maxQty) {
        this.maxQty = maxQty;
    }

    public ExchangeInformationResponseOptionSymbolsInner initialMargin(
            @jakarta.annotation.Nullable String initialMargin) {
        this.initialMargin = initialMargin;
        return this;
    }

    /**
     * Get initialMargin
     *
     * @return initialMargin
     */
    @jakarta.annotation.Nullable
    public String getInitialMargin() {
        return initialMargin;
    }

    public void setInitialMargin(@jakarta.annotation.Nullable String initialMargin) {
        this.initialMargin = initialMargin;
    }

    public ExchangeInformationResponseOptionSymbolsInner maintenanceMargin(
            @jakarta.annotation.Nullable String maintenanceMargin) {
        this.maintenanceMargin = maintenanceMargin;
        return this;
    }

    /**
     * Get maintenanceMargin
     *
     * @return maintenanceMargin
     */
    @jakarta.annotation.Nullable
    public String getMaintenanceMargin() {
        return maintenanceMargin;
    }

    public void setMaintenanceMargin(@jakarta.annotation.Nullable String maintenanceMargin) {
        this.maintenanceMargin = maintenanceMargin;
    }

    public ExchangeInformationResponseOptionSymbolsInner minInitialMargin(
            @jakarta.annotation.Nullable String minInitialMargin) {
        this.minInitialMargin = minInitialMargin;
        return this;
    }

    /**
     * Get minInitialMargin
     *
     * @return minInitialMargin
     */
    @jakarta.annotation.Nullable
    public String getMinInitialMargin() {
        return minInitialMargin;
    }

    public void setMinInitialMargin(@jakarta.annotation.Nullable String minInitialMargin) {
        this.minInitialMargin = minInitialMargin;
    }

    public ExchangeInformationResponseOptionSymbolsInner minMaintenanceMargin(
            @jakarta.annotation.Nullable String minMaintenanceMargin) {
        this.minMaintenanceMargin = minMaintenanceMargin;
        return this;
    }

    /**
     * Get minMaintenanceMargin
     *
     * @return minMaintenanceMargin
     */
    @jakarta.annotation.Nullable
    public String getMinMaintenanceMargin() {
        return minMaintenanceMargin;
    }

    public void setMinMaintenanceMargin(@jakarta.annotation.Nullable String minMaintenanceMargin) {
        this.minMaintenanceMargin = minMaintenanceMargin;
    }

    public ExchangeInformationResponseOptionSymbolsInner priceScale(
            @jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
        return this;
    }

    /**
     * Get priceScale
     *
     * @return priceScale
     */
    @jakarta.annotation.Nullable
    public Long getPriceScale() {
        return priceScale;
    }

    public void setPriceScale(@jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
    }

    public ExchangeInformationResponseOptionSymbolsInner quantityScale(
            @jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
        return this;
    }

    /**
     * Get quantityScale
     *
     * @return quantityScale
     */
    @jakarta.annotation.Nullable
    public Long getQuantityScale() {
        return quantityScale;
    }

    public void setQuantityScale(@jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
    }

    public ExchangeInformationResponseOptionSymbolsInner quoteAsset(
            @jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
        return this;
    }

    /**
     * Get quoteAsset
     *
     * @return quoteAsset
     */
    @jakarta.annotation.Nullable
    public String getQuoteAsset() {
        return quoteAsset;
    }

    public void setQuoteAsset(@jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExchangeInformationResponseOptionSymbolsInner
                exchangeInformationResponseOptionSymbolsInner =
                        (ExchangeInformationResponseOptionSymbolsInner) o;
        return Objects.equals(
                        this.expiryDate, exchangeInformationResponseOptionSymbolsInner.expiryDate)
                && Objects.equals(
                        this.filters, exchangeInformationResponseOptionSymbolsInner.filters)
                && Objects.equals(this.symbol, exchangeInformationResponseOptionSymbolsInner.symbol)
                && Objects.equals(this.side, exchangeInformationResponseOptionSymbolsInner.side)
                && Objects.equals(
                        this.strikePrice, exchangeInformationResponseOptionSymbolsInner.strikePrice)
                && Objects.equals(
                        this.underlying, exchangeInformationResponseOptionSymbolsInner.underlying)
                && Objects.equals(this.unit, exchangeInformationResponseOptionSymbolsInner.unit)
                && Objects.equals(
                        this.makerFeeRate,
                        exchangeInformationResponseOptionSymbolsInner.makerFeeRate)
                && Objects.equals(
                        this.takerFeeRate,
                        exchangeInformationResponseOptionSymbolsInner.takerFeeRate)
                && Objects.equals(this.minQty, exchangeInformationResponseOptionSymbolsInner.minQty)
                && Objects.equals(this.maxQty, exchangeInformationResponseOptionSymbolsInner.maxQty)
                && Objects.equals(
                        this.initialMargin,
                        exchangeInformationResponseOptionSymbolsInner.initialMargin)
                && Objects.equals(
                        this.maintenanceMargin,
                        exchangeInformationResponseOptionSymbolsInner.maintenanceMargin)
                && Objects.equals(
                        this.minInitialMargin,
                        exchangeInformationResponseOptionSymbolsInner.minInitialMargin)
                && Objects.equals(
                        this.minMaintenanceMargin,
                        exchangeInformationResponseOptionSymbolsInner.minMaintenanceMargin)
                && Objects.equals(
                        this.priceScale, exchangeInformationResponseOptionSymbolsInner.priceScale)
                && Objects.equals(
                        this.quantityScale,
                        exchangeInformationResponseOptionSymbolsInner.quantityScale)
                && Objects.equals(
                        this.quoteAsset, exchangeInformationResponseOptionSymbolsInner.quoteAsset);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                expiryDate,
                filters,
                symbol,
                side,
                strikePrice,
                underlying,
                unit,
                makerFeeRate,
                takerFeeRate,
                minQty,
                maxQty,
                initialMargin,
                maintenanceMargin,
                minInitialMargin,
                minMaintenanceMargin,
                priceScale,
                quantityScale,
                quoteAsset);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExchangeInformationResponseOptionSymbolsInner {\n");
        sb.append("		expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
        sb.append("		filters: ").append(toIndentedString(filters)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
        sb.append("		underlying: ").append(toIndentedString(underlying)).append("\n");
        sb.append("		unit: ").append(toIndentedString(unit)).append("\n");
        sb.append("		makerFeeRate: ").append(toIndentedString(makerFeeRate)).append("\n");
        sb.append("		takerFeeRate: ").append(toIndentedString(takerFeeRate)).append("\n");
        sb.append("		minQty: ").append(toIndentedString(minQty)).append("\n");
        sb.append("		maxQty: ").append(toIndentedString(maxQty)).append("\n");
        sb.append("		initialMargin: ").append(toIndentedString(initialMargin)).append("\n");
        sb.append("		maintenanceMargin: ").append(toIndentedString(maintenanceMargin)).append("\n");
        sb.append("		minInitialMargin: ").append(toIndentedString(minInitialMargin)).append("\n");
        sb.append("		minMaintenanceMargin: ")
                .append(toIndentedString(minMaintenanceMargin))
                .append("\n");
        sb.append("		priceScale: ").append(toIndentedString(priceScale)).append("\n");
        sb.append("		quantityScale: ").append(toIndentedString(quantityScale)).append("\n");
        sb.append("		quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object expiryDateValue = getExpiryDate();
        String expiryDateValueAsString = "";
        expiryDateValueAsString = expiryDateValue.toString();
        sb.append("expiryDate=").append(urlEncode(expiryDateValueAsString)).append("");
        Object filtersValue = getFilters();
        String filtersValueAsString = "";
        filtersValueAsString =
                (String)
                        ((Collection) filtersValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("filters=").append(urlEncode(filtersValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object strikePriceValue = getStrikePrice();
        String strikePriceValueAsString = "";
        strikePriceValueAsString = strikePriceValue.toString();
        sb.append("strikePrice=").append(urlEncode(strikePriceValueAsString)).append("");
        Object underlyingValue = getUnderlying();
        String underlyingValueAsString = "";
        underlyingValueAsString = underlyingValue.toString();
        sb.append("underlying=").append(urlEncode(underlyingValueAsString)).append("");
        Object unitValue = getUnit();
        String unitValueAsString = "";
        unitValueAsString = unitValue.toString();
        sb.append("unit=").append(urlEncode(unitValueAsString)).append("");
        Object makerFeeRateValue = getMakerFeeRate();
        String makerFeeRateValueAsString = "";
        makerFeeRateValueAsString = makerFeeRateValue.toString();
        sb.append("makerFeeRate=").append(urlEncode(makerFeeRateValueAsString)).append("");
        Object takerFeeRateValue = getTakerFeeRate();
        String takerFeeRateValueAsString = "";
        takerFeeRateValueAsString = takerFeeRateValue.toString();
        sb.append("takerFeeRate=").append(urlEncode(takerFeeRateValueAsString)).append("");
        Object minQtyValue = getMinQty();
        String minQtyValueAsString = "";
        minQtyValueAsString = minQtyValue.toString();
        sb.append("minQty=").append(urlEncode(minQtyValueAsString)).append("");
        Object maxQtyValue = getMaxQty();
        String maxQtyValueAsString = "";
        maxQtyValueAsString = maxQtyValue.toString();
        sb.append("maxQty=").append(urlEncode(maxQtyValueAsString)).append("");
        Object initialMarginValue = getInitialMargin();
        String initialMarginValueAsString = "";
        initialMarginValueAsString = initialMarginValue.toString();
        sb.append("initialMargin=").append(urlEncode(initialMarginValueAsString)).append("");
        Object maintenanceMarginValue = getMaintenanceMargin();
        String maintenanceMarginValueAsString = "";
        maintenanceMarginValueAsString = maintenanceMarginValue.toString();
        sb.append("maintenanceMargin=")
                .append(urlEncode(maintenanceMarginValueAsString))
                .append("");
        Object minInitialMarginValue = getMinInitialMargin();
        String minInitialMarginValueAsString = "";
        minInitialMarginValueAsString = minInitialMarginValue.toString();
        sb.append("minInitialMargin=").append(urlEncode(minInitialMarginValueAsString)).append("");
        Object minMaintenanceMarginValue = getMinMaintenanceMargin();
        String minMaintenanceMarginValueAsString = "";
        minMaintenanceMarginValueAsString = minMaintenanceMarginValue.toString();
        sb.append("minMaintenanceMargin=")
                .append(urlEncode(minMaintenanceMarginValueAsString))
                .append("");
        Object priceScaleValue = getPriceScale();
        String priceScaleValueAsString = "";
        priceScaleValueAsString = priceScaleValue.toString();
        sb.append("priceScale=").append(urlEncode(priceScaleValueAsString)).append("");
        Object quantityScaleValue = getQuantityScale();
        String quantityScaleValueAsString = "";
        quantityScaleValueAsString = quantityScaleValue.toString();
        sb.append("quantityScale=").append(urlEncode(quantityScaleValueAsString)).append("");
        Object quoteAssetValue = getQuoteAsset();
        String quoteAssetValueAsString = "";
        quoteAssetValueAsString = quoteAssetValue.toString();
        sb.append("quoteAsset=").append(urlEncode(quoteAssetValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("expiryDate");
        openapiFields.add("filters");
        openapiFields.add("symbol");
        openapiFields.add("side");
        openapiFields.add("strikePrice");
        openapiFields.add("underlying");
        openapiFields.add("unit");
        openapiFields.add("makerFeeRate");
        openapiFields.add("takerFeeRate");
        openapiFields.add("minQty");
        openapiFields.add("maxQty");
        openapiFields.add("initialMargin");
        openapiFields.add("maintenanceMargin");
        openapiFields.add("minInitialMargin");
        openapiFields.add("minMaintenanceMargin");
        openapiFields.add("priceScale");
        openapiFields.add("quantityScale");
        openapiFields.add("quoteAsset");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ExchangeInformationResponseOptionSymbolsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ExchangeInformationResponseOptionSymbolsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " ExchangeInformationResponseOptionSymbolsInner is not found"
                                    + " in the empty JSON string",
                                ExchangeInformationResponseOptionSymbolsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ExchangeInformationResponseOptionSymbolsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ExchangeInformationResponseOptionSymbolsInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
            JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
            if (jsonArrayfilters != null) {
                // ensure the json data is an array
                if (!jsonObj.get("filters").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `filters` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("filters").toString()));
                }

                // validate the optional field `filters` (array)
                for (int i = 0; i < jsonArrayfilters.size(); i++) {
                    ExchangeInformationResponseOptionSymbolsInnerFiltersInner.validateJsonElement(
                            jsonArrayfilters.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("strikePrice") != null && !jsonObj.get("strikePrice").isJsonNull())
                && !jsonObj.get("strikePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strikePrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strikePrice").toString()));
        }
        if ((jsonObj.get("underlying") != null && !jsonObj.get("underlying").isJsonNull())
                && !jsonObj.get("underlying").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `underlying` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("underlying").toString()));
        }
        if ((jsonObj.get("makerFeeRate") != null && !jsonObj.get("makerFeeRate").isJsonNull())
                && !jsonObj.get("makerFeeRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `makerFeeRate` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("makerFeeRate").toString()));
        }
        if ((jsonObj.get("takerFeeRate") != null && !jsonObj.get("takerFeeRate").isJsonNull())
                && !jsonObj.get("takerFeeRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `takerFeeRate` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("takerFeeRate").toString()));
        }
        if ((jsonObj.get("minQty") != null && !jsonObj.get("minQty").isJsonNull())
                && !jsonObj.get("minQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("minQty").toString()));
        }
        if ((jsonObj.get("maxQty") != null && !jsonObj.get("maxQty").isJsonNull())
                && !jsonObj.get("maxQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("maxQty").toString()));
        }
        if ((jsonObj.get("initialMargin") != null && !jsonObj.get("initialMargin").isJsonNull())
                && !jsonObj.get("initialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `initialMargin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("initialMargin").toString()));
        }
        if ((jsonObj.get("maintenanceMargin") != null
                        && !jsonObj.get("maintenanceMargin").isJsonNull())
                && !jsonObj.get("maintenanceMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maintenanceMargin` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("maintenanceMargin").toString()));
        }
        if ((jsonObj.get("minInitialMargin") != null
                        && !jsonObj.get("minInitialMargin").isJsonNull())
                && !jsonObj.get("minInitialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minInitialMargin` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("minInitialMargin").toString()));
        }
        if ((jsonObj.get("minMaintenanceMargin") != null
                        && !jsonObj.get("minMaintenanceMargin").isJsonNull())
                && !jsonObj.get("minMaintenanceMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `minMaintenanceMargin` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("minMaintenanceMargin").toString()));
        }
        if ((jsonObj.get("quoteAsset") != null && !jsonObj.get("quoteAsset").isJsonNull())
                && !jsonObj.get("quoteAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteAsset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ExchangeInformationResponseOptionSymbolsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'ExchangeInformationResponseOptionSymbolsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeInformationResponseOptionSymbolsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(ExchangeInformationResponseOptionSymbolsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ExchangeInformationResponseOptionSymbolsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, ExchangeInformationResponseOptionSymbolsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ExchangeInformationResponseOptionSymbolsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ExchangeInformationResponseOptionSymbolsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ExchangeInformationResponseOptionSymbolsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     ExchangeInformationResponseOptionSymbolsInner
     */
    public static ExchangeInformationResponseOptionSymbolsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, ExchangeInformationResponseOptionSymbolsInner.class);
    }

    /**
     * Convert an instance of ExchangeInformationResponseOptionSymbolsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
