/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.derivatives_trading_options.rest.model.AutoCancelAllOpenOrdersRequest;
import com.binance.connector.client.derivatives_trading_options.rest.model.AutoCancelAllOpenOrdersResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.GetAutoCancelAllOpenOrdersResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.GetMarketMakerProtectionConfigResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.OptionMarginAccountInformationResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.ResetMarketMakerProtectionConfigRequest;
import com.binance.connector.client.derivatives_trading_options.rest.model.ResetMarketMakerProtectionConfigResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.SetAutoCancelAllOpenOrdersRequest;
import com.binance.connector.client.derivatives_trading_options.rest.model.SetAutoCancelAllOpenOrdersResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.SetMarketMakerProtectionConfigRequest;
import com.binance.connector.client.derivatives_trading_options.rest.model.SetMarketMakerProtectionConfigResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class MarketMakerEndpointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-derivatives-trading-options/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public MarketMakerEndpointsApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public MarketMakerEndpointsApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for autoCancelAllOpenOrders
     *
     * @param autoCancelAllOpenOrdersRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Auto-Cancel All Open Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Auto-Cancel-All-Open-Orders-Heartbeat">Auto-Cancel
     *     All Open Orders (Kill-Switch) Heartbeat (TRADE) Documentation</a>
     */
    private okhttp3.Call autoCancelAllOpenOrdersCall(
            AutoCancelAllOpenOrdersRequest autoCancelAllOpenOrdersRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/countdownCancelAllHeartBeat";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autoCancelAllOpenOrdersRequest.getUnderlyings() != null) {
            localVarFormParams.put("underlyings", autoCancelAllOpenOrdersRequest.getUnderlyings());
        }

        if (autoCancelAllOpenOrdersRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", autoCancelAllOpenOrdersRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call autoCancelAllOpenOrdersValidateBeforeCall(
            AutoCancelAllOpenOrdersRequest autoCancelAllOpenOrdersRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {autoCancelAllOpenOrdersRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "autoCancelAllOpenOrders",
                                    AutoCancelAllOpenOrdersRequest.class);
            Set<ConstraintViolation<MarketMakerEndpointsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return autoCancelAllOpenOrdersCall(autoCancelAllOpenOrdersRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Auto-Cancel All Open Orders (Kill-Switch) Heartbeat (TRADE) This endpoint resets the time
     * from which the countdown will begin to the time this messaged is received. It should be
     * called repeatedly as heartbeats. Multiple heartbeats can be updated at once by specifying the
     * underlying symbols as a list (ex. BTCUSDT,ETHUSDT) in the underlyings parameter. * The
     * response will only include underlying symbols where the heartbeat has been successfully
     * updated. Weight: 10
     *
     * @param autoCancelAllOpenOrdersRequest (required)
     * @return ApiResponse&lt;AutoCancelAllOpenOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Auto-Cancel All Open Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Auto-Cancel-All-Open-Orders-Heartbeat">Auto-Cancel
     *     All Open Orders (Kill-Switch) Heartbeat (TRADE) Documentation</a>
     */
    public ApiResponse<AutoCancelAllOpenOrdersResponse> autoCancelAllOpenOrders(
            @Valid @NotNull AutoCancelAllOpenOrdersRequest autoCancelAllOpenOrdersRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                autoCancelAllOpenOrdersValidateBeforeCall(autoCancelAllOpenOrdersRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AutoCancelAllOpenOrdersResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getAutoCancelAllOpenOrders
     *
     * @param underlying underlying, e.g BTCUSDT (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Auto-Cancel All Open Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Get-Auto-Cancel-All-Open-Orders-Config">Get
     *     Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE) Documentation</a>
     */
    private okhttp3.Call getAutoCancelAllOpenOrdersCall(String underlying, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/countdownCancelAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (underlying != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("underlying", underlying));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutoCancelAllOpenOrdersValidateBeforeCall(
            String underlying, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {underlying, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod("getAutoCancelAllOpenOrders", String.class, Long.class);
            Set<ConstraintViolation<MarketMakerEndpointsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getAutoCancelAllOpenOrdersCall(underlying, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE) This endpoint returns the
     * auto-cancel parameters for each underlying symbol. Note only active auto-cancel parameters
     * will be returned, if countdownTime is set to 0 (ie. countdownTime has been turned off), the
     * underlying symbol and corresponding countdownTime parameter will not be returned in the
     * response. * countdownTime &#x3D; 0 means the function is disabled. Weight: 1
     *
     * @param underlying underlying, e.g BTCUSDT (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetAutoCancelAllOpenOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Auto-Cancel All Open Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Get-Auto-Cancel-All-Open-Orders-Config">Get
     *     Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE) Documentation</a>
     */
    public ApiResponse<GetAutoCancelAllOpenOrdersResponse> getAutoCancelAllOpenOrders(
            String underlying, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                getAutoCancelAllOpenOrdersValidateBeforeCall(underlying, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetAutoCancelAllOpenOrdersResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getMarketMakerProtectionConfig
     *
     * @param underlying underlying, e.g BTCUSDT (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Market Maker Protection Config </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Get-Market-Maker-Protection-Config">Get
     *     Market Maker Protection Config (TRADE) Documentation</a>
     */
    private okhttp3.Call getMarketMakerProtectionConfigCall(String underlying, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/mmp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (underlying != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("underlying", underlying));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMarketMakerProtectionConfigValidateBeforeCall(
            String underlying, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {underlying, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod("getMarketMakerProtectionConfig", String.class, Long.class);
            Set<ConstraintViolation<MarketMakerEndpointsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getMarketMakerProtectionConfigCall(underlying, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Market Maker Protection Config (TRADE) Get config for MMP. Weight: 1
     *
     * @param underlying underlying, e.g BTCUSDT (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetMarketMakerProtectionConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Market Maker Protection Config </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Get-Market-Maker-Protection-Config">Get
     *     Market Maker Protection Config (TRADE) Documentation</a>
     */
    public ApiResponse<GetMarketMakerProtectionConfigResponse> getMarketMakerProtectionConfig(
            String underlying, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                getMarketMakerProtectionConfigValidateBeforeCall(underlying, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetMarketMakerProtectionConfigResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for optionMarginAccountInformation
     *
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Option Margin Account Information </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Option-Margin-Account-Information">Option
     *     Margin Account Information (USER_DATA) Documentation</a>
     */
    private okhttp3.Call optionMarginAccountInformationCall(Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/marginAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call optionMarginAccountInformationValidateBeforeCall(Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method = this.getClass().getMethod("optionMarginAccountInformation", Long.class);
            Set<ConstraintViolation<MarketMakerEndpointsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return optionMarginAccountInformationCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Option Margin Account Information (USER_DATA) Get current account information. Weight: 3
     *
     * @param recvWindow (optional)
     * @return ApiResponse&lt;OptionMarginAccountInformationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Option Margin Account Information </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Option-Margin-Account-Information">Option
     *     Margin Account Information (USER_DATA) Documentation</a>
     */
    public ApiResponse<OptionMarginAccountInformationResponse> optionMarginAccountInformation(
            Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall = optionMarginAccountInformationValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<OptionMarginAccountInformationResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for resetMarketMakerProtectionConfig
     *
     * @param resetMarketMakerProtectionConfigRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Reset Market Maker Protection Config </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Reset-Market-Maker-Protection-Config">Reset
     *     Market Maker Protection Config (TRADE) Documentation</a>
     */
    private okhttp3.Call resetMarketMakerProtectionConfigCall(
            ResetMarketMakerProtectionConfigRequest resetMarketMakerProtectionConfigRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/mmpReset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (resetMarketMakerProtectionConfigRequest.getUnderlying() != null) {
            localVarFormParams.put(
                    "underlying", resetMarketMakerProtectionConfigRequest.getUnderlying());
        }

        if (resetMarketMakerProtectionConfigRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", resetMarketMakerProtectionConfigRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resetMarketMakerProtectionConfigValidateBeforeCall(
            ResetMarketMakerProtectionConfigRequest resetMarketMakerProtectionConfigRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {resetMarketMakerProtectionConfigRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "resetMarketMakerProtectionConfig",
                                    ResetMarketMakerProtectionConfigRequest.class);
            Set<ConstraintViolation<MarketMakerEndpointsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return resetMarketMakerProtectionConfigCall(
                        resetMarketMakerProtectionConfigRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Reset Market Maker Protection Config (TRADE) Reset MMP, start MMP order again. Weight: 1
     *
     * @param resetMarketMakerProtectionConfigRequest (required)
     * @return ApiResponse&lt;ResetMarketMakerProtectionConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Reset Market Maker Protection Config </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Reset-Market-Maker-Protection-Config">Reset
     *     Market Maker Protection Config (TRADE) Documentation</a>
     */
    public ApiResponse<ResetMarketMakerProtectionConfigResponse> resetMarketMakerProtectionConfig(
            @Valid @NotNull
                    ResetMarketMakerProtectionConfigRequest resetMarketMakerProtectionConfigRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                resetMarketMakerProtectionConfigValidateBeforeCall(
                        resetMarketMakerProtectionConfigRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<ResetMarketMakerProtectionConfigResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for setAutoCancelAllOpenOrders
     *
     * @param setAutoCancelAllOpenOrdersRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Auto-Cancel All Open Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Set-Auto-Cancel-All-Open-Orders-Config">Set
     *     Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE) Documentation</a>
     */
    private okhttp3.Call setAutoCancelAllOpenOrdersCall(
            SetAutoCancelAllOpenOrdersRequest setAutoCancelAllOpenOrdersRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/countdownCancelAll";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (setAutoCancelAllOpenOrdersRequest.getUnderlying() != null) {
            localVarFormParams.put("underlying", setAutoCancelAllOpenOrdersRequest.getUnderlying());
        }

        if (setAutoCancelAllOpenOrdersRequest.getCountdownTime() != null) {
            localVarFormParams.put(
                    "countdownTime", setAutoCancelAllOpenOrdersRequest.getCountdownTime());
        }

        if (setAutoCancelAllOpenOrdersRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", setAutoCancelAllOpenOrdersRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setAutoCancelAllOpenOrdersValidateBeforeCall(
            SetAutoCancelAllOpenOrdersRequest setAutoCancelAllOpenOrdersRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {setAutoCancelAllOpenOrdersRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "setAutoCancelAllOpenOrders",
                                    SetAutoCancelAllOpenOrdersRequest.class);
            Set<ConstraintViolation<MarketMakerEndpointsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return setAutoCancelAllOpenOrdersCall(setAutoCancelAllOpenOrdersRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Set Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE) This endpoint sets the
     * parameters of the auto-cancel feature which cancels all open orders (both market maker
     * protection and non market maker protection order types) of the underlying symbol at the end
     * of the specified countdown time period if no heartbeat message is sent. After the countdown
     * time period, all open orders will be cancelled and new orders will be rejected with error
     * code -2010 until either a heartbeat message is sent or the auto-cancel feature is turned off
     * by setting countdownTime to 0. * This rest endpoint sets up the parameters to cancel your
     * open orders in case of an outage or disconnection. * Example usage: Call this endpoint with a
     * countdownTime value of 10000 (10 seconds) to turn on the auto-cancel feature. If the
     * corresponding countdownCancelAllHeartBeat endpoint is not called within 10 seconds with the
     * specified underlying symbol, all open orders of the specified symbol will be automatically
     * canceled. If this endpoint is called with an countdownTime of 0, the countdown timer will be
     * stopped. * The system will check all countdowns approximately every 1000 milliseconds,
     * **please note that sufficient redundancy should be considered when using this function**. We
     * do not recommend setting the countdown time to be too precise or too small. Weight: 1
     *
     * @param setAutoCancelAllOpenOrdersRequest (required)
     * @return ApiResponse&lt;SetAutoCancelAllOpenOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Auto-Cancel All Open Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Set-Auto-Cancel-All-Open-Orders-Config">Set
     *     Auto-Cancel All Open Orders (Kill-Switch) Config (TRADE) Documentation</a>
     */
    public ApiResponse<SetAutoCancelAllOpenOrdersResponse> setAutoCancelAllOpenOrders(
            @Valid @NotNull SetAutoCancelAllOpenOrdersRequest setAutoCancelAllOpenOrdersRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                setAutoCancelAllOpenOrdersValidateBeforeCall(setAutoCancelAllOpenOrdersRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SetAutoCancelAllOpenOrdersResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for setMarketMakerProtectionConfig
     *
     * @param setMarketMakerProtectionConfigRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Market Maker Protection Config </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Set-Market-Maker-Protection-Config">Set
     *     Market Maker Protection Config (TRADE) Documentation</a>
     */
    private okhttp3.Call setMarketMakerProtectionConfigCall(
            SetMarketMakerProtectionConfigRequest setMarketMakerProtectionConfigRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/mmpSet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (setMarketMakerProtectionConfigRequest.getUnderlying() != null) {
            localVarFormParams.put(
                    "underlying", setMarketMakerProtectionConfigRequest.getUnderlying());
        }

        if (setMarketMakerProtectionConfigRequest.getWindowTimeInMilliseconds() != null) {
            localVarFormParams.put(
                    "windowTimeInMilliseconds",
                    setMarketMakerProtectionConfigRequest.getWindowTimeInMilliseconds());
        }

        if (setMarketMakerProtectionConfigRequest.getFrozenTimeInMilliseconds() != null) {
            localVarFormParams.put(
                    "frozenTimeInMilliseconds",
                    setMarketMakerProtectionConfigRequest.getFrozenTimeInMilliseconds());
        }

        if (setMarketMakerProtectionConfigRequest.getQtyLimit() != null) {
            localVarFormParams.put(
                    "qtyLimit",
                    DecimalFormatter.getFormatter()
                            .format(setMarketMakerProtectionConfigRequest.getQtyLimit()));
        }

        if (setMarketMakerProtectionConfigRequest.getDeltaLimit() != null) {
            localVarFormParams.put(
                    "deltaLimit",
                    DecimalFormatter.getFormatter()
                            .format(setMarketMakerProtectionConfigRequest.getDeltaLimit()));
        }

        if (setMarketMakerProtectionConfigRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", setMarketMakerProtectionConfigRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setMarketMakerProtectionConfigValidateBeforeCall(
            SetMarketMakerProtectionConfigRequest setMarketMakerProtectionConfigRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {setMarketMakerProtectionConfigRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "setMarketMakerProtectionConfig",
                                    SetMarketMakerProtectionConfigRequest.class);
            Set<ConstraintViolation<MarketMakerEndpointsApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return setMarketMakerProtectionConfigCall(setMarketMakerProtectionConfigRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Set Market Maker Protection Config (TRADE) Set config for MMP. Market Maker Protection(MMP)
     * is a set of protection mechanism for option market maker, this mechanism is able to prevent
     * mass trading in short period time. Once market maker&#39;s account branches the threshold,
     * the Market Maker Protection will be triggered. When Market Maker Protection triggers, all the
     * current MMP orders will be canceled, new MMP orders will be rejected. Market maker can use
     * this time to reevaluate market and modify order price. Weight: 1
     *
     * @param setMarketMakerProtectionConfigRequest (required)
     * @return ApiResponse&lt;SetMarketMakerProtectionConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Set Market Maker Protection Config </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-endpoints/Set-Market-Maker-Protection-Config">Set
     *     Market Maker Protection Config (TRADE) Documentation</a>
     */
    public ApiResponse<SetMarketMakerProtectionConfigResponse> setMarketMakerProtectionConfig(
            @Valid @NotNull
                    SetMarketMakerProtectionConfigRequest setMarketMakerProtectionConfigRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                setMarketMakerProtectionConfigValidateBeforeCall(
                        setMarketMakerProtectionConfigRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SetMarketMakerProtectionConfigResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
