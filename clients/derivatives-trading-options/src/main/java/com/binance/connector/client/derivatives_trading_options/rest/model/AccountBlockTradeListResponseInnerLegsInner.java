/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AccountBlockTradeListResponseInnerLegsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountBlockTradeListResponseInnerLegsInner {
    public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";

    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    @jakarta.annotation.Nullable
    private Long createTime;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private String orderId;

    public static final String SERIALIZED_NAME_ORDER_PRICE = "orderPrice";

    @SerializedName(SERIALIZED_NAME_ORDER_PRICE)
    @jakarta.annotation.Nullable
    private Double orderPrice;

    public static final String SERIALIZED_NAME_ORDER_QUANTITY = "orderQuantity";

    @SerializedName(SERIALIZED_NAME_ORDER_QUANTITY)
    @jakarta.annotation.Nullable
    private Double orderQuantity;

    public static final String SERIALIZED_NAME_ORDER_STATUS = "orderStatus";

    @SerializedName(SERIALIZED_NAME_ORDER_STATUS)
    @jakarta.annotation.Nullable
    private String orderStatus;

    public static final String SERIALIZED_NAME_EXECUTED_QTY = "executedQty";

    @SerializedName(SERIALIZED_NAME_EXECUTED_QTY)
    @jakarta.annotation.Nullable
    private Double executedQty;

    public static final String SERIALIZED_NAME_EXECUTED_AMOUNT = "executedAmount";

    @SerializedName(SERIALIZED_NAME_EXECUTED_AMOUNT)
    @jakarta.annotation.Nullable
    private Double executedAmount;

    public static final String SERIALIZED_NAME_FEE = "fee";

    @SerializedName(SERIALIZED_NAME_FEE)
    @jakarta.annotation.Nullable
    private Double fee;

    public static final String SERIALIZED_NAME_ORDER_TYPE = "orderType";

    @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
    @jakarta.annotation.Nullable
    private String orderType;

    public static final String SERIALIZED_NAME_ORDER_SIDE = "orderSide";

    @SerializedName(SERIALIZED_NAME_ORDER_SIDE)
    @jakarta.annotation.Nullable
    private String orderSide;

    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private String id;

    public static final String SERIALIZED_NAME_TRADE_ID = "tradeId";

    @SerializedName(SERIALIZED_NAME_TRADE_ID)
    @jakarta.annotation.Nullable
    private Long tradeId;

    public static final String SERIALIZED_NAME_TRADE_PRICE = "tradePrice";

    @SerializedName(SERIALIZED_NAME_TRADE_PRICE)
    @jakarta.annotation.Nullable
    private Double tradePrice;

    public static final String SERIALIZED_NAME_TRADE_QTY = "tradeQty";

    @SerializedName(SERIALIZED_NAME_TRADE_QTY)
    @jakarta.annotation.Nullable
    private Double tradeQty;

    public static final String SERIALIZED_NAME_TRADE_TIME = "tradeTime";

    @SerializedName(SERIALIZED_NAME_TRADE_TIME)
    @jakarta.annotation.Nullable
    private Long tradeTime;

    public static final String SERIALIZED_NAME_LIQUIDITY = "liquidity";

    @SerializedName(SERIALIZED_NAME_LIQUIDITY)
    @jakarta.annotation.Nullable
    private String liquidity;

    public static final String SERIALIZED_NAME_COMMISSION = "commission";

    @SerializedName(SERIALIZED_NAME_COMMISSION)
    @jakarta.annotation.Nullable
    private Double commission;

    public AccountBlockTradeListResponseInnerLegsInner() {}

    public AccountBlockTradeListResponseInnerLegsInner createTime(
            @jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get createTime
     *
     * @return createTime
     */
    @jakarta.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(@jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
    }

    public AccountBlockTradeListResponseInnerLegsInner updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    public AccountBlockTradeListResponseInnerLegsInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public AccountBlockTradeListResponseInnerLegsInner orderId(
            @jakarta.annotation.Nullable String orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public String getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable String orderId) {
        this.orderId = orderId;
    }

    public AccountBlockTradeListResponseInnerLegsInner orderPrice(
            @jakarta.annotation.Nullable Double orderPrice) {
        this.orderPrice = orderPrice;
        return this;
    }

    /**
     * Get orderPrice
     *
     * @return orderPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getOrderPrice() {
        return orderPrice;
    }

    public void setOrderPrice(@jakarta.annotation.Nullable Double orderPrice) {
        this.orderPrice = orderPrice;
    }

    public AccountBlockTradeListResponseInnerLegsInner orderQuantity(
            @jakarta.annotation.Nullable Double orderQuantity) {
        this.orderQuantity = orderQuantity;
        return this;
    }

    /**
     * Get orderQuantity
     *
     * @return orderQuantity
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getOrderQuantity() {
        return orderQuantity;
    }

    public void setOrderQuantity(@jakarta.annotation.Nullable Double orderQuantity) {
        this.orderQuantity = orderQuantity;
    }

    public AccountBlockTradeListResponseInnerLegsInner orderStatus(
            @jakarta.annotation.Nullable String orderStatus) {
        this.orderStatus = orderStatus;
        return this;
    }

    /**
     * Get orderStatus
     *
     * @return orderStatus
     */
    @jakarta.annotation.Nullable
    public String getOrderStatus() {
        return orderStatus;
    }

    public void setOrderStatus(@jakarta.annotation.Nullable String orderStatus) {
        this.orderStatus = orderStatus;
    }

    public AccountBlockTradeListResponseInnerLegsInner executedQty(
            @jakarta.annotation.Nullable Double executedQty) {
        this.executedQty = executedQty;
        return this;
    }

    /**
     * Get executedQty
     *
     * @return executedQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(@jakarta.annotation.Nullable Double executedQty) {
        this.executedQty = executedQty;
    }

    public AccountBlockTradeListResponseInnerLegsInner executedAmount(
            @jakarta.annotation.Nullable Double executedAmount) {
        this.executedAmount = executedAmount;
        return this;
    }

    /**
     * Get executedAmount
     *
     * @return executedAmount
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getExecutedAmount() {
        return executedAmount;
    }

    public void setExecutedAmount(@jakarta.annotation.Nullable Double executedAmount) {
        this.executedAmount = executedAmount;
    }

    public AccountBlockTradeListResponseInnerLegsInner fee(
            @jakarta.annotation.Nullable Double fee) {
        this.fee = fee;
        return this;
    }

    /**
     * Get fee
     *
     * @return fee
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getFee() {
        return fee;
    }

    public void setFee(@jakarta.annotation.Nullable Double fee) {
        this.fee = fee;
    }

    public AccountBlockTradeListResponseInnerLegsInner orderType(
            @jakarta.annotation.Nullable String orderType) {
        this.orderType = orderType;
        return this;
    }

    /**
     * Get orderType
     *
     * @return orderType
     */
    @jakarta.annotation.Nullable
    public String getOrderType() {
        return orderType;
    }

    public void setOrderType(@jakarta.annotation.Nullable String orderType) {
        this.orderType = orderType;
    }

    public AccountBlockTradeListResponseInnerLegsInner orderSide(
            @jakarta.annotation.Nullable String orderSide) {
        this.orderSide = orderSide;
        return this;
    }

    /**
     * Get orderSide
     *
     * @return orderSide
     */
    @jakarta.annotation.Nullable
    public String getOrderSide() {
        return orderSide;
    }

    public void setOrderSide(@jakarta.annotation.Nullable String orderSide) {
        this.orderSide = orderSide;
    }

    public AccountBlockTradeListResponseInnerLegsInner id(@jakarta.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable String id) {
        this.id = id;
    }

    public AccountBlockTradeListResponseInnerLegsInner tradeId(
            @jakarta.annotation.Nullable Long tradeId) {
        this.tradeId = tradeId;
        return this;
    }

    /**
     * Get tradeId
     *
     * @return tradeId
     */
    @jakarta.annotation.Nullable
    public Long getTradeId() {
        return tradeId;
    }

    public void setTradeId(@jakarta.annotation.Nullable Long tradeId) {
        this.tradeId = tradeId;
    }

    public AccountBlockTradeListResponseInnerLegsInner tradePrice(
            @jakarta.annotation.Nullable Double tradePrice) {
        this.tradePrice = tradePrice;
        return this;
    }

    /**
     * Get tradePrice
     *
     * @return tradePrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getTradePrice() {
        return tradePrice;
    }

    public void setTradePrice(@jakarta.annotation.Nullable Double tradePrice) {
        this.tradePrice = tradePrice;
    }

    public AccountBlockTradeListResponseInnerLegsInner tradeQty(
            @jakarta.annotation.Nullable Double tradeQty) {
        this.tradeQty = tradeQty;
        return this;
    }

    /**
     * Get tradeQty
     *
     * @return tradeQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getTradeQty() {
        return tradeQty;
    }

    public void setTradeQty(@jakarta.annotation.Nullable Double tradeQty) {
        this.tradeQty = tradeQty;
    }

    public AccountBlockTradeListResponseInnerLegsInner tradeTime(
            @jakarta.annotation.Nullable Long tradeTime) {
        this.tradeTime = tradeTime;
        return this;
    }

    /**
     * Get tradeTime
     *
     * @return tradeTime
     */
    @jakarta.annotation.Nullable
    public Long getTradeTime() {
        return tradeTime;
    }

    public void setTradeTime(@jakarta.annotation.Nullable Long tradeTime) {
        this.tradeTime = tradeTime;
    }

    public AccountBlockTradeListResponseInnerLegsInner liquidity(
            @jakarta.annotation.Nullable String liquidity) {
        this.liquidity = liquidity;
        return this;
    }

    /**
     * Get liquidity
     *
     * @return liquidity
     */
    @jakarta.annotation.Nullable
    public String getLiquidity() {
        return liquidity;
    }

    public void setLiquidity(@jakarta.annotation.Nullable String liquidity) {
        this.liquidity = liquidity;
    }

    public AccountBlockTradeListResponseInnerLegsInner commission(
            @jakarta.annotation.Nullable Double commission) {
        this.commission = commission;
        return this;
    }

    /**
     * Get commission
     *
     * @return commission
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getCommission() {
        return commission;
    }

    public void setCommission(@jakarta.annotation.Nullable Double commission) {
        this.commission = commission;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountBlockTradeListResponseInnerLegsInner accountBlockTradeListResponseInnerLegsInner =
                (AccountBlockTradeListResponseInnerLegsInner) o;
        return Objects.equals(
                        this.createTime, accountBlockTradeListResponseInnerLegsInner.createTime)
                && Objects.equals(
                        this.updateTime, accountBlockTradeListResponseInnerLegsInner.updateTime)
                && Objects.equals(this.symbol, accountBlockTradeListResponseInnerLegsInner.symbol)
                && Objects.equals(this.orderId, accountBlockTradeListResponseInnerLegsInner.orderId)
                && Objects.equals(
                        this.orderPrice, accountBlockTradeListResponseInnerLegsInner.orderPrice)
                && Objects.equals(
                        this.orderQuantity,
                        accountBlockTradeListResponseInnerLegsInner.orderQuantity)
                && Objects.equals(
                        this.orderStatus, accountBlockTradeListResponseInnerLegsInner.orderStatus)
                && Objects.equals(
                        this.executedQty, accountBlockTradeListResponseInnerLegsInner.executedQty)
                && Objects.equals(
                        this.executedAmount,
                        accountBlockTradeListResponseInnerLegsInner.executedAmount)
                && Objects.equals(this.fee, accountBlockTradeListResponseInnerLegsInner.fee)
                && Objects.equals(
                        this.orderType, accountBlockTradeListResponseInnerLegsInner.orderType)
                && Objects.equals(
                        this.orderSide, accountBlockTradeListResponseInnerLegsInner.orderSide)
                && Objects.equals(this.id, accountBlockTradeListResponseInnerLegsInner.id)
                && Objects.equals(this.tradeId, accountBlockTradeListResponseInnerLegsInner.tradeId)
                && Objects.equals(
                        this.tradePrice, accountBlockTradeListResponseInnerLegsInner.tradePrice)
                && Objects.equals(
                        this.tradeQty, accountBlockTradeListResponseInnerLegsInner.tradeQty)
                && Objects.equals(
                        this.tradeTime, accountBlockTradeListResponseInnerLegsInner.tradeTime)
                && Objects.equals(
                        this.liquidity, accountBlockTradeListResponseInnerLegsInner.liquidity)
                && Objects.equals(
                        this.commission, accountBlockTradeListResponseInnerLegsInner.commission);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                createTime,
                updateTime,
                symbol,
                orderId,
                orderPrice,
                orderQuantity,
                orderStatus,
                executedQty,
                executedAmount,
                fee,
                orderType,
                orderSide,
                id,
                tradeId,
                tradePrice,
                tradeQty,
                tradeTime,
                liquidity,
                commission);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountBlockTradeListResponseInnerLegsInner {\n");
        sb.append("		createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		orderPrice: ").append(toIndentedString(orderPrice)).append("\n");
        sb.append("		orderQuantity: ").append(toIndentedString(orderQuantity)).append("\n");
        sb.append("		orderStatus: ").append(toIndentedString(orderStatus)).append("\n");
        sb.append("		executedQty: ").append(toIndentedString(executedQty)).append("\n");
        sb.append("		executedAmount: ").append(toIndentedString(executedAmount)).append("\n");
        sb.append("		fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("		orderType: ").append(toIndentedString(orderType)).append("\n");
        sb.append("		orderSide: ").append(toIndentedString(orderSide)).append("\n");
        sb.append("		id: ").append(toIndentedString(id)).append("\n");
        sb.append("		tradeId: ").append(toIndentedString(tradeId)).append("\n");
        sb.append("		tradePrice: ").append(toIndentedString(tradePrice)).append("\n");
        sb.append("		tradeQty: ").append(toIndentedString(tradeQty)).append("\n");
        sb.append("		tradeTime: ").append(toIndentedString(tradeTime)).append("\n");
        sb.append("		liquidity: ").append(toIndentedString(liquidity)).append("\n");
        sb.append("		commission: ").append(toIndentedString(commission)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object createTimeValue = getCreateTime();
        String createTimeValueAsString = "";
        createTimeValueAsString = createTimeValue.toString();
        sb.append("createTime=").append(urlEncode(createTimeValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object orderPriceValue = getOrderPrice();
        String orderPriceValueAsString = "";
        orderPriceValueAsString = orderPriceValue.toString();
        sb.append("orderPrice=").append(urlEncode(orderPriceValueAsString)).append("");
        Object orderQuantityValue = getOrderQuantity();
        String orderQuantityValueAsString = "";
        orderQuantityValueAsString = orderQuantityValue.toString();
        sb.append("orderQuantity=").append(urlEncode(orderQuantityValueAsString)).append("");
        Object orderStatusValue = getOrderStatus();
        String orderStatusValueAsString = "";
        orderStatusValueAsString = orderStatusValue.toString();
        sb.append("orderStatus=").append(urlEncode(orderStatusValueAsString)).append("");
        Object executedQtyValue = getExecutedQty();
        String executedQtyValueAsString = "";
        executedQtyValueAsString = executedQtyValue.toString();
        sb.append("executedQty=").append(urlEncode(executedQtyValueAsString)).append("");
        Object executedAmountValue = getExecutedAmount();
        String executedAmountValueAsString = "";
        executedAmountValueAsString = executedAmountValue.toString();
        sb.append("executedAmount=").append(urlEncode(executedAmountValueAsString)).append("");
        Object feeValue = getFee();
        String feeValueAsString = "";
        feeValueAsString = feeValue.toString();
        sb.append("fee=").append(urlEncode(feeValueAsString)).append("");
        Object orderTypeValue = getOrderType();
        String orderTypeValueAsString = "";
        orderTypeValueAsString = orderTypeValue.toString();
        sb.append("orderType=").append(urlEncode(orderTypeValueAsString)).append("");
        Object orderSideValue = getOrderSide();
        String orderSideValueAsString = "";
        orderSideValueAsString = orderSideValue.toString();
        sb.append("orderSide=").append(urlEncode(orderSideValueAsString)).append("");
        Object idValue = getId();
        String idValueAsString = "";
        idValueAsString = idValue.toString();
        sb.append("id=").append(urlEncode(idValueAsString)).append("");
        Object tradeIdValue = getTradeId();
        String tradeIdValueAsString = "";
        tradeIdValueAsString = tradeIdValue.toString();
        sb.append("tradeId=").append(urlEncode(tradeIdValueAsString)).append("");
        Object tradePriceValue = getTradePrice();
        String tradePriceValueAsString = "";
        tradePriceValueAsString = tradePriceValue.toString();
        sb.append("tradePrice=").append(urlEncode(tradePriceValueAsString)).append("");
        Object tradeQtyValue = getTradeQty();
        String tradeQtyValueAsString = "";
        tradeQtyValueAsString = tradeQtyValue.toString();
        sb.append("tradeQty=").append(urlEncode(tradeQtyValueAsString)).append("");
        Object tradeTimeValue = getTradeTime();
        String tradeTimeValueAsString = "";
        tradeTimeValueAsString = tradeTimeValue.toString();
        sb.append("tradeTime=").append(urlEncode(tradeTimeValueAsString)).append("");
        Object liquidityValue = getLiquidity();
        String liquidityValueAsString = "";
        liquidityValueAsString = liquidityValue.toString();
        sb.append("liquidity=").append(urlEncode(liquidityValueAsString)).append("");
        Object commissionValue = getCommission();
        String commissionValueAsString = "";
        commissionValueAsString = commissionValue.toString();
        sb.append("commission=").append(urlEncode(commissionValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("createTime");
        openapiFields.add("updateTime");
        openapiFields.add("symbol");
        openapiFields.add("orderId");
        openapiFields.add("orderPrice");
        openapiFields.add("orderQuantity");
        openapiFields.add("orderStatus");
        openapiFields.add("executedQty");
        openapiFields.add("executedAmount");
        openapiFields.add("fee");
        openapiFields.add("orderType");
        openapiFields.add("orderSide");
        openapiFields.add("id");
        openapiFields.add("tradeId");
        openapiFields.add("tradePrice");
        openapiFields.add("tradeQty");
        openapiFields.add("tradeTime");
        openapiFields.add("liquidity");
        openapiFields.add("commission");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AccountBlockTradeListResponseInnerLegsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountBlockTradeListResponseInnerLegsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " AccountBlockTradeListResponseInnerLegsInner is not found in"
                                    + " the empty JSON string",
                                AccountBlockTradeListResponseInnerLegsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountBlockTradeListResponseInnerLegsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AccountBlockTradeListResponseInnerLegsInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("orderId") != null && !jsonObj.get("orderId").isJsonNull())
                && !jsonObj.get("orderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("orderId").toString()));
        }
        if ((jsonObj.get("orderStatus") != null && !jsonObj.get("orderStatus").isJsonNull())
                && !jsonObj.get("orderStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("orderStatus").toString()));
        }
        if ((jsonObj.get("orderType") != null && !jsonObj.get("orderType").isJsonNull())
                && !jsonObj.get("orderType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("orderType").toString()));
        }
        if ((jsonObj.get("orderSide") != null && !jsonObj.get("orderSide").isJsonNull())
                && !jsonObj.get("orderSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `orderSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("orderSide").toString()));
        }
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
                && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("liquidity") != null && !jsonObj.get("liquidity").isJsonNull())
                && !jsonObj.get("liquidity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `liquidity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("liquidity").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountBlockTradeListResponseInnerLegsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'AccountBlockTradeListResponseInnerLegsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountBlockTradeListResponseInnerLegsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AccountBlockTradeListResponseInnerLegsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountBlockTradeListResponseInnerLegsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, AccountBlockTradeListResponseInnerLegsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountBlockTradeListResponseInnerLegsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountBlockTradeListResponseInnerLegsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountBlockTradeListResponseInnerLegsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AccountBlockTradeListResponseInnerLegsInner
     */
    public static AccountBlockTradeListResponseInnerLegsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, AccountBlockTradeListResponseInnerLegsInner.class);
    }

    /**
     * Convert an instance of AccountBlockTradeListResponseInnerLegsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
