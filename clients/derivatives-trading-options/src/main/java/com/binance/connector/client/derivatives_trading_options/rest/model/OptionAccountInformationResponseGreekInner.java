/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** OptionAccountInformationResponseGreekInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OptionAccountInformationResponseGreekInner {
    public static final String SERIALIZED_NAME_UNDERLYING = "underlying";

    @SerializedName(SERIALIZED_NAME_UNDERLYING)
    @jakarta.annotation.Nullable
    private String underlying;

    public static final String SERIALIZED_NAME_DELTA = "delta";

    @SerializedName(SERIALIZED_NAME_DELTA)
    @jakarta.annotation.Nullable
    private String delta;

    public static final String SERIALIZED_NAME_GAMMA = "gamma";

    @SerializedName(SERIALIZED_NAME_GAMMA)
    @jakarta.annotation.Nullable
    private String gamma;

    public static final String SERIALIZED_NAME_THETA = "theta";

    @SerializedName(SERIALIZED_NAME_THETA)
    @jakarta.annotation.Nullable
    private String theta;

    public static final String SERIALIZED_NAME_VEGA = "vega";

    @SerializedName(SERIALIZED_NAME_VEGA)
    @jakarta.annotation.Nullable
    private String vega;

    public OptionAccountInformationResponseGreekInner() {}

    public OptionAccountInformationResponseGreekInner underlying(
            @jakarta.annotation.Nullable String underlying) {
        this.underlying = underlying;
        return this;
    }

    /**
     * Get underlying
     *
     * @return underlying
     */
    @jakarta.annotation.Nullable
    public String getUnderlying() {
        return underlying;
    }

    public void setUnderlying(@jakarta.annotation.Nullable String underlying) {
        this.underlying = underlying;
    }

    public OptionAccountInformationResponseGreekInner delta(
            @jakarta.annotation.Nullable String delta) {
        this.delta = delta;
        return this;
    }

    /**
     * Get delta
     *
     * @return delta
     */
    @jakarta.annotation.Nullable
    public String getDelta() {
        return delta;
    }

    public void setDelta(@jakarta.annotation.Nullable String delta) {
        this.delta = delta;
    }

    public OptionAccountInformationResponseGreekInner gamma(
            @jakarta.annotation.Nullable String gamma) {
        this.gamma = gamma;
        return this;
    }

    /**
     * Get gamma
     *
     * @return gamma
     */
    @jakarta.annotation.Nullable
    public String getGamma() {
        return gamma;
    }

    public void setGamma(@jakarta.annotation.Nullable String gamma) {
        this.gamma = gamma;
    }

    public OptionAccountInformationResponseGreekInner theta(
            @jakarta.annotation.Nullable String theta) {
        this.theta = theta;
        return this;
    }

    /**
     * Get theta
     *
     * @return theta
     */
    @jakarta.annotation.Nullable
    public String getTheta() {
        return theta;
    }

    public void setTheta(@jakarta.annotation.Nullable String theta) {
        this.theta = theta;
    }

    public OptionAccountInformationResponseGreekInner vega(
            @jakarta.annotation.Nullable String vega) {
        this.vega = vega;
        return this;
    }

    /**
     * Get vega
     *
     * @return vega
     */
    @jakarta.annotation.Nullable
    public String getVega() {
        return vega;
    }

    public void setVega(@jakarta.annotation.Nullable String vega) {
        this.vega = vega;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OptionAccountInformationResponseGreekInner optionAccountInformationResponseGreekInner =
                (OptionAccountInformationResponseGreekInner) o;
        return Objects.equals(
                        this.underlying, optionAccountInformationResponseGreekInner.underlying)
                && Objects.equals(this.delta, optionAccountInformationResponseGreekInner.delta)
                && Objects.equals(this.gamma, optionAccountInformationResponseGreekInner.gamma)
                && Objects.equals(this.theta, optionAccountInformationResponseGreekInner.theta)
                && Objects.equals(this.vega, optionAccountInformationResponseGreekInner.vega);
    }

    @Override
    public int hashCode() {
        return Objects.hash(underlying, delta, gamma, theta, vega);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OptionAccountInformationResponseGreekInner {\n");
        sb.append("		underlying: ").append(toIndentedString(underlying)).append("\n");
        sb.append("		delta: ").append(toIndentedString(delta)).append("\n");
        sb.append("		gamma: ").append(toIndentedString(gamma)).append("\n");
        sb.append("		theta: ").append(toIndentedString(theta)).append("\n");
        sb.append("		vega: ").append(toIndentedString(vega)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object underlyingValue = getUnderlying();
        String underlyingValueAsString = "";
        underlyingValueAsString = underlyingValue.toString();
        sb.append("underlying=").append(urlEncode(underlyingValueAsString)).append("");
        Object deltaValue = getDelta();
        String deltaValueAsString = "";
        deltaValueAsString = deltaValue.toString();
        sb.append("delta=").append(urlEncode(deltaValueAsString)).append("");
        Object gammaValue = getGamma();
        String gammaValueAsString = "";
        gammaValueAsString = gammaValue.toString();
        sb.append("gamma=").append(urlEncode(gammaValueAsString)).append("");
        Object thetaValue = getTheta();
        String thetaValueAsString = "";
        thetaValueAsString = thetaValue.toString();
        sb.append("theta=").append(urlEncode(thetaValueAsString)).append("");
        Object vegaValue = getVega();
        String vegaValueAsString = "";
        vegaValueAsString = vegaValue.toString();
        sb.append("vega=").append(urlEncode(vegaValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("underlying");
        openapiFields.add("delta");
        openapiFields.add("gamma");
        openapiFields.add("theta");
        openapiFields.add("vega");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OptionAccountInformationResponseGreekInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OptionAccountInformationResponseGreekInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " OptionAccountInformationResponseGreekInner is not found in"
                                    + " the empty JSON string",
                                OptionAccountInformationResponseGreekInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OptionAccountInformationResponseGreekInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `OptionAccountInformationResponseGreekInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("underlying") != null && !jsonObj.get("underlying").isJsonNull())
                && !jsonObj.get("underlying").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `underlying` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("underlying").toString()));
        }
        if ((jsonObj.get("delta") != null && !jsonObj.get("delta").isJsonNull())
                && !jsonObj.get("delta").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `delta` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("delta").toString()));
        }
        if ((jsonObj.get("gamma") != null && !jsonObj.get("gamma").isJsonNull())
                && !jsonObj.get("gamma").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `gamma` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("gamma").toString()));
        }
        if ((jsonObj.get("theta") != null && !jsonObj.get("theta").isJsonNull())
                && !jsonObj.get("theta").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `theta` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("theta").toString()));
        }
        if ((jsonObj.get("vega") != null && !jsonObj.get("vega").isJsonNull())
                && !jsonObj.get("vega").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `vega` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("vega").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OptionAccountInformationResponseGreekInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'OptionAccountInformationResponseGreekInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OptionAccountInformationResponseGreekInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(OptionAccountInformationResponseGreekInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OptionAccountInformationResponseGreekInner>() {
                        @Override
                        public void write(
                                JsonWriter out, OptionAccountInformationResponseGreekInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OptionAccountInformationResponseGreekInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OptionAccountInformationResponseGreekInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OptionAccountInformationResponseGreekInner
     * @throws IOException if the JSON string is invalid with respect to
     *     OptionAccountInformationResponseGreekInner
     */
    public static OptionAccountInformationResponseGreekInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, OptionAccountInformationResponseGreekInner.class);
    }

    /**
     * Convert an instance of OptionAccountInformationResponseGreekInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
