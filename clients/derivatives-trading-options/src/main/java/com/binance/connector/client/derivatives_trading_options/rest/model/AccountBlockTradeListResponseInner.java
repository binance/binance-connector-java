/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** AccountBlockTradeListResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountBlockTradeListResponseInner {
    public static final String SERIALIZED_NAME_PARENT_ORDER_ID = "parentOrderId";

    @SerializedName(SERIALIZED_NAME_PARENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String parentOrderId;

    public static final String SERIALIZED_NAME_CROSS_TYPE = "crossType";

    @SerializedName(SERIALIZED_NAME_CROSS_TYPE)
    @jakarta.annotation.Nullable
    private String crossType;

    public static final String SERIALIZED_NAME_LEGS = "legs";

    @SerializedName(SERIALIZED_NAME_LEGS)
    @jakarta.annotation.Nullable
    private List<@Valid AccountBlockTradeListResponseInnerLegsInner> legs;

    public static final String SERIALIZED_NAME_BLOCK_TRADE_SETTLEMENT_KEY =
            "blockTradeSettlementKey";

    @SerializedName(SERIALIZED_NAME_BLOCK_TRADE_SETTLEMENT_KEY)
    @jakarta.annotation.Nullable
    private String blockTradeSettlementKey;

    public AccountBlockTradeListResponseInner() {}

    public AccountBlockTradeListResponseInner parentOrderId(
            @jakarta.annotation.Nullable String parentOrderId) {
        this.parentOrderId = parentOrderId;
        return this;
    }

    /**
     * Get parentOrderId
     *
     * @return parentOrderId
     */
    @jakarta.annotation.Nullable
    public String getParentOrderId() {
        return parentOrderId;
    }

    public void setParentOrderId(@jakarta.annotation.Nullable String parentOrderId) {
        this.parentOrderId = parentOrderId;
    }

    public AccountBlockTradeListResponseInner crossType(
            @jakarta.annotation.Nullable String crossType) {
        this.crossType = crossType;
        return this;
    }

    /**
     * Get crossType
     *
     * @return crossType
     */
    @jakarta.annotation.Nullable
    public String getCrossType() {
        return crossType;
    }

    public void setCrossType(@jakarta.annotation.Nullable String crossType) {
        this.crossType = crossType;
    }

    public AccountBlockTradeListResponseInner legs(
            @jakarta.annotation.Nullable
                    List<@Valid AccountBlockTradeListResponseInnerLegsInner> legs) {
        this.legs = legs;
        return this;
    }

    public AccountBlockTradeListResponseInner addLegsItem(
            AccountBlockTradeListResponseInnerLegsInner legsItem) {
        if (this.legs == null) {
            this.legs = new ArrayList<>();
        }
        this.legs.add(legsItem);
        return this;
    }

    /**
     * Get legs
     *
     * @return legs
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid AccountBlockTradeListResponseInnerLegsInner> getLegs() {
        return legs;
    }

    public void setLegs(
            @jakarta.annotation.Nullable
                    List<@Valid AccountBlockTradeListResponseInnerLegsInner> legs) {
        this.legs = legs;
    }

    public AccountBlockTradeListResponseInner blockTradeSettlementKey(
            @jakarta.annotation.Nullable String blockTradeSettlementKey) {
        this.blockTradeSettlementKey = blockTradeSettlementKey;
        return this;
    }

    /**
     * Get blockTradeSettlementKey
     *
     * @return blockTradeSettlementKey
     */
    @jakarta.annotation.Nullable
    public String getBlockTradeSettlementKey() {
        return blockTradeSettlementKey;
    }

    public void setBlockTradeSettlementKey(
            @jakarta.annotation.Nullable String blockTradeSettlementKey) {
        this.blockTradeSettlementKey = blockTradeSettlementKey;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountBlockTradeListResponseInner accountBlockTradeListResponseInner =
                (AccountBlockTradeListResponseInner) o;
        return Objects.equals(this.parentOrderId, accountBlockTradeListResponseInner.parentOrderId)
                && Objects.equals(this.crossType, accountBlockTradeListResponseInner.crossType)
                && Objects.equals(this.legs, accountBlockTradeListResponseInner.legs)
                && Objects.equals(
                        this.blockTradeSettlementKey,
                        accountBlockTradeListResponseInner.blockTradeSettlementKey);
    }

    @Override
    public int hashCode() {
        return Objects.hash(parentOrderId, crossType, legs, blockTradeSettlementKey);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountBlockTradeListResponseInner {\n");
        sb.append("		parentOrderId: ").append(toIndentedString(parentOrderId)).append("\n");
        sb.append("		crossType: ").append(toIndentedString(crossType)).append("\n");
        sb.append("		legs: ").append(toIndentedString(legs)).append("\n");
        sb.append("		blockTradeSettlementKey: ")
                .append(toIndentedString(blockTradeSettlementKey))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object parentOrderIdValue = getParentOrderId();
        String parentOrderIdValueAsString = "";
        parentOrderIdValueAsString = parentOrderIdValue.toString();
        sb.append("parentOrderId=").append(urlEncode(parentOrderIdValueAsString)).append("");
        Object crossTypeValue = getCrossType();
        String crossTypeValueAsString = "";
        crossTypeValueAsString = crossTypeValue.toString();
        sb.append("crossType=").append(urlEncode(crossTypeValueAsString)).append("");
        Object legsValue = getLegs();
        String legsValueAsString = "";
        legsValueAsString =
                (String)
                        ((Collection) legsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("legs=").append(urlEncode(legsValueAsString)).append("");
        Object blockTradeSettlementKeyValue = getBlockTradeSettlementKey();
        String blockTradeSettlementKeyValueAsString = "";
        blockTradeSettlementKeyValueAsString = blockTradeSettlementKeyValue.toString();
        sb.append("blockTradeSettlementKey=")
                .append(urlEncode(blockTradeSettlementKeyValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("parentOrderId");
        openapiFields.add("crossType");
        openapiFields.add("legs");
        openapiFields.add("blockTradeSettlementKey");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AccountBlockTradeListResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountBlockTradeListResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountBlockTradeListResponseInner is"
                                        + " not found in the empty JSON string",
                                AccountBlockTradeListResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountBlockTradeListResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `AccountBlockTradeListResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("parentOrderId") != null && !jsonObj.get("parentOrderId").isJsonNull())
                && !jsonObj.get("parentOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `parentOrderId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("parentOrderId").toString()));
        }
        if ((jsonObj.get("crossType") != null && !jsonObj.get("crossType").isJsonNull())
                && !jsonObj.get("crossType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("crossType").toString()));
        }
        if (jsonObj.get("legs") != null && !jsonObj.get("legs").isJsonNull()) {
            JsonArray jsonArraylegs = jsonObj.getAsJsonArray("legs");
            if (jsonArraylegs != null) {
                // ensure the json data is an array
                if (!jsonObj.get("legs").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `legs` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("legs").toString()));
                }

                // validate the optional field `legs` (array)
                for (int i = 0; i < jsonArraylegs.size(); i++) {
                    AccountBlockTradeListResponseInnerLegsInner.validateJsonElement(
                            jsonArraylegs.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("blockTradeSettlementKey") != null
                        && !jsonObj.get("blockTradeSettlementKey").isJsonNull())
                && !jsonObj.get("blockTradeSettlementKey").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `blockTradeSettlementKey` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("blockTradeSettlementKey").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountBlockTradeListResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountBlockTradeListResponseInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountBlockTradeListResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AccountBlockTradeListResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountBlockTradeListResponseInner>() {
                        @Override
                        public void write(JsonWriter out, AccountBlockTradeListResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountBlockTradeListResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountBlockTradeListResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountBlockTradeListResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     AccountBlockTradeListResponseInner
     */
    public static AccountBlockTradeListResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountBlockTradeListResponseInner.class);
    }

    /**
     * Convert an instance of AccountBlockTradeListResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
