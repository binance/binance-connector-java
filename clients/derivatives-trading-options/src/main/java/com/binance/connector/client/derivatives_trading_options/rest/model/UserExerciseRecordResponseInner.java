/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** UserExerciseRecordResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class UserExerciseRecordResponseInner {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private String id;

    public static final String SERIALIZED_NAME_CURRENCY = "currency";

    @SerializedName(SERIALIZED_NAME_CURRENCY)
    @jakarta.annotation.Nullable
    private String currency;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_EXERCISE_PRICE = "exercisePrice";

    @SerializedName(SERIALIZED_NAME_EXERCISE_PRICE)
    @jakarta.annotation.Nullable
    private String exercisePrice;

    public static final String SERIALIZED_NAME_MARK_PRICE = "markPrice";

    @SerializedName(SERIALIZED_NAME_MARK_PRICE)
    @jakarta.annotation.Nullable
    private String markPrice;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private String quantity;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_FEE = "fee";

    @SerializedName(SERIALIZED_NAME_FEE)
    @jakarta.annotation.Nullable
    private String fee;

    public static final String SERIALIZED_NAME_CREATE_DATE = "createDate";

    @SerializedName(SERIALIZED_NAME_CREATE_DATE)
    @jakarta.annotation.Nullable
    private Long createDate;

    public static final String SERIALIZED_NAME_PRICE_SCALE = "priceScale";

    @SerializedName(SERIALIZED_NAME_PRICE_SCALE)
    @jakarta.annotation.Nullable
    private Long priceScale;

    public static final String SERIALIZED_NAME_QUANTITY_SCALE = "quantityScale";

    @SerializedName(SERIALIZED_NAME_QUANTITY_SCALE)
    @jakarta.annotation.Nullable
    private Long quantityScale;

    public static final String SERIALIZED_NAME_OPTION_SIDE = "optionSide";

    @SerializedName(SERIALIZED_NAME_OPTION_SIDE)
    @jakarta.annotation.Nullable
    private String optionSide;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private String positionSide;

    public static final String SERIALIZED_NAME_QUOTE_ASSET = "quoteAsset";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET)
    @jakarta.annotation.Nullable
    private String quoteAsset;

    public UserExerciseRecordResponseInner() {}

    public UserExerciseRecordResponseInner id(@jakarta.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable String id) {
        this.id = id;
    }

    public UserExerciseRecordResponseInner currency(@jakarta.annotation.Nullable String currency) {
        this.currency = currency;
        return this;
    }

    /**
     * Get currency
     *
     * @return currency
     */
    @jakarta.annotation.Nullable
    public String getCurrency() {
        return currency;
    }

    public void setCurrency(@jakarta.annotation.Nullable String currency) {
        this.currency = currency;
    }

    public UserExerciseRecordResponseInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public UserExerciseRecordResponseInner exercisePrice(
            @jakarta.annotation.Nullable String exercisePrice) {
        this.exercisePrice = exercisePrice;
        return this;
    }

    /**
     * Get exercisePrice
     *
     * @return exercisePrice
     */
    @jakarta.annotation.Nullable
    public String getExercisePrice() {
        return exercisePrice;
    }

    public void setExercisePrice(@jakarta.annotation.Nullable String exercisePrice) {
        this.exercisePrice = exercisePrice;
    }

    public UserExerciseRecordResponseInner markPrice(
            @jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
        return this;
    }

    /**
     * Get markPrice
     *
     * @return markPrice
     */
    @jakarta.annotation.Nullable
    public String getMarkPrice() {
        return markPrice;
    }

    public void setMarkPrice(@jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
    }

    public UserExerciseRecordResponseInner quantity(@jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    public String getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
    }

    public UserExerciseRecordResponseInner amount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public UserExerciseRecordResponseInner fee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
        return this;
    }

    /**
     * Get fee
     *
     * @return fee
     */
    @jakarta.annotation.Nullable
    public String getFee() {
        return fee;
    }

    public void setFee(@jakarta.annotation.Nullable String fee) {
        this.fee = fee;
    }

    public UserExerciseRecordResponseInner createDate(
            @jakarta.annotation.Nullable Long createDate) {
        this.createDate = createDate;
        return this;
    }

    /**
     * Get createDate
     *
     * @return createDate
     */
    @jakarta.annotation.Nullable
    public Long getCreateDate() {
        return createDate;
    }

    public void setCreateDate(@jakarta.annotation.Nullable Long createDate) {
        this.createDate = createDate;
    }

    public UserExerciseRecordResponseInner priceScale(
            @jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
        return this;
    }

    /**
     * Get priceScale
     *
     * @return priceScale
     */
    @jakarta.annotation.Nullable
    public Long getPriceScale() {
        return priceScale;
    }

    public void setPriceScale(@jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
    }

    public UserExerciseRecordResponseInner quantityScale(
            @jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
        return this;
    }

    /**
     * Get quantityScale
     *
     * @return quantityScale
     */
    @jakarta.annotation.Nullable
    public Long getQuantityScale() {
        return quantityScale;
    }

    public void setQuantityScale(@jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
    }

    public UserExerciseRecordResponseInner optionSide(
            @jakarta.annotation.Nullable String optionSide) {
        this.optionSide = optionSide;
        return this;
    }

    /**
     * Get optionSide
     *
     * @return optionSide
     */
    @jakarta.annotation.Nullable
    public String getOptionSide() {
        return optionSide;
    }

    public void setOptionSide(@jakarta.annotation.Nullable String optionSide) {
        this.optionSide = optionSide;
    }

    public UserExerciseRecordResponseInner positionSide(
            @jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    public String getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
    }

    public UserExerciseRecordResponseInner quoteAsset(
            @jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
        return this;
    }

    /**
     * Get quoteAsset
     *
     * @return quoteAsset
     */
    @jakarta.annotation.Nullable
    public String getQuoteAsset() {
        return quoteAsset;
    }

    public void setQuoteAsset(@jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UserExerciseRecordResponseInner userExerciseRecordResponseInner =
                (UserExerciseRecordResponseInner) o;
        return Objects.equals(this.id, userExerciseRecordResponseInner.id)
                && Objects.equals(this.currency, userExerciseRecordResponseInner.currency)
                && Objects.equals(this.symbol, userExerciseRecordResponseInner.symbol)
                && Objects.equals(this.exercisePrice, userExerciseRecordResponseInner.exercisePrice)
                && Objects.equals(this.markPrice, userExerciseRecordResponseInner.markPrice)
                && Objects.equals(this.quantity, userExerciseRecordResponseInner.quantity)
                && Objects.equals(this.amount, userExerciseRecordResponseInner.amount)
                && Objects.equals(this.fee, userExerciseRecordResponseInner.fee)
                && Objects.equals(this.createDate, userExerciseRecordResponseInner.createDate)
                && Objects.equals(this.priceScale, userExerciseRecordResponseInner.priceScale)
                && Objects.equals(this.quantityScale, userExerciseRecordResponseInner.quantityScale)
                && Objects.equals(this.optionSide, userExerciseRecordResponseInner.optionSide)
                && Objects.equals(this.positionSide, userExerciseRecordResponseInner.positionSide)
                && Objects.equals(this.quoteAsset, userExerciseRecordResponseInner.quoteAsset);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                currency,
                symbol,
                exercisePrice,
                markPrice,
                quantity,
                amount,
                fee,
                createDate,
                priceScale,
                quantityScale,
                optionSide,
                positionSide,
                quoteAsset);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UserExerciseRecordResponseInner {\n");
        sb.append("		id: ").append(toIndentedString(id)).append("\n");
        sb.append("		currency: ").append(toIndentedString(currency)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		exercisePrice: ").append(toIndentedString(exercisePrice)).append("\n");
        sb.append("		markPrice: ").append(toIndentedString(markPrice)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		fee: ").append(toIndentedString(fee)).append("\n");
        sb.append("		createDate: ").append(toIndentedString(createDate)).append("\n");
        sb.append("		priceScale: ").append(toIndentedString(priceScale)).append("\n");
        sb.append("		quantityScale: ").append(toIndentedString(quantityScale)).append("\n");
        sb.append("		optionSide: ").append(toIndentedString(optionSide)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object idValue = getId();
        String idValueAsString = "";
        idValueAsString = idValue.toString();
        sb.append("id=").append(urlEncode(idValueAsString)).append("");
        Object currencyValue = getCurrency();
        String currencyValueAsString = "";
        currencyValueAsString = currencyValue.toString();
        sb.append("currency=").append(urlEncode(currencyValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object exercisePriceValue = getExercisePrice();
        String exercisePriceValueAsString = "";
        exercisePriceValueAsString = exercisePriceValue.toString();
        sb.append("exercisePrice=").append(urlEncode(exercisePriceValueAsString)).append("");
        Object markPriceValue = getMarkPrice();
        String markPriceValueAsString = "";
        markPriceValueAsString = markPriceValue.toString();
        sb.append("markPrice=").append(urlEncode(markPriceValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object feeValue = getFee();
        String feeValueAsString = "";
        feeValueAsString = feeValue.toString();
        sb.append("fee=").append(urlEncode(feeValueAsString)).append("");
        Object createDateValue = getCreateDate();
        String createDateValueAsString = "";
        createDateValueAsString = createDateValue.toString();
        sb.append("createDate=").append(urlEncode(createDateValueAsString)).append("");
        Object priceScaleValue = getPriceScale();
        String priceScaleValueAsString = "";
        priceScaleValueAsString = priceScaleValue.toString();
        sb.append("priceScale=").append(urlEncode(priceScaleValueAsString)).append("");
        Object quantityScaleValue = getQuantityScale();
        String quantityScaleValueAsString = "";
        quantityScaleValueAsString = quantityScaleValue.toString();
        sb.append("quantityScale=").append(urlEncode(quantityScaleValueAsString)).append("");
        Object optionSideValue = getOptionSide();
        String optionSideValueAsString = "";
        optionSideValueAsString = optionSideValue.toString();
        sb.append("optionSide=").append(urlEncode(optionSideValueAsString)).append("");
        Object positionSideValue = getPositionSide();
        String positionSideValueAsString = "";
        positionSideValueAsString = positionSideValue.toString();
        sb.append("positionSide=").append(urlEncode(positionSideValueAsString)).append("");
        Object quoteAssetValue = getQuoteAsset();
        String quoteAssetValueAsString = "";
        quoteAssetValueAsString = quoteAssetValue.toString();
        sb.append("quoteAsset=").append(urlEncode(quoteAssetValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("currency");
        openapiFields.add("symbol");
        openapiFields.add("exercisePrice");
        openapiFields.add("markPrice");
        openapiFields.add("quantity");
        openapiFields.add("amount");
        openapiFields.add("fee");
        openapiFields.add("createDate");
        openapiFields.add("priceScale");
        openapiFields.add("quantityScale");
        openapiFields.add("optionSide");
        openapiFields.add("positionSide");
        openapiFields.add("quoteAsset");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     UserExerciseRecordResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!UserExerciseRecordResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in UserExerciseRecordResponseInner is not"
                                        + " found in the empty JSON string",
                                UserExerciseRecordResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!UserExerciseRecordResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `UserExerciseRecordResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
                && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull())
                && !jsonObj.get("currency").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `currency` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("currency").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("exercisePrice") != null && !jsonObj.get("exercisePrice").isJsonNull())
                && !jsonObj.get("exercisePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `exercisePrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("exercisePrice").toString()));
        }
        if ((jsonObj.get("markPrice") != null && !jsonObj.get("markPrice").isJsonNull())
                && !jsonObj.get("markPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `markPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("markPrice").toString()));
        }
        if ((jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull())
                && !jsonObj.get("quantity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quantity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quantity").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("fee") != null && !jsonObj.get("fee").isJsonNull())
                && !jsonObj.get("fee").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fee` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("fee").toString()));
        }
        if ((jsonObj.get("optionSide") != null && !jsonObj.get("optionSide").isJsonNull())
                && !jsonObj.get("optionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `optionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("optionSide").toString()));
        }
        if ((jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull())
                && !jsonObj.get("positionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionSide").toString()));
        }
        if ((jsonObj.get("quoteAsset") != null && !jsonObj.get("quoteAsset").isJsonNull())
                && !jsonObj.get("quoteAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteAsset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!UserExerciseRecordResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'UserExerciseRecordResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<UserExerciseRecordResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(UserExerciseRecordResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<UserExerciseRecordResponseInner>() {
                        @Override
                        public void write(JsonWriter out, UserExerciseRecordResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public UserExerciseRecordResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of UserExerciseRecordResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of UserExerciseRecordResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     UserExerciseRecordResponseInner
     */
    public static UserExerciseRecordResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, UserExerciseRecordResponseInner.class);
    }

    /**
     * Convert an instance of UserExerciseRecordResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
