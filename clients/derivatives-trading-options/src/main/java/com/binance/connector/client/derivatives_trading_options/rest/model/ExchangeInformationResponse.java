/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** ExchangeInformationResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ExchangeInformationResponse {
    public static final String SERIALIZED_NAME_TIMEZONE = "timezone";

    @SerializedName(SERIALIZED_NAME_TIMEZONE)
    @jakarta.annotation.Nullable
    private String timezone;

    public static final String SERIALIZED_NAME_SERVER_TIME = "serverTime";

    @SerializedName(SERIALIZED_NAME_SERVER_TIME)
    @jakarta.annotation.Nullable
    private Long serverTime;

    public static final String SERIALIZED_NAME_OPTION_CONTRACTS = "optionContracts";

    @SerializedName(SERIALIZED_NAME_OPTION_CONTRACTS)
    @jakarta.annotation.Nullable
    private List<@Valid ExchangeInformationResponseOptionContractsInner> optionContracts;

    public static final String SERIALIZED_NAME_OPTION_ASSETS = "optionAssets";

    @SerializedName(SERIALIZED_NAME_OPTION_ASSETS)
    @jakarta.annotation.Nullable
    private List<@Valid ExchangeInformationResponseOptionAssetsInner> optionAssets;

    public static final String SERIALIZED_NAME_OPTION_SYMBOLS = "optionSymbols";

    @SerializedName(SERIALIZED_NAME_OPTION_SYMBOLS)
    @jakarta.annotation.Nullable
    private List<@Valid ExchangeInformationResponseOptionSymbolsInner> optionSymbols;

    public static final String SERIALIZED_NAME_RATE_LIMITS = "rateLimits";

    @SerializedName(SERIALIZED_NAME_RATE_LIMITS)
    @jakarta.annotation.Nullable
    private List<@Valid ExchangeInformationResponseRateLimitsInner> rateLimits;

    public ExchangeInformationResponse() {}

    public ExchangeInformationResponse timezone(@jakarta.annotation.Nullable String timezone) {
        this.timezone = timezone;
        return this;
    }

    /**
     * Get timezone
     *
     * @return timezone
     */
    @jakarta.annotation.Nullable
    public String getTimezone() {
        return timezone;
    }

    public void setTimezone(@jakarta.annotation.Nullable String timezone) {
        this.timezone = timezone;
    }

    public ExchangeInformationResponse serverTime(@jakarta.annotation.Nullable Long serverTime) {
        this.serverTime = serverTime;
        return this;
    }

    /**
     * Get serverTime
     *
     * @return serverTime
     */
    @jakarta.annotation.Nullable
    public Long getServerTime() {
        return serverTime;
    }

    public void setServerTime(@jakarta.annotation.Nullable Long serverTime) {
        this.serverTime = serverTime;
    }

    public ExchangeInformationResponse optionContracts(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseOptionContractsInner> optionContracts) {
        this.optionContracts = optionContracts;
        return this;
    }

    public ExchangeInformationResponse addOptionContractsItem(
            ExchangeInformationResponseOptionContractsInner optionContractsItem) {
        if (this.optionContracts == null) {
            this.optionContracts = new ArrayList<>();
        }
        this.optionContracts.add(optionContractsItem);
        return this;
    }

    /**
     * Get optionContracts
     *
     * @return optionContracts
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ExchangeInformationResponseOptionContractsInner> getOptionContracts() {
        return optionContracts;
    }

    public void setOptionContracts(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseOptionContractsInner> optionContracts) {
        this.optionContracts = optionContracts;
    }

    public ExchangeInformationResponse optionAssets(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseOptionAssetsInner> optionAssets) {
        this.optionAssets = optionAssets;
        return this;
    }

    public ExchangeInformationResponse addOptionAssetsItem(
            ExchangeInformationResponseOptionAssetsInner optionAssetsItem) {
        if (this.optionAssets == null) {
            this.optionAssets = new ArrayList<>();
        }
        this.optionAssets.add(optionAssetsItem);
        return this;
    }

    /**
     * Get optionAssets
     *
     * @return optionAssets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ExchangeInformationResponseOptionAssetsInner> getOptionAssets() {
        return optionAssets;
    }

    public void setOptionAssets(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseOptionAssetsInner> optionAssets) {
        this.optionAssets = optionAssets;
    }

    public ExchangeInformationResponse optionSymbols(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseOptionSymbolsInner> optionSymbols) {
        this.optionSymbols = optionSymbols;
        return this;
    }

    public ExchangeInformationResponse addOptionSymbolsItem(
            ExchangeInformationResponseOptionSymbolsInner optionSymbolsItem) {
        if (this.optionSymbols == null) {
            this.optionSymbols = new ArrayList<>();
        }
        this.optionSymbols.add(optionSymbolsItem);
        return this;
    }

    /**
     * Get optionSymbols
     *
     * @return optionSymbols
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ExchangeInformationResponseOptionSymbolsInner> getOptionSymbols() {
        return optionSymbols;
    }

    public void setOptionSymbols(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseOptionSymbolsInner> optionSymbols) {
        this.optionSymbols = optionSymbols;
    }

    public ExchangeInformationResponse rateLimits(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseRateLimitsInner> rateLimits) {
        this.rateLimits = rateLimits;
        return this;
    }

    public ExchangeInformationResponse addRateLimitsItem(
            ExchangeInformationResponseRateLimitsInner rateLimitsItem) {
        if (this.rateLimits == null) {
            this.rateLimits = new ArrayList<>();
        }
        this.rateLimits.add(rateLimitsItem);
        return this;
    }

    /**
     * Get rateLimits
     *
     * @return rateLimits
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid ExchangeInformationResponseRateLimitsInner> getRateLimits() {
        return rateLimits;
    }

    public void setRateLimits(
            @jakarta.annotation.Nullable
                    List<@Valid ExchangeInformationResponseRateLimitsInner> rateLimits) {
        this.rateLimits = rateLimits;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExchangeInformationResponse exchangeInformationResponse = (ExchangeInformationResponse) o;
        return Objects.equals(this.timezone, exchangeInformationResponse.timezone)
                && Objects.equals(this.serverTime, exchangeInformationResponse.serverTime)
                && Objects.equals(this.optionContracts, exchangeInformationResponse.optionContracts)
                && Objects.equals(this.optionAssets, exchangeInformationResponse.optionAssets)
                && Objects.equals(this.optionSymbols, exchangeInformationResponse.optionSymbols)
                && Objects.equals(this.rateLimits, exchangeInformationResponse.rateLimits);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                timezone, serverTime, optionContracts, optionAssets, optionSymbols, rateLimits);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ExchangeInformationResponse {\n");
        sb.append("		timezone: ").append(toIndentedString(timezone)).append("\n");
        sb.append("		serverTime: ").append(toIndentedString(serverTime)).append("\n");
        sb.append("		optionContracts: ").append(toIndentedString(optionContracts)).append("\n");
        sb.append("		optionAssets: ").append(toIndentedString(optionAssets)).append("\n");
        sb.append("		optionSymbols: ").append(toIndentedString(optionSymbols)).append("\n");
        sb.append("		rateLimits: ").append(toIndentedString(rateLimits)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object timezoneValue = getTimezone();
        String timezoneValueAsString = "";
        timezoneValueAsString = timezoneValue.toString();
        sb.append("timezone=").append(urlEncode(timezoneValueAsString)).append("");
        Object serverTimeValue = getServerTime();
        String serverTimeValueAsString = "";
        serverTimeValueAsString = serverTimeValue.toString();
        sb.append("serverTime=").append(urlEncode(serverTimeValueAsString)).append("");
        Object optionContractsValue = getOptionContracts();
        String optionContractsValueAsString = "";
        optionContractsValueAsString =
                (String)
                        ((Collection) optionContractsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("optionContracts=").append(urlEncode(optionContractsValueAsString)).append("");
        Object optionAssetsValue = getOptionAssets();
        String optionAssetsValueAsString = "";
        optionAssetsValueAsString =
                (String)
                        ((Collection) optionAssetsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("optionAssets=").append(urlEncode(optionAssetsValueAsString)).append("");
        Object optionSymbolsValue = getOptionSymbols();
        String optionSymbolsValueAsString = "";
        optionSymbolsValueAsString =
                (String)
                        ((Collection) optionSymbolsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("optionSymbols=").append(urlEncode(optionSymbolsValueAsString)).append("");
        Object rateLimitsValue = getRateLimits();
        String rateLimitsValueAsString = "";
        rateLimitsValueAsString =
                (String)
                        ((Collection) rateLimitsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("rateLimits=").append(urlEncode(rateLimitsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("timezone");
        openapiFields.add("serverTime");
        openapiFields.add("optionContracts");
        openapiFields.add("optionAssets");
        openapiFields.add("optionSymbols");
        openapiFields.add("rateLimits");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ExchangeInformationResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ExchangeInformationResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ExchangeInformationResponse is not"
                                        + " found in the empty JSON string",
                                ExchangeInformationResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ExchangeInformationResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `ExchangeInformationResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull())
                && !jsonObj.get("timezone").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timezone` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timezone").toString()));
        }
        if (jsonObj.get("optionContracts") != null
                && !jsonObj.get("optionContracts").isJsonNull()) {
            JsonArray jsonArrayoptionContracts = jsonObj.getAsJsonArray("optionContracts");
            if (jsonArrayoptionContracts != null) {
                // ensure the json data is an array
                if (!jsonObj.get("optionContracts").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `optionContracts` to be an array in the"
                                            + " JSON string but got `%s`",
                                    jsonObj.get("optionContracts").toString()));
                }

                // validate the optional field `optionContracts` (array)
                for (int i = 0; i < jsonArrayoptionContracts.size(); i++) {
                    ExchangeInformationResponseOptionContractsInner.validateJsonElement(
                            jsonArrayoptionContracts.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("optionAssets") != null && !jsonObj.get("optionAssets").isJsonNull()) {
            JsonArray jsonArrayoptionAssets = jsonObj.getAsJsonArray("optionAssets");
            if (jsonArrayoptionAssets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("optionAssets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `optionAssets` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("optionAssets").toString()));
                }

                // validate the optional field `optionAssets` (array)
                for (int i = 0; i < jsonArrayoptionAssets.size(); i++) {
                    ExchangeInformationResponseOptionAssetsInner.validateJsonElement(
                            jsonArrayoptionAssets.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("optionSymbols") != null && !jsonObj.get("optionSymbols").isJsonNull()) {
            JsonArray jsonArrayoptionSymbols = jsonObj.getAsJsonArray("optionSymbols");
            if (jsonArrayoptionSymbols != null) {
                // ensure the json data is an array
                if (!jsonObj.get("optionSymbols").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `optionSymbols` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("optionSymbols").toString()));
                }

                // validate the optional field `optionSymbols` (array)
                for (int i = 0; i < jsonArrayoptionSymbols.size(); i++) {
                    ExchangeInformationResponseOptionSymbolsInner.validateJsonElement(
                            jsonArrayoptionSymbols.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("rateLimits") != null && !jsonObj.get("rateLimits").isJsonNull()) {
            JsonArray jsonArrayrateLimits = jsonObj.getAsJsonArray("rateLimits");
            if (jsonArrayrateLimits != null) {
                // ensure the json data is an array
                if (!jsonObj.get("rateLimits").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `rateLimits` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("rateLimits").toString()));
                }

                // validate the optional field `rateLimits` (array)
                for (int i = 0; i < jsonArrayrateLimits.size(); i++) {
                    ExchangeInformationResponseRateLimitsInner.validateJsonElement(
                            jsonArrayrateLimits.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ExchangeInformationResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ExchangeInformationResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ExchangeInformationResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(ExchangeInformationResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ExchangeInformationResponse>() {
                        @Override
                        public void write(JsonWriter out, ExchangeInformationResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ExchangeInformationResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ExchangeInformationResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ExchangeInformationResponse
     * @throws IOException if the JSON string is invalid with respect to ExchangeInformationResponse
     */
    public static ExchangeInformationResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, ExchangeInformationResponse.class);
    }

    /**
     * Convert an instance of ExchangeInformationResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
