/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** HistoricalExerciseRecordsResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class HistoricalExerciseRecordsResponseInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_STRIKE_PRICE = "strikePrice";

    @SerializedName(SERIALIZED_NAME_STRIKE_PRICE)
    @jakarta.annotation.Nullable
    private String strikePrice;

    public static final String SERIALIZED_NAME_REAL_STRIKE_PRICE = "realStrikePrice";

    @SerializedName(SERIALIZED_NAME_REAL_STRIKE_PRICE)
    @jakarta.annotation.Nullable
    private String realStrikePrice;

    public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";

    @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
    @jakarta.annotation.Nullable
    private Long expiryDate;

    public static final String SERIALIZED_NAME_STRIKE_RESULT = "strikeResult";

    @SerializedName(SERIALIZED_NAME_STRIKE_RESULT)
    @jakarta.annotation.Nullable
    private String strikeResult;

    public HistoricalExerciseRecordsResponseInner() {}

    public HistoricalExerciseRecordsResponseInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public HistoricalExerciseRecordsResponseInner strikePrice(
            @jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
        return this;
    }

    /**
     * Get strikePrice
     *
     * @return strikePrice
     */
    @jakarta.annotation.Nullable
    public String getStrikePrice() {
        return strikePrice;
    }

    public void setStrikePrice(@jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
    }

    public HistoricalExerciseRecordsResponseInner realStrikePrice(
            @jakarta.annotation.Nullable String realStrikePrice) {
        this.realStrikePrice = realStrikePrice;
        return this;
    }

    /**
     * Get realStrikePrice
     *
     * @return realStrikePrice
     */
    @jakarta.annotation.Nullable
    public String getRealStrikePrice() {
        return realStrikePrice;
    }

    public void setRealStrikePrice(@jakarta.annotation.Nullable String realStrikePrice) {
        this.realStrikePrice = realStrikePrice;
    }

    public HistoricalExerciseRecordsResponseInner expiryDate(
            @jakarta.annotation.Nullable Long expiryDate) {
        this.expiryDate = expiryDate;
        return this;
    }

    /**
     * Get expiryDate
     *
     * @return expiryDate
     */
    @jakarta.annotation.Nullable
    public Long getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(@jakarta.annotation.Nullable Long expiryDate) {
        this.expiryDate = expiryDate;
    }

    public HistoricalExerciseRecordsResponseInner strikeResult(
            @jakarta.annotation.Nullable String strikeResult) {
        this.strikeResult = strikeResult;
        return this;
    }

    /**
     * Get strikeResult
     *
     * @return strikeResult
     */
    @jakarta.annotation.Nullable
    public String getStrikeResult() {
        return strikeResult;
    }

    public void setStrikeResult(@jakarta.annotation.Nullable String strikeResult) {
        this.strikeResult = strikeResult;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HistoricalExerciseRecordsResponseInner historicalExerciseRecordsResponseInner =
                (HistoricalExerciseRecordsResponseInner) o;
        return Objects.equals(this.symbol, historicalExerciseRecordsResponseInner.symbol)
                && Objects.equals(
                        this.strikePrice, historicalExerciseRecordsResponseInner.strikePrice)
                && Objects.equals(
                        this.realStrikePrice,
                        historicalExerciseRecordsResponseInner.realStrikePrice)
                && Objects.equals(
                        this.expiryDate, historicalExerciseRecordsResponseInner.expiryDate)
                && Objects.equals(
                        this.strikeResult, historicalExerciseRecordsResponseInner.strikeResult);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbol, strikePrice, realStrikePrice, expiryDate, strikeResult);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class HistoricalExerciseRecordsResponseInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
        sb.append("		realStrikePrice: ").append(toIndentedString(realStrikePrice)).append("\n");
        sb.append("		expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
        sb.append("		strikeResult: ").append(toIndentedString(strikeResult)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object strikePriceValue = getStrikePrice();
        String strikePriceValueAsString = "";
        strikePriceValueAsString = strikePriceValue.toString();
        sb.append("strikePrice=").append(urlEncode(strikePriceValueAsString)).append("");
        Object realStrikePriceValue = getRealStrikePrice();
        String realStrikePriceValueAsString = "";
        realStrikePriceValueAsString = realStrikePriceValue.toString();
        sb.append("realStrikePrice=").append(urlEncode(realStrikePriceValueAsString)).append("");
        Object expiryDateValue = getExpiryDate();
        String expiryDateValueAsString = "";
        expiryDateValueAsString = expiryDateValue.toString();
        sb.append("expiryDate=").append(urlEncode(expiryDateValueAsString)).append("");
        Object strikeResultValue = getStrikeResult();
        String strikeResultValueAsString = "";
        strikeResultValueAsString = strikeResultValue.toString();
        sb.append("strikeResult=").append(urlEncode(strikeResultValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("strikePrice");
        openapiFields.add("realStrikePrice");
        openapiFields.add("expiryDate");
        openapiFields.add("strikeResult");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     HistoricalExerciseRecordsResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!HistoricalExerciseRecordsResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in HistoricalExerciseRecordsResponseInner"
                                        + " is not found in the empty JSON string",
                                HistoricalExerciseRecordsResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!HistoricalExerciseRecordsResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `HistoricalExerciseRecordsResponseInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("strikePrice") != null && !jsonObj.get("strikePrice").isJsonNull())
                && !jsonObj.get("strikePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strikePrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strikePrice").toString()));
        }
        if ((jsonObj.get("realStrikePrice") != null && !jsonObj.get("realStrikePrice").isJsonNull())
                && !jsonObj.get("realStrikePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `realStrikePrice` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("realStrikePrice").toString()));
        }
        if ((jsonObj.get("strikeResult") != null && !jsonObj.get("strikeResult").isJsonNull())
                && !jsonObj.get("strikeResult").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strikeResult` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strikeResult").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!HistoricalExerciseRecordsResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'HistoricalExerciseRecordsResponseInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<HistoricalExerciseRecordsResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(HistoricalExerciseRecordsResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<HistoricalExerciseRecordsResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, HistoricalExerciseRecordsResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public HistoricalExerciseRecordsResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of HistoricalExerciseRecordsResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of HistoricalExerciseRecordsResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     HistoricalExerciseRecordsResponseInner
     */
    public static HistoricalExerciseRecordsResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, HistoricalExerciseRecordsResponseInner.class);
    }

    /**
     * Convert an instance of HistoricalExerciseRecordsResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
