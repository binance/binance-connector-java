/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** OptionPositionInformationResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OptionPositionInformationResponseInner {
    public static final String SERIALIZED_NAME_ENTRY_PRICE = "entryPrice";

    @SerializedName(SERIALIZED_NAME_ENTRY_PRICE)
    @jakarta.annotation.Nullable
    private String entryPrice;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private String quantity;

    public static final String SERIALIZED_NAME_REDUCIBLE_QTY = "reducibleQty";

    @SerializedName(SERIALIZED_NAME_REDUCIBLE_QTY)
    @jakarta.annotation.Nullable
    private String reducibleQty;

    public static final String SERIALIZED_NAME_MARK_VALUE = "markValue";

    @SerializedName(SERIALIZED_NAME_MARK_VALUE)
    @jakarta.annotation.Nullable
    private String markValue;

    public static final String SERIALIZED_NAME_ROR = "ror";

    @SerializedName(SERIALIZED_NAME_ROR)
    @jakarta.annotation.Nullable
    private String ror;

    public static final String SERIALIZED_NAME_UNREALIZED_P_N_L = "unrealizedPNL";

    @SerializedName(SERIALIZED_NAME_UNREALIZED_P_N_L)
    @jakarta.annotation.Nullable
    private String unrealizedPNL;

    public static final String SERIALIZED_NAME_MARK_PRICE = "markPrice";

    @SerializedName(SERIALIZED_NAME_MARK_PRICE)
    @jakarta.annotation.Nullable
    private String markPrice;

    public static final String SERIALIZED_NAME_STRIKE_PRICE = "strikePrice";

    @SerializedName(SERIALIZED_NAME_STRIKE_PRICE)
    @jakarta.annotation.Nullable
    private String strikePrice;

    public static final String SERIALIZED_NAME_POSITION_COST = "positionCost";

    @SerializedName(SERIALIZED_NAME_POSITION_COST)
    @jakarta.annotation.Nullable
    private String positionCost;

    public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";

    @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
    @jakarta.annotation.Nullable
    private Long expiryDate;

    public static final String SERIALIZED_NAME_PRICE_SCALE = "priceScale";

    @SerializedName(SERIALIZED_NAME_PRICE_SCALE)
    @jakarta.annotation.Nullable
    private Long priceScale;

    public static final String SERIALIZED_NAME_QUANTITY_SCALE = "quantityScale";

    @SerializedName(SERIALIZED_NAME_QUANTITY_SCALE)
    @jakarta.annotation.Nullable
    private Long quantityScale;

    public static final String SERIALIZED_NAME_OPTION_SIDE = "optionSide";

    @SerializedName(SERIALIZED_NAME_OPTION_SIDE)
    @jakarta.annotation.Nullable
    private String optionSide;

    public static final String SERIALIZED_NAME_QUOTE_ASSET = "quoteAsset";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET)
    @jakarta.annotation.Nullable
    private String quoteAsset;

    public OptionPositionInformationResponseInner() {}

    public OptionPositionInformationResponseInner entryPrice(
            @jakarta.annotation.Nullable String entryPrice) {
        this.entryPrice = entryPrice;
        return this;
    }

    /**
     * Get entryPrice
     *
     * @return entryPrice
     */
    @jakarta.annotation.Nullable
    public String getEntryPrice() {
        return entryPrice;
    }

    public void setEntryPrice(@jakarta.annotation.Nullable String entryPrice) {
        this.entryPrice = entryPrice;
    }

    public OptionPositionInformationResponseInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public OptionPositionInformationResponseInner side(@jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public OptionPositionInformationResponseInner quantity(
            @jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    public String getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
    }

    public OptionPositionInformationResponseInner reducibleQty(
            @jakarta.annotation.Nullable String reducibleQty) {
        this.reducibleQty = reducibleQty;
        return this;
    }

    /**
     * Get reducibleQty
     *
     * @return reducibleQty
     */
    @jakarta.annotation.Nullable
    public String getReducibleQty() {
        return reducibleQty;
    }

    public void setReducibleQty(@jakarta.annotation.Nullable String reducibleQty) {
        this.reducibleQty = reducibleQty;
    }

    public OptionPositionInformationResponseInner markValue(
            @jakarta.annotation.Nullable String markValue) {
        this.markValue = markValue;
        return this;
    }

    /**
     * Get markValue
     *
     * @return markValue
     */
    @jakarta.annotation.Nullable
    public String getMarkValue() {
        return markValue;
    }

    public void setMarkValue(@jakarta.annotation.Nullable String markValue) {
        this.markValue = markValue;
    }

    public OptionPositionInformationResponseInner ror(@jakarta.annotation.Nullable String ror) {
        this.ror = ror;
        return this;
    }

    /**
     * Get ror
     *
     * @return ror
     */
    @jakarta.annotation.Nullable
    public String getRor() {
        return ror;
    }

    public void setRor(@jakarta.annotation.Nullable String ror) {
        this.ror = ror;
    }

    public OptionPositionInformationResponseInner unrealizedPNL(
            @jakarta.annotation.Nullable String unrealizedPNL) {
        this.unrealizedPNL = unrealizedPNL;
        return this;
    }

    /**
     * Get unrealizedPNL
     *
     * @return unrealizedPNL
     */
    @jakarta.annotation.Nullable
    public String getUnrealizedPNL() {
        return unrealizedPNL;
    }

    public void setUnrealizedPNL(@jakarta.annotation.Nullable String unrealizedPNL) {
        this.unrealizedPNL = unrealizedPNL;
    }

    public OptionPositionInformationResponseInner markPrice(
            @jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
        return this;
    }

    /**
     * Get markPrice
     *
     * @return markPrice
     */
    @jakarta.annotation.Nullable
    public String getMarkPrice() {
        return markPrice;
    }

    public void setMarkPrice(@jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
    }

    public OptionPositionInformationResponseInner strikePrice(
            @jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
        return this;
    }

    /**
     * Get strikePrice
     *
     * @return strikePrice
     */
    @jakarta.annotation.Nullable
    public String getStrikePrice() {
        return strikePrice;
    }

    public void setStrikePrice(@jakarta.annotation.Nullable String strikePrice) {
        this.strikePrice = strikePrice;
    }

    public OptionPositionInformationResponseInner positionCost(
            @jakarta.annotation.Nullable String positionCost) {
        this.positionCost = positionCost;
        return this;
    }

    /**
     * Get positionCost
     *
     * @return positionCost
     */
    @jakarta.annotation.Nullable
    public String getPositionCost() {
        return positionCost;
    }

    public void setPositionCost(@jakarta.annotation.Nullable String positionCost) {
        this.positionCost = positionCost;
    }

    public OptionPositionInformationResponseInner expiryDate(
            @jakarta.annotation.Nullable Long expiryDate) {
        this.expiryDate = expiryDate;
        return this;
    }

    /**
     * Get expiryDate
     *
     * @return expiryDate
     */
    @jakarta.annotation.Nullable
    public Long getExpiryDate() {
        return expiryDate;
    }

    public void setExpiryDate(@jakarta.annotation.Nullable Long expiryDate) {
        this.expiryDate = expiryDate;
    }

    public OptionPositionInformationResponseInner priceScale(
            @jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
        return this;
    }

    /**
     * Get priceScale
     *
     * @return priceScale
     */
    @jakarta.annotation.Nullable
    public Long getPriceScale() {
        return priceScale;
    }

    public void setPriceScale(@jakarta.annotation.Nullable Long priceScale) {
        this.priceScale = priceScale;
    }

    public OptionPositionInformationResponseInner quantityScale(
            @jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
        return this;
    }

    /**
     * Get quantityScale
     *
     * @return quantityScale
     */
    @jakarta.annotation.Nullable
    public Long getQuantityScale() {
        return quantityScale;
    }

    public void setQuantityScale(@jakarta.annotation.Nullable Long quantityScale) {
        this.quantityScale = quantityScale;
    }

    public OptionPositionInformationResponseInner optionSide(
            @jakarta.annotation.Nullable String optionSide) {
        this.optionSide = optionSide;
        return this;
    }

    /**
     * Get optionSide
     *
     * @return optionSide
     */
    @jakarta.annotation.Nullable
    public String getOptionSide() {
        return optionSide;
    }

    public void setOptionSide(@jakarta.annotation.Nullable String optionSide) {
        this.optionSide = optionSide;
    }

    public OptionPositionInformationResponseInner quoteAsset(
            @jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
        return this;
    }

    /**
     * Get quoteAsset
     *
     * @return quoteAsset
     */
    @jakarta.annotation.Nullable
    public String getQuoteAsset() {
        return quoteAsset;
    }

    public void setQuoteAsset(@jakarta.annotation.Nullable String quoteAsset) {
        this.quoteAsset = quoteAsset;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OptionPositionInformationResponseInner optionPositionInformationResponseInner =
                (OptionPositionInformationResponseInner) o;
        return Objects.equals(this.entryPrice, optionPositionInformationResponseInner.entryPrice)
                && Objects.equals(this.symbol, optionPositionInformationResponseInner.symbol)
                && Objects.equals(this.side, optionPositionInformationResponseInner.side)
                && Objects.equals(this.quantity, optionPositionInformationResponseInner.quantity)
                && Objects.equals(
                        this.reducibleQty, optionPositionInformationResponseInner.reducibleQty)
                && Objects.equals(this.markValue, optionPositionInformationResponseInner.markValue)
                && Objects.equals(this.ror, optionPositionInformationResponseInner.ror)
                && Objects.equals(
                        this.unrealizedPNL, optionPositionInformationResponseInner.unrealizedPNL)
                && Objects.equals(this.markPrice, optionPositionInformationResponseInner.markPrice)
                && Objects.equals(
                        this.strikePrice, optionPositionInformationResponseInner.strikePrice)
                && Objects.equals(
                        this.positionCost, optionPositionInformationResponseInner.positionCost)
                && Objects.equals(
                        this.expiryDate, optionPositionInformationResponseInner.expiryDate)
                && Objects.equals(
                        this.priceScale, optionPositionInformationResponseInner.priceScale)
                && Objects.equals(
                        this.quantityScale, optionPositionInformationResponseInner.quantityScale)
                && Objects.equals(
                        this.optionSide, optionPositionInformationResponseInner.optionSide)
                && Objects.equals(
                        this.quoteAsset, optionPositionInformationResponseInner.quoteAsset);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                entryPrice,
                symbol,
                side,
                quantity,
                reducibleQty,
                markValue,
                ror,
                unrealizedPNL,
                markPrice,
                strikePrice,
                positionCost,
                expiryDate,
                priceScale,
                quantityScale,
                optionSide,
                quoteAsset);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OptionPositionInformationResponseInner {\n");
        sb.append("		entryPrice: ").append(toIndentedString(entryPrice)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		reducibleQty: ").append(toIndentedString(reducibleQty)).append("\n");
        sb.append("		markValue: ").append(toIndentedString(markValue)).append("\n");
        sb.append("		ror: ").append(toIndentedString(ror)).append("\n");
        sb.append("		unrealizedPNL: ").append(toIndentedString(unrealizedPNL)).append("\n");
        sb.append("		markPrice: ").append(toIndentedString(markPrice)).append("\n");
        sb.append("		strikePrice: ").append(toIndentedString(strikePrice)).append("\n");
        sb.append("		positionCost: ").append(toIndentedString(positionCost)).append("\n");
        sb.append("		expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
        sb.append("		priceScale: ").append(toIndentedString(priceScale)).append("\n");
        sb.append("		quantityScale: ").append(toIndentedString(quantityScale)).append("\n");
        sb.append("		optionSide: ").append(toIndentedString(optionSide)).append("\n");
        sb.append("		quoteAsset: ").append(toIndentedString(quoteAsset)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object entryPriceValue = getEntryPrice();
        String entryPriceValueAsString = "";
        entryPriceValueAsString = entryPriceValue.toString();
        sb.append("entryPrice=").append(urlEncode(entryPriceValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object reducibleQtyValue = getReducibleQty();
        String reducibleQtyValueAsString = "";
        reducibleQtyValueAsString = reducibleQtyValue.toString();
        sb.append("reducibleQty=").append(urlEncode(reducibleQtyValueAsString)).append("");
        Object markValueValue = getMarkValue();
        String markValueValueAsString = "";
        markValueValueAsString = markValueValue.toString();
        sb.append("markValue=").append(urlEncode(markValueValueAsString)).append("");
        Object rorValue = getRor();
        String rorValueAsString = "";
        rorValueAsString = rorValue.toString();
        sb.append("ror=").append(urlEncode(rorValueAsString)).append("");
        Object unrealizedPNLValue = getUnrealizedPNL();
        String unrealizedPNLValueAsString = "";
        unrealizedPNLValueAsString = unrealizedPNLValue.toString();
        sb.append("unrealizedPNL=").append(urlEncode(unrealizedPNLValueAsString)).append("");
        Object markPriceValue = getMarkPrice();
        String markPriceValueAsString = "";
        markPriceValueAsString = markPriceValue.toString();
        sb.append("markPrice=").append(urlEncode(markPriceValueAsString)).append("");
        Object strikePriceValue = getStrikePrice();
        String strikePriceValueAsString = "";
        strikePriceValueAsString = strikePriceValue.toString();
        sb.append("strikePrice=").append(urlEncode(strikePriceValueAsString)).append("");
        Object positionCostValue = getPositionCost();
        String positionCostValueAsString = "";
        positionCostValueAsString = positionCostValue.toString();
        sb.append("positionCost=").append(urlEncode(positionCostValueAsString)).append("");
        Object expiryDateValue = getExpiryDate();
        String expiryDateValueAsString = "";
        expiryDateValueAsString = expiryDateValue.toString();
        sb.append("expiryDate=").append(urlEncode(expiryDateValueAsString)).append("");
        Object priceScaleValue = getPriceScale();
        String priceScaleValueAsString = "";
        priceScaleValueAsString = priceScaleValue.toString();
        sb.append("priceScale=").append(urlEncode(priceScaleValueAsString)).append("");
        Object quantityScaleValue = getQuantityScale();
        String quantityScaleValueAsString = "";
        quantityScaleValueAsString = quantityScaleValue.toString();
        sb.append("quantityScale=").append(urlEncode(quantityScaleValueAsString)).append("");
        Object optionSideValue = getOptionSide();
        String optionSideValueAsString = "";
        optionSideValueAsString = optionSideValue.toString();
        sb.append("optionSide=").append(urlEncode(optionSideValueAsString)).append("");
        Object quoteAssetValue = getQuoteAsset();
        String quoteAssetValueAsString = "";
        quoteAssetValueAsString = quoteAssetValue.toString();
        sb.append("quoteAsset=").append(urlEncode(quoteAssetValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("entryPrice");
        openapiFields.add("symbol");
        openapiFields.add("side");
        openapiFields.add("quantity");
        openapiFields.add("reducibleQty");
        openapiFields.add("markValue");
        openapiFields.add("ror");
        openapiFields.add("unrealizedPNL");
        openapiFields.add("markPrice");
        openapiFields.add("strikePrice");
        openapiFields.add("positionCost");
        openapiFields.add("expiryDate");
        openapiFields.add("priceScale");
        openapiFields.add("quantityScale");
        openapiFields.add("optionSide");
        openapiFields.add("quoteAsset");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OptionPositionInformationResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OptionPositionInformationResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OptionPositionInformationResponseInner"
                                        + " is not found in the empty JSON string",
                                OptionPositionInformationResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OptionPositionInformationResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `OptionPositionInformationResponseInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("entryPrice") != null && !jsonObj.get("entryPrice").isJsonNull())
                && !jsonObj.get("entryPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `entryPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("entryPrice").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull())
                && !jsonObj.get("quantity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quantity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quantity").toString()));
        }
        if ((jsonObj.get("reducibleQty") != null && !jsonObj.get("reducibleQty").isJsonNull())
                && !jsonObj.get("reducibleQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `reducibleQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("reducibleQty").toString()));
        }
        if ((jsonObj.get("markValue") != null && !jsonObj.get("markValue").isJsonNull())
                && !jsonObj.get("markValue").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `markValue` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("markValue").toString()));
        }
        if ((jsonObj.get("ror") != null && !jsonObj.get("ror").isJsonNull())
                && !jsonObj.get("ror").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ror` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ror").toString()));
        }
        if ((jsonObj.get("unrealizedPNL") != null && !jsonObj.get("unrealizedPNL").isJsonNull())
                && !jsonObj.get("unrealizedPNL").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `unrealizedPNL` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("unrealizedPNL").toString()));
        }
        if ((jsonObj.get("markPrice") != null && !jsonObj.get("markPrice").isJsonNull())
                && !jsonObj.get("markPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `markPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("markPrice").toString()));
        }
        if ((jsonObj.get("strikePrice") != null && !jsonObj.get("strikePrice").isJsonNull())
                && !jsonObj.get("strikePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strikePrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strikePrice").toString()));
        }
        if ((jsonObj.get("positionCost") != null && !jsonObj.get("positionCost").isJsonNull())
                && !jsonObj.get("positionCost").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionCost` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionCost").toString()));
        }
        if ((jsonObj.get("optionSide") != null && !jsonObj.get("optionSide").isJsonNull())
                && !jsonObj.get("optionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `optionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("optionSide").toString()));
        }
        if ((jsonObj.get("quoteAsset") != null && !jsonObj.get("quoteAsset").isJsonNull())
                && !jsonObj.get("quoteAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quoteAsset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OptionPositionInformationResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OptionPositionInformationResponseInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OptionPositionInformationResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(OptionPositionInformationResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OptionPositionInformationResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, OptionPositionInformationResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OptionPositionInformationResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OptionPositionInformationResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OptionPositionInformationResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     OptionPositionInformationResponseInner
     */
    public static OptionPositionInformationResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, OptionPositionInformationResponseInner.class);
    }

    /**
     * Convert an instance of OptionPositionInformationResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
