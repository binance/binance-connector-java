/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** OrderBookResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrderBookResponse {
    public static final String SERIALIZED_NAME_T = "T";

    @SerializedName(SERIALIZED_NAME_T)
    @jakarta.annotation.Nullable
    private Long T;

    public static final String SERIALIZED_NAME_U_LOWER_CASE = "u";

    @SerializedName(SERIALIZED_NAME_U_LOWER_CASE)
    @jakarta.annotation.Nullable
    private Long uLowerCase;

    public static final String SERIALIZED_NAME_BIDS = "bids";

    @SerializedName(SERIALIZED_NAME_BIDS)
    @jakarta.annotation.Nullable
    private List<OrderBookResponseBidsItem> bids;

    public static final String SERIALIZED_NAME_ASKS = "asks";

    @SerializedName(SERIALIZED_NAME_ASKS)
    @jakarta.annotation.Nullable
    private List<OrderBookResponseAsksItem> asks;

    public OrderBookResponse() {}

    public OrderBookResponse T(@jakarta.annotation.Nullable Long T) {
        this.T = T;
        return this;
    }

    /**
     * Get T
     *
     * @return T
     */
    @jakarta.annotation.Nullable
    public Long getT() {
        return T;
    }

    public void setT(@jakarta.annotation.Nullable Long T) {
        this.T = T;
    }

    public OrderBookResponse uLowerCase(@jakarta.annotation.Nullable Long uLowerCase) {
        this.uLowerCase = uLowerCase;
        return this;
    }

    /**
     * Get uLowerCase
     *
     * @return uLowerCase
     */
    @jakarta.annotation.Nullable
    public Long getuLowerCase() {
        return uLowerCase;
    }

    public void setuLowerCase(@jakarta.annotation.Nullable Long uLowerCase) {
        this.uLowerCase = uLowerCase;
    }

    public OrderBookResponse bids(
            @jakarta.annotation.Nullable List<OrderBookResponseBidsItem> bids) {
        this.bids = bids;
        return this;
    }

    public OrderBookResponse addBidsItem(OrderBookResponseBidsItem bidsItem) {
        if (this.bids == null) {
            this.bids = new ArrayList<>();
        }
        this.bids.add(bidsItem);
        return this;
    }

    /**
     * Get bids
     *
     * @return bids
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<OrderBookResponseBidsItem> getBids() {
        return bids;
    }

    public void setBids(@jakarta.annotation.Nullable List<OrderBookResponseBidsItem> bids) {
        this.bids = bids;
    }

    public OrderBookResponse asks(
            @jakarta.annotation.Nullable List<OrderBookResponseAsksItem> asks) {
        this.asks = asks;
        return this;
    }

    public OrderBookResponse addAsksItem(OrderBookResponseAsksItem asksItem) {
        if (this.asks == null) {
            this.asks = new ArrayList<>();
        }
        this.asks.add(asksItem);
        return this;
    }

    /**
     * Get asks
     *
     * @return asks
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<OrderBookResponseAsksItem> getAsks() {
        return asks;
    }

    public void setAsks(@jakarta.annotation.Nullable List<OrderBookResponseAsksItem> asks) {
        this.asks = asks;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrderBookResponse orderBookResponse = (OrderBookResponse) o;
        return Objects.equals(this.T, orderBookResponse.T)
                && Objects.equals(this.uLowerCase, orderBookResponse.uLowerCase)
                && Objects.equals(this.bids, orderBookResponse.bids)
                && Objects.equals(this.asks, orderBookResponse.asks);
    }

    @Override
    public int hashCode() {
        return Objects.hash(T, uLowerCase, bids, asks);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrderBookResponse {\n");
        sb.append("		T: ").append(toIndentedString(T)).append("\n");
        sb.append("		uLowerCase: ").append(toIndentedString(uLowerCase)).append("\n");
        sb.append("		bids: ").append(toIndentedString(bids)).append("\n");
        sb.append("		asks: ").append(toIndentedString(asks)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object TValue = getT();
        String TValueAsString = "";
        TValueAsString = TValue.toString();
        sb.append("T=").append(urlEncode(TValueAsString)).append("");
        Object uLowerCaseValue = getuLowerCase();
        String uLowerCaseValueAsString = "";
        uLowerCaseValueAsString = uLowerCaseValue.toString();
        sb.append("uLowerCase=").append(urlEncode(uLowerCaseValueAsString)).append("");
        Object bidsValue = getBids();
        String bidsValueAsString = "";
        bidsValueAsString =
                (String)
                        ((Collection) bidsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("bids=").append(urlEncode(bidsValueAsString)).append("");
        Object asksValue = getAsks();
        String asksValueAsString = "";
        asksValueAsString =
                (String)
                        ((Collection) asksValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("asks=").append(urlEncode(asksValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("T");
        openapiFields.add("u");
        openapiFields.add("bids");
        openapiFields.add("asks");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrderBookResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrderBookResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrderBookResponse is not found in the"
                                        + " empty JSON string",
                                OrderBookResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrderBookResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrderBookResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("bids") != null
                && !jsonObj.get("bids").isJsonNull()
                && !jsonObj.get("bids").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `bids` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("bids").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("asks") != null
                && !jsonObj.get("asks").isJsonNull()
                && !jsonObj.get("asks").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asks` to be an array in the JSON string but got"
                                    + " `%s`",
                            jsonObj.get("asks").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrderBookResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrderBookResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrderBookResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrderBookResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrderBookResponse>() {
                        @Override
                        public void write(JsonWriter out, OrderBookResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrderBookResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrderBookResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrderBookResponse
     * @throws IOException if the JSON string is invalid with respect to OrderBookResponse
     */
    public static OrderBookResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrderBookResponse.class);
    }

    /**
     * Convert an instance of OrderBookResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
