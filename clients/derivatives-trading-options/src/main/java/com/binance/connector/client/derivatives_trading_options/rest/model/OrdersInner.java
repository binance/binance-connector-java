/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** OrdersInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OrdersInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    /** Gets or Sets side */
    @JsonAdapter(SideEnum.Adapter.class)
    public enum SideEnum {
        BUY("BUY"),

        SELL("SELL");

        private String value;

        SideEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static SideEnum fromValue(String value) {
            for (SideEnum b : SideEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<SideEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final SideEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public SideEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return SideEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            SideEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private SideEnum side;

    /** Gets or Sets type */
    @JsonAdapter(TypeEnum.Adapter.class)
    public enum TypeEnum {
        LIMIT("LIMIT");

        private String value;

        TypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TypeEnum fromValue(String value) {
            for (TypeEnum b : TypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<TypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TypeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            TypeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private TypeEnum type;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private Double quantity;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private Double price;

    /** Gets or Sets timeInForce */
    @JsonAdapter(TimeInForceEnum.Adapter.class)
    public enum TimeInForceEnum {
        GTC("GTC"),

        IOC("IOC"),

        FOK("FOK");

        private String value;

        TimeInForceEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static TimeInForceEnum fromValue(String value) {
            for (TimeInForceEnum b : TimeInForceEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<TimeInForceEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final TimeInForceEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public TimeInForceEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return TimeInForceEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            TimeInForceEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private TimeInForceEnum timeInForce;

    public static final String SERIALIZED_NAME_REDUCE_ONLY = "reduceOnly";

    @SerializedName(SERIALIZED_NAME_REDUCE_ONLY)
    @jakarta.annotation.Nullable
    private Boolean reduceOnly;

    public static final String SERIALIZED_NAME_POST_ONLY = "postOnly";

    @SerializedName(SERIALIZED_NAME_POST_ONLY)
    @jakarta.annotation.Nullable
    private Boolean postOnly;

    /** Gets or Sets newOrderRespType */
    @JsonAdapter(NewOrderRespTypeEnum.Adapter.class)
    public enum NewOrderRespTypeEnum {
        ACK("ACK"),

        RESULT("RESULT");

        private String value;

        NewOrderRespTypeEnum(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        public static NewOrderRespTypeEnum fromValue(String value) {
            for (NewOrderRespTypeEnum b : NewOrderRespTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }

        public static class Adapter extends TypeAdapter<NewOrderRespTypeEnum> {
            @Override
            public void write(final JsonWriter jsonWriter, final NewOrderRespTypeEnum enumeration)
                    throws IOException {
                jsonWriter.value(enumeration.getValue());
            }

            @Override
            public NewOrderRespTypeEnum read(final JsonReader jsonReader) throws IOException {
                String value = jsonReader.nextString();
                return NewOrderRespTypeEnum.fromValue(value);
            }
        }

        public static void validateJsonElement(JsonElement jsonElement) throws IOException {
            String value = jsonElement.getAsString();
            NewOrderRespTypeEnum.fromValue(value);
        }
    }

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespTypeEnum newOrderRespType;

    public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "clientOrderId";

    @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String clientOrderId;

    public static final String SERIALIZED_NAME_IS_MMP = "isMmp";

    @SerializedName(SERIALIZED_NAME_IS_MMP)
    @jakarta.annotation.Nullable
    private Boolean isMmp;

    public OrdersInner() {}

    public OrdersInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public OrdersInner side(@jakarta.annotation.Nullable SideEnum side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public SideEnum getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable SideEnum side) {
        this.side = side;
    }

    public OrdersInner type(@jakarta.annotation.Nullable TypeEnum type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public TypeEnum getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable TypeEnum type) {
        this.type = type;
    }

    public OrdersInner quantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
    }

    public OrdersInner price(@jakarta.annotation.Nullable Double price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable Double price) {
        this.price = price;
    }

    public OrdersInner timeInForce(@jakarta.annotation.Nullable TimeInForceEnum timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public TimeInForceEnum getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable TimeInForceEnum timeInForce) {
        this.timeInForce = timeInForce;
    }

    public OrdersInner reduceOnly(@jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
        return this;
    }

    /**
     * Get reduceOnly
     *
     * @return reduceOnly
     */
    @jakarta.annotation.Nullable
    public Boolean getReduceOnly() {
        return reduceOnly;
    }

    public void setReduceOnly(@jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
    }

    public OrdersInner postOnly(@jakarta.annotation.Nullable Boolean postOnly) {
        this.postOnly = postOnly;
        return this;
    }

    /**
     * Get postOnly
     *
     * @return postOnly
     */
    @jakarta.annotation.Nullable
    public Boolean getPostOnly() {
        return postOnly;
    }

    public void setPostOnly(@jakarta.annotation.Nullable Boolean postOnly) {
        this.postOnly = postOnly;
    }

    public OrdersInner newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespTypeEnum newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    public NewOrderRespTypeEnum getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespTypeEnum newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public OrdersInner clientOrderId(@jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
        return this;
    }

    /**
     * Get clientOrderId
     *
     * @return clientOrderId
     */
    @jakarta.annotation.Nullable
    public String getClientOrderId() {
        return clientOrderId;
    }

    public void setClientOrderId(@jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }

    public OrdersInner isMmp(@jakarta.annotation.Nullable Boolean isMmp) {
        this.isMmp = isMmp;
        return this;
    }

    /**
     * Get isMmp
     *
     * @return isMmp
     */
    @jakarta.annotation.Nullable
    public Boolean getIsMmp() {
        return isMmp;
    }

    public void setIsMmp(@jakarta.annotation.Nullable Boolean isMmp) {
        this.isMmp = isMmp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OrdersInner ordersInner = (OrdersInner) o;
        return Objects.equals(this.symbol, ordersInner.symbol)
                && Objects.equals(this.side, ordersInner.side)
                && Objects.equals(this.type, ordersInner.type)
                && Objects.equals(this.quantity, ordersInner.quantity)
                && Objects.equals(this.price, ordersInner.price)
                && Objects.equals(this.timeInForce, ordersInner.timeInForce)
                && Objects.equals(this.reduceOnly, ordersInner.reduceOnly)
                && Objects.equals(this.postOnly, ordersInner.postOnly)
                && Objects.equals(this.newOrderRespType, ordersInner.newOrderRespType)
                && Objects.equals(this.clientOrderId, ordersInner.clientOrderId)
                && Objects.equals(this.isMmp, ordersInner.isMmp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                side,
                type,
                quantity,
                price,
                timeInForce,
                reduceOnly,
                postOnly,
                newOrderRespType,
                clientOrderId,
                isMmp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OrdersInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		reduceOnly: ").append(toIndentedString(reduceOnly)).append("\n");
        sb.append("		postOnly: ").append(toIndentedString(postOnly)).append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
        sb.append("		isMmp: ").append(toIndentedString(isMmp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString = timeInForceValue.toString();
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object reduceOnlyValue = getReduceOnly();
        String reduceOnlyValueAsString = "";
        reduceOnlyValueAsString = reduceOnlyValue.toString();
        sb.append("reduceOnly=").append(urlEncode(reduceOnlyValueAsString)).append("");
        Object postOnlyValue = getPostOnly();
        String postOnlyValueAsString = "";
        postOnlyValueAsString = postOnlyValue.toString();
        sb.append("postOnly=").append(urlEncode(postOnlyValueAsString)).append("");
        Object newOrderRespTypeValue = getNewOrderRespType();
        String newOrderRespTypeValueAsString = "";
        newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
        sb.append("newOrderRespType=").append(urlEncode(newOrderRespTypeValueAsString)).append("");
        Object clientOrderIdValue = getClientOrderId();
        String clientOrderIdValueAsString = "";
        clientOrderIdValueAsString = clientOrderIdValue.toString();
        sb.append("clientOrderId=").append(urlEncode(clientOrderIdValueAsString)).append("");
        Object isMmpValue = getIsMmp();
        String isMmpValueAsString = "";
        isMmpValueAsString = isMmpValue.toString();
        sb.append("isMmp=").append(urlEncode(isMmpValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("side");
        openapiFields.add("type");
        openapiFields.add("quantity");
        openapiFields.add("price");
        openapiFields.add("timeInForce");
        openapiFields.add("reduceOnly");
        openapiFields.add("postOnly");
        openapiFields.add("newOrderRespType");
        openapiFields.add("clientOrderId");
        openapiFields.add("isMmp");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OrdersInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OrdersInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OrdersInner is not found in the empty"
                                        + " JSON string",
                                OrdersInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OrdersInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OrdersInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        // validate the optional field `side`
        if (jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull()) {
            SideEnum.validateJsonElement(jsonObj.get("side"));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        // validate the optional field `type`
        if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
            TypeEnum.validateJsonElement(jsonObj.get("type"));
        }
        if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull())
                && !jsonObj.get("timeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        // validate the optional field `timeInForce`
        if (jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) {
            TimeInForceEnum.validateJsonElement(jsonObj.get("timeInForce"));
        }
        if ((jsonObj.get("newOrderRespType") != null
                        && !jsonObj.get("newOrderRespType").isJsonNull())
                && !jsonObj.get("newOrderRespType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newOrderRespType` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("newOrderRespType").toString()));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespTypeEnum.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        if ((jsonObj.get("clientOrderId") != null && !jsonObj.get("clientOrderId").isJsonNull())
                && !jsonObj.get("clientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `clientOrderId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("clientOrderId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OrdersInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OrdersInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OrdersInner> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OrdersInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OrdersInner>() {
                        @Override
                        public void write(JsonWriter out, OrdersInner value) throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OrdersInner read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OrdersInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OrdersInner
     * @throws IOException if the JSON string is invalid with respect to OrdersInner
     */
    public static OrdersInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OrdersInner.class);
    }

    /**
     * Convert an instance of OrdersInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
