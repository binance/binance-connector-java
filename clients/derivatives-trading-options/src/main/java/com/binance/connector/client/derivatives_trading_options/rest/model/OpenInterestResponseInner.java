/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** OpenInterestResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OpenInterestResponseInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_SUM_OPEN_INTEREST = "sumOpenInterest";

    @SerializedName(SERIALIZED_NAME_SUM_OPEN_INTEREST)
    @jakarta.annotation.Nullable
    private String sumOpenInterest;

    public static final String SERIALIZED_NAME_SUM_OPEN_INTEREST_USD = "sumOpenInterestUsd";

    @SerializedName(SERIALIZED_NAME_SUM_OPEN_INTEREST_USD)
    @jakarta.annotation.Nullable
    private String sumOpenInterestUsd;

    public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";

    @SerializedName(SERIALIZED_NAME_TIMESTAMP)
    @jakarta.annotation.Nullable
    private String timestamp;

    public OpenInterestResponseInner() {}

    public OpenInterestResponseInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public OpenInterestResponseInner sumOpenInterest(
            @jakarta.annotation.Nullable String sumOpenInterest) {
        this.sumOpenInterest = sumOpenInterest;
        return this;
    }

    /**
     * Get sumOpenInterest
     *
     * @return sumOpenInterest
     */
    @jakarta.annotation.Nullable
    public String getSumOpenInterest() {
        return sumOpenInterest;
    }

    public void setSumOpenInterest(@jakarta.annotation.Nullable String sumOpenInterest) {
        this.sumOpenInterest = sumOpenInterest;
    }

    public OpenInterestResponseInner sumOpenInterestUsd(
            @jakarta.annotation.Nullable String sumOpenInterestUsd) {
        this.sumOpenInterestUsd = sumOpenInterestUsd;
        return this;
    }

    /**
     * Get sumOpenInterestUsd
     *
     * @return sumOpenInterestUsd
     */
    @jakarta.annotation.Nullable
    public String getSumOpenInterestUsd() {
        return sumOpenInterestUsd;
    }

    public void setSumOpenInterestUsd(@jakarta.annotation.Nullable String sumOpenInterestUsd) {
        this.sumOpenInterestUsd = sumOpenInterestUsd;
    }

    public OpenInterestResponseInner timestamp(@jakarta.annotation.Nullable String timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get timestamp
     *
     * @return timestamp
     */
    @jakarta.annotation.Nullable
    public String getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(@jakarta.annotation.Nullable String timestamp) {
        this.timestamp = timestamp;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OpenInterestResponseInner openInterestResponseInner = (OpenInterestResponseInner) o;
        return Objects.equals(this.symbol, openInterestResponseInner.symbol)
                && Objects.equals(this.sumOpenInterest, openInterestResponseInner.sumOpenInterest)
                && Objects.equals(
                        this.sumOpenInterestUsd, openInterestResponseInner.sumOpenInterestUsd)
                && Objects.equals(this.timestamp, openInterestResponseInner.timestamp);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbol, sumOpenInterest, sumOpenInterestUsd, timestamp);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OpenInterestResponseInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		sumOpenInterest: ").append(toIndentedString(sumOpenInterest)).append("\n");
        sb.append("		sumOpenInterestUsd: ")
                .append(toIndentedString(sumOpenInterestUsd))
                .append("\n");
        sb.append("		timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object sumOpenInterestValue = getSumOpenInterest();
        String sumOpenInterestValueAsString = "";
        sumOpenInterestValueAsString = sumOpenInterestValue.toString();
        sb.append("sumOpenInterest=").append(urlEncode(sumOpenInterestValueAsString)).append("");
        Object sumOpenInterestUsdValue = getSumOpenInterestUsd();
        String sumOpenInterestUsdValueAsString = "";
        sumOpenInterestUsdValueAsString = sumOpenInterestUsdValue.toString();
        sb.append("sumOpenInterestUsd=")
                .append(urlEncode(sumOpenInterestUsdValueAsString))
                .append("");
        Object timestampValue = getTimestamp();
        String timestampValueAsString = "";
        timestampValueAsString = timestampValue.toString();
        sb.append("timestamp=").append(urlEncode(timestampValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("sumOpenInterest");
        openapiFields.add("sumOpenInterestUsd");
        openapiFields.add("timestamp");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OpenInterestResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OpenInterestResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in OpenInterestResponseInner is not found"
                                        + " in the empty JSON string",
                                OpenInterestResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OpenInterestResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OpenInterestResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("sumOpenInterest") != null && !jsonObj.get("sumOpenInterest").isJsonNull())
                && !jsonObj.get("sumOpenInterest").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sumOpenInterest` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("sumOpenInterest").toString()));
        }
        if ((jsonObj.get("sumOpenInterestUsd") != null
                        && !jsonObj.get("sumOpenInterestUsd").isJsonNull())
                && !jsonObj.get("sumOpenInterestUsd").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sumOpenInterestUsd` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("sumOpenInterestUsd").toString()));
        }
        if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull())
                && !jsonObj.get("timestamp").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timestamp` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timestamp").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OpenInterestResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OpenInterestResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OpenInterestResponseInner> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(OpenInterestResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OpenInterestResponseInner>() {
                        @Override
                        public void write(JsonWriter out, OpenInterestResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OpenInterestResponseInner read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OpenInterestResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OpenInterestResponseInner
     * @throws IOException if the JSON string is invalid with respect to OpenInterestResponseInner
     */
    public static OpenInterestResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OpenInterestResponseInner.class);
    }

    /**
     * Convert an instance of OpenInterestResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
