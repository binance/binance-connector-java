/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** OptionMarginAccountInformationResponseAssetInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class OptionMarginAccountInformationResponseAssetInner {
    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_MARGIN_BALANCE = "marginBalance";

    @SerializedName(SERIALIZED_NAME_MARGIN_BALANCE)
    @jakarta.annotation.Nullable
    private String marginBalance;

    public static final String SERIALIZED_NAME_EQUITY = "equity";

    @SerializedName(SERIALIZED_NAME_EQUITY)
    @jakarta.annotation.Nullable
    private String equity;

    public static final String SERIALIZED_NAME_AVAILABLE = "available";

    @SerializedName(SERIALIZED_NAME_AVAILABLE)
    @jakarta.annotation.Nullable
    private String available;

    public static final String SERIALIZED_NAME_INITIAL_MARGIN = "initialMargin";

    @SerializedName(SERIALIZED_NAME_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String initialMargin;

    public static final String SERIALIZED_NAME_MAINT_MARGIN = "maintMargin";

    @SerializedName(SERIALIZED_NAME_MAINT_MARGIN)
    @jakarta.annotation.Nullable
    private String maintMargin;

    public static final String SERIALIZED_NAME_UNREALIZED_P_N_L = "unrealizedPNL";

    @SerializedName(SERIALIZED_NAME_UNREALIZED_P_N_L)
    @jakarta.annotation.Nullable
    private String unrealizedPNL;

    public static final String SERIALIZED_NAME_LP_PROFIT = "lpProfit";

    @SerializedName(SERIALIZED_NAME_LP_PROFIT)
    @jakarta.annotation.Nullable
    private String lpProfit;

    public OptionMarginAccountInformationResponseAssetInner() {}

    public OptionMarginAccountInformationResponseAssetInner asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public OptionMarginAccountInformationResponseAssetInner marginBalance(
            @jakarta.annotation.Nullable String marginBalance) {
        this.marginBalance = marginBalance;
        return this;
    }

    /**
     * Get marginBalance
     *
     * @return marginBalance
     */
    @jakarta.annotation.Nullable
    public String getMarginBalance() {
        return marginBalance;
    }

    public void setMarginBalance(@jakarta.annotation.Nullable String marginBalance) {
        this.marginBalance = marginBalance;
    }

    public OptionMarginAccountInformationResponseAssetInner equity(
            @jakarta.annotation.Nullable String equity) {
        this.equity = equity;
        return this;
    }

    /**
     * Get equity
     *
     * @return equity
     */
    @jakarta.annotation.Nullable
    public String getEquity() {
        return equity;
    }

    public void setEquity(@jakarta.annotation.Nullable String equity) {
        this.equity = equity;
    }

    public OptionMarginAccountInformationResponseAssetInner available(
            @jakarta.annotation.Nullable String available) {
        this.available = available;
        return this;
    }

    /**
     * Get available
     *
     * @return available
     */
    @jakarta.annotation.Nullable
    public String getAvailable() {
        return available;
    }

    public void setAvailable(@jakarta.annotation.Nullable String available) {
        this.available = available;
    }

    public OptionMarginAccountInformationResponseAssetInner initialMargin(
            @jakarta.annotation.Nullable String initialMargin) {
        this.initialMargin = initialMargin;
        return this;
    }

    /**
     * Get initialMargin
     *
     * @return initialMargin
     */
    @jakarta.annotation.Nullable
    public String getInitialMargin() {
        return initialMargin;
    }

    public void setInitialMargin(@jakarta.annotation.Nullable String initialMargin) {
        this.initialMargin = initialMargin;
    }

    public OptionMarginAccountInformationResponseAssetInner maintMargin(
            @jakarta.annotation.Nullable String maintMargin) {
        this.maintMargin = maintMargin;
        return this;
    }

    /**
     * Get maintMargin
     *
     * @return maintMargin
     */
    @jakarta.annotation.Nullable
    public String getMaintMargin() {
        return maintMargin;
    }

    public void setMaintMargin(@jakarta.annotation.Nullable String maintMargin) {
        this.maintMargin = maintMargin;
    }

    public OptionMarginAccountInformationResponseAssetInner unrealizedPNL(
            @jakarta.annotation.Nullable String unrealizedPNL) {
        this.unrealizedPNL = unrealizedPNL;
        return this;
    }

    /**
     * Get unrealizedPNL
     *
     * @return unrealizedPNL
     */
    @jakarta.annotation.Nullable
    public String getUnrealizedPNL() {
        return unrealizedPNL;
    }

    public void setUnrealizedPNL(@jakarta.annotation.Nullable String unrealizedPNL) {
        this.unrealizedPNL = unrealizedPNL;
    }

    public OptionMarginAccountInformationResponseAssetInner lpProfit(
            @jakarta.annotation.Nullable String lpProfit) {
        this.lpProfit = lpProfit;
        return this;
    }

    /**
     * Get lpProfit
     *
     * @return lpProfit
     */
    @jakarta.annotation.Nullable
    public String getLpProfit() {
        return lpProfit;
    }

    public void setLpProfit(@jakarta.annotation.Nullable String lpProfit) {
        this.lpProfit = lpProfit;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OptionMarginAccountInformationResponseAssetInner
                optionMarginAccountInformationResponseAssetInner =
                        (OptionMarginAccountInformationResponseAssetInner) o;
        return Objects.equals(this.asset, optionMarginAccountInformationResponseAssetInner.asset)
                && Objects.equals(
                        this.marginBalance,
                        optionMarginAccountInformationResponseAssetInner.marginBalance)
                && Objects.equals(
                        this.equity, optionMarginAccountInformationResponseAssetInner.equity)
                && Objects.equals(
                        this.available, optionMarginAccountInformationResponseAssetInner.available)
                && Objects.equals(
                        this.initialMargin,
                        optionMarginAccountInformationResponseAssetInner.initialMargin)
                && Objects.equals(
                        this.maintMargin,
                        optionMarginAccountInformationResponseAssetInner.maintMargin)
                && Objects.equals(
                        this.unrealizedPNL,
                        optionMarginAccountInformationResponseAssetInner.unrealizedPNL)
                && Objects.equals(
                        this.lpProfit, optionMarginAccountInformationResponseAssetInner.lpProfit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                asset,
                marginBalance,
                equity,
                available,
                initialMargin,
                maintMargin,
                unrealizedPNL,
                lpProfit);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class OptionMarginAccountInformationResponseAssetInner {\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		marginBalance: ").append(toIndentedString(marginBalance)).append("\n");
        sb.append("		equity: ").append(toIndentedString(equity)).append("\n");
        sb.append("		available: ").append(toIndentedString(available)).append("\n");
        sb.append("		initialMargin: ").append(toIndentedString(initialMargin)).append("\n");
        sb.append("		maintMargin: ").append(toIndentedString(maintMargin)).append("\n");
        sb.append("		unrealizedPNL: ").append(toIndentedString(unrealizedPNL)).append("\n");
        sb.append("		lpProfit: ").append(toIndentedString(lpProfit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object marginBalanceValue = getMarginBalance();
        String marginBalanceValueAsString = "";
        marginBalanceValueAsString = marginBalanceValue.toString();
        sb.append("marginBalance=").append(urlEncode(marginBalanceValueAsString)).append("");
        Object equityValue = getEquity();
        String equityValueAsString = "";
        equityValueAsString = equityValue.toString();
        sb.append("equity=").append(urlEncode(equityValueAsString)).append("");
        Object availableValue = getAvailable();
        String availableValueAsString = "";
        availableValueAsString = availableValue.toString();
        sb.append("available=").append(urlEncode(availableValueAsString)).append("");
        Object initialMarginValue = getInitialMargin();
        String initialMarginValueAsString = "";
        initialMarginValueAsString = initialMarginValue.toString();
        sb.append("initialMargin=").append(urlEncode(initialMarginValueAsString)).append("");
        Object maintMarginValue = getMaintMargin();
        String maintMarginValueAsString = "";
        maintMarginValueAsString = maintMarginValue.toString();
        sb.append("maintMargin=").append(urlEncode(maintMarginValueAsString)).append("");
        Object unrealizedPNLValue = getUnrealizedPNL();
        String unrealizedPNLValueAsString = "";
        unrealizedPNLValueAsString = unrealizedPNLValue.toString();
        sb.append("unrealizedPNL=").append(urlEncode(unrealizedPNLValueAsString)).append("");
        Object lpProfitValue = getLpProfit();
        String lpProfitValueAsString = "";
        lpProfitValueAsString = lpProfitValue.toString();
        sb.append("lpProfit=").append(urlEncode(lpProfitValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("asset");
        openapiFields.add("marginBalance");
        openapiFields.add("equity");
        openapiFields.add("available");
        openapiFields.add("initialMargin");
        openapiFields.add("maintMargin");
        openapiFields.add("unrealizedPNL");
        openapiFields.add("lpProfit");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     OptionMarginAccountInformationResponseAssetInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!OptionMarginAccountInformationResponseAssetInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " OptionMarginAccountInformationResponseAssetInner is not"
                                        + " found in the empty JSON string",
                                OptionMarginAccountInformationResponseAssetInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!OptionMarginAccountInformationResponseAssetInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `OptionMarginAccountInformationResponseAssetInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("marginBalance") != null && !jsonObj.get("marginBalance").isJsonNull())
                && !jsonObj.get("marginBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `marginBalance` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("marginBalance").toString()));
        }
        if ((jsonObj.get("equity") != null && !jsonObj.get("equity").isJsonNull())
                && !jsonObj.get("equity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `equity` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("equity").toString()));
        }
        if ((jsonObj.get("available") != null && !jsonObj.get("available").isJsonNull())
                && !jsonObj.get("available").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `available` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("available").toString()));
        }
        if ((jsonObj.get("initialMargin") != null && !jsonObj.get("initialMargin").isJsonNull())
                && !jsonObj.get("initialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `initialMargin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("initialMargin").toString()));
        }
        if ((jsonObj.get("maintMargin") != null && !jsonObj.get("maintMargin").isJsonNull())
                && !jsonObj.get("maintMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maintMargin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maintMargin").toString()));
        }
        if ((jsonObj.get("unrealizedPNL") != null && !jsonObj.get("unrealizedPNL").isJsonNull())
                && !jsonObj.get("unrealizedPNL").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `unrealizedPNL` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("unrealizedPNL").toString()));
        }
        if ((jsonObj.get("lpProfit") != null && !jsonObj.get("lpProfit").isJsonNull())
                && !jsonObj.get("lpProfit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `lpProfit` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("lpProfit").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OptionMarginAccountInformationResponseAssetInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'OptionMarginAccountInformationResponseAssetInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<OptionMarginAccountInformationResponseAssetInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(OptionMarginAccountInformationResponseAssetInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<OptionMarginAccountInformationResponseAssetInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                OptionMarginAccountInformationResponseAssetInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public OptionMarginAccountInformationResponseAssetInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of OptionMarginAccountInformationResponseAssetInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OptionMarginAccountInformationResponseAssetInner
     * @throws IOException if the JSON string is invalid with respect to
     *     OptionMarginAccountInformationResponseAssetInner
     */
    public static OptionMarginAccountInformationResponseAssetInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, OptionMarginAccountInformationResponseAssetInner.class);
    }

    /**
     * Convert an instance of OptionMarginAccountInformationResponseAssetInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
