/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.model;

import com.binance.connector.client.derivatives_trading_options.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AcceptBlockTradeOrderRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AcceptBlockTradeOrderRequest {
    public static final String SERIALIZED_NAME_BLOCK_ORDER_MATCHING_KEY = "blockOrderMatchingKey";

    @SerializedName(SERIALIZED_NAME_BLOCK_ORDER_MATCHING_KEY)
    @jakarta.annotation.Nonnull
    private String blockOrderMatchingKey;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public AcceptBlockTradeOrderRequest() {}

    public AcceptBlockTradeOrderRequest blockOrderMatchingKey(
            @jakarta.annotation.Nonnull String blockOrderMatchingKey) {
        this.blockOrderMatchingKey = blockOrderMatchingKey;
        return this;
    }

    /**
     * Get blockOrderMatchingKey
     *
     * @return blockOrderMatchingKey
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getBlockOrderMatchingKey() {
        return blockOrderMatchingKey;
    }

    public void setBlockOrderMatchingKey(@jakarta.annotation.Nonnull String blockOrderMatchingKey) {
        this.blockOrderMatchingKey = blockOrderMatchingKey;
    }

    public AcceptBlockTradeOrderRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AcceptBlockTradeOrderRequest acceptBlockTradeOrderRequest =
                (AcceptBlockTradeOrderRequest) o;
        return Objects.equals(
                        this.blockOrderMatchingKey,
                        acceptBlockTradeOrderRequest.blockOrderMatchingKey)
                && Objects.equals(this.recvWindow, acceptBlockTradeOrderRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(blockOrderMatchingKey, recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AcceptBlockTradeOrderRequest {\n");
        sb.append("		blockOrderMatchingKey: ")
                .append(toIndentedString(blockOrderMatchingKey))
                .append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object blockOrderMatchingKeyValue = getBlockOrderMatchingKey();
        String blockOrderMatchingKeyValueAsString = "";
        blockOrderMatchingKeyValueAsString = blockOrderMatchingKeyValue.toString();
        sb.append("blockOrderMatchingKey=")
                .append(urlEncode(blockOrderMatchingKeyValueAsString))
                .append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("blockOrderMatchingKey");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("blockOrderMatchingKey");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AcceptBlockTradeOrderRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AcceptBlockTradeOrderRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AcceptBlockTradeOrderRequest is not"
                                        + " found in the empty JSON string",
                                AcceptBlockTradeOrderRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AcceptBlockTradeOrderRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AcceptBlockTradeOrderRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : AcceptBlockTradeOrderRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("blockOrderMatchingKey").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `blockOrderMatchingKey` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("blockOrderMatchingKey").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AcceptBlockTradeOrderRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AcceptBlockTradeOrderRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AcceptBlockTradeOrderRequest> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AcceptBlockTradeOrderRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AcceptBlockTradeOrderRequest>() {
                        @Override
                        public void write(JsonWriter out, AcceptBlockTradeOrderRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AcceptBlockTradeOrderRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AcceptBlockTradeOrderRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AcceptBlockTradeOrderRequest
     * @throws IOException if the JSON string is invalid with respect to
     *     AcceptBlockTradeOrderRequest
     */
    public static AcceptBlockTradeOrderRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AcceptBlockTradeOrderRequest.class);
    }

    /**
     * Convert an instance of AcceptBlockTradeOrderRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
