/*
 * Binance Derivatives Trading Options REST API
 * OpenAPI Specification for the Binance Derivatives Trading Options REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_options.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.JSON;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.derivatives_trading_options.rest.model.AcceptBlockTradeOrderRequest;
import com.binance.connector.client.derivatives_trading_options.rest.model.AcceptBlockTradeOrderResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.AccountBlockTradeListResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.ExtendBlockTradeOrderRequest;
import com.binance.connector.client.derivatives_trading_options.rest.model.ExtendBlockTradeOrderResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.NewBlockTradeOrderRequest;
import com.binance.connector.client.derivatives_trading_options.rest.model.NewBlockTradeOrderResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.QueryBlockTradeDetailsResponse;
import com.binance.connector.client.derivatives_trading_options.rest.model.QueryBlockTradeOrderResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class MarketMakerBlockTradeApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-derivatives-trading-options/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public MarketMakerBlockTradeApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public MarketMakerBlockTradeApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for acceptBlockTradeOrder
     *
     * @param acceptBlockTradeOrderRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Accept Block Trade Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Accept-Block-Trade-Order">Accept
     *     Block Trade Order (TRADE) Documentation</a>
     */
    private okhttp3.Call acceptBlockTradeOrderCall(
            AcceptBlockTradeOrderRequest acceptBlockTradeOrderRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/block/order/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (acceptBlockTradeOrderRequest.getBlockOrderMatchingKey() != null) {
            localVarFormParams.put(
                    "blockOrderMatchingKey",
                    acceptBlockTradeOrderRequest.getBlockOrderMatchingKey());
        }

        if (acceptBlockTradeOrderRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", acceptBlockTradeOrderRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call acceptBlockTradeOrderValidateBeforeCall(
            AcceptBlockTradeOrderRequest acceptBlockTradeOrderRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {acceptBlockTradeOrderRequest};
            Method method =
                    this.getClass()
                            .getMethod("acceptBlockTradeOrder", AcceptBlockTradeOrderRequest.class);
            Set<ConstraintViolation<MarketMakerBlockTradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return acceptBlockTradeOrderCall(acceptBlockTradeOrderRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Accept Block Trade Order (TRADE) Accept a block trade order Weight: 5
     *
     * @param acceptBlockTradeOrderRequest (required)
     * @return ApiResponse&lt;AcceptBlockTradeOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Accept Block Trade Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Accept-Block-Trade-Order">Accept
     *     Block Trade Order (TRADE) Documentation</a>
     */
    public ApiResponse<AcceptBlockTradeOrderResponse> acceptBlockTradeOrder(
            @Valid @NotNull AcceptBlockTradeOrderRequest acceptBlockTradeOrderRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                acceptBlockTradeOrderValidateBeforeCall(acceptBlockTradeOrderRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AcceptBlockTradeOrderResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for accountBlockTradeList
     *
     * @param endTime End Time, e.g 1593512200000 (optional)
     * @param startTime Start Time, e.g 1593511200000 (optional)
     * @param underlying underlying, e.g BTCUSDT (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Account Block Trade List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Account-Block-Trade-List">Account
     *     Block Trade List (USER_DATA) Documentation</a>
     */
    private okhttp3.Call accountBlockTradeListCall(
            Long endTime, Long startTime, String underlying, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/block/user-trades";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (underlying != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("underlying", underlying));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountBlockTradeListValidateBeforeCall(
            Long endTime, Long startTime, String underlying, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {endTime, startTime, underlying, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "accountBlockTradeList",
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<MarketMakerBlockTradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return accountBlockTradeListCall(endTime, startTime, underlying, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Account Block Trade List (USER_DATA) Gets block trades for a specific account. Weight: 5
     *
     * @param endTime End Time, e.g 1593512200000 (optional)
     * @param startTime Start Time, e.g 1593511200000 (optional)
     * @param underlying underlying, e.g BTCUSDT (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;AccountBlockTradeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Account Block Trade List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Account-Block-Trade-List">Account
     *     Block Trade List (USER_DATA) Documentation</a>
     */
    public ApiResponse<AccountBlockTradeListResponse> accountBlockTradeList(
            Long endTime, Long startTime, String underlying, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                accountBlockTradeListValidateBeforeCall(endTime, startTime, underlying, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AccountBlockTradeListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for cancelBlockTradeOrder
     *
     * @param blockOrderMatchingKey (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Cancel-Block-Trade-Order">Cancel
     *     Block Trade Order (TRADE) Documentation</a>
     */
    private okhttp3.Call cancelBlockTradeOrderCall(String blockOrderMatchingKey, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/block/order/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockOrderMatchingKey != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "blockOrderMatchingKey", blockOrderMatchingKey));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelBlockTradeOrderValidateBeforeCall(
            String blockOrderMatchingKey, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {blockOrderMatchingKey, recvWindow};
            Method method =
                    this.getClass().getMethod("cancelBlockTradeOrder", String.class, Long.class);
            Set<ConstraintViolation<MarketMakerBlockTradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return cancelBlockTradeOrderCall(blockOrderMatchingKey, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Cancel Block Trade Order (TRADE) Cancel a block trade order. Weight: 5
     *
     * @param blockOrderMatchingKey (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Cancel-Block-Trade-Order">Cancel
     *     Block Trade Order (TRADE) Documentation</a>
     */
    public ApiResponse<Void> cancelBlockTradeOrder(
            @NotNull String blockOrderMatchingKey, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                cancelBlockTradeOrderValidateBeforeCall(blockOrderMatchingKey, recvWindow);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Build call for extendBlockTradeOrder
     *
     * @param extendBlockTradeOrderRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Extend Block Trade Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Extend-Block-Trade-Order">Extend
     *     Block Trade Order (TRADE) Documentation</a>
     */
    private okhttp3.Call extendBlockTradeOrderCall(
            ExtendBlockTradeOrderRequest extendBlockTradeOrderRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/block/order/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (extendBlockTradeOrderRequest.getBlockOrderMatchingKey() != null) {
            localVarFormParams.put(
                    "blockOrderMatchingKey",
                    extendBlockTradeOrderRequest.getBlockOrderMatchingKey());
        }

        if (extendBlockTradeOrderRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", extendBlockTradeOrderRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "PUT",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extendBlockTradeOrderValidateBeforeCall(
            ExtendBlockTradeOrderRequest extendBlockTradeOrderRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {extendBlockTradeOrderRequest};
            Method method =
                    this.getClass()
                            .getMethod("extendBlockTradeOrder", ExtendBlockTradeOrderRequest.class);
            Set<ConstraintViolation<MarketMakerBlockTradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return extendBlockTradeOrderCall(extendBlockTradeOrderRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Extend Block Trade Order (TRADE) Extends a block trade expire time by 30 mins from the
     * current time. Weight: 5
     *
     * @param extendBlockTradeOrderRequest (required)
     * @return ApiResponse&lt;ExtendBlockTradeOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Extend Block Trade Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Extend-Block-Trade-Order">Extend
     *     Block Trade Order (TRADE) Documentation</a>
     */
    public ApiResponse<ExtendBlockTradeOrderResponse> extendBlockTradeOrder(
            @Valid @NotNull ExtendBlockTradeOrderRequest extendBlockTradeOrderRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                extendBlockTradeOrderValidateBeforeCall(extendBlockTradeOrderRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<ExtendBlockTradeOrderResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for newBlockTradeOrder
     *
     * @param newBlockTradeOrderRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> New Block Trade Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/New-Block-Trade-Order">New
     *     Block Trade Order (TRADE) Documentation</a>
     */
    private okhttp3.Call newBlockTradeOrderCall(NewBlockTradeOrderRequest newBlockTradeOrderRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/block/order/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (newBlockTradeOrderRequest.getLiquidity() != null) {
            localVarFormParams.put("liquidity", newBlockTradeOrderRequest.getLiquidity());
        }

        if (newBlockTradeOrderRequest.getLegs() != null) {
            String json = JSON.getGson().toJson(newBlockTradeOrderRequest.getLegs());
            localVarFormParams.put("legs", json);
        }

        if (newBlockTradeOrderRequest.getSymbol() != null) {
            localVarFormParams.put("symbol", newBlockTradeOrderRequest.getSymbol());
        }

        if (newBlockTradeOrderRequest.getSide() != null) {
            localVarFormParams.put("side", newBlockTradeOrderRequest.getSide());
        }

        if (newBlockTradeOrderRequest.getPrice() != null) {
            localVarFormParams.put(
                    "price",
                    DecimalFormatter.getFormatter().format(newBlockTradeOrderRequest.getPrice()));
        }

        if (newBlockTradeOrderRequest.getQuantity() != null) {
            localVarFormParams.put(
                    "quantity",
                    DecimalFormatter.getFormatter()
                            .format(newBlockTradeOrderRequest.getQuantity()));
        }

        if (newBlockTradeOrderRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", newBlockTradeOrderRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call newBlockTradeOrderValidateBeforeCall(
            NewBlockTradeOrderRequest newBlockTradeOrderRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {newBlockTradeOrderRequest};
            Method method =
                    this.getClass()
                            .getMethod("newBlockTradeOrder", NewBlockTradeOrderRequest.class);
            Set<ConstraintViolation<MarketMakerBlockTradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return newBlockTradeOrderCall(newBlockTradeOrderRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * New Block Trade Order (TRADE) Send in a new block trade order. Weight: 5
     *
     * @param newBlockTradeOrderRequest (required)
     * @return ApiResponse&lt;NewBlockTradeOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> New Block Trade Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/New-Block-Trade-Order">New
     *     Block Trade Order (TRADE) Documentation</a>
     */
    public ApiResponse<NewBlockTradeOrderResponse> newBlockTradeOrder(
            @Valid @NotNull NewBlockTradeOrderRequest newBlockTradeOrderRequest)
            throws ApiException {
        okhttp3.Call localVarCall = newBlockTradeOrderValidateBeforeCall(newBlockTradeOrderRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<NewBlockTradeOrderResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryBlockTradeDetails
     *
     * @param blockOrderMatchingKey (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Block Trade Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Query-Block-Trade-Detail">Query
     *     Block Trade Details (USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryBlockTradeDetailsCall(String blockOrderMatchingKey, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/block/order/execute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockOrderMatchingKey != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "blockOrderMatchingKey", blockOrderMatchingKey));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryBlockTradeDetailsValidateBeforeCall(
            String blockOrderMatchingKey, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {blockOrderMatchingKey, recvWindow};
            Method method =
                    this.getClass().getMethod("queryBlockTradeDetails", String.class, Long.class);
            Set<ConstraintViolation<MarketMakerBlockTradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryBlockTradeDetailsCall(blockOrderMatchingKey, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Block Trade Details (USER_DATA) Query block trade details; returns block trade details
     * from counterparty&#39;s perspective. Weight: 5
     *
     * @param blockOrderMatchingKey (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryBlockTradeDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Block Trade Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Query-Block-Trade-Detail">Query
     *     Block Trade Details (USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryBlockTradeDetailsResponse> queryBlockTradeDetails(
            @NotNull String blockOrderMatchingKey, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                queryBlockTradeDetailsValidateBeforeCall(blockOrderMatchingKey, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryBlockTradeDetailsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryBlockTradeOrder
     *
     * @param blockOrderMatchingKey If specified, returns the specific block trade associated with
     *     the blockOrderMatchingKey (optional)
     * @param endTime End Time, e.g 1593512200000 (optional)
     * @param startTime Start Time, e.g 1593511200000 (optional)
     * @param underlying underlying, e.g BTCUSDT (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Block Trade Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Query-Block-Trade-Order">Query
     *     Block Trade Order (TRADE) Documentation</a>
     */
    private okhttp3.Call queryBlockTradeOrderCall(
            String blockOrderMatchingKey,
            Long endTime,
            Long startTime,
            String underlying,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/eapi/v1/block/order/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blockOrderMatchingKey != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "blockOrderMatchingKey", blockOrderMatchingKey));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (underlying != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("underlying", underlying));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryBlockTradeOrderValidateBeforeCall(
            String blockOrderMatchingKey,
            Long endTime,
            Long startTime,
            String underlying,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                blockOrderMatchingKey, endTime, startTime, underlying, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryBlockTradeOrder",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<MarketMakerBlockTradeApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryBlockTradeOrderCall(
                        blockOrderMatchingKey, endTime, startTime, underlying, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Block Trade Order (TRADE) Check block trade order status. Weight: 5
     *
     * @param blockOrderMatchingKey If specified, returns the specific block trade associated with
     *     the blockOrderMatchingKey (optional)
     * @param endTime End Time, e.g 1593512200000 (optional)
     * @param startTime Start Time, e.g 1593511200000 (optional)
     * @param underlying underlying, e.g BTCUSDT (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryBlockTradeOrderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Block Trade Order </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/derivatives/option/market-maker-block-trade/Query-Block-Trade-Order">Query
     *     Block Trade Order (TRADE) Documentation</a>
     */
    public ApiResponse<QueryBlockTradeOrderResponse> queryBlockTradeOrder(
            String blockOrderMatchingKey,
            Long endTime,
            Long startTime,
            String underlying,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                queryBlockTradeOrderValidateBeforeCall(
                        blockOrderMatchingKey, endTime, startTime, underlying, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryBlockTradeOrderResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
