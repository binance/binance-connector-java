/*
 * Binance Derivatives Trading Portfolio Margin Pro REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin Pro REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin_pro.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin_pro.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner {
    public static final String SERIALIZED_NAME_TIER_FLOOR = "tierFloor";

    @SerializedName(SERIALIZED_NAME_TIER_FLOOR)
    @jakarta.annotation.Nullable
    private String tierFloor;

    public static final String SERIALIZED_NAME_TIER_CAP = "tierCap";

    @SerializedName(SERIALIZED_NAME_TIER_CAP)
    @jakarta.annotation.Nullable
    private String tierCap;

    public static final String SERIALIZED_NAME_COLLATERAL_RATE = "collateralRate";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_RATE)
    @jakarta.annotation.Nullable
    private String collateralRate;

    public static final String SERIALIZED_NAME_CUM = "cum";

    @SerializedName(SERIALIZED_NAME_CUM)
    @jakarta.annotation.Nullable
    private String cum;

    public PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner() {}

    public PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner tierFloor(
            @jakarta.annotation.Nullable String tierFloor) {
        this.tierFloor = tierFloor;
        return this;
    }

    /**
     * Get tierFloor
     *
     * @return tierFloor
     */
    @jakarta.annotation.Nullable
    public String getTierFloor() {
        return tierFloor;
    }

    public void setTierFloor(@jakarta.annotation.Nullable String tierFloor) {
        this.tierFloor = tierFloor;
    }

    public PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner tierCap(
            @jakarta.annotation.Nullable String tierCap) {
        this.tierCap = tierCap;
        return this;
    }

    /**
     * Get tierCap
     *
     * @return tierCap
     */
    @jakarta.annotation.Nullable
    public String getTierCap() {
        return tierCap;
    }

    public void setTierCap(@jakarta.annotation.Nullable String tierCap) {
        this.tierCap = tierCap;
    }

    public PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner collateralRate(
            @jakarta.annotation.Nullable String collateralRate) {
        this.collateralRate = collateralRate;
        return this;
    }

    /**
     * Get collateralRate
     *
     * @return collateralRate
     */
    @jakarta.annotation.Nullable
    public String getCollateralRate() {
        return collateralRate;
    }

    public void setCollateralRate(@jakarta.annotation.Nullable String collateralRate) {
        this.collateralRate = collateralRate;
    }

    public PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner cum(
            @jakarta.annotation.Nullable String cum) {
        this.cum = cum;
        return this;
    }

    /**
     * Get cum
     *
     * @return cum
     */
    @jakarta.annotation.Nullable
    public String getCum() {
        return cum;
    }

    public void setCum(@jakarta.annotation.Nullable String cum) {
        this.cum = cum;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                portfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner =
                        (PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner) o;
        return Objects.equals(
                        this.tierFloor,
                        portfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                                .tierFloor)
                && Objects.equals(
                        this.tierCap,
                        portfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                                .tierCap)
                && Objects.equals(
                        this.collateralRate,
                        portfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                                .collateralRate)
                && Objects.equals(
                        this.cum,
                        portfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner.cum);
    }

    @Override
    public int hashCode() {
        return Objects.hash(tierFloor, tierCap, collateralRate, cum);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(
                "class PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner {\n");
        sb.append("		tierFloor: ").append(toIndentedString(tierFloor)).append("\n");
        sb.append("		tierCap: ").append(toIndentedString(tierCap)).append("\n");
        sb.append("		collateralRate: ").append(toIndentedString(collateralRate)).append("\n");
        sb.append("		cum: ").append(toIndentedString(cum)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object tierFloorValue = getTierFloor();
        String tierFloorValueAsString = "";
        tierFloorValueAsString = tierFloorValue.toString();
        sb.append("tierFloor=").append(urlEncode(tierFloorValueAsString)).append("");
        Object tierCapValue = getTierCap();
        String tierCapValueAsString = "";
        tierCapValueAsString = tierCapValue.toString();
        sb.append("tierCap=").append(urlEncode(tierCapValueAsString)).append("");
        Object collateralRateValue = getCollateralRate();
        String collateralRateValueAsString = "";
        collateralRateValueAsString = collateralRateValue.toString();
        sb.append("collateralRate=").append(urlEncode(collateralRateValueAsString)).append("");
        Object cumValue = getCum();
        String cumValueAsString = "";
        cumValueAsString = cumValue.toString();
        sb.append("cum=").append(urlEncode(cumValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("tierFloor");
        openapiFields.add("tierCap");
        openapiFields.add("collateralRate");
        openapiFields.add("cum");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner"
                                    + " is not found in the empty JSON string",
                                PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                    .openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("tierFloor") != null && !jsonObj.get("tierFloor").isJsonNull())
                && !jsonObj.get("tierFloor").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `tierFloor` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("tierFloor").toString()));
        }
        if ((jsonObj.get("tierCap") != null && !jsonObj.get("tierCap").isJsonNull())
                && !jsonObj.get("tierCap").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `tierCap` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("tierCap").toString()));
        }
        if ((jsonObj.get("collateralRate") != null && !jsonObj.get("collateralRate").isJsonNull())
                && !jsonObj.get("collateralRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collateralRate` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collateralRate").toString()));
        }
        if ((jsonObj.get("cum") != null && !jsonObj.get("cum").isJsonNull())
                && !jsonObj.get("cum").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cum` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("cum").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<
                            PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                                        value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public
                        PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
     * given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
     * @throws IOException if the JSON string is invalid with respect to
     *     PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
     */
    public static PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
                                .class);
    }

    /**
     * Convert an instance of PortfolioMarginProTieredCollateralRateResponseInnerCollateralInfoInner
     * to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
