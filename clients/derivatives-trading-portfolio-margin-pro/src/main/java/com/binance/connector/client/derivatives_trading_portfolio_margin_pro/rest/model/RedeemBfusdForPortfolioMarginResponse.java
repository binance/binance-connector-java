/*
 * Binance Derivatives Trading Portfolio Margin Pro REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin Pro REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin_pro.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin_pro.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** RedeemBfusdForPortfolioMarginResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class RedeemBfusdForPortfolioMarginResponse {
    public static final String SERIALIZED_NAME_FROM_ASSET = "fromAsset";

    @SerializedName(SERIALIZED_NAME_FROM_ASSET)
    @jakarta.annotation.Nullable
    private String fromAsset;

    public static final String SERIALIZED_NAME_TARGET_ASSET = "targetAsset";

    @SerializedName(SERIALIZED_NAME_TARGET_ASSET)
    @jakarta.annotation.Nullable
    private String targetAsset;

    public static final String SERIALIZED_NAME_FROM_ASSET_QTY = "fromAssetQty";

    @SerializedName(SERIALIZED_NAME_FROM_ASSET_QTY)
    @jakarta.annotation.Nullable
    private Double fromAssetQty;

    public static final String SERIALIZED_NAME_TARGET_ASSET_QTY = "targetAssetQty";

    @SerializedName(SERIALIZED_NAME_TARGET_ASSET_QTY)
    @jakarta.annotation.Nullable
    private Double targetAssetQty;

    public static final String SERIALIZED_NAME_RATE = "rate";

    @SerializedName(SERIALIZED_NAME_RATE)
    @jakarta.annotation.Nullable
    private Double rate;

    public RedeemBfusdForPortfolioMarginResponse() {}

    public RedeemBfusdForPortfolioMarginResponse fromAsset(
            @jakarta.annotation.Nullable String fromAsset) {
        this.fromAsset = fromAsset;
        return this;
    }

    /**
     * Get fromAsset
     *
     * @return fromAsset
     */
    @jakarta.annotation.Nullable
    public String getFromAsset() {
        return fromAsset;
    }

    public void setFromAsset(@jakarta.annotation.Nullable String fromAsset) {
        this.fromAsset = fromAsset;
    }

    public RedeemBfusdForPortfolioMarginResponse targetAsset(
            @jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
        return this;
    }

    /**
     * Get targetAsset
     *
     * @return targetAsset
     */
    @jakarta.annotation.Nullable
    public String getTargetAsset() {
        return targetAsset;
    }

    public void setTargetAsset(@jakarta.annotation.Nullable String targetAsset) {
        this.targetAsset = targetAsset;
    }

    public RedeemBfusdForPortfolioMarginResponse fromAssetQty(
            @jakarta.annotation.Nullable Double fromAssetQty) {
        this.fromAssetQty = fromAssetQty;
        return this;
    }

    /**
     * Get fromAssetQty
     *
     * @return fromAssetQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getFromAssetQty() {
        return fromAssetQty;
    }

    public void setFromAssetQty(@jakarta.annotation.Nullable Double fromAssetQty) {
        this.fromAssetQty = fromAssetQty;
    }

    public RedeemBfusdForPortfolioMarginResponse targetAssetQty(
            @jakarta.annotation.Nullable Double targetAssetQty) {
        this.targetAssetQty = targetAssetQty;
        return this;
    }

    /**
     * Get targetAssetQty
     *
     * @return targetAssetQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getTargetAssetQty() {
        return targetAssetQty;
    }

    public void setTargetAssetQty(@jakarta.annotation.Nullable Double targetAssetQty) {
        this.targetAssetQty = targetAssetQty;
    }

    public RedeemBfusdForPortfolioMarginResponse rate(@jakarta.annotation.Nullable Double rate) {
        this.rate = rate;
        return this;
    }

    /**
     * Get rate
     *
     * @return rate
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getRate() {
        return rate;
    }

    public void setRate(@jakarta.annotation.Nullable Double rate) {
        this.rate = rate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RedeemBfusdForPortfolioMarginResponse redeemBfusdForPortfolioMarginResponse =
                (RedeemBfusdForPortfolioMarginResponse) o;
        return Objects.equals(this.fromAsset, redeemBfusdForPortfolioMarginResponse.fromAsset)
                && Objects.equals(
                        this.targetAsset, redeemBfusdForPortfolioMarginResponse.targetAsset)
                && Objects.equals(
                        this.fromAssetQty, redeemBfusdForPortfolioMarginResponse.fromAssetQty)
                && Objects.equals(
                        this.targetAssetQty, redeemBfusdForPortfolioMarginResponse.targetAssetQty)
                && Objects.equals(this.rate, redeemBfusdForPortfolioMarginResponse.rate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fromAsset, targetAsset, fromAssetQty, targetAssetQty, rate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RedeemBfusdForPortfolioMarginResponse {\n");
        sb.append("		fromAsset: ").append(toIndentedString(fromAsset)).append("\n");
        sb.append("		targetAsset: ").append(toIndentedString(targetAsset)).append("\n");
        sb.append("		fromAssetQty: ").append(toIndentedString(fromAssetQty)).append("\n");
        sb.append("		targetAssetQty: ").append(toIndentedString(targetAssetQty)).append("\n");
        sb.append("		rate: ").append(toIndentedString(rate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object fromAssetValue = getFromAsset();
        String fromAssetValueAsString = "";
        fromAssetValueAsString = fromAssetValue.toString();
        sb.append("fromAsset=").append(urlEncode(fromAssetValueAsString)).append("");
        Object targetAssetValue = getTargetAsset();
        String targetAssetValueAsString = "";
        targetAssetValueAsString = targetAssetValue.toString();
        sb.append("targetAsset=").append(urlEncode(targetAssetValueAsString)).append("");
        Object fromAssetQtyValue = getFromAssetQty();
        String fromAssetQtyValueAsString = "";
        fromAssetQtyValueAsString = fromAssetQtyValue.toString();
        sb.append("fromAssetQty=").append(urlEncode(fromAssetQtyValueAsString)).append("");
        Object targetAssetQtyValue = getTargetAssetQty();
        String targetAssetQtyValueAsString = "";
        targetAssetQtyValueAsString = targetAssetQtyValue.toString();
        sb.append("targetAssetQty=").append(urlEncode(targetAssetQtyValueAsString)).append("");
        Object rateValue = getRate();
        String rateValueAsString = "";
        rateValueAsString = rateValue.toString();
        sb.append("rate=").append(urlEncode(rateValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("fromAsset");
        openapiFields.add("targetAsset");
        openapiFields.add("fromAssetQty");
        openapiFields.add("targetAssetQty");
        openapiFields.add("rate");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     RedeemBfusdForPortfolioMarginResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!RedeemBfusdForPortfolioMarginResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in RedeemBfusdForPortfolioMarginResponse"
                                        + " is not found in the empty JSON string",
                                RedeemBfusdForPortfolioMarginResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!RedeemBfusdForPortfolioMarginResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `RedeemBfusdForPortfolioMarginResponse` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("fromAsset") != null && !jsonObj.get("fromAsset").isJsonNull())
                && !jsonObj.get("fromAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fromAsset").toString()));
        }
        if ((jsonObj.get("targetAsset") != null && !jsonObj.get("targetAsset").isJsonNull())
                && !jsonObj.get("targetAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `targetAsset` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("targetAsset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RedeemBfusdForPortfolioMarginResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RedeemBfusdForPortfolioMarginResponse'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<RedeemBfusdForPortfolioMarginResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(RedeemBfusdForPortfolioMarginResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<RedeemBfusdForPortfolioMarginResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, RedeemBfusdForPortfolioMarginResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public RedeemBfusdForPortfolioMarginResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of RedeemBfusdForPortfolioMarginResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RedeemBfusdForPortfolioMarginResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     RedeemBfusdForPortfolioMarginResponse
     */
    public static RedeemBfusdForPortfolioMarginResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, RedeemBfusdForPortfolioMarginResponse.class);
    }

    /**
     * Convert an instance of RedeemBfusdForPortfolioMarginResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
