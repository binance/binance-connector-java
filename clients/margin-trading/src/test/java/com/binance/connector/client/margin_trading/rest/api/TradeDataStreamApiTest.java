/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.margin_trading.rest.model.KeepaliveIsolatedMarginUserDataStreamRequest;
import com.binance.connector.client.margin_trading.rest.model.KeepaliveMarginUserDataStreamRequest;
import com.binance.connector.client.margin_trading.rest.model.StartIsolatedMarginUserDataStreamRequest;
import com.binance.connector.client.margin_trading.rest.model.StartIsolatedMarginUserDataStreamResponse;
import com.binance.connector.client.margin_trading.rest.model.StartMarginUserDataStreamResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for TradeDataStreamApi */
public class TradeDataStreamApiTest {

    private TradeDataStreamApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new TradeDataStreamApi(apiClientSpy);
    }

    /**
     * Close Isolated Margin User Data Stream (USER_STREAM)
     *
     * <p>Close out a isolated margin user data stream. Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeIsolatedMarginUserDataStreamTest() throws ApiException, CryptoException {
        String symbol = "";
        String listenkey = "";
        api.closeIsolatedMarginUserDataStream(symbol, listenkey);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy).execute(callArgumentCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/userDataStream/isolated", actualRequest.url().encodedPath());
    }

    /**
     * Close Margin User Data Stream (USER_STREAM)
     *
     * <p>Close out a Margin user data stream. Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeMarginUserDataStreamTest() throws ApiException, CryptoException {
        String listenkey = "";
        api.closeMarginUserDataStream(listenkey);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy).execute(callArgumentCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/userDataStream", actualRequest.url().encodedPath());
    }

    /**
     * Keepalive Isolated Margin User Data Stream (USER_STREAM)
     *
     * <p>Keepalive an isolated margin user data stream to prevent a time out. Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keepaliveIsolatedMarginUserDataStreamTest() throws ApiException, CryptoException {
        KeepaliveIsolatedMarginUserDataStreamRequest keepaliveIsolatedMarginUserDataStreamRequest =
                new KeepaliveIsolatedMarginUserDataStreamRequest();

        keepaliveIsolatedMarginUserDataStreamRequest.symbol("");
        keepaliveIsolatedMarginUserDataStreamRequest.listenKey("");

        api.keepaliveIsolatedMarginUserDataStream(keepaliveIsolatedMarginUserDataStreamRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy).execute(callArgumentCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/userDataStream/isolated", actualRequest.url().encodedPath());
    }

    /**
     * Keepalive Margin User Data Stream (USER_STREAM)
     *
     * <p>Keepalive a margin user data stream to prevent a time out. Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void keepaliveMarginUserDataStreamTest() throws ApiException, CryptoException {
        KeepaliveMarginUserDataStreamRequest keepaliveMarginUserDataStreamRequest =
                new KeepaliveMarginUserDataStreamRequest();

        keepaliveMarginUserDataStreamRequest.listenKey("");

        api.keepaliveMarginUserDataStream(keepaliveMarginUserDataStreamRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy).execute(callArgumentCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/userDataStream", actualRequest.url().encodedPath());
    }

    /**
     * Start Isolated Margin User Data Stream (USER_STREAM)
     *
     * <p>Start a new isolated margin user data stream. The stream will close after 60 minutes
     * unless a keepalive is sent. If the account has an active listenKey, that listenKey will be
     * returned and its validity will be extended for 60 minutes. Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startIsolatedMarginUserDataStreamTest() throws ApiException, CryptoException {
        StartIsolatedMarginUserDataStreamRequest startIsolatedMarginUserDataStreamRequest =
                new StartIsolatedMarginUserDataStreamRequest();

        startIsolatedMarginUserDataStreamRequest.symbol("");

        ApiResponse<StartIsolatedMarginUserDataStreamResponse> response =
                api.startIsolatedMarginUserDataStream(startIsolatedMarginUserDataStreamRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/userDataStream/isolated", actualRequest.url().encodedPath());
    }

    /**
     * Start Margin User Data Stream (USER_STREAM)
     *
     * <p>Start a new margin user data stream. The stream will close after 60 minutes unless a
     * keepalive is sent. If the account has an active listenKey, that listenKey will be returned
     * and its validity will be extended for 60 minutes. Weight: 1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startMarginUserDataStreamTest() throws ApiException, CryptoException {
        ApiResponse<StartMarginUserDataStreamResponse> response = api.startMarginUserDataStream();

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(null, actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/userDataStream", actualRequest.url().encodedPath());
    }
}
