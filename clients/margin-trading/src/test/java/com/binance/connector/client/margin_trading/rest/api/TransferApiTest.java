/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.margin_trading.rest.model.GetCrossMarginTransferHistoryResponse;
import com.binance.connector.client.margin_trading.rest.model.QueryMaxTransferOutAmountResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for TransferApi */
public class TransferApiTest {

    private TransferApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new TransferApi(apiClientSpy);
    }

    /**
     * Get Cross Margin Transfer History (USER_DATA)
     *
     * <p>Get Cross Margin Transfer History * Response in descending order * The max interval
     * between &#x60;startTime&#x60; and &#x60;endTime&#x60; is 30 days. * Returns data for last 7
     * days by default Weight: 1(IP)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCrossMarginTransferHistoryTest() throws ApiException, CryptoException {
        String asset = "";
        String type = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long size = 10L;
        String isolatedSymbol = "";
        Long recvWindow = 5000L;
        ApiResponse<GetCrossMarginTransferHistoryResponse> response =
                api.getCrossMarginTransferHistory(
                        asset, type, startTime, endTime, current, size, isolatedSymbol, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "asset=&type=&startTime=1623319461670&endTime=1641782889000&current=1&size=10&isolatedSymbol=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "55cbed364121f637934cbda6a1bed334c2b241707d51d426b5b67f890b978a77",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/margin/transfer", actualRequest.url().encodedPath());
    }

    /**
     * Query Max Transfer-Out Amount (USER_DATA)
     *
     * <p>Query Max Transfer-Out Amount * If isolatedSymbol is not sent, crossed margin data will be
     * sent. Weight: 50(IP)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void queryMaxTransferOutAmountTest() throws ApiException, CryptoException {
        String asset = "";
        String isolatedSymbol = "";
        Long recvWindow = 5000L;
        ApiResponse<QueryMaxTransferOutAmountResponse> response =
                api.queryMaxTransferOutAmount(asset, isolatedSymbol, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "asset=&isolatedSymbol=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "90c4a3668764b733f6c643c57f90568be4756aa70d3d7923c44995f762b25e21",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v1/margin/maxTransferable", actualRequest.url().encodedPath());
    }
}
