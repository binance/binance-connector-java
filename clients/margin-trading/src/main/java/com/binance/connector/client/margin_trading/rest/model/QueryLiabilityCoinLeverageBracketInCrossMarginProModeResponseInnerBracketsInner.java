/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner {
    public static final String SERIALIZED_NAME_LEVERAGE = "leverage";

    @SerializedName(SERIALIZED_NAME_LEVERAGE)
    @jakarta.annotation.Nullable
    private Long leverage;

    public static final String SERIALIZED_NAME_MAX_DEBT = "maxDebt";

    @SerializedName(SERIALIZED_NAME_MAX_DEBT)
    @jakarta.annotation.Nullable
    private Double maxDebt;

    public static final String SERIALIZED_NAME_MAINTENANCE_MARGIN_RATE = "maintenanceMarginRate";

    @SerializedName(SERIALIZED_NAME_MAINTENANCE_MARGIN_RATE)
    @jakarta.annotation.Nullable
    private Double maintenanceMarginRate;

    public static final String SERIALIZED_NAME_INITIAL_MARGIN_RATE = "initialMarginRate";

    @SerializedName(SERIALIZED_NAME_INITIAL_MARGIN_RATE)
    @jakarta.annotation.Nullable
    private Double initialMarginRate;

    public static final String SERIALIZED_NAME_FAST_NUM = "fastNum";

    @SerializedName(SERIALIZED_NAME_FAST_NUM)
    @jakarta.annotation.Nullable
    private Double fastNum;

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner() {}

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner leverage(
            @jakarta.annotation.Nullable Long leverage) {
        this.leverage = leverage;
        return this;
    }

    /**
     * Get leverage
     *
     * @return leverage
     */
    @jakarta.annotation.Nullable
    public Long getLeverage() {
        return leverage;
    }

    public void setLeverage(@jakarta.annotation.Nullable Long leverage) {
        this.leverage = leverage;
    }

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner maxDebt(
            @jakarta.annotation.Nullable Double maxDebt) {
        this.maxDebt = maxDebt;
        return this;
    }

    /**
     * Get maxDebt
     *
     * @return maxDebt
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getMaxDebt() {
        return maxDebt;
    }

    public void setMaxDebt(@jakarta.annotation.Nullable Double maxDebt) {
        this.maxDebt = maxDebt;
    }

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
            maintenanceMarginRate(@jakarta.annotation.Nullable Double maintenanceMarginRate) {
        this.maintenanceMarginRate = maintenanceMarginRate;
        return this;
    }

    /**
     * Get maintenanceMarginRate
     *
     * @return maintenanceMarginRate
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getMaintenanceMarginRate() {
        return maintenanceMarginRate;
    }

    public void setMaintenanceMarginRate(
            @jakarta.annotation.Nullable Double maintenanceMarginRate) {
        this.maintenanceMarginRate = maintenanceMarginRate;
    }

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
            initialMarginRate(@jakarta.annotation.Nullable Double initialMarginRate) {
        this.initialMarginRate = initialMarginRate;
        return this;
    }

    /**
     * Get initialMarginRate
     *
     * @return initialMarginRate
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getInitialMarginRate() {
        return initialMarginRate;
    }

    public void setInitialMarginRate(@jakarta.annotation.Nullable Double initialMarginRate) {
        this.initialMarginRate = initialMarginRate;
    }

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner fastNum(
            @jakarta.annotation.Nullable Double fastNum) {
        this.fastNum = fastNum;
        return this;
    }

    /**
     * Get fastNum
     *
     * @return fastNum
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getFastNum() {
        return fastNum;
    }

    public void setFastNum(@jakarta.annotation.Nullable Double fastNum) {
        this.fastNum = fastNum;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner =
                        (QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner)
                                o;
        return Objects.equals(
                        this.leverage,
                        queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                .leverage)
                && Objects.equals(
                        this.maxDebt,
                        queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                .maxDebt)
                && Objects.equals(
                        this.maintenanceMarginRate,
                        queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                .maintenanceMarginRate)
                && Objects.equals(
                        this.initialMarginRate,
                        queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                .initialMarginRate)
                && Objects.equals(
                        this.fastNum,
                        queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                .fastNum);
    }

    @Override
    public int hashCode() {
        return Objects.hash(leverage, maxDebt, maintenanceMarginRate, initialMarginRate, fastNum);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(
                "class"
                    + " QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner"
                    + " {\n");
        sb.append("		leverage: ").append(toIndentedString(leverage)).append("\n");
        sb.append("		maxDebt: ").append(toIndentedString(maxDebt)).append("\n");
        sb.append("		maintenanceMarginRate: ")
                .append(toIndentedString(maintenanceMarginRate))
                .append("\n");
        sb.append("		initialMarginRate: ").append(toIndentedString(initialMarginRate)).append("\n");
        sb.append("		fastNum: ").append(toIndentedString(fastNum)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object leverageValue = getLeverage();
        String leverageValueAsString = "";
        leverageValueAsString = leverageValue.toString();
        sb.append("leverage=").append(urlEncode(leverageValueAsString)).append("");
        Object maxDebtValue = getMaxDebt();
        String maxDebtValueAsString = "";
        maxDebtValueAsString = maxDebtValue.toString();
        sb.append("maxDebt=").append(urlEncode(maxDebtValueAsString)).append("");
        Object maintenanceMarginRateValue = getMaintenanceMarginRate();
        String maintenanceMarginRateValueAsString = "";
        maintenanceMarginRateValueAsString = maintenanceMarginRateValue.toString();
        sb.append("maintenanceMarginRate=")
                .append(urlEncode(maintenanceMarginRateValueAsString))
                .append("");
        Object initialMarginRateValue = getInitialMarginRate();
        String initialMarginRateValueAsString = "";
        initialMarginRateValueAsString = initialMarginRateValue.toString();
        sb.append("initialMarginRate=")
                .append(urlEncode(initialMarginRateValueAsString))
                .append("");
        Object fastNumValue = getFastNum();
        String fastNumValueAsString = "";
        fastNumValueAsString = fastNumValue.toString();
        sb.append("fastNum=").append(urlEncode(fastNumValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("leverage");
        openapiFields.add("maxDebt");
        openapiFields.add("maintenanceMarginRate");
        openapiFields.add("initialMarginRate");
        openapiFields.add("fastNum");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner"
                                    + " is not found in the empty JSON string",
                                QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                    .openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                    .class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<
                            QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                        value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public
                        QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of
     * QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of
     *     QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
     */
    public static QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
            fromJson(String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                                .class);
    }

    /**
     * Convert an instance of
     * QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
