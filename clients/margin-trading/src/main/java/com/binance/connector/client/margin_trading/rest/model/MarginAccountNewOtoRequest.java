/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** MarginAccountNewOtoRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MarginAccountNewOtoRequest {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_IS_ISOLATED = "isIsolated";

    @SerializedName(SERIALIZED_NAME_IS_ISOLATED)
    @jakarta.annotation.Nullable
    private String isIsolated;

    public static final String SERIALIZED_NAME_LIST_CLIENT_ORDER_ID = "listClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIST_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String listClientOrderId;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespType newOrderRespType;

    public static final String SERIALIZED_NAME_SIDE_EFFECT_TYPE = "sideEffectType";

    @SerializedName(SERIALIZED_NAME_SIDE_EFFECT_TYPE)
    @jakarta.annotation.Nullable
    private String sideEffectType;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private String selfTradePreventionMode;

    public static final String SERIALIZED_NAME_AUTO_REPAY_AT_CANCEL = "autoRepayAtCancel";

    @SerializedName(SERIALIZED_NAME_AUTO_REPAY_AT_CANCEL)
    @jakarta.annotation.Nullable
    private Boolean autoRepayAtCancel;

    public static final String SERIALIZED_NAME_WORKING_TYPE = "workingType";

    @SerializedName(SERIALIZED_NAME_WORKING_TYPE)
    @jakarta.annotation.Nonnull
    private String workingType;

    public static final String SERIALIZED_NAME_WORKING_SIDE = "workingSide";

    @SerializedName(SERIALIZED_NAME_WORKING_SIDE)
    @jakarta.annotation.Nonnull
    private String workingSide;

    public static final String SERIALIZED_NAME_WORKING_CLIENT_ORDER_ID = "workingClientOrderId";

    @SerializedName(SERIALIZED_NAME_WORKING_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String workingClientOrderId;

    public static final String SERIALIZED_NAME_WORKING_PRICE = "workingPrice";

    @SerializedName(SERIALIZED_NAME_WORKING_PRICE)
    @jakarta.annotation.Nonnull
    private Double workingPrice;

    public static final String SERIALIZED_NAME_WORKING_QUANTITY = "workingQuantity";

    @SerializedName(SERIALIZED_NAME_WORKING_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double workingQuantity;

    public static final String SERIALIZED_NAME_WORKING_ICEBERG_QTY = "workingIcebergQty";

    @SerializedName(SERIALIZED_NAME_WORKING_ICEBERG_QTY)
    @jakarta.annotation.Nonnull
    private Double workingIcebergQty;

    public static final String SERIALIZED_NAME_WORKING_TIME_IN_FORCE = "workingTimeInForce";

    @SerializedName(SERIALIZED_NAME_WORKING_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String workingTimeInForce;

    public static final String SERIALIZED_NAME_PENDING_TYPE = "pendingType";

    @SerializedName(SERIALIZED_NAME_PENDING_TYPE)
    @jakarta.annotation.Nonnull
    private String pendingType;

    public static final String SERIALIZED_NAME_PENDING_SIDE = "pendingSide";

    @SerializedName(SERIALIZED_NAME_PENDING_SIDE)
    @jakarta.annotation.Nonnull
    private String pendingSide;

    public static final String SERIALIZED_NAME_PENDING_CLIENT_ORDER_ID = "pendingClientOrderId";

    @SerializedName(SERIALIZED_NAME_PENDING_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String pendingClientOrderId;

    public static final String SERIALIZED_NAME_PENDING_PRICE = "pendingPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingPrice;

    public static final String SERIALIZED_NAME_PENDING_STOP_PRICE = "pendingStopPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingStopPrice;

    public static final String SERIALIZED_NAME_PENDING_TRAILING_DELTA = "pendingTrailingDelta";

    @SerializedName(SERIALIZED_NAME_PENDING_TRAILING_DELTA)
    @jakarta.annotation.Nullable
    private Double pendingTrailingDelta;

    public static final String SERIALIZED_NAME_PENDING_QUANTITY = "pendingQuantity";

    @SerializedName(SERIALIZED_NAME_PENDING_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double pendingQuantity;

    public static final String SERIALIZED_NAME_PENDING_ICEBERG_QTY = "pendingIcebergQty";

    @SerializedName(SERIALIZED_NAME_PENDING_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double pendingIcebergQty;

    public static final String SERIALIZED_NAME_PENDING_TIME_IN_FORCE = "pendingTimeInForce";

    @SerializedName(SERIALIZED_NAME_PENDING_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String pendingTimeInForce;

    public MarginAccountNewOtoRequest() {}

    public MarginAccountNewOtoRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public MarginAccountNewOtoRequest isIsolated(@jakarta.annotation.Nullable String isIsolated) {
        this.isIsolated = isIsolated;
        return this;
    }

    /**
     * Get isIsolated
     *
     * @return isIsolated
     */
    @jakarta.annotation.Nullable
    public String getIsIsolated() {
        return isIsolated;
    }

    public void setIsIsolated(@jakarta.annotation.Nullable String isIsolated) {
        this.isIsolated = isIsolated;
    }

    public MarginAccountNewOtoRequest listClientOrderId(
            @jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
        return this;
    }

    /**
     * Get listClientOrderId
     *
     * @return listClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getListClientOrderId() {
        return listClientOrderId;
    }

    public void setListClientOrderId(@jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
    }

    public MarginAccountNewOtoRequest newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    @Valid
    public NewOrderRespType getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public MarginAccountNewOtoRequest sideEffectType(
            @jakarta.annotation.Nullable String sideEffectType) {
        this.sideEffectType = sideEffectType;
        return this;
    }

    /**
     * Get sideEffectType
     *
     * @return sideEffectType
     */
    @jakarta.annotation.Nullable
    public String getSideEffectType() {
        return sideEffectType;
    }

    public void setSideEffectType(@jakarta.annotation.Nullable String sideEffectType) {
        this.sideEffectType = sideEffectType;
    }

    public MarginAccountNewOtoRequest selfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    public String getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public MarginAccountNewOtoRequest autoRepayAtCancel(
            @jakarta.annotation.Nullable Boolean autoRepayAtCancel) {
        this.autoRepayAtCancel = autoRepayAtCancel;
        return this;
    }

    /**
     * Get autoRepayAtCancel
     *
     * @return autoRepayAtCancel
     */
    @jakarta.annotation.Nullable
    public Boolean getAutoRepayAtCancel() {
        return autoRepayAtCancel;
    }

    public void setAutoRepayAtCancel(@jakarta.annotation.Nullable Boolean autoRepayAtCancel) {
        this.autoRepayAtCancel = autoRepayAtCancel;
    }

    public MarginAccountNewOtoRequest workingType(@jakarta.annotation.Nonnull String workingType) {
        this.workingType = workingType;
        return this;
    }

    /**
     * Get workingType
     *
     * @return workingType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getWorkingType() {
        return workingType;
    }

    public void setWorkingType(@jakarta.annotation.Nonnull String workingType) {
        this.workingType = workingType;
    }

    public MarginAccountNewOtoRequest workingSide(@jakarta.annotation.Nonnull String workingSide) {
        this.workingSide = workingSide;
        return this;
    }

    /**
     * Get workingSide
     *
     * @return workingSide
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getWorkingSide() {
        return workingSide;
    }

    public void setWorkingSide(@jakarta.annotation.Nonnull String workingSide) {
        this.workingSide = workingSide;
    }

    public MarginAccountNewOtoRequest workingClientOrderId(
            @jakarta.annotation.Nullable String workingClientOrderId) {
        this.workingClientOrderId = workingClientOrderId;
        return this;
    }

    /**
     * Get workingClientOrderId
     *
     * @return workingClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getWorkingClientOrderId() {
        return workingClientOrderId;
    }

    public void setWorkingClientOrderId(@jakarta.annotation.Nullable String workingClientOrderId) {
        this.workingClientOrderId = workingClientOrderId;
    }

    public MarginAccountNewOtoRequest workingPrice(
            @jakarta.annotation.Nonnull Double workingPrice) {
        this.workingPrice = workingPrice;
        return this;
    }

    /**
     * Get workingPrice
     *
     * @return workingPrice
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getWorkingPrice() {
        return workingPrice;
    }

    public void setWorkingPrice(@jakarta.annotation.Nonnull Double workingPrice) {
        this.workingPrice = workingPrice;
    }

    public MarginAccountNewOtoRequest workingQuantity(
            @jakarta.annotation.Nonnull Double workingQuantity) {
        this.workingQuantity = workingQuantity;
        return this;
    }

    /**
     * Get workingQuantity
     *
     * @return workingQuantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getWorkingQuantity() {
        return workingQuantity;
    }

    public void setWorkingQuantity(@jakarta.annotation.Nonnull Double workingQuantity) {
        this.workingQuantity = workingQuantity;
    }

    public MarginAccountNewOtoRequest workingIcebergQty(
            @jakarta.annotation.Nonnull Double workingIcebergQty) {
        this.workingIcebergQty = workingIcebergQty;
        return this;
    }

    /**
     * Get workingIcebergQty
     *
     * @return workingIcebergQty
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getWorkingIcebergQty() {
        return workingIcebergQty;
    }

    public void setWorkingIcebergQty(@jakarta.annotation.Nonnull Double workingIcebergQty) {
        this.workingIcebergQty = workingIcebergQty;
    }

    public MarginAccountNewOtoRequest workingTimeInForce(
            @jakarta.annotation.Nullable String workingTimeInForce) {
        this.workingTimeInForce = workingTimeInForce;
        return this;
    }

    /**
     * Get workingTimeInForce
     *
     * @return workingTimeInForce
     */
    @jakarta.annotation.Nullable
    public String getWorkingTimeInForce() {
        return workingTimeInForce;
    }

    public void setWorkingTimeInForce(@jakarta.annotation.Nullable String workingTimeInForce) {
        this.workingTimeInForce = workingTimeInForce;
    }

    public MarginAccountNewOtoRequest pendingType(@jakarta.annotation.Nonnull String pendingType) {
        this.pendingType = pendingType;
        return this;
    }

    /**
     * Get pendingType
     *
     * @return pendingType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getPendingType() {
        return pendingType;
    }

    public void setPendingType(@jakarta.annotation.Nonnull String pendingType) {
        this.pendingType = pendingType;
    }

    public MarginAccountNewOtoRequest pendingSide(@jakarta.annotation.Nonnull String pendingSide) {
        this.pendingSide = pendingSide;
        return this;
    }

    /**
     * Get pendingSide
     *
     * @return pendingSide
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getPendingSide() {
        return pendingSide;
    }

    public void setPendingSide(@jakarta.annotation.Nonnull String pendingSide) {
        this.pendingSide = pendingSide;
    }

    public MarginAccountNewOtoRequest pendingClientOrderId(
            @jakarta.annotation.Nullable String pendingClientOrderId) {
        this.pendingClientOrderId = pendingClientOrderId;
        return this;
    }

    /**
     * Get pendingClientOrderId
     *
     * @return pendingClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getPendingClientOrderId() {
        return pendingClientOrderId;
    }

    public void setPendingClientOrderId(@jakarta.annotation.Nullable String pendingClientOrderId) {
        this.pendingClientOrderId = pendingClientOrderId;
    }

    public MarginAccountNewOtoRequest pendingPrice(
            @jakarta.annotation.Nullable Double pendingPrice) {
        this.pendingPrice = pendingPrice;
        return this;
    }

    /**
     * Get pendingPrice
     *
     * @return pendingPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingPrice() {
        return pendingPrice;
    }

    public void setPendingPrice(@jakarta.annotation.Nullable Double pendingPrice) {
        this.pendingPrice = pendingPrice;
    }

    public MarginAccountNewOtoRequest pendingStopPrice(
            @jakarta.annotation.Nullable Double pendingStopPrice) {
        this.pendingStopPrice = pendingStopPrice;
        return this;
    }

    /**
     * Get pendingStopPrice
     *
     * @return pendingStopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingStopPrice() {
        return pendingStopPrice;
    }

    public void setPendingStopPrice(@jakarta.annotation.Nullable Double pendingStopPrice) {
        this.pendingStopPrice = pendingStopPrice;
    }

    public MarginAccountNewOtoRequest pendingTrailingDelta(
            @jakarta.annotation.Nullable Double pendingTrailingDelta) {
        this.pendingTrailingDelta = pendingTrailingDelta;
        return this;
    }

    /**
     * Get pendingTrailingDelta
     *
     * @return pendingTrailingDelta
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingTrailingDelta() {
        return pendingTrailingDelta;
    }

    public void setPendingTrailingDelta(@jakarta.annotation.Nullable Double pendingTrailingDelta) {
        this.pendingTrailingDelta = pendingTrailingDelta;
    }

    public MarginAccountNewOtoRequest pendingQuantity(
            @jakarta.annotation.Nonnull Double pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
        return this;
    }

    /**
     * Get pendingQuantity
     *
     * @return pendingQuantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getPendingQuantity() {
        return pendingQuantity;
    }

    public void setPendingQuantity(@jakarta.annotation.Nonnull Double pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
    }

    public MarginAccountNewOtoRequest pendingIcebergQty(
            @jakarta.annotation.Nullable Double pendingIcebergQty) {
        this.pendingIcebergQty = pendingIcebergQty;
        return this;
    }

    /**
     * Get pendingIcebergQty
     *
     * @return pendingIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingIcebergQty() {
        return pendingIcebergQty;
    }

    public void setPendingIcebergQty(@jakarta.annotation.Nullable Double pendingIcebergQty) {
        this.pendingIcebergQty = pendingIcebergQty;
    }

    public MarginAccountNewOtoRequest pendingTimeInForce(
            @jakarta.annotation.Nullable String pendingTimeInForce) {
        this.pendingTimeInForce = pendingTimeInForce;
        return this;
    }

    /**
     * Get pendingTimeInForce
     *
     * @return pendingTimeInForce
     */
    @jakarta.annotation.Nullable
    public String getPendingTimeInForce() {
        return pendingTimeInForce;
    }

    public void setPendingTimeInForce(@jakarta.annotation.Nullable String pendingTimeInForce) {
        this.pendingTimeInForce = pendingTimeInForce;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MarginAccountNewOtoRequest marginAccountNewOtoRequest = (MarginAccountNewOtoRequest) o;
        return Objects.equals(this.symbol, marginAccountNewOtoRequest.symbol)
                && Objects.equals(this.isIsolated, marginAccountNewOtoRequest.isIsolated)
                && Objects.equals(
                        this.listClientOrderId, marginAccountNewOtoRequest.listClientOrderId)
                && Objects.equals(
                        this.newOrderRespType, marginAccountNewOtoRequest.newOrderRespType)
                && Objects.equals(this.sideEffectType, marginAccountNewOtoRequest.sideEffectType)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        marginAccountNewOtoRequest.selfTradePreventionMode)
                && Objects.equals(
                        this.autoRepayAtCancel, marginAccountNewOtoRequest.autoRepayAtCancel)
                && Objects.equals(this.workingType, marginAccountNewOtoRequest.workingType)
                && Objects.equals(this.workingSide, marginAccountNewOtoRequest.workingSide)
                && Objects.equals(
                        this.workingClientOrderId, marginAccountNewOtoRequest.workingClientOrderId)
                && Objects.equals(this.workingPrice, marginAccountNewOtoRequest.workingPrice)
                && Objects.equals(this.workingQuantity, marginAccountNewOtoRequest.workingQuantity)
                && Objects.equals(
                        this.workingIcebergQty, marginAccountNewOtoRequest.workingIcebergQty)
                && Objects.equals(
                        this.workingTimeInForce, marginAccountNewOtoRequest.workingTimeInForce)
                && Objects.equals(this.pendingType, marginAccountNewOtoRequest.pendingType)
                && Objects.equals(this.pendingSide, marginAccountNewOtoRequest.pendingSide)
                && Objects.equals(
                        this.pendingClientOrderId, marginAccountNewOtoRequest.pendingClientOrderId)
                && Objects.equals(this.pendingPrice, marginAccountNewOtoRequest.pendingPrice)
                && Objects.equals(
                        this.pendingStopPrice, marginAccountNewOtoRequest.pendingStopPrice)
                && Objects.equals(
                        this.pendingTrailingDelta, marginAccountNewOtoRequest.pendingTrailingDelta)
                && Objects.equals(this.pendingQuantity, marginAccountNewOtoRequest.pendingQuantity)
                && Objects.equals(
                        this.pendingIcebergQty, marginAccountNewOtoRequest.pendingIcebergQty)
                && Objects.equals(
                        this.pendingTimeInForce, marginAccountNewOtoRequest.pendingTimeInForce);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                isIsolated,
                listClientOrderId,
                newOrderRespType,
                sideEffectType,
                selfTradePreventionMode,
                autoRepayAtCancel,
                workingType,
                workingSide,
                workingClientOrderId,
                workingPrice,
                workingQuantity,
                workingIcebergQty,
                workingTimeInForce,
                pendingType,
                pendingSide,
                pendingClientOrderId,
                pendingPrice,
                pendingStopPrice,
                pendingTrailingDelta,
                pendingQuantity,
                pendingIcebergQty,
                pendingTimeInForce);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MarginAccountNewOtoRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		isIsolated: ").append(toIndentedString(isIsolated)).append("\n");
        sb.append("		listClientOrderId: ").append(toIndentedString(listClientOrderId)).append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		sideEffectType: ").append(toIndentedString(sideEffectType)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		autoRepayAtCancel: ").append(toIndentedString(autoRepayAtCancel)).append("\n");
        sb.append("		workingType: ").append(toIndentedString(workingType)).append("\n");
        sb.append("		workingSide: ").append(toIndentedString(workingSide)).append("\n");
        sb.append("		workingClientOrderId: ")
                .append(toIndentedString(workingClientOrderId))
                .append("\n");
        sb.append("		workingPrice: ").append(toIndentedString(workingPrice)).append("\n");
        sb.append("		workingQuantity: ").append(toIndentedString(workingQuantity)).append("\n");
        sb.append("		workingIcebergQty: ").append(toIndentedString(workingIcebergQty)).append("\n");
        sb.append("		workingTimeInForce: ")
                .append(toIndentedString(workingTimeInForce))
                .append("\n");
        sb.append("		pendingType: ").append(toIndentedString(pendingType)).append("\n");
        sb.append("		pendingSide: ").append(toIndentedString(pendingSide)).append("\n");
        sb.append("		pendingClientOrderId: ")
                .append(toIndentedString(pendingClientOrderId))
                .append("\n");
        sb.append("		pendingPrice: ").append(toIndentedString(pendingPrice)).append("\n");
        sb.append("		pendingStopPrice: ").append(toIndentedString(pendingStopPrice)).append("\n");
        sb.append("		pendingTrailingDelta: ")
                .append(toIndentedString(pendingTrailingDelta))
                .append("\n");
        sb.append("		pendingQuantity: ").append(toIndentedString(pendingQuantity)).append("\n");
        sb.append("		pendingIcebergQty: ").append(toIndentedString(pendingIcebergQty)).append("\n");
        sb.append("		pendingTimeInForce: ")
                .append(toIndentedString(pendingTimeInForce))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object isIsolatedValue = getIsIsolated();
        String isIsolatedValueAsString = "";
        isIsolatedValueAsString = isIsolatedValue.toString();
        sb.append("isIsolated=").append(urlEncode(isIsolatedValueAsString)).append("");
        Object listClientOrderIdValue = getListClientOrderId();
        String listClientOrderIdValueAsString = "";
        listClientOrderIdValueAsString = listClientOrderIdValue.toString();
        sb.append("listClientOrderId=")
                .append(urlEncode(listClientOrderIdValueAsString))
                .append("");
        Object newOrderRespTypeValue = getNewOrderRespType();
        String newOrderRespTypeValueAsString = "";
        newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
        sb.append("newOrderRespType=").append(urlEncode(newOrderRespTypeValueAsString)).append("");
        Object sideEffectTypeValue = getSideEffectType();
        String sideEffectTypeValueAsString = "";
        sideEffectTypeValueAsString = sideEffectTypeValue.toString();
        sb.append("sideEffectType=").append(urlEncode(sideEffectTypeValueAsString)).append("");
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        String selfTradePreventionModeValueAsString = "";
        selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
        sb.append("selfTradePreventionMode=")
                .append(urlEncode(selfTradePreventionModeValueAsString))
                .append("");
        Object autoRepayAtCancelValue = getAutoRepayAtCancel();
        String autoRepayAtCancelValueAsString = "";
        autoRepayAtCancelValueAsString = autoRepayAtCancelValue.toString();
        sb.append("autoRepayAtCancel=")
                .append(urlEncode(autoRepayAtCancelValueAsString))
                .append("");
        Object workingTypeValue = getWorkingType();
        String workingTypeValueAsString = "";
        workingTypeValueAsString = workingTypeValue.toString();
        sb.append("workingType=").append(urlEncode(workingTypeValueAsString)).append("");
        Object workingSideValue = getWorkingSide();
        String workingSideValueAsString = "";
        workingSideValueAsString = workingSideValue.toString();
        sb.append("workingSide=").append(urlEncode(workingSideValueAsString)).append("");
        Object workingClientOrderIdValue = getWorkingClientOrderId();
        String workingClientOrderIdValueAsString = "";
        workingClientOrderIdValueAsString = workingClientOrderIdValue.toString();
        sb.append("workingClientOrderId=")
                .append(urlEncode(workingClientOrderIdValueAsString))
                .append("");
        Object workingPriceValue = getWorkingPrice();
        String workingPriceValueAsString = "";
        workingPriceValueAsString = workingPriceValue.toString();
        sb.append("workingPrice=").append(urlEncode(workingPriceValueAsString)).append("");
        Object workingQuantityValue = getWorkingQuantity();
        String workingQuantityValueAsString = "";
        workingQuantityValueAsString = workingQuantityValue.toString();
        sb.append("workingQuantity=").append(urlEncode(workingQuantityValueAsString)).append("");
        Object workingIcebergQtyValue = getWorkingIcebergQty();
        String workingIcebergQtyValueAsString = "";
        workingIcebergQtyValueAsString = workingIcebergQtyValue.toString();
        sb.append("workingIcebergQty=")
                .append(urlEncode(workingIcebergQtyValueAsString))
                .append("");
        Object workingTimeInForceValue = getWorkingTimeInForce();
        String workingTimeInForceValueAsString = "";
        workingTimeInForceValueAsString = workingTimeInForceValue.toString();
        sb.append("workingTimeInForce=")
                .append(urlEncode(workingTimeInForceValueAsString))
                .append("");
        Object pendingTypeValue = getPendingType();
        String pendingTypeValueAsString = "";
        pendingTypeValueAsString = pendingTypeValue.toString();
        sb.append("pendingType=").append(urlEncode(pendingTypeValueAsString)).append("");
        Object pendingSideValue = getPendingSide();
        String pendingSideValueAsString = "";
        pendingSideValueAsString = pendingSideValue.toString();
        sb.append("pendingSide=").append(urlEncode(pendingSideValueAsString)).append("");
        Object pendingClientOrderIdValue = getPendingClientOrderId();
        String pendingClientOrderIdValueAsString = "";
        pendingClientOrderIdValueAsString = pendingClientOrderIdValue.toString();
        sb.append("pendingClientOrderId=")
                .append(urlEncode(pendingClientOrderIdValueAsString))
                .append("");
        Object pendingPriceValue = getPendingPrice();
        String pendingPriceValueAsString = "";
        pendingPriceValueAsString = pendingPriceValue.toString();
        sb.append("pendingPrice=").append(urlEncode(pendingPriceValueAsString)).append("");
        Object pendingStopPriceValue = getPendingStopPrice();
        String pendingStopPriceValueAsString = "";
        pendingStopPriceValueAsString = pendingStopPriceValue.toString();
        sb.append("pendingStopPrice=").append(urlEncode(pendingStopPriceValueAsString)).append("");
        Object pendingTrailingDeltaValue = getPendingTrailingDelta();
        String pendingTrailingDeltaValueAsString = "";
        pendingTrailingDeltaValueAsString = pendingTrailingDeltaValue.toString();
        sb.append("pendingTrailingDelta=")
                .append(urlEncode(pendingTrailingDeltaValueAsString))
                .append("");
        Object pendingQuantityValue = getPendingQuantity();
        String pendingQuantityValueAsString = "";
        pendingQuantityValueAsString = pendingQuantityValue.toString();
        sb.append("pendingQuantity=").append(urlEncode(pendingQuantityValueAsString)).append("");
        Object pendingIcebergQtyValue = getPendingIcebergQty();
        String pendingIcebergQtyValueAsString = "";
        pendingIcebergQtyValueAsString = pendingIcebergQtyValue.toString();
        sb.append("pendingIcebergQty=")
                .append(urlEncode(pendingIcebergQtyValueAsString))
                .append("");
        Object pendingTimeInForceValue = getPendingTimeInForce();
        String pendingTimeInForceValueAsString = "";
        pendingTimeInForceValueAsString = pendingTimeInForceValue.toString();
        sb.append("pendingTimeInForce=")
                .append(urlEncode(pendingTimeInForceValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("isIsolated");
        openapiFields.add("listClientOrderId");
        openapiFields.add("newOrderRespType");
        openapiFields.add("sideEffectType");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("autoRepayAtCancel");
        openapiFields.add("workingType");
        openapiFields.add("workingSide");
        openapiFields.add("workingClientOrderId");
        openapiFields.add("workingPrice");
        openapiFields.add("workingQuantity");
        openapiFields.add("workingIcebergQty");
        openapiFields.add("workingTimeInForce");
        openapiFields.add("pendingType");
        openapiFields.add("pendingSide");
        openapiFields.add("pendingClientOrderId");
        openapiFields.add("pendingPrice");
        openapiFields.add("pendingStopPrice");
        openapiFields.add("pendingTrailingDelta");
        openapiFields.add("pendingQuantity");
        openapiFields.add("pendingIcebergQty");
        openapiFields.add("pendingTimeInForce");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("workingType");
        openapiRequiredFields.add("workingSide");
        openapiRequiredFields.add("workingPrice");
        openapiRequiredFields.add("workingQuantity");
        openapiRequiredFields.add("workingIcebergQty");
        openapiRequiredFields.add("pendingType");
        openapiRequiredFields.add("pendingSide");
        openapiRequiredFields.add("pendingQuantity");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MarginAccountNewOtoRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MarginAccountNewOtoRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MarginAccountNewOtoRequest is not"
                                        + " found in the empty JSON string",
                                MarginAccountNewOtoRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MarginAccountNewOtoRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `MarginAccountNewOtoRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : MarginAccountNewOtoRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("isIsolated") != null && !jsonObj.get("isIsolated").isJsonNull())
                && !jsonObj.get("isIsolated").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isIsolated` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isIsolated").toString()));
        }
        if ((jsonObj.get("listClientOrderId") != null
                        && !jsonObj.get("listClientOrderId").isJsonNull())
                && !jsonObj.get("listClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listClientOrderId").toString()));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespType.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        if ((jsonObj.get("sideEffectType") != null && !jsonObj.get("sideEffectType").isJsonNull())
                && !jsonObj.get("sideEffectType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sideEffectType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sideEffectType").toString()));
        }
        if ((jsonObj.get("selfTradePreventionMode") != null
                        && !jsonObj.get("selfTradePreventionMode").isJsonNull())
                && !jsonObj.get("selfTradePreventionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `selfTradePreventionMode` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("selfTradePreventionMode").toString()));
        }
        if (!jsonObj.get("workingType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workingType").toString()));
        }
        if (!jsonObj.get("workingSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workingSide").toString()));
        }
        if ((jsonObj.get("workingClientOrderId") != null
                        && !jsonObj.get("workingClientOrderId").isJsonNull())
                && !jsonObj.get("workingClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingClientOrderId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("workingClientOrderId").toString()));
        }
        if ((jsonObj.get("workingTimeInForce") != null
                        && !jsonObj.get("workingTimeInForce").isJsonNull())
                && !jsonObj.get("workingTimeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingTimeInForce` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("workingTimeInForce").toString()));
        }
        if (!jsonObj.get("pendingType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("pendingType").toString()));
        }
        if (!jsonObj.get("pendingSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("pendingSide").toString()));
        }
        if ((jsonObj.get("pendingClientOrderId") != null
                        && !jsonObj.get("pendingClientOrderId").isJsonNull())
                && !jsonObj.get("pendingClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingClientOrderId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("pendingClientOrderId").toString()));
        }
        if ((jsonObj.get("pendingTimeInForce") != null
                        && !jsonObj.get("pendingTimeInForce").isJsonNull())
                && !jsonObj.get("pendingTimeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingTimeInForce` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("pendingTimeInForce").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MarginAccountNewOtoRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MarginAccountNewOtoRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MarginAccountNewOtoRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(MarginAccountNewOtoRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MarginAccountNewOtoRequest>() {
                        @Override
                        public void write(JsonWriter out, MarginAccountNewOtoRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MarginAccountNewOtoRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MarginAccountNewOtoRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MarginAccountNewOtoRequest
     * @throws IOException if the JSON string is invalid with respect to MarginAccountNewOtoRequest
     */
    public static MarginAccountNewOtoRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MarginAccountNewOtoRequest.class);
    }

    /**
     * Convert an instance of MarginAccountNewOtoRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
