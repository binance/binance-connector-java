/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetDelistScheduleResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetDelistScheduleResponseInner {
    public static final String SERIALIZED_NAME_DELIST_TIME = "delistTime";

    @SerializedName(SERIALIZED_NAME_DELIST_TIME)
    @jakarta.annotation.Nullable
    private Long delistTime;

    public static final String SERIALIZED_NAME_CROSS_MARGIN_ASSETS = "crossMarginAssets";

    @SerializedName(SERIALIZED_NAME_CROSS_MARGIN_ASSETS)
    @jakarta.annotation.Nullable
    private List<String> crossMarginAssets;

    public static final String SERIALIZED_NAME_ISOLATED_MARGIN_SYMBOLS = "isolatedMarginSymbols";

    @SerializedName(SERIALIZED_NAME_ISOLATED_MARGIN_SYMBOLS)
    @jakarta.annotation.Nullable
    private List<String> isolatedMarginSymbols;

    public GetDelistScheduleResponseInner() {}

    public GetDelistScheduleResponseInner delistTime(@jakarta.annotation.Nullable Long delistTime) {
        this.delistTime = delistTime;
        return this;
    }

    /**
     * Get delistTime
     *
     * @return delistTime
     */
    @jakarta.annotation.Nullable
    public Long getDelistTime() {
        return delistTime;
    }

    public void setDelistTime(@jakarta.annotation.Nullable Long delistTime) {
        this.delistTime = delistTime;
    }

    public GetDelistScheduleResponseInner crossMarginAssets(
            @jakarta.annotation.Nullable List<String> crossMarginAssets) {
        this.crossMarginAssets = crossMarginAssets;
        return this;
    }

    public GetDelistScheduleResponseInner addCrossMarginAssetsItem(String crossMarginAssetsItem) {
        if (this.crossMarginAssets == null) {
            this.crossMarginAssets = new ArrayList<>();
        }
        this.crossMarginAssets.add(crossMarginAssetsItem);
        return this;
    }

    /**
     * Get crossMarginAssets
     *
     * @return crossMarginAssets
     */
    @jakarta.annotation.Nullable
    public List<String> getCrossMarginAssets() {
        return crossMarginAssets;
    }

    public void setCrossMarginAssets(@jakarta.annotation.Nullable List<String> crossMarginAssets) {
        this.crossMarginAssets = crossMarginAssets;
    }

    public GetDelistScheduleResponseInner isolatedMarginSymbols(
            @jakarta.annotation.Nullable List<String> isolatedMarginSymbols) {
        this.isolatedMarginSymbols = isolatedMarginSymbols;
        return this;
    }

    public GetDelistScheduleResponseInner addIsolatedMarginSymbolsItem(
            String isolatedMarginSymbolsItem) {
        if (this.isolatedMarginSymbols == null) {
            this.isolatedMarginSymbols = new ArrayList<>();
        }
        this.isolatedMarginSymbols.add(isolatedMarginSymbolsItem);
        return this;
    }

    /**
     * Get isolatedMarginSymbols
     *
     * @return isolatedMarginSymbols
     */
    @jakarta.annotation.Nullable
    public List<String> getIsolatedMarginSymbols() {
        return isolatedMarginSymbols;
    }

    public void setIsolatedMarginSymbols(
            @jakarta.annotation.Nullable List<String> isolatedMarginSymbols) {
        this.isolatedMarginSymbols = isolatedMarginSymbols;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetDelistScheduleResponseInner getDelistScheduleResponseInner =
                (GetDelistScheduleResponseInner) o;
        return Objects.equals(this.delistTime, getDelistScheduleResponseInner.delistTime)
                && Objects.equals(
                        this.crossMarginAssets, getDelistScheduleResponseInner.crossMarginAssets)
                && Objects.equals(
                        this.isolatedMarginSymbols,
                        getDelistScheduleResponseInner.isolatedMarginSymbols);
    }

    @Override
    public int hashCode() {
        return Objects.hash(delistTime, crossMarginAssets, isolatedMarginSymbols);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetDelistScheduleResponseInner {\n");
        sb.append("		delistTime: ").append(toIndentedString(delistTime)).append("\n");
        sb.append("		crossMarginAssets: ").append(toIndentedString(crossMarginAssets)).append("\n");
        sb.append("		isolatedMarginSymbols: ")
                .append(toIndentedString(isolatedMarginSymbols))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object delistTimeValue = getDelistTime();
        String delistTimeValueAsString = "";
        delistTimeValueAsString = delistTimeValue.toString();
        sb.append("delistTime=").append(urlEncode(delistTimeValueAsString)).append("");
        Object crossMarginAssetsValue = getCrossMarginAssets();
        String crossMarginAssetsValueAsString = "";
        crossMarginAssetsValueAsString =
                (String)
                        ((Collection) crossMarginAssetsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("crossMarginAssets=")
                .append(urlEncode(crossMarginAssetsValueAsString))
                .append("");
        Object isolatedMarginSymbolsValue = getIsolatedMarginSymbols();
        String isolatedMarginSymbolsValueAsString = "";
        isolatedMarginSymbolsValueAsString =
                (String)
                        ((Collection) isolatedMarginSymbolsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("isolatedMarginSymbols=")
                .append(urlEncode(isolatedMarginSymbolsValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("delistTime");
        openapiFields.add("crossMarginAssets");
        openapiFields.add("isolatedMarginSymbols");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetDelistScheduleResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetDelistScheduleResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetDelistScheduleResponseInner is not"
                                        + " found in the empty JSON string",
                                GetDelistScheduleResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetDelistScheduleResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetDelistScheduleResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("crossMarginAssets") != null
                && !jsonObj.get("crossMarginAssets").isJsonNull()
                && !jsonObj.get("crossMarginAssets").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossMarginAssets` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("crossMarginAssets").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("isolatedMarginSymbols") != null
                && !jsonObj.get("isolatedMarginSymbols").isJsonNull()
                && !jsonObj.get("isolatedMarginSymbols").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isolatedMarginSymbols` to be an array in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isolatedMarginSymbols").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetDelistScheduleResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetDelistScheduleResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetDelistScheduleResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetDelistScheduleResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetDelistScheduleResponseInner>() {
                        @Override
                        public void write(JsonWriter out, GetDelistScheduleResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetDelistScheduleResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetDelistScheduleResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetDelistScheduleResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetDelistScheduleResponseInner
     */
    public static GetDelistScheduleResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetDelistScheduleResponseInner.class);
    }

    /**
     * Convert an instance of GetDelistScheduleResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
