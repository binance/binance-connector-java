/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryCrossMarginFeeDataResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryCrossMarginFeeDataResponseInner {
    public static final String SERIALIZED_NAME_VIP_LEVEL = "vipLevel";

    @SerializedName(SERIALIZED_NAME_VIP_LEVEL)
    @jakarta.annotation.Nullable
    private Long vipLevel;

    public static final String SERIALIZED_NAME_COIN = "coin";

    @SerializedName(SERIALIZED_NAME_COIN)
    @jakarta.annotation.Nullable
    private String coin;

    public static final String SERIALIZED_NAME_TRANSFER_IN = "transferIn";

    @SerializedName(SERIALIZED_NAME_TRANSFER_IN)
    @jakarta.annotation.Nullable
    private Boolean transferIn;

    public static final String SERIALIZED_NAME_BORROWABLE = "borrowable";

    @SerializedName(SERIALIZED_NAME_BORROWABLE)
    @jakarta.annotation.Nullable
    private Boolean borrowable;

    public static final String SERIALIZED_NAME_DAILY_INTEREST = "dailyInterest";

    @SerializedName(SERIALIZED_NAME_DAILY_INTEREST)
    @jakarta.annotation.Nullable
    private String dailyInterest;

    public static final String SERIALIZED_NAME_YEARLY_INTEREST = "yearlyInterest";

    @SerializedName(SERIALIZED_NAME_YEARLY_INTEREST)
    @jakarta.annotation.Nullable
    private String yearlyInterest;

    public static final String SERIALIZED_NAME_BORROW_LIMIT = "borrowLimit";

    @SerializedName(SERIALIZED_NAME_BORROW_LIMIT)
    @jakarta.annotation.Nullable
    private String borrowLimit;

    public static final String SERIALIZED_NAME_MARGINABLE_PAIRS = "marginablePairs";

    @SerializedName(SERIALIZED_NAME_MARGINABLE_PAIRS)
    @jakarta.annotation.Nullable
    private List<String> marginablePairs;

    public QueryCrossMarginFeeDataResponseInner() {}

    public QueryCrossMarginFeeDataResponseInner vipLevel(
            @jakarta.annotation.Nullable Long vipLevel) {
        this.vipLevel = vipLevel;
        return this;
    }

    /**
     * Get vipLevel
     *
     * @return vipLevel
     */
    @jakarta.annotation.Nullable
    public Long getVipLevel() {
        return vipLevel;
    }

    public void setVipLevel(@jakarta.annotation.Nullable Long vipLevel) {
        this.vipLevel = vipLevel;
    }

    public QueryCrossMarginFeeDataResponseInner coin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
        return this;
    }

    /**
     * Get coin
     *
     * @return coin
     */
    @jakarta.annotation.Nullable
    public String getCoin() {
        return coin;
    }

    public void setCoin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
    }

    public QueryCrossMarginFeeDataResponseInner transferIn(
            @jakarta.annotation.Nullable Boolean transferIn) {
        this.transferIn = transferIn;
        return this;
    }

    /**
     * Get transferIn
     *
     * @return transferIn
     */
    @jakarta.annotation.Nullable
    public Boolean getTransferIn() {
        return transferIn;
    }

    public void setTransferIn(@jakarta.annotation.Nullable Boolean transferIn) {
        this.transferIn = transferIn;
    }

    public QueryCrossMarginFeeDataResponseInner borrowable(
            @jakarta.annotation.Nullable Boolean borrowable) {
        this.borrowable = borrowable;
        return this;
    }

    /**
     * Get borrowable
     *
     * @return borrowable
     */
    @jakarta.annotation.Nullable
    public Boolean getBorrowable() {
        return borrowable;
    }

    public void setBorrowable(@jakarta.annotation.Nullable Boolean borrowable) {
        this.borrowable = borrowable;
    }

    public QueryCrossMarginFeeDataResponseInner dailyInterest(
            @jakarta.annotation.Nullable String dailyInterest) {
        this.dailyInterest = dailyInterest;
        return this;
    }

    /**
     * Get dailyInterest
     *
     * @return dailyInterest
     */
    @jakarta.annotation.Nullable
    public String getDailyInterest() {
        return dailyInterest;
    }

    public void setDailyInterest(@jakarta.annotation.Nullable String dailyInterest) {
        this.dailyInterest = dailyInterest;
    }

    public QueryCrossMarginFeeDataResponseInner yearlyInterest(
            @jakarta.annotation.Nullable String yearlyInterest) {
        this.yearlyInterest = yearlyInterest;
        return this;
    }

    /**
     * Get yearlyInterest
     *
     * @return yearlyInterest
     */
    @jakarta.annotation.Nullable
    public String getYearlyInterest() {
        return yearlyInterest;
    }

    public void setYearlyInterest(@jakarta.annotation.Nullable String yearlyInterest) {
        this.yearlyInterest = yearlyInterest;
    }

    public QueryCrossMarginFeeDataResponseInner borrowLimit(
            @jakarta.annotation.Nullable String borrowLimit) {
        this.borrowLimit = borrowLimit;
        return this;
    }

    /**
     * Get borrowLimit
     *
     * @return borrowLimit
     */
    @jakarta.annotation.Nullable
    public String getBorrowLimit() {
        return borrowLimit;
    }

    public void setBorrowLimit(@jakarta.annotation.Nullable String borrowLimit) {
        this.borrowLimit = borrowLimit;
    }

    public QueryCrossMarginFeeDataResponseInner marginablePairs(
            @jakarta.annotation.Nullable List<String> marginablePairs) {
        this.marginablePairs = marginablePairs;
        return this;
    }

    public QueryCrossMarginFeeDataResponseInner addMarginablePairsItem(String marginablePairsItem) {
        if (this.marginablePairs == null) {
            this.marginablePairs = new ArrayList<>();
        }
        this.marginablePairs.add(marginablePairsItem);
        return this;
    }

    /**
     * Get marginablePairs
     *
     * @return marginablePairs
     */
    @jakarta.annotation.Nullable
    public List<String> getMarginablePairs() {
        return marginablePairs;
    }

    public void setMarginablePairs(@jakarta.annotation.Nullable List<String> marginablePairs) {
        this.marginablePairs = marginablePairs;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryCrossMarginFeeDataResponseInner queryCrossMarginFeeDataResponseInner =
                (QueryCrossMarginFeeDataResponseInner) o;
        return Objects.equals(this.vipLevel, queryCrossMarginFeeDataResponseInner.vipLevel)
                && Objects.equals(this.coin, queryCrossMarginFeeDataResponseInner.coin)
                && Objects.equals(this.transferIn, queryCrossMarginFeeDataResponseInner.transferIn)
                && Objects.equals(this.borrowable, queryCrossMarginFeeDataResponseInner.borrowable)
                && Objects.equals(
                        this.dailyInterest, queryCrossMarginFeeDataResponseInner.dailyInterest)
                && Objects.equals(
                        this.yearlyInterest, queryCrossMarginFeeDataResponseInner.yearlyInterest)
                && Objects.equals(
                        this.borrowLimit, queryCrossMarginFeeDataResponseInner.borrowLimit)
                && Objects.equals(
                        this.marginablePairs, queryCrossMarginFeeDataResponseInner.marginablePairs);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                vipLevel,
                coin,
                transferIn,
                borrowable,
                dailyInterest,
                yearlyInterest,
                borrowLimit,
                marginablePairs);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryCrossMarginFeeDataResponseInner {\n");
        sb.append("		vipLevel: ").append(toIndentedString(vipLevel)).append("\n");
        sb.append("		coin: ").append(toIndentedString(coin)).append("\n");
        sb.append("		transferIn: ").append(toIndentedString(transferIn)).append("\n");
        sb.append("		borrowable: ").append(toIndentedString(borrowable)).append("\n");
        sb.append("		dailyInterest: ").append(toIndentedString(dailyInterest)).append("\n");
        sb.append("		yearlyInterest: ").append(toIndentedString(yearlyInterest)).append("\n");
        sb.append("		borrowLimit: ").append(toIndentedString(borrowLimit)).append("\n");
        sb.append("		marginablePairs: ").append(toIndentedString(marginablePairs)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object vipLevelValue = getVipLevel();
        String vipLevelValueAsString = "";
        vipLevelValueAsString = vipLevelValue.toString();
        sb.append("vipLevel=").append(urlEncode(vipLevelValueAsString)).append("");
        Object coinValue = getCoin();
        String coinValueAsString = "";
        coinValueAsString = coinValue.toString();
        sb.append("coin=").append(urlEncode(coinValueAsString)).append("");
        Object transferInValue = getTransferIn();
        String transferInValueAsString = "";
        transferInValueAsString = transferInValue.toString();
        sb.append("transferIn=").append(urlEncode(transferInValueAsString)).append("");
        Object borrowableValue = getBorrowable();
        String borrowableValueAsString = "";
        borrowableValueAsString = borrowableValue.toString();
        sb.append("borrowable=").append(urlEncode(borrowableValueAsString)).append("");
        Object dailyInterestValue = getDailyInterest();
        String dailyInterestValueAsString = "";
        dailyInterestValueAsString = dailyInterestValue.toString();
        sb.append("dailyInterest=").append(urlEncode(dailyInterestValueAsString)).append("");
        Object yearlyInterestValue = getYearlyInterest();
        String yearlyInterestValueAsString = "";
        yearlyInterestValueAsString = yearlyInterestValue.toString();
        sb.append("yearlyInterest=").append(urlEncode(yearlyInterestValueAsString)).append("");
        Object borrowLimitValue = getBorrowLimit();
        String borrowLimitValueAsString = "";
        borrowLimitValueAsString = borrowLimitValue.toString();
        sb.append("borrowLimit=").append(urlEncode(borrowLimitValueAsString)).append("");
        Object marginablePairsValue = getMarginablePairs();
        String marginablePairsValueAsString = "";
        marginablePairsValueAsString =
                (String)
                        ((Collection) marginablePairsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("marginablePairs=").append(urlEncode(marginablePairsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("vipLevel");
        openapiFields.add("coin");
        openapiFields.add("transferIn");
        openapiFields.add("borrowable");
        openapiFields.add("dailyInterest");
        openapiFields.add("yearlyInterest");
        openapiFields.add("borrowLimit");
        openapiFields.add("marginablePairs");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryCrossMarginFeeDataResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryCrossMarginFeeDataResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in QueryCrossMarginFeeDataResponseInner"
                                        + " is not found in the empty JSON string",
                                QueryCrossMarginFeeDataResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryCrossMarginFeeDataResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryCrossMarginFeeDataResponseInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull())
                && !jsonObj.get("coin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("coin").toString()));
        }
        if ((jsonObj.get("dailyInterest") != null && !jsonObj.get("dailyInterest").isJsonNull())
                && !jsonObj.get("dailyInterest").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `dailyInterest` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("dailyInterest").toString()));
        }
        if ((jsonObj.get("yearlyInterest") != null && !jsonObj.get("yearlyInterest").isJsonNull())
                && !jsonObj.get("yearlyInterest").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `yearlyInterest` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("yearlyInterest").toString()));
        }
        if ((jsonObj.get("borrowLimit") != null && !jsonObj.get("borrowLimit").isJsonNull())
                && !jsonObj.get("borrowLimit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `borrowLimit` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("borrowLimit").toString()));
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("marginablePairs") != null
                && !jsonObj.get("marginablePairs").isJsonNull()
                && !jsonObj.get("marginablePairs").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `marginablePairs` to be an array in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("marginablePairs").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryCrossMarginFeeDataResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'QueryCrossMarginFeeDataResponseInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryCrossMarginFeeDataResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryCrossMarginFeeDataResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryCrossMarginFeeDataResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryCrossMarginFeeDataResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryCrossMarginFeeDataResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryCrossMarginFeeDataResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryCrossMarginFeeDataResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryCrossMarginFeeDataResponseInner
     */
    public static QueryCrossMarginFeeDataResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, QueryCrossMarginFeeDataResponseInner.class);
    }

    /**
     * Convert an instance of QueryCrossMarginFeeDataResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
