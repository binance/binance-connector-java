/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** MarginAccountNewOtocoRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MarginAccountNewOtocoRequest {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_IS_ISOLATED = "isIsolated";

    @SerializedName(SERIALIZED_NAME_IS_ISOLATED)
    @jakarta.annotation.Nullable
    private String isIsolated;

    public static final String SERIALIZED_NAME_SIDE_EFFECT_TYPE = "sideEffectType";

    @SerializedName(SERIALIZED_NAME_SIDE_EFFECT_TYPE)
    @jakarta.annotation.Nullable
    private String sideEffectType;

    public static final String SERIALIZED_NAME_AUTO_REPAY_AT_CANCEL = "autoRepayAtCancel";

    @SerializedName(SERIALIZED_NAME_AUTO_REPAY_AT_CANCEL)
    @jakarta.annotation.Nullable
    private Boolean autoRepayAtCancel;

    public static final String SERIALIZED_NAME_LIST_CLIENT_ORDER_ID = "listClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIST_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String listClientOrderId;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespType newOrderRespType;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private String selfTradePreventionMode;

    public static final String SERIALIZED_NAME_WORKING_TYPE = "workingType";

    @SerializedName(SERIALIZED_NAME_WORKING_TYPE)
    @jakarta.annotation.Nonnull
    private String workingType;

    public static final String SERIALIZED_NAME_WORKING_SIDE = "workingSide";

    @SerializedName(SERIALIZED_NAME_WORKING_SIDE)
    @jakarta.annotation.Nonnull
    private String workingSide;

    public static final String SERIALIZED_NAME_WORKING_CLIENT_ORDER_ID = "workingClientOrderId";

    @SerializedName(SERIALIZED_NAME_WORKING_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String workingClientOrderId;

    public static final String SERIALIZED_NAME_WORKING_PRICE = "workingPrice";

    @SerializedName(SERIALIZED_NAME_WORKING_PRICE)
    @jakarta.annotation.Nonnull
    private Double workingPrice;

    public static final String SERIALIZED_NAME_WORKING_QUANTITY = "workingQuantity";

    @SerializedName(SERIALIZED_NAME_WORKING_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double workingQuantity;

    public static final String SERIALIZED_NAME_WORKING_ICEBERG_QTY = "workingIcebergQty";

    @SerializedName(SERIALIZED_NAME_WORKING_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double workingIcebergQty;

    public static final String SERIALIZED_NAME_WORKING_TIME_IN_FORCE = "workingTimeInForce";

    @SerializedName(SERIALIZED_NAME_WORKING_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String workingTimeInForce;

    public static final String SERIALIZED_NAME_PENDING_SIDE = "pendingSide";

    @SerializedName(SERIALIZED_NAME_PENDING_SIDE)
    @jakarta.annotation.Nonnull
    private String pendingSide;

    public static final String SERIALIZED_NAME_PENDING_QUANTITY = "pendingQuantity";

    @SerializedName(SERIALIZED_NAME_PENDING_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double pendingQuantity;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_TYPE = "pendingAboveType";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_TYPE)
    @jakarta.annotation.Nonnull
    private String pendingAboveType;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_CLIENT_ORDER_ID =
            "pendingAboveClientOrderId";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String pendingAboveClientOrderId;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_PRICE = "pendingAbovePrice";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingAbovePrice;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_STOP_PRICE = "pendingAboveStopPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingAboveStopPrice;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_TRAILING_DELTA =
            "pendingAboveTrailingDelta";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_TRAILING_DELTA)
    @jakarta.annotation.Nullable
    private Double pendingAboveTrailingDelta;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_ICEBERG_QTY = "pendingAboveIcebergQty";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double pendingAboveIcebergQty;

    public static final String SERIALIZED_NAME_PENDING_ABOVE_TIME_IN_FORCE =
            "pendingAboveTimeInForce";

    @SerializedName(SERIALIZED_NAME_PENDING_ABOVE_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String pendingAboveTimeInForce;

    public static final String SERIALIZED_NAME_PENDING_BELOW_TYPE = "pendingBelowType";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_TYPE)
    @jakarta.annotation.Nullable
    private String pendingBelowType;

    public static final String SERIALIZED_NAME_PENDING_BELOW_CLIENT_ORDER_ID =
            "pendingBelowClientOrderId";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String pendingBelowClientOrderId;

    public static final String SERIALIZED_NAME_PENDING_BELOW_PRICE = "pendingBelowPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingBelowPrice;

    public static final String SERIALIZED_NAME_PENDING_BELOW_STOP_PRICE = "pendingBelowStopPrice";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double pendingBelowStopPrice;

    public static final String SERIALIZED_NAME_PENDING_BELOW_TRAILING_DELTA =
            "pendingBelowTrailingDelta";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_TRAILING_DELTA)
    @jakarta.annotation.Nullable
    private Double pendingBelowTrailingDelta;

    public static final String SERIALIZED_NAME_PENDING_BELOW_ICEBERG_QTY = "pendingBelowIcebergQty";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double pendingBelowIcebergQty;

    public static final String SERIALIZED_NAME_PENDING_BELOW_TIME_IN_FORCE =
            "pendingBelowTimeInForce";

    @SerializedName(SERIALIZED_NAME_PENDING_BELOW_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String pendingBelowTimeInForce;

    public MarginAccountNewOtocoRequest() {}

    public MarginAccountNewOtocoRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public MarginAccountNewOtocoRequest isIsolated(@jakarta.annotation.Nullable String isIsolated) {
        this.isIsolated = isIsolated;
        return this;
    }

    /**
     * Get isIsolated
     *
     * @return isIsolated
     */
    @jakarta.annotation.Nullable
    public String getIsIsolated() {
        return isIsolated;
    }

    public void setIsIsolated(@jakarta.annotation.Nullable String isIsolated) {
        this.isIsolated = isIsolated;
    }

    public MarginAccountNewOtocoRequest sideEffectType(
            @jakarta.annotation.Nullable String sideEffectType) {
        this.sideEffectType = sideEffectType;
        return this;
    }

    /**
     * Get sideEffectType
     *
     * @return sideEffectType
     */
    @jakarta.annotation.Nullable
    public String getSideEffectType() {
        return sideEffectType;
    }

    public void setSideEffectType(@jakarta.annotation.Nullable String sideEffectType) {
        this.sideEffectType = sideEffectType;
    }

    public MarginAccountNewOtocoRequest autoRepayAtCancel(
            @jakarta.annotation.Nullable Boolean autoRepayAtCancel) {
        this.autoRepayAtCancel = autoRepayAtCancel;
        return this;
    }

    /**
     * Get autoRepayAtCancel
     *
     * @return autoRepayAtCancel
     */
    @jakarta.annotation.Nullable
    public Boolean getAutoRepayAtCancel() {
        return autoRepayAtCancel;
    }

    public void setAutoRepayAtCancel(@jakarta.annotation.Nullable Boolean autoRepayAtCancel) {
        this.autoRepayAtCancel = autoRepayAtCancel;
    }

    public MarginAccountNewOtocoRequest listClientOrderId(
            @jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
        return this;
    }

    /**
     * Get listClientOrderId
     *
     * @return listClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getListClientOrderId() {
        return listClientOrderId;
    }

    public void setListClientOrderId(@jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
    }

    public MarginAccountNewOtocoRequest newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    @Valid
    public NewOrderRespType getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public MarginAccountNewOtocoRequest selfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    public String getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public MarginAccountNewOtocoRequest workingType(
            @jakarta.annotation.Nonnull String workingType) {
        this.workingType = workingType;
        return this;
    }

    /**
     * Get workingType
     *
     * @return workingType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getWorkingType() {
        return workingType;
    }

    public void setWorkingType(@jakarta.annotation.Nonnull String workingType) {
        this.workingType = workingType;
    }

    public MarginAccountNewOtocoRequest workingSide(
            @jakarta.annotation.Nonnull String workingSide) {
        this.workingSide = workingSide;
        return this;
    }

    /**
     * Get workingSide
     *
     * @return workingSide
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getWorkingSide() {
        return workingSide;
    }

    public void setWorkingSide(@jakarta.annotation.Nonnull String workingSide) {
        this.workingSide = workingSide;
    }

    public MarginAccountNewOtocoRequest workingClientOrderId(
            @jakarta.annotation.Nullable String workingClientOrderId) {
        this.workingClientOrderId = workingClientOrderId;
        return this;
    }

    /**
     * Get workingClientOrderId
     *
     * @return workingClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getWorkingClientOrderId() {
        return workingClientOrderId;
    }

    public void setWorkingClientOrderId(@jakarta.annotation.Nullable String workingClientOrderId) {
        this.workingClientOrderId = workingClientOrderId;
    }

    public MarginAccountNewOtocoRequest workingPrice(
            @jakarta.annotation.Nonnull Double workingPrice) {
        this.workingPrice = workingPrice;
        return this;
    }

    /**
     * Get workingPrice
     *
     * @return workingPrice
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getWorkingPrice() {
        return workingPrice;
    }

    public void setWorkingPrice(@jakarta.annotation.Nonnull Double workingPrice) {
        this.workingPrice = workingPrice;
    }

    public MarginAccountNewOtocoRequest workingQuantity(
            @jakarta.annotation.Nonnull Double workingQuantity) {
        this.workingQuantity = workingQuantity;
        return this;
    }

    /**
     * Get workingQuantity
     *
     * @return workingQuantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getWorkingQuantity() {
        return workingQuantity;
    }

    public void setWorkingQuantity(@jakarta.annotation.Nonnull Double workingQuantity) {
        this.workingQuantity = workingQuantity;
    }

    public MarginAccountNewOtocoRequest workingIcebergQty(
            @jakarta.annotation.Nullable Double workingIcebergQty) {
        this.workingIcebergQty = workingIcebergQty;
        return this;
    }

    /**
     * Get workingIcebergQty
     *
     * @return workingIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getWorkingIcebergQty() {
        return workingIcebergQty;
    }

    public void setWorkingIcebergQty(@jakarta.annotation.Nullable Double workingIcebergQty) {
        this.workingIcebergQty = workingIcebergQty;
    }

    public MarginAccountNewOtocoRequest workingTimeInForce(
            @jakarta.annotation.Nullable String workingTimeInForce) {
        this.workingTimeInForce = workingTimeInForce;
        return this;
    }

    /**
     * Get workingTimeInForce
     *
     * @return workingTimeInForce
     */
    @jakarta.annotation.Nullable
    public String getWorkingTimeInForce() {
        return workingTimeInForce;
    }

    public void setWorkingTimeInForce(@jakarta.annotation.Nullable String workingTimeInForce) {
        this.workingTimeInForce = workingTimeInForce;
    }

    public MarginAccountNewOtocoRequest pendingSide(
            @jakarta.annotation.Nonnull String pendingSide) {
        this.pendingSide = pendingSide;
        return this;
    }

    /**
     * Get pendingSide
     *
     * @return pendingSide
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getPendingSide() {
        return pendingSide;
    }

    public void setPendingSide(@jakarta.annotation.Nonnull String pendingSide) {
        this.pendingSide = pendingSide;
    }

    public MarginAccountNewOtocoRequest pendingQuantity(
            @jakarta.annotation.Nonnull Double pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
        return this;
    }

    /**
     * Get pendingQuantity
     *
     * @return pendingQuantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getPendingQuantity() {
        return pendingQuantity;
    }

    public void setPendingQuantity(@jakarta.annotation.Nonnull Double pendingQuantity) {
        this.pendingQuantity = pendingQuantity;
    }

    public MarginAccountNewOtocoRequest pendingAboveType(
            @jakarta.annotation.Nonnull String pendingAboveType) {
        this.pendingAboveType = pendingAboveType;
        return this;
    }

    /**
     * Get pendingAboveType
     *
     * @return pendingAboveType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getPendingAboveType() {
        return pendingAboveType;
    }

    public void setPendingAboveType(@jakarta.annotation.Nonnull String pendingAboveType) {
        this.pendingAboveType = pendingAboveType;
    }

    public MarginAccountNewOtocoRequest pendingAboveClientOrderId(
            @jakarta.annotation.Nullable String pendingAboveClientOrderId) {
        this.pendingAboveClientOrderId = pendingAboveClientOrderId;
        return this;
    }

    /**
     * Get pendingAboveClientOrderId
     *
     * @return pendingAboveClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getPendingAboveClientOrderId() {
        return pendingAboveClientOrderId;
    }

    public void setPendingAboveClientOrderId(
            @jakarta.annotation.Nullable String pendingAboveClientOrderId) {
        this.pendingAboveClientOrderId = pendingAboveClientOrderId;
    }

    public MarginAccountNewOtocoRequest pendingAbovePrice(
            @jakarta.annotation.Nullable Double pendingAbovePrice) {
        this.pendingAbovePrice = pendingAbovePrice;
        return this;
    }

    /**
     * Get pendingAbovePrice
     *
     * @return pendingAbovePrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingAbovePrice() {
        return pendingAbovePrice;
    }

    public void setPendingAbovePrice(@jakarta.annotation.Nullable Double pendingAbovePrice) {
        this.pendingAbovePrice = pendingAbovePrice;
    }

    public MarginAccountNewOtocoRequest pendingAboveStopPrice(
            @jakarta.annotation.Nullable Double pendingAboveStopPrice) {
        this.pendingAboveStopPrice = pendingAboveStopPrice;
        return this;
    }

    /**
     * Get pendingAboveStopPrice
     *
     * @return pendingAboveStopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingAboveStopPrice() {
        return pendingAboveStopPrice;
    }

    public void setPendingAboveStopPrice(
            @jakarta.annotation.Nullable Double pendingAboveStopPrice) {
        this.pendingAboveStopPrice = pendingAboveStopPrice;
    }

    public MarginAccountNewOtocoRequest pendingAboveTrailingDelta(
            @jakarta.annotation.Nullable Double pendingAboveTrailingDelta) {
        this.pendingAboveTrailingDelta = pendingAboveTrailingDelta;
        return this;
    }

    /**
     * Get pendingAboveTrailingDelta
     *
     * @return pendingAboveTrailingDelta
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingAboveTrailingDelta() {
        return pendingAboveTrailingDelta;
    }

    public void setPendingAboveTrailingDelta(
            @jakarta.annotation.Nullable Double pendingAboveTrailingDelta) {
        this.pendingAboveTrailingDelta = pendingAboveTrailingDelta;
    }

    public MarginAccountNewOtocoRequest pendingAboveIcebergQty(
            @jakarta.annotation.Nullable Double pendingAboveIcebergQty) {
        this.pendingAboveIcebergQty = pendingAboveIcebergQty;
        return this;
    }

    /**
     * Get pendingAboveIcebergQty
     *
     * @return pendingAboveIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingAboveIcebergQty() {
        return pendingAboveIcebergQty;
    }

    public void setPendingAboveIcebergQty(
            @jakarta.annotation.Nullable Double pendingAboveIcebergQty) {
        this.pendingAboveIcebergQty = pendingAboveIcebergQty;
    }

    public MarginAccountNewOtocoRequest pendingAboveTimeInForce(
            @jakarta.annotation.Nullable String pendingAboveTimeInForce) {
        this.pendingAboveTimeInForce = pendingAboveTimeInForce;
        return this;
    }

    /**
     * Get pendingAboveTimeInForce
     *
     * @return pendingAboveTimeInForce
     */
    @jakarta.annotation.Nullable
    public String getPendingAboveTimeInForce() {
        return pendingAboveTimeInForce;
    }

    public void setPendingAboveTimeInForce(
            @jakarta.annotation.Nullable String pendingAboveTimeInForce) {
        this.pendingAboveTimeInForce = pendingAboveTimeInForce;
    }

    public MarginAccountNewOtocoRequest pendingBelowType(
            @jakarta.annotation.Nullable String pendingBelowType) {
        this.pendingBelowType = pendingBelowType;
        return this;
    }

    /**
     * Get pendingBelowType
     *
     * @return pendingBelowType
     */
    @jakarta.annotation.Nullable
    public String getPendingBelowType() {
        return pendingBelowType;
    }

    public void setPendingBelowType(@jakarta.annotation.Nullable String pendingBelowType) {
        this.pendingBelowType = pendingBelowType;
    }

    public MarginAccountNewOtocoRequest pendingBelowClientOrderId(
            @jakarta.annotation.Nullable String pendingBelowClientOrderId) {
        this.pendingBelowClientOrderId = pendingBelowClientOrderId;
        return this;
    }

    /**
     * Get pendingBelowClientOrderId
     *
     * @return pendingBelowClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getPendingBelowClientOrderId() {
        return pendingBelowClientOrderId;
    }

    public void setPendingBelowClientOrderId(
            @jakarta.annotation.Nullable String pendingBelowClientOrderId) {
        this.pendingBelowClientOrderId = pendingBelowClientOrderId;
    }

    public MarginAccountNewOtocoRequest pendingBelowPrice(
            @jakarta.annotation.Nullable Double pendingBelowPrice) {
        this.pendingBelowPrice = pendingBelowPrice;
        return this;
    }

    /**
     * Get pendingBelowPrice
     *
     * @return pendingBelowPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingBelowPrice() {
        return pendingBelowPrice;
    }

    public void setPendingBelowPrice(@jakarta.annotation.Nullable Double pendingBelowPrice) {
        this.pendingBelowPrice = pendingBelowPrice;
    }

    public MarginAccountNewOtocoRequest pendingBelowStopPrice(
            @jakarta.annotation.Nullable Double pendingBelowStopPrice) {
        this.pendingBelowStopPrice = pendingBelowStopPrice;
        return this;
    }

    /**
     * Get pendingBelowStopPrice
     *
     * @return pendingBelowStopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingBelowStopPrice() {
        return pendingBelowStopPrice;
    }

    public void setPendingBelowStopPrice(
            @jakarta.annotation.Nullable Double pendingBelowStopPrice) {
        this.pendingBelowStopPrice = pendingBelowStopPrice;
    }

    public MarginAccountNewOtocoRequest pendingBelowTrailingDelta(
            @jakarta.annotation.Nullable Double pendingBelowTrailingDelta) {
        this.pendingBelowTrailingDelta = pendingBelowTrailingDelta;
        return this;
    }

    /**
     * Get pendingBelowTrailingDelta
     *
     * @return pendingBelowTrailingDelta
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingBelowTrailingDelta() {
        return pendingBelowTrailingDelta;
    }

    public void setPendingBelowTrailingDelta(
            @jakarta.annotation.Nullable Double pendingBelowTrailingDelta) {
        this.pendingBelowTrailingDelta = pendingBelowTrailingDelta;
    }

    public MarginAccountNewOtocoRequest pendingBelowIcebergQty(
            @jakarta.annotation.Nullable Double pendingBelowIcebergQty) {
        this.pendingBelowIcebergQty = pendingBelowIcebergQty;
        return this;
    }

    /**
     * Get pendingBelowIcebergQty
     *
     * @return pendingBelowIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPendingBelowIcebergQty() {
        return pendingBelowIcebergQty;
    }

    public void setPendingBelowIcebergQty(
            @jakarta.annotation.Nullable Double pendingBelowIcebergQty) {
        this.pendingBelowIcebergQty = pendingBelowIcebergQty;
    }

    public MarginAccountNewOtocoRequest pendingBelowTimeInForce(
            @jakarta.annotation.Nullable String pendingBelowTimeInForce) {
        this.pendingBelowTimeInForce = pendingBelowTimeInForce;
        return this;
    }

    /**
     * Get pendingBelowTimeInForce
     *
     * @return pendingBelowTimeInForce
     */
    @jakarta.annotation.Nullable
    public String getPendingBelowTimeInForce() {
        return pendingBelowTimeInForce;
    }

    public void setPendingBelowTimeInForce(
            @jakarta.annotation.Nullable String pendingBelowTimeInForce) {
        this.pendingBelowTimeInForce = pendingBelowTimeInForce;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MarginAccountNewOtocoRequest marginAccountNewOtocoRequest =
                (MarginAccountNewOtocoRequest) o;
        return Objects.equals(this.symbol, marginAccountNewOtocoRequest.symbol)
                && Objects.equals(this.isIsolated, marginAccountNewOtocoRequest.isIsolated)
                && Objects.equals(this.sideEffectType, marginAccountNewOtocoRequest.sideEffectType)
                && Objects.equals(
                        this.autoRepayAtCancel, marginAccountNewOtocoRequest.autoRepayAtCancel)
                && Objects.equals(
                        this.listClientOrderId, marginAccountNewOtocoRequest.listClientOrderId)
                && Objects.equals(
                        this.newOrderRespType, marginAccountNewOtocoRequest.newOrderRespType)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        marginAccountNewOtocoRequest.selfTradePreventionMode)
                && Objects.equals(this.workingType, marginAccountNewOtocoRequest.workingType)
                && Objects.equals(this.workingSide, marginAccountNewOtocoRequest.workingSide)
                && Objects.equals(
                        this.workingClientOrderId,
                        marginAccountNewOtocoRequest.workingClientOrderId)
                && Objects.equals(this.workingPrice, marginAccountNewOtocoRequest.workingPrice)
                && Objects.equals(
                        this.workingQuantity, marginAccountNewOtocoRequest.workingQuantity)
                && Objects.equals(
                        this.workingIcebergQty, marginAccountNewOtocoRequest.workingIcebergQty)
                && Objects.equals(
                        this.workingTimeInForce, marginAccountNewOtocoRequest.workingTimeInForce)
                && Objects.equals(this.pendingSide, marginAccountNewOtocoRequest.pendingSide)
                && Objects.equals(
                        this.pendingQuantity, marginAccountNewOtocoRequest.pendingQuantity)
                && Objects.equals(
                        this.pendingAboveType, marginAccountNewOtocoRequest.pendingAboveType)
                && Objects.equals(
                        this.pendingAboveClientOrderId,
                        marginAccountNewOtocoRequest.pendingAboveClientOrderId)
                && Objects.equals(
                        this.pendingAbovePrice, marginAccountNewOtocoRequest.pendingAbovePrice)
                && Objects.equals(
                        this.pendingAboveStopPrice,
                        marginAccountNewOtocoRequest.pendingAboveStopPrice)
                && Objects.equals(
                        this.pendingAboveTrailingDelta,
                        marginAccountNewOtocoRequest.pendingAboveTrailingDelta)
                && Objects.equals(
                        this.pendingAboveIcebergQty,
                        marginAccountNewOtocoRequest.pendingAboveIcebergQty)
                && Objects.equals(
                        this.pendingAboveTimeInForce,
                        marginAccountNewOtocoRequest.pendingAboveTimeInForce)
                && Objects.equals(
                        this.pendingBelowType, marginAccountNewOtocoRequest.pendingBelowType)
                && Objects.equals(
                        this.pendingBelowClientOrderId,
                        marginAccountNewOtocoRequest.pendingBelowClientOrderId)
                && Objects.equals(
                        this.pendingBelowPrice, marginAccountNewOtocoRequest.pendingBelowPrice)
                && Objects.equals(
                        this.pendingBelowStopPrice,
                        marginAccountNewOtocoRequest.pendingBelowStopPrice)
                && Objects.equals(
                        this.pendingBelowTrailingDelta,
                        marginAccountNewOtocoRequest.pendingBelowTrailingDelta)
                && Objects.equals(
                        this.pendingBelowIcebergQty,
                        marginAccountNewOtocoRequest.pendingBelowIcebergQty)
                && Objects.equals(
                        this.pendingBelowTimeInForce,
                        marginAccountNewOtocoRequest.pendingBelowTimeInForce);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                isIsolated,
                sideEffectType,
                autoRepayAtCancel,
                listClientOrderId,
                newOrderRespType,
                selfTradePreventionMode,
                workingType,
                workingSide,
                workingClientOrderId,
                workingPrice,
                workingQuantity,
                workingIcebergQty,
                workingTimeInForce,
                pendingSide,
                pendingQuantity,
                pendingAboveType,
                pendingAboveClientOrderId,
                pendingAbovePrice,
                pendingAboveStopPrice,
                pendingAboveTrailingDelta,
                pendingAboveIcebergQty,
                pendingAboveTimeInForce,
                pendingBelowType,
                pendingBelowClientOrderId,
                pendingBelowPrice,
                pendingBelowStopPrice,
                pendingBelowTrailingDelta,
                pendingBelowIcebergQty,
                pendingBelowTimeInForce);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MarginAccountNewOtocoRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		isIsolated: ").append(toIndentedString(isIsolated)).append("\n");
        sb.append("		sideEffectType: ").append(toIndentedString(sideEffectType)).append("\n");
        sb.append("		autoRepayAtCancel: ").append(toIndentedString(autoRepayAtCancel)).append("\n");
        sb.append("		listClientOrderId: ").append(toIndentedString(listClientOrderId)).append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		workingType: ").append(toIndentedString(workingType)).append("\n");
        sb.append("		workingSide: ").append(toIndentedString(workingSide)).append("\n");
        sb.append("		workingClientOrderId: ")
                .append(toIndentedString(workingClientOrderId))
                .append("\n");
        sb.append("		workingPrice: ").append(toIndentedString(workingPrice)).append("\n");
        sb.append("		workingQuantity: ").append(toIndentedString(workingQuantity)).append("\n");
        sb.append("		workingIcebergQty: ").append(toIndentedString(workingIcebergQty)).append("\n");
        sb.append("		workingTimeInForce: ")
                .append(toIndentedString(workingTimeInForce))
                .append("\n");
        sb.append("		pendingSide: ").append(toIndentedString(pendingSide)).append("\n");
        sb.append("		pendingQuantity: ").append(toIndentedString(pendingQuantity)).append("\n");
        sb.append("		pendingAboveType: ").append(toIndentedString(pendingAboveType)).append("\n");
        sb.append("		pendingAboveClientOrderId: ")
                .append(toIndentedString(pendingAboveClientOrderId))
                .append("\n");
        sb.append("		pendingAbovePrice: ").append(toIndentedString(pendingAbovePrice)).append("\n");
        sb.append("		pendingAboveStopPrice: ")
                .append(toIndentedString(pendingAboveStopPrice))
                .append("\n");
        sb.append("		pendingAboveTrailingDelta: ")
                .append(toIndentedString(pendingAboveTrailingDelta))
                .append("\n");
        sb.append("		pendingAboveIcebergQty: ")
                .append(toIndentedString(pendingAboveIcebergQty))
                .append("\n");
        sb.append("		pendingAboveTimeInForce: ")
                .append(toIndentedString(pendingAboveTimeInForce))
                .append("\n");
        sb.append("		pendingBelowType: ").append(toIndentedString(pendingBelowType)).append("\n");
        sb.append("		pendingBelowClientOrderId: ")
                .append(toIndentedString(pendingBelowClientOrderId))
                .append("\n");
        sb.append("		pendingBelowPrice: ").append(toIndentedString(pendingBelowPrice)).append("\n");
        sb.append("		pendingBelowStopPrice: ")
                .append(toIndentedString(pendingBelowStopPrice))
                .append("\n");
        sb.append("		pendingBelowTrailingDelta: ")
                .append(toIndentedString(pendingBelowTrailingDelta))
                .append("\n");
        sb.append("		pendingBelowIcebergQty: ")
                .append(toIndentedString(pendingBelowIcebergQty))
                .append("\n");
        sb.append("		pendingBelowTimeInForce: ")
                .append(toIndentedString(pendingBelowTimeInForce))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object isIsolatedValue = getIsIsolated();
        String isIsolatedValueAsString = "";
        isIsolatedValueAsString = isIsolatedValue.toString();
        sb.append("isIsolated=").append(urlEncode(isIsolatedValueAsString)).append("");
        Object sideEffectTypeValue = getSideEffectType();
        String sideEffectTypeValueAsString = "";
        sideEffectTypeValueAsString = sideEffectTypeValue.toString();
        sb.append("sideEffectType=").append(urlEncode(sideEffectTypeValueAsString)).append("");
        Object autoRepayAtCancelValue = getAutoRepayAtCancel();
        String autoRepayAtCancelValueAsString = "";
        autoRepayAtCancelValueAsString = autoRepayAtCancelValue.toString();
        sb.append("autoRepayAtCancel=")
                .append(urlEncode(autoRepayAtCancelValueAsString))
                .append("");
        Object listClientOrderIdValue = getListClientOrderId();
        String listClientOrderIdValueAsString = "";
        listClientOrderIdValueAsString = listClientOrderIdValue.toString();
        sb.append("listClientOrderId=")
                .append(urlEncode(listClientOrderIdValueAsString))
                .append("");
        Object newOrderRespTypeValue = getNewOrderRespType();
        String newOrderRespTypeValueAsString = "";
        newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
        sb.append("newOrderRespType=").append(urlEncode(newOrderRespTypeValueAsString)).append("");
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        String selfTradePreventionModeValueAsString = "";
        selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
        sb.append("selfTradePreventionMode=")
                .append(urlEncode(selfTradePreventionModeValueAsString))
                .append("");
        Object workingTypeValue = getWorkingType();
        String workingTypeValueAsString = "";
        workingTypeValueAsString = workingTypeValue.toString();
        sb.append("workingType=").append(urlEncode(workingTypeValueAsString)).append("");
        Object workingSideValue = getWorkingSide();
        String workingSideValueAsString = "";
        workingSideValueAsString = workingSideValue.toString();
        sb.append("workingSide=").append(urlEncode(workingSideValueAsString)).append("");
        Object workingClientOrderIdValue = getWorkingClientOrderId();
        String workingClientOrderIdValueAsString = "";
        workingClientOrderIdValueAsString = workingClientOrderIdValue.toString();
        sb.append("workingClientOrderId=")
                .append(urlEncode(workingClientOrderIdValueAsString))
                .append("");
        Object workingPriceValue = getWorkingPrice();
        String workingPriceValueAsString = "";
        workingPriceValueAsString = workingPriceValue.toString();
        sb.append("workingPrice=").append(urlEncode(workingPriceValueAsString)).append("");
        Object workingQuantityValue = getWorkingQuantity();
        String workingQuantityValueAsString = "";
        workingQuantityValueAsString = workingQuantityValue.toString();
        sb.append("workingQuantity=").append(urlEncode(workingQuantityValueAsString)).append("");
        Object workingIcebergQtyValue = getWorkingIcebergQty();
        String workingIcebergQtyValueAsString = "";
        workingIcebergQtyValueAsString = workingIcebergQtyValue.toString();
        sb.append("workingIcebergQty=")
                .append(urlEncode(workingIcebergQtyValueAsString))
                .append("");
        Object workingTimeInForceValue = getWorkingTimeInForce();
        String workingTimeInForceValueAsString = "";
        workingTimeInForceValueAsString = workingTimeInForceValue.toString();
        sb.append("workingTimeInForce=")
                .append(urlEncode(workingTimeInForceValueAsString))
                .append("");
        Object pendingSideValue = getPendingSide();
        String pendingSideValueAsString = "";
        pendingSideValueAsString = pendingSideValue.toString();
        sb.append("pendingSide=").append(urlEncode(pendingSideValueAsString)).append("");
        Object pendingQuantityValue = getPendingQuantity();
        String pendingQuantityValueAsString = "";
        pendingQuantityValueAsString = pendingQuantityValue.toString();
        sb.append("pendingQuantity=").append(urlEncode(pendingQuantityValueAsString)).append("");
        Object pendingAboveTypeValue = getPendingAboveType();
        String pendingAboveTypeValueAsString = "";
        pendingAboveTypeValueAsString = pendingAboveTypeValue.toString();
        sb.append("pendingAboveType=").append(urlEncode(pendingAboveTypeValueAsString)).append("");
        Object pendingAboveClientOrderIdValue = getPendingAboveClientOrderId();
        String pendingAboveClientOrderIdValueAsString = "";
        pendingAboveClientOrderIdValueAsString = pendingAboveClientOrderIdValue.toString();
        sb.append("pendingAboveClientOrderId=")
                .append(urlEncode(pendingAboveClientOrderIdValueAsString))
                .append("");
        Object pendingAbovePriceValue = getPendingAbovePrice();
        String pendingAbovePriceValueAsString = "";
        pendingAbovePriceValueAsString = pendingAbovePriceValue.toString();
        sb.append("pendingAbovePrice=")
                .append(urlEncode(pendingAbovePriceValueAsString))
                .append("");
        Object pendingAboveStopPriceValue = getPendingAboveStopPrice();
        String pendingAboveStopPriceValueAsString = "";
        pendingAboveStopPriceValueAsString = pendingAboveStopPriceValue.toString();
        sb.append("pendingAboveStopPrice=")
                .append(urlEncode(pendingAboveStopPriceValueAsString))
                .append("");
        Object pendingAboveTrailingDeltaValue = getPendingAboveTrailingDelta();
        String pendingAboveTrailingDeltaValueAsString = "";
        pendingAboveTrailingDeltaValueAsString = pendingAboveTrailingDeltaValue.toString();
        sb.append("pendingAboveTrailingDelta=")
                .append(urlEncode(pendingAboveTrailingDeltaValueAsString))
                .append("");
        Object pendingAboveIcebergQtyValue = getPendingAboveIcebergQty();
        String pendingAboveIcebergQtyValueAsString = "";
        pendingAboveIcebergQtyValueAsString = pendingAboveIcebergQtyValue.toString();
        sb.append("pendingAboveIcebergQty=")
                .append(urlEncode(pendingAboveIcebergQtyValueAsString))
                .append("");
        Object pendingAboveTimeInForceValue = getPendingAboveTimeInForce();
        String pendingAboveTimeInForceValueAsString = "";
        pendingAboveTimeInForceValueAsString = pendingAboveTimeInForceValue.toString();
        sb.append("pendingAboveTimeInForce=")
                .append(urlEncode(pendingAboveTimeInForceValueAsString))
                .append("");
        Object pendingBelowTypeValue = getPendingBelowType();
        String pendingBelowTypeValueAsString = "";
        pendingBelowTypeValueAsString = pendingBelowTypeValue.toString();
        sb.append("pendingBelowType=").append(urlEncode(pendingBelowTypeValueAsString)).append("");
        Object pendingBelowClientOrderIdValue = getPendingBelowClientOrderId();
        String pendingBelowClientOrderIdValueAsString = "";
        pendingBelowClientOrderIdValueAsString = pendingBelowClientOrderIdValue.toString();
        sb.append("pendingBelowClientOrderId=")
                .append(urlEncode(pendingBelowClientOrderIdValueAsString))
                .append("");
        Object pendingBelowPriceValue = getPendingBelowPrice();
        String pendingBelowPriceValueAsString = "";
        pendingBelowPriceValueAsString = pendingBelowPriceValue.toString();
        sb.append("pendingBelowPrice=")
                .append(urlEncode(pendingBelowPriceValueAsString))
                .append("");
        Object pendingBelowStopPriceValue = getPendingBelowStopPrice();
        String pendingBelowStopPriceValueAsString = "";
        pendingBelowStopPriceValueAsString = pendingBelowStopPriceValue.toString();
        sb.append("pendingBelowStopPrice=")
                .append(urlEncode(pendingBelowStopPriceValueAsString))
                .append("");
        Object pendingBelowTrailingDeltaValue = getPendingBelowTrailingDelta();
        String pendingBelowTrailingDeltaValueAsString = "";
        pendingBelowTrailingDeltaValueAsString = pendingBelowTrailingDeltaValue.toString();
        sb.append("pendingBelowTrailingDelta=")
                .append(urlEncode(pendingBelowTrailingDeltaValueAsString))
                .append("");
        Object pendingBelowIcebergQtyValue = getPendingBelowIcebergQty();
        String pendingBelowIcebergQtyValueAsString = "";
        pendingBelowIcebergQtyValueAsString = pendingBelowIcebergQtyValue.toString();
        sb.append("pendingBelowIcebergQty=")
                .append(urlEncode(pendingBelowIcebergQtyValueAsString))
                .append("");
        Object pendingBelowTimeInForceValue = getPendingBelowTimeInForce();
        String pendingBelowTimeInForceValueAsString = "";
        pendingBelowTimeInForceValueAsString = pendingBelowTimeInForceValue.toString();
        sb.append("pendingBelowTimeInForce=")
                .append(urlEncode(pendingBelowTimeInForceValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("isIsolated");
        openapiFields.add("sideEffectType");
        openapiFields.add("autoRepayAtCancel");
        openapiFields.add("listClientOrderId");
        openapiFields.add("newOrderRespType");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("workingType");
        openapiFields.add("workingSide");
        openapiFields.add("workingClientOrderId");
        openapiFields.add("workingPrice");
        openapiFields.add("workingQuantity");
        openapiFields.add("workingIcebergQty");
        openapiFields.add("workingTimeInForce");
        openapiFields.add("pendingSide");
        openapiFields.add("pendingQuantity");
        openapiFields.add("pendingAboveType");
        openapiFields.add("pendingAboveClientOrderId");
        openapiFields.add("pendingAbovePrice");
        openapiFields.add("pendingAboveStopPrice");
        openapiFields.add("pendingAboveTrailingDelta");
        openapiFields.add("pendingAboveIcebergQty");
        openapiFields.add("pendingAboveTimeInForce");
        openapiFields.add("pendingBelowType");
        openapiFields.add("pendingBelowClientOrderId");
        openapiFields.add("pendingBelowPrice");
        openapiFields.add("pendingBelowStopPrice");
        openapiFields.add("pendingBelowTrailingDelta");
        openapiFields.add("pendingBelowIcebergQty");
        openapiFields.add("pendingBelowTimeInForce");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("workingType");
        openapiRequiredFields.add("workingSide");
        openapiRequiredFields.add("workingPrice");
        openapiRequiredFields.add("workingQuantity");
        openapiRequiredFields.add("pendingSide");
        openapiRequiredFields.add("pendingQuantity");
        openapiRequiredFields.add("pendingAboveType");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     MarginAccountNewOtocoRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MarginAccountNewOtocoRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MarginAccountNewOtocoRequest is not"
                                        + " found in the empty JSON string",
                                MarginAccountNewOtocoRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MarginAccountNewOtocoRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `MarginAccountNewOtocoRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : MarginAccountNewOtocoRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("isIsolated") != null && !jsonObj.get("isIsolated").isJsonNull())
                && !jsonObj.get("isIsolated").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isIsolated` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isIsolated").toString()));
        }
        if ((jsonObj.get("sideEffectType") != null && !jsonObj.get("sideEffectType").isJsonNull())
                && !jsonObj.get("sideEffectType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sideEffectType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sideEffectType").toString()));
        }
        if ((jsonObj.get("listClientOrderId") != null
                        && !jsonObj.get("listClientOrderId").isJsonNull())
                && !jsonObj.get("listClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listClientOrderId").toString()));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespType.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        if ((jsonObj.get("selfTradePreventionMode") != null
                        && !jsonObj.get("selfTradePreventionMode").isJsonNull())
                && !jsonObj.get("selfTradePreventionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `selfTradePreventionMode` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("selfTradePreventionMode").toString()));
        }
        if (!jsonObj.get("workingType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workingType").toString()));
        }
        if (!jsonObj.get("workingSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workingSide").toString()));
        }
        if ((jsonObj.get("workingClientOrderId") != null
                        && !jsonObj.get("workingClientOrderId").isJsonNull())
                && !jsonObj.get("workingClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingClientOrderId` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("workingClientOrderId").toString()));
        }
        if ((jsonObj.get("workingTimeInForce") != null
                        && !jsonObj.get("workingTimeInForce").isJsonNull())
                && !jsonObj.get("workingTimeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingTimeInForce` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("workingTimeInForce").toString()));
        }
        if (!jsonObj.get("pendingSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("pendingSide").toString()));
        }
        if (!jsonObj.get("pendingAboveType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingAboveType` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("pendingAboveType").toString()));
        }
        if ((jsonObj.get("pendingAboveClientOrderId") != null
                        && !jsonObj.get("pendingAboveClientOrderId").isJsonNull())
                && !jsonObj.get("pendingAboveClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingAboveClientOrderId` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("pendingAboveClientOrderId").toString()));
        }
        if ((jsonObj.get("pendingAboveTimeInForce") != null
                        && !jsonObj.get("pendingAboveTimeInForce").isJsonNull())
                && !jsonObj.get("pendingAboveTimeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingAboveTimeInForce` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("pendingAboveTimeInForce").toString()));
        }
        if ((jsonObj.get("pendingBelowType") != null
                        && !jsonObj.get("pendingBelowType").isJsonNull())
                && !jsonObj.get("pendingBelowType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingBelowType` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("pendingBelowType").toString()));
        }
        if ((jsonObj.get("pendingBelowClientOrderId") != null
                        && !jsonObj.get("pendingBelowClientOrderId").isJsonNull())
                && !jsonObj.get("pendingBelowClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingBelowClientOrderId` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("pendingBelowClientOrderId").toString()));
        }
        if ((jsonObj.get("pendingBelowTimeInForce") != null
                        && !jsonObj.get("pendingBelowTimeInForce").isJsonNull())
                && !jsonObj.get("pendingBelowTimeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `pendingBelowTimeInForce` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("pendingBelowTimeInForce").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MarginAccountNewOtocoRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MarginAccountNewOtocoRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MarginAccountNewOtocoRequest> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(MarginAccountNewOtocoRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MarginAccountNewOtocoRequest>() {
                        @Override
                        public void write(JsonWriter out, MarginAccountNewOtocoRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MarginAccountNewOtocoRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MarginAccountNewOtocoRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MarginAccountNewOtocoRequest
     * @throws IOException if the JSON string is invalid with respect to
     *     MarginAccountNewOtocoRequest
     */
    public static MarginAccountNewOtocoRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MarginAccountNewOtocoRequest.class);
    }

    /**
     * Convert an instance of MarginAccountNewOtocoRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
