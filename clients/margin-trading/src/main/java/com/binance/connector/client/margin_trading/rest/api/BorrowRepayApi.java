/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.margin_trading.rest.model.GetFutureHourlyInterestRateResponse;
import com.binance.connector.client.margin_trading.rest.model.GetInterestHistoryResponse;
import com.binance.connector.client.margin_trading.rest.model.MarginAccountBorrowRepayRequest;
import com.binance.connector.client.margin_trading.rest.model.MarginAccountBorrowRepayResponse;
import com.binance.connector.client.margin_trading.rest.model.QueryBorrowRepayRecordsInMarginAccountResponse;
import com.binance.connector.client.margin_trading.rest.model.QueryMarginInterestRateHistoryResponse;
import com.binance.connector.client.margin_trading.rest.model.QueryMaxBorrowResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class BorrowRepayApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-margin-trading/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public BorrowRepayApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public BorrowRepayApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFutureHourlyInterestRate
     *
     * @param assets List of assets, separated by commas, up to 20 (required)
     * @param isIsolated for isolated margin or not, \&quot;TRUE\&quot;, \&quot;FALSE\&quot;
     *     (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get future hourly interest rate </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Get-a-future-hourly-interest-rate">Get
     *     future hourly interest rate (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getFutureHourlyInterestRateCall(String assets, String isIsolated)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/margin/next-hourly-interest-rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assets != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("assets", assets));
        }

        if (isIsolated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isIsolated", isIsolated));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFutureHourlyInterestRateValidateBeforeCall(
            String assets, String isIsolated) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {assets, isIsolated};
            Method method =
                    this.getClass()
                            .getMethod("getFutureHourlyInterestRate", String.class, String.class);
            Set<ConstraintViolation<BorrowRepayApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFutureHourlyInterestRateCall(assets, isIsolated);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get future hourly interest rate (USER_DATA) Get future hourly interest rate Weight: 100
     *
     * @param assets List of assets, separated by commas, up to 20 (required)
     * @param isIsolated for isolated margin or not, \&quot;TRUE\&quot;, \&quot;FALSE\&quot;
     *     (required)
     * @return ApiResponse&lt;GetFutureHourlyInterestRateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get future hourly interest rate </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Get-a-future-hourly-interest-rate">Get
     *     future hourly interest rate (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetFutureHourlyInterestRateResponse> getFutureHourlyInterestRate(
            @NotNull String assets, @NotNull String isIsolated) throws ApiException {
        okhttp3.Call localVarCall =
                getFutureHourlyInterestRateValidateBeforeCall(assets, isIsolated);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFutureHourlyInterestRateResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getInterestHistory
     *
     * @param asset (optional)
     * @param isolatedSymbol isolated symbol (optional)
     * @param startTime 只支持查询最近90天的数据 (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow No more than 60000 (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Interest History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Get-Interest-History">Get
     *     Interest History (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getInterestHistoryCall(
            String asset,
            String isolatedSymbol,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/margin/interestHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (isolatedSymbol != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("isolatedSymbol", isolatedSymbol));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInterestHistoryValidateBeforeCall(
            String asset,
            String isolatedSymbol,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                asset, isolatedSymbol, startTime, endTime, current, size, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getInterestHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<BorrowRepayApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getInterestHistoryCall(
                        asset, isolatedSymbol, startTime, endTime, current, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Interest History (USER_DATA) Get Interest History * Response in descending order * If
     * isolatedSymbol is not sent, crossed margin data will be returned * The max interval between
     * &#x60;startTime&#x60; and &#x60;endTime&#x60; is 30 days. It is a MUST to ensure data
     * correctness. * If &#x60;startTime&#x60;and &#x60;endTime&#x60; not sent, return records of
     * the last 7 days by default. * If &#x60;startTime&#x60; is sent and &#x60;endTime&#x60; is not
     * sent, return records of [max(&#x60;startTime&#x60;, now-30d), now]. * If
     * &#x60;startTime&#x60; is not sent and &#x60;endTime&#x60; is sent, return records of
     * [&#x60;endTime&#x60;-7, &#x60;endTime&#x60;] * &#x60;type&#x60; in response has 4 enums: *
     * &#x60;PERIODIC&#x60; interest charged per hour * &#x60;ON_BORROW&#x60; first interest charged
     * on borrow * &#x60;PERIODIC_CONVERTED&#x60; interest charged per hour converted into BNB *
     * &#x60;ON_BORROW_CONVERTED&#x60; first interest charged on borrow converted into BNB *
     * &#x60;PORTFOLIO&#x60; interest charged daily on the portfolio margin negative balance Weight:
     * 1(IP)
     *
     * @param asset (optional)
     * @param isolatedSymbol isolated symbol (optional)
     * @param startTime 只支持查询最近90天的数据 (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow No more than 60000 (optional)
     * @return ApiResponse&lt;GetInterestHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Interest History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Get-Interest-History">Get
     *     Interest History (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetInterestHistoryResponse> getInterestHistory(
            String asset,
            String isolatedSymbol,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getInterestHistoryValidateBeforeCall(
                        asset, isolatedSymbol, startTime, endTime, current, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetInterestHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for marginAccountBorrowRepay
     *
     * @param marginAccountBorrowRepayRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Margin account borrow/repay </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Margin-account-borrow-repay">Margin
     *     account borrow/repay(MARGIN) Documentation</a>
     */
    private okhttp3.Call marginAccountBorrowRepayCall(
            MarginAccountBorrowRepayRequest marginAccountBorrowRepayRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/margin/borrow-repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marginAccountBorrowRepayRequest.getAsset() != null) {
            localVarFormParams.put("asset", marginAccountBorrowRepayRequest.getAsset());
        }

        if (marginAccountBorrowRepayRequest.getIsIsolated() != null) {
            localVarFormParams.put("isIsolated", marginAccountBorrowRepayRequest.getIsIsolated());
        }

        if (marginAccountBorrowRepayRequest.getSymbol() != null) {
            localVarFormParams.put("symbol", marginAccountBorrowRepayRequest.getSymbol());
        }

        if (marginAccountBorrowRepayRequest.getAmount() != null) {
            localVarFormParams.put("amount", marginAccountBorrowRepayRequest.getAmount());
        }

        if (marginAccountBorrowRepayRequest.getType() != null) {
            localVarFormParams.put("type", marginAccountBorrowRepayRequest.getType());
        }

        if (marginAccountBorrowRepayRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", marginAccountBorrowRepayRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginAccountBorrowRepayValidateBeforeCall(
            MarginAccountBorrowRepayRequest marginAccountBorrowRepayRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {marginAccountBorrowRepayRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "marginAccountBorrowRepay",
                                    MarginAccountBorrowRepayRequest.class);
            Set<ConstraintViolation<BorrowRepayApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return marginAccountBorrowRepayCall(marginAccountBorrowRepayRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Margin account borrow/repay(MARGIN) Margin account borrow/repay(MARGIN) Weight: 1500
     *
     * @param marginAccountBorrowRepayRequest (required)
     * @return ApiResponse&lt;MarginAccountBorrowRepayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Margin account borrow/repay </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Margin-account-borrow-repay">Margin
     *     account borrow/repay(MARGIN) Documentation</a>
     */
    public ApiResponse<MarginAccountBorrowRepayResponse> marginAccountBorrowRepay(
            @Valid @NotNull MarginAccountBorrowRepayRequest marginAccountBorrowRepayRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                marginAccountBorrowRepayValidateBeforeCall(marginAccountBorrowRepayRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<MarginAccountBorrowRepayResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryBorrowRepayRecordsInMarginAccount
     *
     * @param type MARGIN,ISOLATED (required)
     * @param asset (optional)
     * @param isolatedSymbol isolated symbol (optional)
     * @param txId &#x60;tranId&#x60; in &#x60;POST /sapi/v1/margin/loan&#x60; (optional)
     * @param startTime 只支持查询最近90天的数据 (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow No more than 60000 (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> borrow/repay records in Margin account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Borrow-Repay">Query
     *     borrow/repay records in Margin account(USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryBorrowRepayRecordsInMarginAccountCall(
            String type,
            String asset,
            String isolatedSymbol,
            Long txId,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/margin/borrow-repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (isolatedSymbol != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("isolatedSymbol", isolatedSymbol));
        }

        if (txId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("txId", txId));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryBorrowRepayRecordsInMarginAccountValidateBeforeCall(
            String type,
            String asset,
            String isolatedSymbol,
            Long txId,
            Long startTime,
            Long endTime,
            Long current,
            Long size,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                type, asset, isolatedSymbol, txId, startTime, endTime, current, size, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryBorrowRepayRecordsInMarginAccount",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<BorrowRepayApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryBorrowRepayRecordsInMarginAccountCall(
                        type,
                        asset,
                        isolatedSymbol,
                        txId,
                        startTime,
                        endTime,
                        current,
                        size,
                        recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query borrow/repay records in Margin account(USER_DATA) Query borrow/repay records in Margin
     * account * &#x60;txId&#x60; or &#x60;startTime&#x60; must be sent. &#x60;txId&#x60; takes
     * precedence. * If an asset is sent, data within 30 days before &#x60;endTime&#x60;; If an
     * asset is not sent, data within 7 days before &#x60;endTime&#x60; * If neither
     * &#x60;startTime&#x60; nor &#x60;endTime&#x60; is sent, the recent 7-day data will be
     * returned. * &#x60;startTime&#x60; set as &#x60;endTime&#x60; - 7days by default,
     * &#x60;endTime&#x60; set as current time by default Weight: 10(IP)
     *
     * @param type MARGIN,ISOLATED (required)
     * @param asset (optional)
     * @param isolatedSymbol isolated symbol (optional)
     * @param txId &#x60;tranId&#x60; in &#x60;POST /sapi/v1/margin/loan&#x60; (optional)
     * @param startTime 只支持查询最近90天的数据 (optional)
     * @param endTime (optional)
     * @param current Currently querying page. Start from 1. Default:1 (optional)
     * @param size Default:10 Max:100 (optional)
     * @param recvWindow No more than 60000 (optional)
     * @return ApiResponse&lt;QueryBorrowRepayRecordsInMarginAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> borrow/repay records in Margin account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Borrow-Repay">Query
     *     borrow/repay records in Margin account(USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryBorrowRepayRecordsInMarginAccountResponse>
            queryBorrowRepayRecordsInMarginAccount(
                    @NotNull String type,
                    String asset,
                    String isolatedSymbol,
                    Long txId,
                    Long startTime,
                    Long endTime,
                    Long current,
                    Long size,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                queryBorrowRepayRecordsInMarginAccountValidateBeforeCall(
                        type,
                        asset,
                        isolatedSymbol,
                        txId,
                        startTime,
                        endTime,
                        current,
                        size,
                        recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryBorrowRepayRecordsInMarginAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryMarginInterestRateHistory
     *
     * @param asset (required)
     * @param vipLevel User&#39;s current specific margin data will be returned if vipLevel is
     *     omitted (optional)
     * @param startTime 只支持查询最近90天的数据 (optional)
     * @param endTime (optional)
     * @param recvWindow No more than 60000 (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Margin Interest Rate History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Margin-Interest-Rate-History">Query
     *     Margin Interest Rate History (USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryMarginInterestRateHistoryCall(
            String asset, Long vipLevel, Long startTime, Long endTime, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/margin/interestRateHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (vipLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vipLevel", vipLevel));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryMarginInterestRateHistoryValidateBeforeCall(
            String asset, Long vipLevel, Long startTime, Long endTime, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {asset, vipLevel, startTime, endTime, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryMarginInterestRateHistory",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<BorrowRepayApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryMarginInterestRateHistoryCall(
                        asset, vipLevel, startTime, endTime, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Margin Interest Rate History (USER_DATA) Query Margin Interest Rate History Weight:
     * 1(IP)
     *
     * @param asset (required)
     * @param vipLevel User&#39;s current specific margin data will be returned if vipLevel is
     *     omitted (optional)
     * @param startTime 只支持查询最近90天的数据 (optional)
     * @param endTime (optional)
     * @param recvWindow No more than 60000 (optional)
     * @return ApiResponse&lt;QueryMarginInterestRateHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Margin Interest Rate History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Margin-Interest-Rate-History">Query
     *     Margin Interest Rate History (USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryMarginInterestRateHistoryResponse> queryMarginInterestRateHistory(
            @NotNull String asset, Long vipLevel, Long startTime, Long endTime, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                queryMarginInterestRateHistoryValidateBeforeCall(
                        asset, vipLevel, startTime, endTime, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryMarginInterestRateHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryMaxBorrow
     *
     * @param asset (required)
     * @param isolatedSymbol isolated symbol (optional)
     * @param recvWindow No more than 60000 (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Max Borrow </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Max-Borrow">Query
     *     Max Borrow (USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryMaxBorrowCall(String asset, String isolatedSymbol, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/margin/maxBorrowable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (isolatedSymbol != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("isolatedSymbol", isolatedSymbol));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryMaxBorrowValidateBeforeCall(
            String asset, String isolatedSymbol, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {asset, isolatedSymbol, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod("queryMaxBorrow", String.class, String.class, Long.class);
            Set<ConstraintViolation<BorrowRepayApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryMaxBorrowCall(asset, isolatedSymbol, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Max Borrow (USER_DATA) Query Max Borrow * If isolatedSymbol is not sent, crossed margin
     * data will be sent. * &#x60;borrowLimit&#x60; is also available from
     * [https://www.binance.com/en/margin-fee](https://www.binance.com/en/margin-fee) Weight: 50(IP)
     *
     * @param asset (required)
     * @param isolatedSymbol isolated symbol (optional)
     * @param recvWindow No more than 60000 (optional)
     * @return ApiResponse&lt;QueryMaxBorrowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Max Borrow </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/margin_trading/borrow-and-repay/Query-Max-Borrow">Query
     *     Max Borrow (USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryMaxBorrowResponse> queryMaxBorrow(
            @NotNull String asset, String isolatedSymbol, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                queryMaxBorrowValidateBeforeCall(asset, isolatedSymbol, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryMaxBorrowResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
