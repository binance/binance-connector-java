/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetAllMarginAssetsResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetAllMarginAssetsResponseInner {
    public static final String SERIALIZED_NAME_ASSET_FULL_NAME = "assetFullName";

    @SerializedName(SERIALIZED_NAME_ASSET_FULL_NAME)
    @jakarta.annotation.Nullable
    private String assetFullName;

    public static final String SERIALIZED_NAME_ASSET_NAME = "assetName";

    @SerializedName(SERIALIZED_NAME_ASSET_NAME)
    @jakarta.annotation.Nullable
    private String assetName;

    public static final String SERIALIZED_NAME_IS_BORROWABLE = "isBorrowable";

    @SerializedName(SERIALIZED_NAME_IS_BORROWABLE)
    @jakarta.annotation.Nullable
    private Boolean isBorrowable;

    public static final String SERIALIZED_NAME_IS_MORTGAGEABLE = "isMortgageable";

    @SerializedName(SERIALIZED_NAME_IS_MORTGAGEABLE)
    @jakarta.annotation.Nullable
    private Boolean isMortgageable;

    public static final String SERIALIZED_NAME_USER_MIN_BORROW = "userMinBorrow";

    @SerializedName(SERIALIZED_NAME_USER_MIN_BORROW)
    @jakarta.annotation.Nullable
    private String userMinBorrow;

    public static final String SERIALIZED_NAME_USER_MIN_REPAY = "userMinRepay";

    @SerializedName(SERIALIZED_NAME_USER_MIN_REPAY)
    @jakarta.annotation.Nullable
    private String userMinRepay;

    public static final String SERIALIZED_NAME_DELIST_TIME = "delistTime";

    @SerializedName(SERIALIZED_NAME_DELIST_TIME)
    @jakarta.annotation.Nullable
    private Long delistTime;

    public GetAllMarginAssetsResponseInner() {}

    public GetAllMarginAssetsResponseInner assetFullName(
            @jakarta.annotation.Nullable String assetFullName) {
        this.assetFullName = assetFullName;
        return this;
    }

    /**
     * Get assetFullName
     *
     * @return assetFullName
     */
    @jakarta.annotation.Nullable
    public String getAssetFullName() {
        return assetFullName;
    }

    public void setAssetFullName(@jakarta.annotation.Nullable String assetFullName) {
        this.assetFullName = assetFullName;
    }

    public GetAllMarginAssetsResponseInner assetName(
            @jakarta.annotation.Nullable String assetName) {
        this.assetName = assetName;
        return this;
    }

    /**
     * Get assetName
     *
     * @return assetName
     */
    @jakarta.annotation.Nullable
    public String getAssetName() {
        return assetName;
    }

    public void setAssetName(@jakarta.annotation.Nullable String assetName) {
        this.assetName = assetName;
    }

    public GetAllMarginAssetsResponseInner isBorrowable(
            @jakarta.annotation.Nullable Boolean isBorrowable) {
        this.isBorrowable = isBorrowable;
        return this;
    }

    /**
     * Get isBorrowable
     *
     * @return isBorrowable
     */
    @jakarta.annotation.Nullable
    public Boolean getIsBorrowable() {
        return isBorrowable;
    }

    public void setIsBorrowable(@jakarta.annotation.Nullable Boolean isBorrowable) {
        this.isBorrowable = isBorrowable;
    }

    public GetAllMarginAssetsResponseInner isMortgageable(
            @jakarta.annotation.Nullable Boolean isMortgageable) {
        this.isMortgageable = isMortgageable;
        return this;
    }

    /**
     * Get isMortgageable
     *
     * @return isMortgageable
     */
    @jakarta.annotation.Nullable
    public Boolean getIsMortgageable() {
        return isMortgageable;
    }

    public void setIsMortgageable(@jakarta.annotation.Nullable Boolean isMortgageable) {
        this.isMortgageable = isMortgageable;
    }

    public GetAllMarginAssetsResponseInner userMinBorrow(
            @jakarta.annotation.Nullable String userMinBorrow) {
        this.userMinBorrow = userMinBorrow;
        return this;
    }

    /**
     * Get userMinBorrow
     *
     * @return userMinBorrow
     */
    @jakarta.annotation.Nullable
    public String getUserMinBorrow() {
        return userMinBorrow;
    }

    public void setUserMinBorrow(@jakarta.annotation.Nullable String userMinBorrow) {
        this.userMinBorrow = userMinBorrow;
    }

    public GetAllMarginAssetsResponseInner userMinRepay(
            @jakarta.annotation.Nullable String userMinRepay) {
        this.userMinRepay = userMinRepay;
        return this;
    }

    /**
     * Get userMinRepay
     *
     * @return userMinRepay
     */
    @jakarta.annotation.Nullable
    public String getUserMinRepay() {
        return userMinRepay;
    }

    public void setUserMinRepay(@jakarta.annotation.Nullable String userMinRepay) {
        this.userMinRepay = userMinRepay;
    }

    public GetAllMarginAssetsResponseInner delistTime(
            @jakarta.annotation.Nullable Long delistTime) {
        this.delistTime = delistTime;
        return this;
    }

    /**
     * Get delistTime
     *
     * @return delistTime
     */
    @jakarta.annotation.Nullable
    public Long getDelistTime() {
        return delistTime;
    }

    public void setDelistTime(@jakarta.annotation.Nullable Long delistTime) {
        this.delistTime = delistTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAllMarginAssetsResponseInner getAllMarginAssetsResponseInner =
                (GetAllMarginAssetsResponseInner) o;
        return Objects.equals(this.assetFullName, getAllMarginAssetsResponseInner.assetFullName)
                && Objects.equals(this.assetName, getAllMarginAssetsResponseInner.assetName)
                && Objects.equals(this.isBorrowable, getAllMarginAssetsResponseInner.isBorrowable)
                && Objects.equals(
                        this.isMortgageable, getAllMarginAssetsResponseInner.isMortgageable)
                && Objects.equals(this.userMinBorrow, getAllMarginAssetsResponseInner.userMinBorrow)
                && Objects.equals(this.userMinRepay, getAllMarginAssetsResponseInner.userMinRepay)
                && Objects.equals(this.delistTime, getAllMarginAssetsResponseInner.delistTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                assetFullName,
                assetName,
                isBorrowable,
                isMortgageable,
                userMinBorrow,
                userMinRepay,
                delistTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetAllMarginAssetsResponseInner {\n");
        sb.append("		assetFullName: ").append(toIndentedString(assetFullName)).append("\n");
        sb.append("		assetName: ").append(toIndentedString(assetName)).append("\n");
        sb.append("		isBorrowable: ").append(toIndentedString(isBorrowable)).append("\n");
        sb.append("		isMortgageable: ").append(toIndentedString(isMortgageable)).append("\n");
        sb.append("		userMinBorrow: ").append(toIndentedString(userMinBorrow)).append("\n");
        sb.append("		userMinRepay: ").append(toIndentedString(userMinRepay)).append("\n");
        sb.append("		delistTime: ").append(toIndentedString(delistTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object assetFullNameValue = getAssetFullName();
        String assetFullNameValueAsString = "";
        assetFullNameValueAsString = assetFullNameValue.toString();
        sb.append("assetFullName=").append(urlEncode(assetFullNameValueAsString)).append("");
        Object assetNameValue = getAssetName();
        String assetNameValueAsString = "";
        assetNameValueAsString = assetNameValue.toString();
        sb.append("assetName=").append(urlEncode(assetNameValueAsString)).append("");
        Object isBorrowableValue = getIsBorrowable();
        String isBorrowableValueAsString = "";
        isBorrowableValueAsString = isBorrowableValue.toString();
        sb.append("isBorrowable=").append(urlEncode(isBorrowableValueAsString)).append("");
        Object isMortgageableValue = getIsMortgageable();
        String isMortgageableValueAsString = "";
        isMortgageableValueAsString = isMortgageableValue.toString();
        sb.append("isMortgageable=").append(urlEncode(isMortgageableValueAsString)).append("");
        Object userMinBorrowValue = getUserMinBorrow();
        String userMinBorrowValueAsString = "";
        userMinBorrowValueAsString = userMinBorrowValue.toString();
        sb.append("userMinBorrow=").append(urlEncode(userMinBorrowValueAsString)).append("");
        Object userMinRepayValue = getUserMinRepay();
        String userMinRepayValueAsString = "";
        userMinRepayValueAsString = userMinRepayValue.toString();
        sb.append("userMinRepay=").append(urlEncode(userMinRepayValueAsString)).append("");
        Object delistTimeValue = getDelistTime();
        String delistTimeValueAsString = "";
        delistTimeValueAsString = delistTimeValue.toString();
        sb.append("delistTime=").append(urlEncode(delistTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("assetFullName");
        openapiFields.add("assetName");
        openapiFields.add("isBorrowable");
        openapiFields.add("isMortgageable");
        openapiFields.add("userMinBorrow");
        openapiFields.add("userMinRepay");
        openapiFields.add("delistTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetAllMarginAssetsResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetAllMarginAssetsResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetAllMarginAssetsResponseInner is not"
                                        + " found in the empty JSON string",
                                GetAllMarginAssetsResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetAllMarginAssetsResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetAllMarginAssetsResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("assetFullName") != null && !jsonObj.get("assetFullName").isJsonNull())
                && !jsonObj.get("assetFullName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetFullName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("assetFullName").toString()));
        }
        if ((jsonObj.get("assetName") != null && !jsonObj.get("assetName").isJsonNull())
                && !jsonObj.get("assetName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetName` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("assetName").toString()));
        }
        if ((jsonObj.get("userMinBorrow") != null && !jsonObj.get("userMinBorrow").isJsonNull())
                && !jsonObj.get("userMinBorrow").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `userMinBorrow` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("userMinBorrow").toString()));
        }
        if ((jsonObj.get("userMinRepay") != null && !jsonObj.get("userMinRepay").isJsonNull())
                && !jsonObj.get("userMinRepay").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `userMinRepay` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("userMinRepay").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetAllMarginAssetsResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetAllMarginAssetsResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetAllMarginAssetsResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetAllMarginAssetsResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetAllMarginAssetsResponseInner>() {
                        @Override
                        public void write(JsonWriter out, GetAllMarginAssetsResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetAllMarginAssetsResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetAllMarginAssetsResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetAllMarginAssetsResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetAllMarginAssetsResponseInner
     */
    public static GetAllMarginAssetsResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetAllMarginAssetsResponseInner.class);
    }

    /**
     * Convert an instance of GetAllMarginAssetsResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
