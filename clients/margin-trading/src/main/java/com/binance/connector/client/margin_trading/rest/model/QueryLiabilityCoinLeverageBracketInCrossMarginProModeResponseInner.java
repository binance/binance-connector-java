/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner {
    public static final String SERIALIZED_NAME_ASSET_NAMES = "assetNames";

    @SerializedName(SERIALIZED_NAME_ASSET_NAMES)
    @jakarta.annotation.Nullable
    private List<String> assetNames;

    public static final String SERIALIZED_NAME_RANK = "rank";

    @SerializedName(SERIALIZED_NAME_RANK)
    @jakarta.annotation.Nullable
    private Long rank;

    public static final String SERIALIZED_NAME_BRACKETS = "brackets";

    @SerializedName(SERIALIZED_NAME_BRACKETS)
    @jakarta.annotation.Nullable
    private List<
                    @Valid
                    QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner>
            brackets;

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner() {}

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner assetNames(
            @jakarta.annotation.Nullable List<String> assetNames) {
        this.assetNames = assetNames;
        return this;
    }

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner addAssetNamesItem(
            String assetNamesItem) {
        if (this.assetNames == null) {
            this.assetNames = new ArrayList<>();
        }
        this.assetNames.add(assetNamesItem);
        return this;
    }

    /**
     * Get assetNames
     *
     * @return assetNames
     */
    @jakarta.annotation.Nullable
    public List<String> getAssetNames() {
        return assetNames;
    }

    public void setAssetNames(@jakarta.annotation.Nullable List<String> assetNames) {
        this.assetNames = assetNames;
    }

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner rank(
            @jakarta.annotation.Nullable Long rank) {
        this.rank = rank;
        return this;
    }

    /**
     * Get rank
     *
     * @return rank
     */
    @jakarta.annotation.Nullable
    public Long getRank() {
        return rank;
    }

    public void setRank(@jakarta.annotation.Nullable Long rank) {
        this.rank = rank;
    }

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner brackets(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner>
                            brackets) {
        this.brackets = brackets;
        return this;
    }

    public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner addBracketsItem(
            QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                    bracketsItem) {
        if (this.brackets == null) {
            this.brackets = new ArrayList<>();
        }
        this.brackets.add(bracketsItem);
        return this;
    }

    /**
     * Get brackets
     *
     * @return brackets
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<
                    @Valid
                    QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner>
            getBrackets() {
        return brackets;
    }

    public void setBrackets(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner>
                            brackets) {
        this.brackets = brackets;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
                queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner =
                        (QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner) o;
        return Objects.equals(
                        this.assetNames,
                        queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
                                .assetNames)
                && Objects.equals(
                        this.rank,
                        queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner.rank)
                && Objects.equals(
                        this.brackets,
                        queryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
                                .brackets);
    }

    @Override
    public int hashCode() {
        return Objects.hash(assetNames, rank, brackets);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner {\n");
        sb.append("		assetNames: ").append(toIndentedString(assetNames)).append("\n");
        sb.append("		rank: ").append(toIndentedString(rank)).append("\n");
        sb.append("		brackets: ").append(toIndentedString(brackets)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object assetNamesValue = getAssetNames();
        String assetNamesValueAsString = "";
        assetNamesValueAsString =
                (String)
                        ((Collection) assetNamesValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("assetNames=").append(urlEncode(assetNamesValueAsString)).append("");
        Object rankValue = getRank();
        String rankValueAsString = "";
        rankValueAsString = rankValue.toString();
        sb.append("rank=").append(urlEncode(rankValueAsString)).append("");
        Object bracketsValue = getBrackets();
        String bracketsValueAsString = "";
        bracketsValueAsString =
                (String)
                        ((Collection) bracketsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("brackets=").append(urlEncode(bracketsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("assetNames");
        openapiFields.add("rank");
        openapiFields.add("brackets");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner"
                                    + " is not found in the empty JSON string",
                                QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner.openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        // ensure the optional json data is an array if present
        if (jsonObj.get("assetNames") != null
                && !jsonObj.get("assetNames").isJsonNull()
                && !jsonObj.get("assetNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetNames` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("assetNames").toString()));
        }
        if (jsonObj.get("brackets") != null && !jsonObj.get("brackets").isJsonNull()) {
            JsonArray jsonArraybrackets = jsonObj.getAsJsonArray("brackets");
            if (jsonArraybrackets != null) {
                // ensure the json data is an array
                if (!jsonObj.get("brackets").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `brackets` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("brackets").toString()));
                }

                // validate the optional field `brackets` (array)
                for (int i = 0; i < jsonArraybrackets.size(); i++) {
                    QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInnerBracketsInner
                            .validateJsonElement(jsonArraybrackets.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
                                        value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
                                read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
     * given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner
     */
    public static QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner.class);
    }

    /**
     * Convert an instance of QueryLiabilityCoinLeverageBracketInCrossMarginProModeResponseInner to
     * an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
