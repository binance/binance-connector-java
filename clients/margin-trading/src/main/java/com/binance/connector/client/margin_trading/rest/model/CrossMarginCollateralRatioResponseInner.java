/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** CrossMarginCollateralRatioResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class CrossMarginCollateralRatioResponseInner {
    public static final String SERIALIZED_NAME_COLLATERALS = "collaterals";

    @SerializedName(SERIALIZED_NAME_COLLATERALS)
    @jakarta.annotation.Nullable
    private List<@Valid CrossMarginCollateralRatioResponseInnerCollateralsInner> collaterals;

    public static final String SERIALIZED_NAME_ASSET_NAMES = "assetNames";

    @SerializedName(SERIALIZED_NAME_ASSET_NAMES)
    @jakarta.annotation.Nullable
    private List<String> assetNames;

    public CrossMarginCollateralRatioResponseInner() {}

    public CrossMarginCollateralRatioResponseInner collaterals(
            @jakarta.annotation.Nullable
                    List<@Valid CrossMarginCollateralRatioResponseInnerCollateralsInner>
                            collaterals) {
        this.collaterals = collaterals;
        return this;
    }

    public CrossMarginCollateralRatioResponseInner addCollateralsItem(
            CrossMarginCollateralRatioResponseInnerCollateralsInner collateralsItem) {
        if (this.collaterals == null) {
            this.collaterals = new ArrayList<>();
        }
        this.collaterals.add(collateralsItem);
        return this;
    }

    /**
     * Get collaterals
     *
     * @return collaterals
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid CrossMarginCollateralRatioResponseInnerCollateralsInner> getCollaterals() {
        return collaterals;
    }

    public void setCollaterals(
            @jakarta.annotation.Nullable
                    List<@Valid CrossMarginCollateralRatioResponseInnerCollateralsInner>
                            collaterals) {
        this.collaterals = collaterals;
    }

    public CrossMarginCollateralRatioResponseInner assetNames(
            @jakarta.annotation.Nullable List<String> assetNames) {
        this.assetNames = assetNames;
        return this;
    }

    public CrossMarginCollateralRatioResponseInner addAssetNamesItem(String assetNamesItem) {
        if (this.assetNames == null) {
            this.assetNames = new ArrayList<>();
        }
        this.assetNames.add(assetNamesItem);
        return this;
    }

    /**
     * Get assetNames
     *
     * @return assetNames
     */
    @jakarta.annotation.Nullable
    public List<String> getAssetNames() {
        return assetNames;
    }

    public void setAssetNames(@jakarta.annotation.Nullable List<String> assetNames) {
        this.assetNames = assetNames;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CrossMarginCollateralRatioResponseInner crossMarginCollateralRatioResponseInner =
                (CrossMarginCollateralRatioResponseInner) o;
        return Objects.equals(this.collaterals, crossMarginCollateralRatioResponseInner.collaterals)
                && Objects.equals(
                        this.assetNames, crossMarginCollateralRatioResponseInner.assetNames);
    }

    @Override
    public int hashCode() {
        return Objects.hash(collaterals, assetNames);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CrossMarginCollateralRatioResponseInner {\n");
        sb.append("		collaterals: ").append(toIndentedString(collaterals)).append("\n");
        sb.append("		assetNames: ").append(toIndentedString(assetNames)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object collateralsValue = getCollaterals();
        String collateralsValueAsString = "";
        collateralsValueAsString =
                (String)
                        ((Collection) collateralsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("collaterals=").append(urlEncode(collateralsValueAsString)).append("");
        Object assetNamesValue = getAssetNames();
        String assetNamesValueAsString = "";
        assetNamesValueAsString =
                (String)
                        ((Collection) assetNamesValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("assetNames=").append(urlEncode(assetNamesValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("collaterals");
        openapiFields.add("assetNames");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     CrossMarginCollateralRatioResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CrossMarginCollateralRatioResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " CrossMarginCollateralRatioResponseInner is not found in the"
                                    + " empty JSON string",
                                CrossMarginCollateralRatioResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CrossMarginCollateralRatioResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `CrossMarginCollateralRatioResponseInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("collaterals") != null && !jsonObj.get("collaterals").isJsonNull()) {
            JsonArray jsonArraycollaterals = jsonObj.getAsJsonArray("collaterals");
            if (jsonArraycollaterals != null) {
                // ensure the json data is an array
                if (!jsonObj.get("collaterals").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `collaterals` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("collaterals").toString()));
                }

                // validate the optional field `collaterals` (array)
                for (int i = 0; i < jsonArraycollaterals.size(); i++) {
                    CrossMarginCollateralRatioResponseInnerCollateralsInner.validateJsonElement(
                            jsonArraycollaterals.get(i));
                }
                ;
            }
        }
        // ensure the optional json data is an array if present
        if (jsonObj.get("assetNames") != null
                && !jsonObj.get("assetNames").isJsonNull()
                && !jsonObj.get("assetNames").isJsonArray()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `assetNames` to be an array in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("assetNames").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CrossMarginCollateralRatioResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes 'CrossMarginCollateralRatioResponseInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CrossMarginCollateralRatioResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(CrossMarginCollateralRatioResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CrossMarginCollateralRatioResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, CrossMarginCollateralRatioResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CrossMarginCollateralRatioResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CrossMarginCollateralRatioResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of CrossMarginCollateralRatioResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     CrossMarginCollateralRatioResponseInner
     */
    public static CrossMarginCollateralRatioResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, CrossMarginCollateralRatioResponseInner.class);
    }

    /**
     * Convert an instance of CrossMarginCollateralRatioResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
