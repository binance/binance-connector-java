/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** MarginAccountNewOcoRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MarginAccountNewOcoRequest {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_IS_ISOLATED = "isIsolated";

    @SerializedName(SERIALIZED_NAME_IS_ISOLATED)
    @jakarta.annotation.Nullable
    private String isIsolated;

    public static final String SERIALIZED_NAME_LIST_CLIENT_ORDER_ID = "listClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIST_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String listClientOrderId;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nonnull
    private Side side;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nonnull
    private Double quantity;

    public static final String SERIALIZED_NAME_LIMIT_CLIENT_ORDER_ID = "limitClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIMIT_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String limitClientOrderId;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nonnull
    private Double price;

    public static final String SERIALIZED_NAME_LIMIT_ICEBERG_QTY = "limitIcebergQty";

    @SerializedName(SERIALIZED_NAME_LIMIT_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double limitIcebergQty;

    public static final String SERIALIZED_NAME_STOP_CLIENT_ORDER_ID = "stopClientOrderId";

    @SerializedName(SERIALIZED_NAME_STOP_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String stopClientOrderId;

    public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";

    @SerializedName(SERIALIZED_NAME_STOP_PRICE)
    @jakarta.annotation.Nonnull
    private Double stopPrice;

    public static final String SERIALIZED_NAME_STOP_LIMIT_PRICE = "stopLimitPrice";

    @SerializedName(SERIALIZED_NAME_STOP_LIMIT_PRICE)
    @jakarta.annotation.Nullable
    private Double stopLimitPrice;

    public static final String SERIALIZED_NAME_STOP_ICEBERG_QTY = "stopIcebergQty";

    @SerializedName(SERIALIZED_NAME_STOP_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double stopIcebergQty;

    public static final String SERIALIZED_NAME_STOP_LIMIT_TIME_IN_FORCE = "stopLimitTimeInForce";

    @SerializedName(SERIALIZED_NAME_STOP_LIMIT_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String stopLimitTimeInForce;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespType newOrderRespType;

    public static final String SERIALIZED_NAME_SIDE_EFFECT_TYPE = "sideEffectType";

    @SerializedName(SERIALIZED_NAME_SIDE_EFFECT_TYPE)
    @jakarta.annotation.Nullable
    private String sideEffectType;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private String selfTradePreventionMode;

    public static final String SERIALIZED_NAME_AUTO_REPAY_AT_CANCEL = "autoRepayAtCancel";

    @SerializedName(SERIALIZED_NAME_AUTO_REPAY_AT_CANCEL)
    @jakarta.annotation.Nullable
    private Boolean autoRepayAtCancel;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public MarginAccountNewOcoRequest() {}

    public MarginAccountNewOcoRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public MarginAccountNewOcoRequest isIsolated(@jakarta.annotation.Nullable String isIsolated) {
        this.isIsolated = isIsolated;
        return this;
    }

    /**
     * Get isIsolated
     *
     * @return isIsolated
     */
    @jakarta.annotation.Nullable
    public String getIsIsolated() {
        return isIsolated;
    }

    public void setIsIsolated(@jakarta.annotation.Nullable String isIsolated) {
        this.isIsolated = isIsolated;
    }

    public MarginAccountNewOcoRequest listClientOrderId(
            @jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
        return this;
    }

    /**
     * Get listClientOrderId
     *
     * @return listClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getListClientOrderId() {
        return listClientOrderId;
    }

    public void setListClientOrderId(@jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
    }

    public MarginAccountNewOcoRequest side(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Side getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
    }

    public MarginAccountNewOcoRequest quantity(@jakarta.annotation.Nonnull Double quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nonnull Double quantity) {
        this.quantity = quantity;
    }

    public MarginAccountNewOcoRequest limitClientOrderId(
            @jakarta.annotation.Nullable String limitClientOrderId) {
        this.limitClientOrderId = limitClientOrderId;
        return this;
    }

    /**
     * Get limitClientOrderId
     *
     * @return limitClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getLimitClientOrderId() {
        return limitClientOrderId;
    }

    public void setLimitClientOrderId(@jakarta.annotation.Nullable String limitClientOrderId) {
        this.limitClientOrderId = limitClientOrderId;
    }

    public MarginAccountNewOcoRequest price(@jakarta.annotation.Nonnull Double price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nonnull Double price) {
        this.price = price;
    }

    public MarginAccountNewOcoRequest limitIcebergQty(
            @jakarta.annotation.Nullable Double limitIcebergQty) {
        this.limitIcebergQty = limitIcebergQty;
        return this;
    }

    /**
     * Get limitIcebergQty
     *
     * @return limitIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getLimitIcebergQty() {
        return limitIcebergQty;
    }

    public void setLimitIcebergQty(@jakarta.annotation.Nullable Double limitIcebergQty) {
        this.limitIcebergQty = limitIcebergQty;
    }

    public MarginAccountNewOcoRequest stopClientOrderId(
            @jakarta.annotation.Nullable String stopClientOrderId) {
        this.stopClientOrderId = stopClientOrderId;
        return this;
    }

    /**
     * Get stopClientOrderId
     *
     * @return stopClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getStopClientOrderId() {
        return stopClientOrderId;
    }

    public void setStopClientOrderId(@jakarta.annotation.Nullable String stopClientOrderId) {
        this.stopClientOrderId = stopClientOrderId;
    }

    public MarginAccountNewOcoRequest stopPrice(@jakarta.annotation.Nonnull Double stopPrice) {
        this.stopPrice = stopPrice;
        return this;
    }

    /**
     * Get stopPrice
     *
     * @return stopPrice
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(@jakarta.annotation.Nonnull Double stopPrice) {
        this.stopPrice = stopPrice;
    }

    public MarginAccountNewOcoRequest stopLimitPrice(
            @jakarta.annotation.Nullable Double stopLimitPrice) {
        this.stopLimitPrice = stopLimitPrice;
        return this;
    }

    /**
     * Get stopLimitPrice
     *
     * @return stopLimitPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getStopLimitPrice() {
        return stopLimitPrice;
    }

    public void setStopLimitPrice(@jakarta.annotation.Nullable Double stopLimitPrice) {
        this.stopLimitPrice = stopLimitPrice;
    }

    public MarginAccountNewOcoRequest stopIcebergQty(
            @jakarta.annotation.Nullable Double stopIcebergQty) {
        this.stopIcebergQty = stopIcebergQty;
        return this;
    }

    /**
     * Get stopIcebergQty
     *
     * @return stopIcebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getStopIcebergQty() {
        return stopIcebergQty;
    }

    public void setStopIcebergQty(@jakarta.annotation.Nullable Double stopIcebergQty) {
        this.stopIcebergQty = stopIcebergQty;
    }

    public MarginAccountNewOcoRequest stopLimitTimeInForce(
            @jakarta.annotation.Nullable String stopLimitTimeInForce) {
        this.stopLimitTimeInForce = stopLimitTimeInForce;
        return this;
    }

    /**
     * Get stopLimitTimeInForce
     *
     * @return stopLimitTimeInForce
     */
    @jakarta.annotation.Nullable
    public String getStopLimitTimeInForce() {
        return stopLimitTimeInForce;
    }

    public void setStopLimitTimeInForce(@jakarta.annotation.Nullable String stopLimitTimeInForce) {
        this.stopLimitTimeInForce = stopLimitTimeInForce;
    }

    public MarginAccountNewOcoRequest newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    @Valid
    public NewOrderRespType getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public MarginAccountNewOcoRequest sideEffectType(
            @jakarta.annotation.Nullable String sideEffectType) {
        this.sideEffectType = sideEffectType;
        return this;
    }

    /**
     * Get sideEffectType
     *
     * @return sideEffectType
     */
    @jakarta.annotation.Nullable
    public String getSideEffectType() {
        return sideEffectType;
    }

    public void setSideEffectType(@jakarta.annotation.Nullable String sideEffectType) {
        this.sideEffectType = sideEffectType;
    }

    public MarginAccountNewOcoRequest selfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    public String getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public MarginAccountNewOcoRequest autoRepayAtCancel(
            @jakarta.annotation.Nullable Boolean autoRepayAtCancel) {
        this.autoRepayAtCancel = autoRepayAtCancel;
        return this;
    }

    /**
     * Get autoRepayAtCancel
     *
     * @return autoRepayAtCancel
     */
    @jakarta.annotation.Nullable
    public Boolean getAutoRepayAtCancel() {
        return autoRepayAtCancel;
    }

    public void setAutoRepayAtCancel(@jakarta.annotation.Nullable Boolean autoRepayAtCancel) {
        this.autoRepayAtCancel = autoRepayAtCancel;
    }

    public MarginAccountNewOcoRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MarginAccountNewOcoRequest marginAccountNewOcoRequest = (MarginAccountNewOcoRequest) o;
        return Objects.equals(this.symbol, marginAccountNewOcoRequest.symbol)
                && Objects.equals(this.isIsolated, marginAccountNewOcoRequest.isIsolated)
                && Objects.equals(
                        this.listClientOrderId, marginAccountNewOcoRequest.listClientOrderId)
                && Objects.equals(this.side, marginAccountNewOcoRequest.side)
                && Objects.equals(this.quantity, marginAccountNewOcoRequest.quantity)
                && Objects.equals(
                        this.limitClientOrderId, marginAccountNewOcoRequest.limitClientOrderId)
                && Objects.equals(this.price, marginAccountNewOcoRequest.price)
                && Objects.equals(this.limitIcebergQty, marginAccountNewOcoRequest.limitIcebergQty)
                && Objects.equals(
                        this.stopClientOrderId, marginAccountNewOcoRequest.stopClientOrderId)
                && Objects.equals(this.stopPrice, marginAccountNewOcoRequest.stopPrice)
                && Objects.equals(this.stopLimitPrice, marginAccountNewOcoRequest.stopLimitPrice)
                && Objects.equals(this.stopIcebergQty, marginAccountNewOcoRequest.stopIcebergQty)
                && Objects.equals(
                        this.stopLimitTimeInForce, marginAccountNewOcoRequest.stopLimitTimeInForce)
                && Objects.equals(
                        this.newOrderRespType, marginAccountNewOcoRequest.newOrderRespType)
                && Objects.equals(this.sideEffectType, marginAccountNewOcoRequest.sideEffectType)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        marginAccountNewOcoRequest.selfTradePreventionMode)
                && Objects.equals(
                        this.autoRepayAtCancel, marginAccountNewOcoRequest.autoRepayAtCancel)
                && Objects.equals(this.recvWindow, marginAccountNewOcoRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                isIsolated,
                listClientOrderId,
                side,
                quantity,
                limitClientOrderId,
                price,
                limitIcebergQty,
                stopClientOrderId,
                stopPrice,
                stopLimitPrice,
                stopIcebergQty,
                stopLimitTimeInForce,
                newOrderRespType,
                sideEffectType,
                selfTradePreventionMode,
                autoRepayAtCancel,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MarginAccountNewOcoRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		isIsolated: ").append(toIndentedString(isIsolated)).append("\n");
        sb.append("		listClientOrderId: ").append(toIndentedString(listClientOrderId)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		limitClientOrderId: ")
                .append(toIndentedString(limitClientOrderId))
                .append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		limitIcebergQty: ").append(toIndentedString(limitIcebergQty)).append("\n");
        sb.append("		stopClientOrderId: ").append(toIndentedString(stopClientOrderId)).append("\n");
        sb.append("		stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
        sb.append("		stopLimitPrice: ").append(toIndentedString(stopLimitPrice)).append("\n");
        sb.append("		stopIcebergQty: ").append(toIndentedString(stopIcebergQty)).append("\n");
        sb.append("		stopLimitTimeInForce: ")
                .append(toIndentedString(stopLimitTimeInForce))
                .append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		sideEffectType: ").append(toIndentedString(sideEffectType)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		autoRepayAtCancel: ").append(toIndentedString(autoRepayAtCancel)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object isIsolatedValue = getIsIsolated();
        String isIsolatedValueAsString = "";
        isIsolatedValueAsString = isIsolatedValue.toString();
        sb.append("isIsolated=").append(urlEncode(isIsolatedValueAsString)).append("");
        Object listClientOrderIdValue = getListClientOrderId();
        String listClientOrderIdValueAsString = "";
        listClientOrderIdValueAsString = listClientOrderIdValue.toString();
        sb.append("listClientOrderId=")
                .append(urlEncode(listClientOrderIdValueAsString))
                .append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object limitClientOrderIdValue = getLimitClientOrderId();
        String limitClientOrderIdValueAsString = "";
        limitClientOrderIdValueAsString = limitClientOrderIdValue.toString();
        sb.append("limitClientOrderId=")
                .append(urlEncode(limitClientOrderIdValueAsString))
                .append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object limitIcebergQtyValue = getLimitIcebergQty();
        String limitIcebergQtyValueAsString = "";
        limitIcebergQtyValueAsString = limitIcebergQtyValue.toString();
        sb.append("limitIcebergQty=").append(urlEncode(limitIcebergQtyValueAsString)).append("");
        Object stopClientOrderIdValue = getStopClientOrderId();
        String stopClientOrderIdValueAsString = "";
        stopClientOrderIdValueAsString = stopClientOrderIdValue.toString();
        sb.append("stopClientOrderId=")
                .append(urlEncode(stopClientOrderIdValueAsString))
                .append("");
        Object stopPriceValue = getStopPrice();
        String stopPriceValueAsString = "";
        stopPriceValueAsString = stopPriceValue.toString();
        sb.append("stopPrice=").append(urlEncode(stopPriceValueAsString)).append("");
        Object stopLimitPriceValue = getStopLimitPrice();
        String stopLimitPriceValueAsString = "";
        stopLimitPriceValueAsString = stopLimitPriceValue.toString();
        sb.append("stopLimitPrice=").append(urlEncode(stopLimitPriceValueAsString)).append("");
        Object stopIcebergQtyValue = getStopIcebergQty();
        String stopIcebergQtyValueAsString = "";
        stopIcebergQtyValueAsString = stopIcebergQtyValue.toString();
        sb.append("stopIcebergQty=").append(urlEncode(stopIcebergQtyValueAsString)).append("");
        Object stopLimitTimeInForceValue = getStopLimitTimeInForce();
        String stopLimitTimeInForceValueAsString = "";
        stopLimitTimeInForceValueAsString = stopLimitTimeInForceValue.toString();
        sb.append("stopLimitTimeInForce=")
                .append(urlEncode(stopLimitTimeInForceValueAsString))
                .append("");
        Object newOrderRespTypeValue = getNewOrderRespType();
        String newOrderRespTypeValueAsString = "";
        newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
        sb.append("newOrderRespType=").append(urlEncode(newOrderRespTypeValueAsString)).append("");
        Object sideEffectTypeValue = getSideEffectType();
        String sideEffectTypeValueAsString = "";
        sideEffectTypeValueAsString = sideEffectTypeValue.toString();
        sb.append("sideEffectType=").append(urlEncode(sideEffectTypeValueAsString)).append("");
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        String selfTradePreventionModeValueAsString = "";
        selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
        sb.append("selfTradePreventionMode=")
                .append(urlEncode(selfTradePreventionModeValueAsString))
                .append("");
        Object autoRepayAtCancelValue = getAutoRepayAtCancel();
        String autoRepayAtCancelValueAsString = "";
        autoRepayAtCancelValueAsString = autoRepayAtCancelValue.toString();
        sb.append("autoRepayAtCancel=")
                .append(urlEncode(autoRepayAtCancelValueAsString))
                .append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("isIsolated");
        openapiFields.add("listClientOrderId");
        openapiFields.add("side");
        openapiFields.add("quantity");
        openapiFields.add("limitClientOrderId");
        openapiFields.add("price");
        openapiFields.add("limitIcebergQty");
        openapiFields.add("stopClientOrderId");
        openapiFields.add("stopPrice");
        openapiFields.add("stopLimitPrice");
        openapiFields.add("stopIcebergQty");
        openapiFields.add("stopLimitTimeInForce");
        openapiFields.add("newOrderRespType");
        openapiFields.add("sideEffectType");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("autoRepayAtCancel");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("side");
        openapiRequiredFields.add("quantity");
        openapiRequiredFields.add("price");
        openapiRequiredFields.add("stopPrice");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to MarginAccountNewOcoRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MarginAccountNewOcoRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MarginAccountNewOcoRequest is not"
                                        + " found in the empty JSON string",
                                MarginAccountNewOcoRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MarginAccountNewOcoRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `MarginAccountNewOcoRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : MarginAccountNewOcoRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("isIsolated") != null && !jsonObj.get("isIsolated").isJsonNull())
                && !jsonObj.get("isIsolated").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isIsolated` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isIsolated").toString()));
        }
        if ((jsonObj.get("listClientOrderId") != null
                        && !jsonObj.get("listClientOrderId").isJsonNull())
                && !jsonObj.get("listClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listClientOrderId").toString()));
        }
        // validate the required field `side`
        Side.validateJsonElement(jsonObj.get("side"));
        if ((jsonObj.get("limitClientOrderId") != null
                        && !jsonObj.get("limitClientOrderId").isJsonNull())
                && !jsonObj.get("limitClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `limitClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("limitClientOrderId").toString()));
        }
        if ((jsonObj.get("stopClientOrderId") != null
                        && !jsonObj.get("stopClientOrderId").isJsonNull())
                && !jsonObj.get("stopClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `stopClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("stopClientOrderId").toString()));
        }
        if ((jsonObj.get("stopLimitTimeInForce") != null
                        && !jsonObj.get("stopLimitTimeInForce").isJsonNull())
                && !jsonObj.get("stopLimitTimeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `stopLimitTimeInForce` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("stopLimitTimeInForce").toString()));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespType.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        if ((jsonObj.get("sideEffectType") != null && !jsonObj.get("sideEffectType").isJsonNull())
                && !jsonObj.get("sideEffectType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `sideEffectType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("sideEffectType").toString()));
        }
        if ((jsonObj.get("selfTradePreventionMode") != null
                        && !jsonObj.get("selfTradePreventionMode").isJsonNull())
                && !jsonObj.get("selfTradePreventionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `selfTradePreventionMode` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("selfTradePreventionMode").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MarginAccountNewOcoRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MarginAccountNewOcoRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MarginAccountNewOcoRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(MarginAccountNewOcoRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MarginAccountNewOcoRequest>() {
                        @Override
                        public void write(JsonWriter out, MarginAccountNewOcoRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MarginAccountNewOcoRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MarginAccountNewOcoRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MarginAccountNewOcoRequest
     * @throws IOException if the JSON string is invalid with respect to MarginAccountNewOcoRequest
     */
    public static MarginAccountNewOcoRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MarginAccountNewOcoRequest.class);
    }

    /**
     * Convert an instance of MarginAccountNewOcoRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
