/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QuerySpecialKeyListResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QuerySpecialKeyListResponseInner {
    public static final String SERIALIZED_NAME_API_NAME = "apiName";

    @SerializedName(SERIALIZED_NAME_API_NAME)
    @jakarta.annotation.Nullable
    private String apiName;

    public static final String SERIALIZED_NAME_API_KEY = "apiKey";

    @SerializedName(SERIALIZED_NAME_API_KEY)
    @jakarta.annotation.Nullable
    private String apiKey;

    public static final String SERIALIZED_NAME_IP = "ip";

    @SerializedName(SERIALIZED_NAME_IP)
    @jakarta.annotation.Nullable
    private String ip;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_PERMISSION_MODE = "permissionMode";

    @SerializedName(SERIALIZED_NAME_PERMISSION_MODE)
    @jakarta.annotation.Nullable
    private String permissionMode;

    public QuerySpecialKeyListResponseInner() {}

    public QuerySpecialKeyListResponseInner apiName(@jakarta.annotation.Nullable String apiName) {
        this.apiName = apiName;
        return this;
    }

    /**
     * Get apiName
     *
     * @return apiName
     */
    @jakarta.annotation.Nullable
    public String getApiName() {
        return apiName;
    }

    public void setApiName(@jakarta.annotation.Nullable String apiName) {
        this.apiName = apiName;
    }

    public QuerySpecialKeyListResponseInner apiKey(@jakarta.annotation.Nullable String apiKey) {
        this.apiKey = apiKey;
        return this;
    }

    /**
     * Get apiKey
     *
     * @return apiKey
     */
    @jakarta.annotation.Nullable
    public String getApiKey() {
        return apiKey;
    }

    public void setApiKey(@jakarta.annotation.Nullable String apiKey) {
        this.apiKey = apiKey;
    }

    public QuerySpecialKeyListResponseInner ip(@jakarta.annotation.Nullable String ip) {
        this.ip = ip;
        return this;
    }

    /**
     * Get ip
     *
     * @return ip
     */
    @jakarta.annotation.Nullable
    public String getIp() {
        return ip;
    }

    public void setIp(@jakarta.annotation.Nullable String ip) {
        this.ip = ip;
    }

    public QuerySpecialKeyListResponseInner type(@jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public QuerySpecialKeyListResponseInner permissionMode(
            @jakarta.annotation.Nullable String permissionMode) {
        this.permissionMode = permissionMode;
        return this;
    }

    /**
     * Get permissionMode
     *
     * @return permissionMode
     */
    @jakarta.annotation.Nullable
    public String getPermissionMode() {
        return permissionMode;
    }

    public void setPermissionMode(@jakarta.annotation.Nullable String permissionMode) {
        this.permissionMode = permissionMode;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuerySpecialKeyListResponseInner querySpecialKeyListResponseInner =
                (QuerySpecialKeyListResponseInner) o;
        return Objects.equals(this.apiName, querySpecialKeyListResponseInner.apiName)
                && Objects.equals(this.apiKey, querySpecialKeyListResponseInner.apiKey)
                && Objects.equals(this.ip, querySpecialKeyListResponseInner.ip)
                && Objects.equals(this.type, querySpecialKeyListResponseInner.type)
                && Objects.equals(
                        this.permissionMode, querySpecialKeyListResponseInner.permissionMode);
    }

    @Override
    public int hashCode() {
        return Objects.hash(apiName, apiKey, ip, type, permissionMode);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QuerySpecialKeyListResponseInner {\n");
        sb.append("		apiName: ").append(toIndentedString(apiName)).append("\n");
        sb.append("		apiKey: ").append(toIndentedString(apiKey)).append("\n");
        sb.append("		ip: ").append(toIndentedString(ip)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		permissionMode: ").append(toIndentedString(permissionMode)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object apiNameValue = getApiName();
        String apiNameValueAsString = "";
        apiNameValueAsString = apiNameValue.toString();
        sb.append("apiName=").append(urlEncode(apiNameValueAsString)).append("");
        Object apiKeyValue = getApiKey();
        String apiKeyValueAsString = "";
        apiKeyValueAsString = apiKeyValue.toString();
        sb.append("apiKey=").append(urlEncode(apiKeyValueAsString)).append("");
        Object ipValue = getIp();
        String ipValueAsString = "";
        ipValueAsString = ipValue.toString();
        sb.append("ip=").append(urlEncode(ipValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object permissionModeValue = getPermissionMode();
        String permissionModeValueAsString = "";
        permissionModeValueAsString = permissionModeValue.toString();
        sb.append("permissionMode=").append(urlEncode(permissionModeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("apiName");
        openapiFields.add("apiKey");
        openapiFields.add("ip");
        openapiFields.add("type");
        openapiFields.add("permissionMode");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QuerySpecialKeyListResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QuerySpecialKeyListResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in QuerySpecialKeyListResponseInner is"
                                        + " not found in the empty JSON string",
                                QuerySpecialKeyListResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QuerySpecialKeyListResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QuerySpecialKeyListResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("apiName") != null && !jsonObj.get("apiName").isJsonNull())
                && !jsonObj.get("apiName").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `apiName` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("apiName").toString()));
        }
        if ((jsonObj.get("apiKey") != null && !jsonObj.get("apiKey").isJsonNull())
                && !jsonObj.get("apiKey").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `apiKey` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("apiKey").toString()));
        }
        if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull())
                && !jsonObj.get("ip").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `ip` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("ip").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("permissionMode") != null && !jsonObj.get("permissionMode").isJsonNull())
                && !jsonObj.get("permissionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `permissionMode` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("permissionMode").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QuerySpecialKeyListResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'QuerySpecialKeyListResponseInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QuerySpecialKeyListResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QuerySpecialKeyListResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QuerySpecialKeyListResponseInner>() {
                        @Override
                        public void write(JsonWriter out, QuerySpecialKeyListResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QuerySpecialKeyListResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QuerySpecialKeyListResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QuerySpecialKeyListResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QuerySpecialKeyListResponseInner
     */
    public static QuerySpecialKeyListResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, QuerySpecialKeyListResponseInner.class);
    }

    /**
     * Convert an instance of QuerySpecialKeyListResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
