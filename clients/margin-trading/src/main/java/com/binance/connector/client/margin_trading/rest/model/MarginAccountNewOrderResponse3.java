/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** MarginAccountNewOrderResponse3 */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MarginAccountNewOrderResponse3 {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "clientOrderId";

    @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String clientOrderId;

    public static final String SERIALIZED_NAME_TRANSACT_TIME = "transactTime";

    @SerializedName(SERIALIZED_NAME_TRANSACT_TIME)
    @jakarta.annotation.Nullable
    private Long transactTime;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_ORIG_QTY = "origQty";

    @SerializedName(SERIALIZED_NAME_ORIG_QTY)
    @jakarta.annotation.Nullable
    private String origQty;

    public static final String SERIALIZED_NAME_EXECUTED_QTY = "executedQty";

    @SerializedName(SERIALIZED_NAME_EXECUTED_QTY)
    @jakarta.annotation.Nullable
    private String executedQty;

    public static final String SERIALIZED_NAME_CUMMULATIVE_QUOTE_QTY = "cummulativeQuoteQty";

    @SerializedName(SERIALIZED_NAME_CUMMULATIVE_QUOTE_QTY)
    @jakarta.annotation.Nullable
    private String cummulativeQuoteQty;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String timeInForce;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_MARGIN_BUY_BORROW_AMOUNT = "marginBuyBorrowAmount";

    @SerializedName(SERIALIZED_NAME_MARGIN_BUY_BORROW_AMOUNT)
    @jakarta.annotation.Nullable
    private Long marginBuyBorrowAmount;

    public static final String SERIALIZED_NAME_MARGIN_BUY_BORROW_ASSET = "marginBuyBorrowAsset";

    @SerializedName(SERIALIZED_NAME_MARGIN_BUY_BORROW_ASSET)
    @jakarta.annotation.Nullable
    private String marginBuyBorrowAsset;

    public static final String SERIALIZED_NAME_IS_ISOLATED = "isIsolated";

    @SerializedName(SERIALIZED_NAME_IS_ISOLATED)
    @jakarta.annotation.Nullable
    private Boolean isIsolated;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private String selfTradePreventionMode;

    public static final String SERIALIZED_NAME_FILLS = "fills";

    @SerializedName(SERIALIZED_NAME_FILLS)
    @jakarta.annotation.Nullable
    private List<@Valid MarginAccountNewOrderResponse3FillsInner> fills;

    public MarginAccountNewOrderResponse3() {}

    public MarginAccountNewOrderResponse3 symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public MarginAccountNewOrderResponse3 orderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public MarginAccountNewOrderResponse3 clientOrderId(
            @jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
        return this;
    }

    /**
     * Get clientOrderId
     *
     * @return clientOrderId
     */
    @jakarta.annotation.Nullable
    public String getClientOrderId() {
        return clientOrderId;
    }

    public void setClientOrderId(@jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }

    public MarginAccountNewOrderResponse3 transactTime(
            @jakarta.annotation.Nullable Long transactTime) {
        this.transactTime = transactTime;
        return this;
    }

    /**
     * Get transactTime
     *
     * @return transactTime
     */
    @jakarta.annotation.Nullable
    public Long getTransactTime() {
        return transactTime;
    }

    public void setTransactTime(@jakarta.annotation.Nullable Long transactTime) {
        this.transactTime = transactTime;
    }

    public MarginAccountNewOrderResponse3 price(@jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public MarginAccountNewOrderResponse3 origQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
        return this;
    }

    /**
     * Get origQty
     *
     * @return origQty
     */
    @jakarta.annotation.Nullable
    public String getOrigQty() {
        return origQty;
    }

    public void setOrigQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
    }

    public MarginAccountNewOrderResponse3 executedQty(
            @jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
        return this;
    }

    /**
     * Get executedQty
     *
     * @return executedQty
     */
    @jakarta.annotation.Nullable
    public String getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
    }

    public MarginAccountNewOrderResponse3 cummulativeQuoteQty(
            @jakarta.annotation.Nullable String cummulativeQuoteQty) {
        this.cummulativeQuoteQty = cummulativeQuoteQty;
        return this;
    }

    /**
     * Get cummulativeQuoteQty
     *
     * @return cummulativeQuoteQty
     */
    @jakarta.annotation.Nullable
    public String getCummulativeQuoteQty() {
        return cummulativeQuoteQty;
    }

    public void setCummulativeQuoteQty(@jakarta.annotation.Nullable String cummulativeQuoteQty) {
        this.cummulativeQuoteQty = cummulativeQuoteQty;
    }

    public MarginAccountNewOrderResponse3 status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public MarginAccountNewOrderResponse3 timeInForce(
            @jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public String getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
    }

    public MarginAccountNewOrderResponse3 type(@jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public MarginAccountNewOrderResponse3 side(@jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public MarginAccountNewOrderResponse3 marginBuyBorrowAmount(
            @jakarta.annotation.Nullable Long marginBuyBorrowAmount) {
        this.marginBuyBorrowAmount = marginBuyBorrowAmount;
        return this;
    }

    /**
     * Get marginBuyBorrowAmount
     *
     * @return marginBuyBorrowAmount
     */
    @jakarta.annotation.Nullable
    public Long getMarginBuyBorrowAmount() {
        return marginBuyBorrowAmount;
    }

    public void setMarginBuyBorrowAmount(@jakarta.annotation.Nullable Long marginBuyBorrowAmount) {
        this.marginBuyBorrowAmount = marginBuyBorrowAmount;
    }

    public MarginAccountNewOrderResponse3 marginBuyBorrowAsset(
            @jakarta.annotation.Nullable String marginBuyBorrowAsset) {
        this.marginBuyBorrowAsset = marginBuyBorrowAsset;
        return this;
    }

    /**
     * Get marginBuyBorrowAsset
     *
     * @return marginBuyBorrowAsset
     */
    @jakarta.annotation.Nullable
    public String getMarginBuyBorrowAsset() {
        return marginBuyBorrowAsset;
    }

    public void setMarginBuyBorrowAsset(@jakarta.annotation.Nullable String marginBuyBorrowAsset) {
        this.marginBuyBorrowAsset = marginBuyBorrowAsset;
    }

    public MarginAccountNewOrderResponse3 isIsolated(
            @jakarta.annotation.Nullable Boolean isIsolated) {
        this.isIsolated = isIsolated;
        return this;
    }

    /**
     * Get isIsolated
     *
     * @return isIsolated
     */
    @jakarta.annotation.Nullable
    public Boolean getIsIsolated() {
        return isIsolated;
    }

    public void setIsIsolated(@jakarta.annotation.Nullable Boolean isIsolated) {
        this.isIsolated = isIsolated;
    }

    public MarginAccountNewOrderResponse3 selfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    public String getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public MarginAccountNewOrderResponse3 fills(
            @jakarta.annotation.Nullable
                    List<@Valid MarginAccountNewOrderResponse3FillsInner> fills) {
        this.fills = fills;
        return this;
    }

    public MarginAccountNewOrderResponse3 addFillsItem(
            MarginAccountNewOrderResponse3FillsInner fillsItem) {
        if (this.fills == null) {
            this.fills = new ArrayList<>();
        }
        this.fills.add(fillsItem);
        return this;
    }

    /**
     * Get fills
     *
     * @return fills
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid MarginAccountNewOrderResponse3FillsInner> getFills() {
        return fills;
    }

    public void setFills(
            @jakarta.annotation.Nullable
                    List<@Valid MarginAccountNewOrderResponse3FillsInner> fills) {
        this.fills = fills;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MarginAccountNewOrderResponse3 marginAccountNewOrderResponse3 =
                (MarginAccountNewOrderResponse3) o;
        return Objects.equals(this.symbol, marginAccountNewOrderResponse3.symbol)
                && Objects.equals(this.orderId, marginAccountNewOrderResponse3.orderId)
                && Objects.equals(this.clientOrderId, marginAccountNewOrderResponse3.clientOrderId)
                && Objects.equals(this.transactTime, marginAccountNewOrderResponse3.transactTime)
                && Objects.equals(this.price, marginAccountNewOrderResponse3.price)
                && Objects.equals(this.origQty, marginAccountNewOrderResponse3.origQty)
                && Objects.equals(this.executedQty, marginAccountNewOrderResponse3.executedQty)
                && Objects.equals(
                        this.cummulativeQuoteQty,
                        marginAccountNewOrderResponse3.cummulativeQuoteQty)
                && Objects.equals(this.status, marginAccountNewOrderResponse3.status)
                && Objects.equals(this.timeInForce, marginAccountNewOrderResponse3.timeInForce)
                && Objects.equals(this.type, marginAccountNewOrderResponse3.type)
                && Objects.equals(this.side, marginAccountNewOrderResponse3.side)
                && Objects.equals(
                        this.marginBuyBorrowAmount,
                        marginAccountNewOrderResponse3.marginBuyBorrowAmount)
                && Objects.equals(
                        this.marginBuyBorrowAsset,
                        marginAccountNewOrderResponse3.marginBuyBorrowAsset)
                && Objects.equals(this.isIsolated, marginAccountNewOrderResponse3.isIsolated)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        marginAccountNewOrderResponse3.selfTradePreventionMode)
                && Objects.equals(this.fills, marginAccountNewOrderResponse3.fills);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                orderId,
                clientOrderId,
                transactTime,
                price,
                origQty,
                executedQty,
                cummulativeQuoteQty,
                status,
                timeInForce,
                type,
                side,
                marginBuyBorrowAmount,
                marginBuyBorrowAsset,
                isIsolated,
                selfTradePreventionMode,
                fills);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MarginAccountNewOrderResponse3 {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
        sb.append("		transactTime: ").append(toIndentedString(transactTime)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		origQty: ").append(toIndentedString(origQty)).append("\n");
        sb.append("		executedQty: ").append(toIndentedString(executedQty)).append("\n");
        sb.append("		cummulativeQuoteQty: ")
                .append(toIndentedString(cummulativeQuoteQty))
                .append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		marginBuyBorrowAmount: ")
                .append(toIndentedString(marginBuyBorrowAmount))
                .append("\n");
        sb.append("		marginBuyBorrowAsset: ")
                .append(toIndentedString(marginBuyBorrowAsset))
                .append("\n");
        sb.append("		isIsolated: ").append(toIndentedString(isIsolated)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		fills: ").append(toIndentedString(fills)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object clientOrderIdValue = getClientOrderId();
        String clientOrderIdValueAsString = "";
        clientOrderIdValueAsString = clientOrderIdValue.toString();
        sb.append("clientOrderId=").append(urlEncode(clientOrderIdValueAsString)).append("");
        Object transactTimeValue = getTransactTime();
        String transactTimeValueAsString = "";
        transactTimeValueAsString = transactTimeValue.toString();
        sb.append("transactTime=").append(urlEncode(transactTimeValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object origQtyValue = getOrigQty();
        String origQtyValueAsString = "";
        origQtyValueAsString = origQtyValue.toString();
        sb.append("origQty=").append(urlEncode(origQtyValueAsString)).append("");
        Object executedQtyValue = getExecutedQty();
        String executedQtyValueAsString = "";
        executedQtyValueAsString = executedQtyValue.toString();
        sb.append("executedQty=").append(urlEncode(executedQtyValueAsString)).append("");
        Object cummulativeQuoteQtyValue = getCummulativeQuoteQty();
        String cummulativeQuoteQtyValueAsString = "";
        cummulativeQuoteQtyValueAsString = cummulativeQuoteQtyValue.toString();
        sb.append("cummulativeQuoteQty=")
                .append(urlEncode(cummulativeQuoteQtyValueAsString))
                .append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString = timeInForceValue.toString();
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object marginBuyBorrowAmountValue = getMarginBuyBorrowAmount();
        String marginBuyBorrowAmountValueAsString = "";
        marginBuyBorrowAmountValueAsString = marginBuyBorrowAmountValue.toString();
        sb.append("marginBuyBorrowAmount=")
                .append(urlEncode(marginBuyBorrowAmountValueAsString))
                .append("");
        Object marginBuyBorrowAssetValue = getMarginBuyBorrowAsset();
        String marginBuyBorrowAssetValueAsString = "";
        marginBuyBorrowAssetValueAsString = marginBuyBorrowAssetValue.toString();
        sb.append("marginBuyBorrowAsset=")
                .append(urlEncode(marginBuyBorrowAssetValueAsString))
                .append("");
        Object isIsolatedValue = getIsIsolated();
        String isIsolatedValueAsString = "";
        isIsolatedValueAsString = isIsolatedValue.toString();
        sb.append("isIsolated=").append(urlEncode(isIsolatedValueAsString)).append("");
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        String selfTradePreventionModeValueAsString = "";
        selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
        sb.append("selfTradePreventionMode=")
                .append(urlEncode(selfTradePreventionModeValueAsString))
                .append("");
        Object fillsValue = getFills();
        String fillsValueAsString = "";
        fillsValueAsString =
                (String)
                        ((Collection) fillsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("fills=").append(urlEncode(fillsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("orderId");
        openapiFields.add("clientOrderId");
        openapiFields.add("transactTime");
        openapiFields.add("price");
        openapiFields.add("origQty");
        openapiFields.add("executedQty");
        openapiFields.add("cummulativeQuoteQty");
        openapiFields.add("status");
        openapiFields.add("timeInForce");
        openapiFields.add("type");
        openapiFields.add("side");
        openapiFields.add("marginBuyBorrowAmount");
        openapiFields.add("marginBuyBorrowAsset");
        openapiFields.add("isIsolated");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("fills");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     MarginAccountNewOrderResponse3
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MarginAccountNewOrderResponse3.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in MarginAccountNewOrderResponse3 is not"
                                        + " found in the empty JSON string",
                                MarginAccountNewOrderResponse3.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MarginAccountNewOrderResponse3.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `MarginAccountNewOrderResponse3` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("clientOrderId") != null && !jsonObj.get("clientOrderId").isJsonNull())
                && !jsonObj.get("clientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `clientOrderId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("clientOrderId").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("origQty") != null && !jsonObj.get("origQty").isJsonNull())
                && !jsonObj.get("origQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("origQty").toString()));
        }
        if ((jsonObj.get("executedQty") != null && !jsonObj.get("executedQty").isJsonNull())
                && !jsonObj.get("executedQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedQty").toString()));
        }
        if ((jsonObj.get("cummulativeQuoteQty") != null
                        && !jsonObj.get("cummulativeQuoteQty").isJsonNull())
                && !jsonObj.get("cummulativeQuoteQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cummulativeQuoteQty` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("cummulativeQuoteQty").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull())
                && !jsonObj.get("timeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("marginBuyBorrowAsset") != null
                        && !jsonObj.get("marginBuyBorrowAsset").isJsonNull())
                && !jsonObj.get("marginBuyBorrowAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `marginBuyBorrowAsset` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("marginBuyBorrowAsset").toString()));
        }
        if ((jsonObj.get("selfTradePreventionMode") != null
                        && !jsonObj.get("selfTradePreventionMode").isJsonNull())
                && !jsonObj.get("selfTradePreventionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `selfTradePreventionMode` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("selfTradePreventionMode").toString()));
        }
        if (jsonObj.get("fills") != null && !jsonObj.get("fills").isJsonNull()) {
            JsonArray jsonArrayfills = jsonObj.getAsJsonArray("fills");
            if (jsonArrayfills != null) {
                // ensure the json data is an array
                if (!jsonObj.get("fills").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `fills` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("fills").toString()));
                }

                // validate the optional field `fills` (array)
                for (int i = 0; i < jsonArrayfills.size(); i++) {
                    MarginAccountNewOrderResponse3FillsInner.validateJsonElement(
                            jsonArrayfills.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MarginAccountNewOrderResponse3.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'MarginAccountNewOrderResponse3' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MarginAccountNewOrderResponse3> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(MarginAccountNewOrderResponse3.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MarginAccountNewOrderResponse3>() {
                        @Override
                        public void write(JsonWriter out, MarginAccountNewOrderResponse3 value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MarginAccountNewOrderResponse3 read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MarginAccountNewOrderResponse3 given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of MarginAccountNewOrderResponse3
     * @throws IOException if the JSON string is invalid with respect to
     *     MarginAccountNewOrderResponse3
     */
    public static MarginAccountNewOrderResponse3 fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, MarginAccountNewOrderResponse3.class);
    }

    /**
     * Convert an instance of MarginAccountNewOrderResponse3 to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
