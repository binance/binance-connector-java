/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryMarginAvailableInventoryResponseAssets */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryMarginAvailableInventoryResponseAssets {
    public static final String SERIALIZED_NAME_M_A_T_I_C = "MATIC";

    @SerializedName(SERIALIZED_NAME_M_A_T_I_C)
    @jakarta.annotation.Nullable
    private String MATIC;

    public static final String SERIALIZED_NAME_S_T_P_T = "STPT";

    @SerializedName(SERIALIZED_NAME_S_T_P_T)
    @jakarta.annotation.Nullable
    private String STPT;

    public static final String SERIALIZED_NAME_T_V_K = "TVK";

    @SerializedName(SERIALIZED_NAME_T_V_K)
    @jakarta.annotation.Nullable
    private String TVK;

    public static final String SERIALIZED_NAME_S_H_I_B = "SHIB";

    @SerializedName(SERIALIZED_NAME_S_H_I_B)
    @jakarta.annotation.Nullable
    private String SHIB;

    public QueryMarginAvailableInventoryResponseAssets() {}

    public QueryMarginAvailableInventoryResponseAssets MATIC(
            @jakarta.annotation.Nullable String MATIC) {
        this.MATIC = MATIC;
        return this;
    }

    /**
     * Get MATIC
     *
     * @return MATIC
     */
    @jakarta.annotation.Nullable
    public String getMATIC() {
        return MATIC;
    }

    public void setMATIC(@jakarta.annotation.Nullable String MATIC) {
        this.MATIC = MATIC;
    }

    public QueryMarginAvailableInventoryResponseAssets STPT(
            @jakarta.annotation.Nullable String STPT) {
        this.STPT = STPT;
        return this;
    }

    /**
     * Get STPT
     *
     * @return STPT
     */
    @jakarta.annotation.Nullable
    public String getSTPT() {
        return STPT;
    }

    public void setSTPT(@jakarta.annotation.Nullable String STPT) {
        this.STPT = STPT;
    }

    public QueryMarginAvailableInventoryResponseAssets TVK(
            @jakarta.annotation.Nullable String TVK) {
        this.TVK = TVK;
        return this;
    }

    /**
     * Get TVK
     *
     * @return TVK
     */
    @jakarta.annotation.Nullable
    public String getTVK() {
        return TVK;
    }

    public void setTVK(@jakarta.annotation.Nullable String TVK) {
        this.TVK = TVK;
    }

    public QueryMarginAvailableInventoryResponseAssets SHIB(
            @jakarta.annotation.Nullable String SHIB) {
        this.SHIB = SHIB;
        return this;
    }

    /**
     * Get SHIB
     *
     * @return SHIB
     */
    @jakarta.annotation.Nullable
    public String getSHIB() {
        return SHIB;
    }

    public void setSHIB(@jakarta.annotation.Nullable String SHIB) {
        this.SHIB = SHIB;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryMarginAvailableInventoryResponseAssets queryMarginAvailableInventoryResponseAssets =
                (QueryMarginAvailableInventoryResponseAssets) o;
        return Objects.equals(this.MATIC, queryMarginAvailableInventoryResponseAssets.MATIC)
                && Objects.equals(this.STPT, queryMarginAvailableInventoryResponseAssets.STPT)
                && Objects.equals(this.TVK, queryMarginAvailableInventoryResponseAssets.TVK)
                && Objects.equals(this.SHIB, queryMarginAvailableInventoryResponseAssets.SHIB);
    }

    @Override
    public int hashCode() {
        return Objects.hash(MATIC, STPT, TVK, SHIB);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryMarginAvailableInventoryResponseAssets {\n");
        sb.append("		MATIC: ").append(toIndentedString(MATIC)).append("\n");
        sb.append("		STPT: ").append(toIndentedString(STPT)).append("\n");
        sb.append("		TVK: ").append(toIndentedString(TVK)).append("\n");
        sb.append("		SHIB: ").append(toIndentedString(SHIB)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object MATICValue = getMATIC();
        String MATICValueAsString = "";
        MATICValueAsString = MATICValue.toString();
        sb.append("MATIC=").append(urlEncode(MATICValueAsString)).append("");
        Object STPTValue = getSTPT();
        String STPTValueAsString = "";
        STPTValueAsString = STPTValue.toString();
        sb.append("STPT=").append(urlEncode(STPTValueAsString)).append("");
        Object TVKValue = getTVK();
        String TVKValueAsString = "";
        TVKValueAsString = TVKValue.toString();
        sb.append("TVK=").append(urlEncode(TVKValueAsString)).append("");
        Object SHIBValue = getSHIB();
        String SHIBValueAsString = "";
        SHIBValueAsString = SHIBValue.toString();
        sb.append("SHIB=").append(urlEncode(SHIBValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("MATIC");
        openapiFields.add("STPT");
        openapiFields.add("TVK");
        openapiFields.add("SHIB");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryMarginAvailableInventoryResponseAssets
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryMarginAvailableInventoryResponseAssets.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryMarginAvailableInventoryResponseAssets is not found in"
                                    + " the empty JSON string",
                                QueryMarginAvailableInventoryResponseAssets.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryMarginAvailableInventoryResponseAssets.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryMarginAvailableInventoryResponseAssets` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("MATIC") != null && !jsonObj.get("MATIC").isJsonNull())
                && !jsonObj.get("MATIC").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `MATIC` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("MATIC").toString()));
        }
        if ((jsonObj.get("STPT") != null && !jsonObj.get("STPT").isJsonNull())
                && !jsonObj.get("STPT").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `STPT` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("STPT").toString()));
        }
        if ((jsonObj.get("TVK") != null && !jsonObj.get("TVK").isJsonNull())
                && !jsonObj.get("TVK").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `TVK` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("TVK").toString()));
        }
        if ((jsonObj.get("SHIB") != null && !jsonObj.get("SHIB").isJsonNull())
                && !jsonObj.get("SHIB").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `SHIB` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("SHIB").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryMarginAvailableInventoryResponseAssets.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryMarginAvailableInventoryResponseAssets' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryMarginAvailableInventoryResponseAssets> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryMarginAvailableInventoryResponseAssets.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryMarginAvailableInventoryResponseAssets>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryMarginAvailableInventoryResponseAssets value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryMarginAvailableInventoryResponseAssets read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryMarginAvailableInventoryResponseAssets given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryMarginAvailableInventoryResponseAssets
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryMarginAvailableInventoryResponseAssets
     */
    public static QueryMarginAvailableInventoryResponseAssets fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QueryMarginAvailableInventoryResponseAssets.class);
    }

    /**
     * Convert an instance of QueryMarginAvailableInventoryResponseAssets to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
