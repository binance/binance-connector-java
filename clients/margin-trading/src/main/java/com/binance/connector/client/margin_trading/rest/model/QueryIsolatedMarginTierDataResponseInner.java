/*
 * Binance Margin Trading REST API
 * OpenAPI Specification for the Binance Margin Trading REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.margin_trading.rest.model;

import com.binance.connector.client.margin_trading.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryIsolatedMarginTierDataResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryIsolatedMarginTierDataResponseInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_TIER = "tier";

    @SerializedName(SERIALIZED_NAME_TIER)
    @jakarta.annotation.Nullable
    private Long tier;

    public static final String SERIALIZED_NAME_EFFECTIVE_MULTIPLE = "effectiveMultiple";

    @SerializedName(SERIALIZED_NAME_EFFECTIVE_MULTIPLE)
    @jakarta.annotation.Nullable
    private String effectiveMultiple;

    public static final String SERIALIZED_NAME_INITIAL_RISK_RATIO = "initialRiskRatio";

    @SerializedName(SERIALIZED_NAME_INITIAL_RISK_RATIO)
    @jakarta.annotation.Nullable
    private String initialRiskRatio;

    public static final String SERIALIZED_NAME_LIQUIDATION_RISK_RATIO = "liquidationRiskRatio";

    @SerializedName(SERIALIZED_NAME_LIQUIDATION_RISK_RATIO)
    @jakarta.annotation.Nullable
    private String liquidationRiskRatio;

    public static final String SERIALIZED_NAME_BASE_ASSET_MAX_BORROWABLE = "baseAssetMaxBorrowable";

    @SerializedName(SERIALIZED_NAME_BASE_ASSET_MAX_BORROWABLE)
    @jakarta.annotation.Nullable
    private String baseAssetMaxBorrowable;

    public static final String SERIALIZED_NAME_QUOTE_ASSET_MAX_BORROWABLE =
            "quoteAssetMaxBorrowable";

    @SerializedName(SERIALIZED_NAME_QUOTE_ASSET_MAX_BORROWABLE)
    @jakarta.annotation.Nullable
    private String quoteAssetMaxBorrowable;

    public QueryIsolatedMarginTierDataResponseInner() {}

    public QueryIsolatedMarginTierDataResponseInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public QueryIsolatedMarginTierDataResponseInner tier(@jakarta.annotation.Nullable Long tier) {
        this.tier = tier;
        return this;
    }

    /**
     * Get tier
     *
     * @return tier
     */
    @jakarta.annotation.Nullable
    public Long getTier() {
        return tier;
    }

    public void setTier(@jakarta.annotation.Nullable Long tier) {
        this.tier = tier;
    }

    public QueryIsolatedMarginTierDataResponseInner effectiveMultiple(
            @jakarta.annotation.Nullable String effectiveMultiple) {
        this.effectiveMultiple = effectiveMultiple;
        return this;
    }

    /**
     * Get effectiveMultiple
     *
     * @return effectiveMultiple
     */
    @jakarta.annotation.Nullable
    public String getEffectiveMultiple() {
        return effectiveMultiple;
    }

    public void setEffectiveMultiple(@jakarta.annotation.Nullable String effectiveMultiple) {
        this.effectiveMultiple = effectiveMultiple;
    }

    public QueryIsolatedMarginTierDataResponseInner initialRiskRatio(
            @jakarta.annotation.Nullable String initialRiskRatio) {
        this.initialRiskRatio = initialRiskRatio;
        return this;
    }

    /**
     * Get initialRiskRatio
     *
     * @return initialRiskRatio
     */
    @jakarta.annotation.Nullable
    public String getInitialRiskRatio() {
        return initialRiskRatio;
    }

    public void setInitialRiskRatio(@jakarta.annotation.Nullable String initialRiskRatio) {
        this.initialRiskRatio = initialRiskRatio;
    }

    public QueryIsolatedMarginTierDataResponseInner liquidationRiskRatio(
            @jakarta.annotation.Nullable String liquidationRiskRatio) {
        this.liquidationRiskRatio = liquidationRiskRatio;
        return this;
    }

    /**
     * Get liquidationRiskRatio
     *
     * @return liquidationRiskRatio
     */
    @jakarta.annotation.Nullable
    public String getLiquidationRiskRatio() {
        return liquidationRiskRatio;
    }

    public void setLiquidationRiskRatio(@jakarta.annotation.Nullable String liquidationRiskRatio) {
        this.liquidationRiskRatio = liquidationRiskRatio;
    }

    public QueryIsolatedMarginTierDataResponseInner baseAssetMaxBorrowable(
            @jakarta.annotation.Nullable String baseAssetMaxBorrowable) {
        this.baseAssetMaxBorrowable = baseAssetMaxBorrowable;
        return this;
    }

    /**
     * Get baseAssetMaxBorrowable
     *
     * @return baseAssetMaxBorrowable
     */
    @jakarta.annotation.Nullable
    public String getBaseAssetMaxBorrowable() {
        return baseAssetMaxBorrowable;
    }

    public void setBaseAssetMaxBorrowable(
            @jakarta.annotation.Nullable String baseAssetMaxBorrowable) {
        this.baseAssetMaxBorrowable = baseAssetMaxBorrowable;
    }

    public QueryIsolatedMarginTierDataResponseInner quoteAssetMaxBorrowable(
            @jakarta.annotation.Nullable String quoteAssetMaxBorrowable) {
        this.quoteAssetMaxBorrowable = quoteAssetMaxBorrowable;
        return this;
    }

    /**
     * Get quoteAssetMaxBorrowable
     *
     * @return quoteAssetMaxBorrowable
     */
    @jakarta.annotation.Nullable
    public String getQuoteAssetMaxBorrowable() {
        return quoteAssetMaxBorrowable;
    }

    public void setQuoteAssetMaxBorrowable(
            @jakarta.annotation.Nullable String quoteAssetMaxBorrowable) {
        this.quoteAssetMaxBorrowable = quoteAssetMaxBorrowable;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryIsolatedMarginTierDataResponseInner queryIsolatedMarginTierDataResponseInner =
                (QueryIsolatedMarginTierDataResponseInner) o;
        return Objects.equals(this.symbol, queryIsolatedMarginTierDataResponseInner.symbol)
                && Objects.equals(this.tier, queryIsolatedMarginTierDataResponseInner.tier)
                && Objects.equals(
                        this.effectiveMultiple,
                        queryIsolatedMarginTierDataResponseInner.effectiveMultiple)
                && Objects.equals(
                        this.initialRiskRatio,
                        queryIsolatedMarginTierDataResponseInner.initialRiskRatio)
                && Objects.equals(
                        this.liquidationRiskRatio,
                        queryIsolatedMarginTierDataResponseInner.liquidationRiskRatio)
                && Objects.equals(
                        this.baseAssetMaxBorrowable,
                        queryIsolatedMarginTierDataResponseInner.baseAssetMaxBorrowable)
                && Objects.equals(
                        this.quoteAssetMaxBorrowable,
                        queryIsolatedMarginTierDataResponseInner.quoteAssetMaxBorrowable);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                tier,
                effectiveMultiple,
                initialRiskRatio,
                liquidationRiskRatio,
                baseAssetMaxBorrowable,
                quoteAssetMaxBorrowable);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryIsolatedMarginTierDataResponseInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		tier: ").append(toIndentedString(tier)).append("\n");
        sb.append("		effectiveMultiple: ").append(toIndentedString(effectiveMultiple)).append("\n");
        sb.append("		initialRiskRatio: ").append(toIndentedString(initialRiskRatio)).append("\n");
        sb.append("		liquidationRiskRatio: ")
                .append(toIndentedString(liquidationRiskRatio))
                .append("\n");
        sb.append("		baseAssetMaxBorrowable: ")
                .append(toIndentedString(baseAssetMaxBorrowable))
                .append("\n");
        sb.append("		quoteAssetMaxBorrowable: ")
                .append(toIndentedString(quoteAssetMaxBorrowable))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object tierValue = getTier();
        String tierValueAsString = "";
        tierValueAsString = tierValue.toString();
        sb.append("tier=").append(urlEncode(tierValueAsString)).append("");
        Object effectiveMultipleValue = getEffectiveMultiple();
        String effectiveMultipleValueAsString = "";
        effectiveMultipleValueAsString = effectiveMultipleValue.toString();
        sb.append("effectiveMultiple=")
                .append(urlEncode(effectiveMultipleValueAsString))
                .append("");
        Object initialRiskRatioValue = getInitialRiskRatio();
        String initialRiskRatioValueAsString = "";
        initialRiskRatioValueAsString = initialRiskRatioValue.toString();
        sb.append("initialRiskRatio=").append(urlEncode(initialRiskRatioValueAsString)).append("");
        Object liquidationRiskRatioValue = getLiquidationRiskRatio();
        String liquidationRiskRatioValueAsString = "";
        liquidationRiskRatioValueAsString = liquidationRiskRatioValue.toString();
        sb.append("liquidationRiskRatio=")
                .append(urlEncode(liquidationRiskRatioValueAsString))
                .append("");
        Object baseAssetMaxBorrowableValue = getBaseAssetMaxBorrowable();
        String baseAssetMaxBorrowableValueAsString = "";
        baseAssetMaxBorrowableValueAsString = baseAssetMaxBorrowableValue.toString();
        sb.append("baseAssetMaxBorrowable=")
                .append(urlEncode(baseAssetMaxBorrowableValueAsString))
                .append("");
        Object quoteAssetMaxBorrowableValue = getQuoteAssetMaxBorrowable();
        String quoteAssetMaxBorrowableValueAsString = "";
        quoteAssetMaxBorrowableValueAsString = quoteAssetMaxBorrowableValue.toString();
        sb.append("quoteAssetMaxBorrowable=")
                .append(urlEncode(quoteAssetMaxBorrowableValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("tier");
        openapiFields.add("effectiveMultiple");
        openapiFields.add("initialRiskRatio");
        openapiFields.add("liquidationRiskRatio");
        openapiFields.add("baseAssetMaxBorrowable");
        openapiFields.add("quoteAssetMaxBorrowable");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryIsolatedMarginTierDataResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryIsolatedMarginTierDataResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryIsolatedMarginTierDataResponseInner is not found in"
                                    + " the empty JSON string",
                                QueryIsolatedMarginTierDataResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryIsolatedMarginTierDataResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QueryIsolatedMarginTierDataResponseInner` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("effectiveMultiple") != null
                        && !jsonObj.get("effectiveMultiple").isJsonNull())
                && !jsonObj.get("effectiveMultiple").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `effectiveMultiple` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("effectiveMultiple").toString()));
        }
        if ((jsonObj.get("initialRiskRatio") != null
                        && !jsonObj.get("initialRiskRatio").isJsonNull())
                && !jsonObj.get("initialRiskRatio").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `initialRiskRatio` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("initialRiskRatio").toString()));
        }
        if ((jsonObj.get("liquidationRiskRatio") != null
                        && !jsonObj.get("liquidationRiskRatio").isJsonNull())
                && !jsonObj.get("liquidationRiskRatio").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `liquidationRiskRatio` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("liquidationRiskRatio").toString()));
        }
        if ((jsonObj.get("baseAssetMaxBorrowable") != null
                        && !jsonObj.get("baseAssetMaxBorrowable").isJsonNull())
                && !jsonObj.get("baseAssetMaxBorrowable").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `baseAssetMaxBorrowable` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("baseAssetMaxBorrowable").toString()));
        }
        if ((jsonObj.get("quoteAssetMaxBorrowable") != null
                        && !jsonObj.get("quoteAssetMaxBorrowable").isJsonNull())
                && !jsonObj.get("quoteAssetMaxBorrowable").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quoteAssetMaxBorrowable` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("quoteAssetMaxBorrowable").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryIsolatedMarginTierDataResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryIsolatedMarginTierDataResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryIsolatedMarginTierDataResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryIsolatedMarginTierDataResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryIsolatedMarginTierDataResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryIsolatedMarginTierDataResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryIsolatedMarginTierDataResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryIsolatedMarginTierDataResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryIsolatedMarginTierDataResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryIsolatedMarginTierDataResponseInner
     */
    public static QueryIsolatedMarginTierDataResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, QueryIsolatedMarginTierDataResponseInner.class);
    }

    /**
     * Convert an instance of QueryIsolatedMarginTierDataResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
