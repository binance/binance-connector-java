/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.sub_account.rest.model.AddIpRestrictionForSubAccountApiKeyRequest;
import com.binance.connector.client.sub_account.rest.model.AddIpRestrictionForSubAccountApiKeyResponse;
import com.binance.connector.client.sub_account.rest.model.DeleteIpListForASubAccountApiKeyResponse;
import com.binance.connector.client.sub_account.rest.model.GetIpRestrictionForASubAccountApiKeyResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for ApiManagementApi */
public class ApiManagementApiTest {

    private ApiManagementApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new ApiManagementApi(apiClientSpy);
    }

    /**
     * Add IP Restriction for Sub-Account API key(For Master Account)
     *
     * <p>Add IP Restriction for Sub-Account API key * You need to enable Enable Spot &amp; Margin
     * Trading option for the api key which requests this endpoint Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addIpRestrictionForSubAccountApiKeyTest() throws ApiException, CryptoException {
        AddIpRestrictionForSubAccountApiKeyRequest addIpRestrictionForSubAccountApiKeyRequest =
                new AddIpRestrictionForSubAccountApiKeyRequest();

        addIpRestrictionForSubAccountApiKeyRequest.email("sub-account-email@email.com");
        addIpRestrictionForSubAccountApiKeyRequest.subAccountApiKey("");
        addIpRestrictionForSubAccountApiKeyRequest.status(0L);

        ApiResponse<AddIpRestrictionForSubAccountApiKeyResponse> response =
                api.addIpRestrictionForSubAccountApiKey(addIpRestrictionForSubAccountApiKeyRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("d353219f3c6ee7a2df7814796f98e89d858731d4dd62d05bc95115557ac07395", actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v2/sub-account/subAccountApi/ipRestriction",
                actualRequest.url().encodedPath());
    }

    /**
     * Delete IP List For a Sub-account API Key(For Master Account)
     *
     * <p>Delete IP List For a Sub-account API Key * You need to enable Enable Spot &amp; Margin
     * Trading option for the api key which requests this endpoint Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteIpListForASubAccountApiKeyTest() throws ApiException, CryptoException {
        String email = "sub-account-email@email.com";
        String subAccountApiKey = "";
        String ipAddress = "";
        Long recvWindow = 5000L;
        ApiResponse<DeleteIpListForASubAccountApiKeyResponse> response =
                api.deleteIpListForASubAccountApiKey(
                        email, subAccountApiKey, ipAddress, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("b4c71176a6744c102a895d5cd348ba0215fe776d6acdadb0bb58bc2f273bc1ae", actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList",
                actualRequest.url().encodedPath());
    }

    /**
     * Get IP Restriction for a Sub-account API Key(For Master Account)
     *
     * <p>Get IP Restriction for a Sub-account API Key Weight: 3000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIpRestrictionForASubAccountApiKeyTest() throws ApiException, CryptoException {
        String email = "sub-account-email@email.com";
        String subAccountApiKey = "";
        Long recvWindow = 5000L;
        ApiResponse<GetIpRestrictionForASubAccountApiKeyResponse> response =
                api.getIpRestrictionForASubAccountApiKey(email, subAccountApiKey, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals("c0e8e1659d43bb7209a5bbf189ecf4c71ff5da1884fe83c6f9d6ca77cc25df12", actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v1/sub-account/subAccountApi/ipRestriction",
                actualRequest.url().encodedPath());
    }
}
