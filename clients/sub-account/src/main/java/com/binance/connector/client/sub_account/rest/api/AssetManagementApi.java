/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.JSON;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.sub_account.rest.model.FuturesTransferForSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.FuturesTransferForSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.GetDetailOnSubAccountsFuturesAccountResponse;
import com.binance.connector.client.sub_account.rest.model.GetDetailOnSubAccountsFuturesAccountV2Response;
import com.binance.connector.client.sub_account.rest.model.GetDetailOnSubAccountsMarginAccountResponse;
import com.binance.connector.client.sub_account.rest.model.GetMovePositionHistoryForSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.GetSubAccountDepositAddressResponse;
import com.binance.connector.client.sub_account.rest.model.GetSubAccountDepositHistoryResponse;
import com.binance.connector.client.sub_account.rest.model.GetSummaryOfSubAccountsFuturesAccountResponse;
import com.binance.connector.client.sub_account.rest.model.GetSummaryOfSubAccountsFuturesAccountV2Response;
import com.binance.connector.client.sub_account.rest.model.GetSummaryOfSubAccountsMarginAccountResponse;
import com.binance.connector.client.sub_account.rest.model.MarginTransferForSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.MarginTransferForSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.MovePositionForSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.MovePositionForSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.QuerySubAccountAssetsAssetManagementResponse;
import com.binance.connector.client.sub_account.rest.model.QuerySubAccountAssetsResponse;
import com.binance.connector.client.sub_account.rest.model.QuerySubAccountFuturesAssetTransferHistoryResponse;
import com.binance.connector.client.sub_account.rest.model.QuerySubAccountSpotAssetTransferHistoryResponse;
import com.binance.connector.client.sub_account.rest.model.QuerySubAccountSpotAssetsSummaryResponse;
import com.binance.connector.client.sub_account.rest.model.QueryUniversalTransferHistoryResponse;
import com.binance.connector.client.sub_account.rest.model.SubAccountFuturesAssetTransferRequest;
import com.binance.connector.client.sub_account.rest.model.SubAccountFuturesAssetTransferResponse;
import com.binance.connector.client.sub_account.rest.model.SubAccountTransferHistoryResponse;
import com.binance.connector.client.sub_account.rest.model.TransferToMasterRequest;
import com.binance.connector.client.sub_account.rest.model.TransferToMasterResponse;
import com.binance.connector.client.sub_account.rest.model.TransferToSubAccountOfSameMasterRequest;
import com.binance.connector.client.sub_account.rest.model.TransferToSubAccountOfSameMasterResponse;
import com.binance.connector.client.sub_account.rest.model.UniversalTransferRequest;
import com.binance.connector.client.sub_account.rest.model.UniversalTransferResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class AssetManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-sub-account/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public AssetManagementApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public AssetManagementApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for futuresTransferForSubAccount
     *
     * @param futuresTransferForSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Futures Transfer for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Futures-Transfer-for-Sub-account">Futures
     *     Transfer for Sub-account(For Master Account) Documentation</a>
     */
    private okhttp3.Call futuresTransferForSubAccountCall(
            FuturesTransferForSubAccountRequest futuresTransferForSubAccountRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/futures/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (futuresTransferForSubAccountRequest.getEmail() != null) {
            localVarFormParams.put("email", futuresTransferForSubAccountRequest.getEmail());
        }

        if (futuresTransferForSubAccountRequest.getAsset() != null) {
            localVarFormParams.put("asset", futuresTransferForSubAccountRequest.getAsset());
        }

        if (futuresTransferForSubAccountRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(futuresTransferForSubAccountRequest.getAmount()));
        }

        if (futuresTransferForSubAccountRequest.getType() != null) {
            localVarFormParams.put("type", futuresTransferForSubAccountRequest.getType());
        }

        if (futuresTransferForSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", futuresTransferForSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call futuresTransferForSubAccountValidateBeforeCall(
            FuturesTransferForSubAccountRequest futuresTransferForSubAccountRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {futuresTransferForSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "futuresTransferForSubAccount",
                                    FuturesTransferForSubAccountRequest.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return futuresTransferForSubAccountCall(futuresTransferForSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Futures Transfer for Sub-account(For Master Account) Futures Transfer for Sub-account * You
     * need to open Enable Spot &amp; Margin Trading permission for the API Key which requests this
     * endpoint. Weight: 1
     *
     * @param futuresTransferForSubAccountRequest (required)
     * @return ApiResponse&lt;FuturesTransferForSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Futures Transfer for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Futures-Transfer-for-Sub-account">Futures
     *     Transfer for Sub-account(For Master Account) Documentation</a>
     */
    public ApiResponse<FuturesTransferForSubAccountResponse> futuresTransferForSubAccount(
            @Valid @NotNull FuturesTransferForSubAccountRequest futuresTransferForSubAccountRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                futuresTransferForSubAccountValidateBeforeCall(futuresTransferForSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FuturesTransferForSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getDetailOnSubAccountsFuturesAccount
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Detail on Sub-account&#39;s Futures Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account">Get
     *     Detail on Sub-account&#39;s Futures Account(For Master Account) Documentation</a>
     */
    private okhttp3.Call getDetailOnSubAccountsFuturesAccountCall(String email, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/futures/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailOnSubAccountsFuturesAccountValidateBeforeCall(
            String email, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getDetailOnSubAccountsFuturesAccount",
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getDetailOnSubAccountsFuturesAccountCall(email, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Detail on Sub-account&#39;s Futures Account(For Master Account) Get Detail on
     * Sub-account&#39;s Futures Account Weight: 10
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetDetailOnSubAccountsFuturesAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Detail on Sub-account&#39;s Futures Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account">Get
     *     Detail on Sub-account&#39;s Futures Account(For Master Account) Documentation</a>
     */
    public ApiResponse<GetDetailOnSubAccountsFuturesAccountResponse>
            getDetailOnSubAccountsFuturesAccount(@NotNull String email, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getDetailOnSubAccountsFuturesAccountValidateBeforeCall(email, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetDetailOnSubAccountsFuturesAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getDetailOnSubAccountsFuturesAccountV2
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param futuresType 1:USDT-margined Futures，2: Coin-margined Futures (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Detail on Sub-account&#39;s Futures Account V2 </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2">Get
     *     Detail on Sub-account&#39;s Futures Account V2(For Master Account) Documentation</a>
     */
    private okhttp3.Call getDetailOnSubAccountsFuturesAccountV2Call(
            String email, Long futuresType, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/sub-account/futures/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (futuresType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("futuresType", futuresType));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailOnSubAccountsFuturesAccountV2ValidateBeforeCall(
            String email, Long futuresType, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, futuresType, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getDetailOnSubAccountsFuturesAccountV2",
                                    String.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getDetailOnSubAccountsFuturesAccountV2Call(email, futuresType, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Detail on Sub-account&#39;s Futures Account V2(For Master Account) Get Detail on
     * Sub-account&#39;s Futures Account Weight: 1
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param futuresType 1:USDT-margined Futures，2: Coin-margined Futures (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetDetailOnSubAccountsFuturesAccountV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Detail on Sub-account&#39;s Futures Account V2 </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Futures-Account-V2">Get
     *     Detail on Sub-account&#39;s Futures Account V2(For Master Account) Documentation</a>
     */
    public ApiResponse<GetDetailOnSubAccountsFuturesAccountV2Response>
            getDetailOnSubAccountsFuturesAccountV2(
                    @NotNull String email, @NotNull Long futuresType, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getDetailOnSubAccountsFuturesAccountV2ValidateBeforeCall(
                        email, futuresType, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetDetailOnSubAccountsFuturesAccountV2Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getDetailOnSubAccountsMarginAccount
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Detail on Sub-account&#39;s Margin Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Margin-Account">Get
     *     Detail on Sub-account&#39;s Margin Account(For Master Account) Documentation</a>
     */
    private okhttp3.Call getDetailOnSubAccountsMarginAccountCall(String email, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/margin/account";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailOnSubAccountsMarginAccountValidateBeforeCall(
            String email, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getDetailOnSubAccountsMarginAccount",
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getDetailOnSubAccountsMarginAccountCall(email, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Detail on Sub-account&#39;s Margin Account(For Master Account) Get Detail on
     * Sub-account&#39;s Margin Account Weight: 10
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetDetailOnSubAccountsMarginAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Detail on Sub-account&#39;s Margin Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Detail-on-Sub-accounts-Margin-Account">Get
     *     Detail on Sub-account&#39;s Margin Account(For Master Account) Documentation</a>
     */
    public ApiResponse<GetDetailOnSubAccountsMarginAccountResponse>
            getDetailOnSubAccountsMarginAccount(@NotNull String email, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getDetailOnSubAccountsMarginAccountValidateBeforeCall(email, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetDetailOnSubAccountsMarginAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getMovePositionHistoryForSubAccount
     *
     * @param symbol (required)
     * @param page Page (required)
     * @param row (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Move Position History for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Move-Position-History-for-Sub-account">Get
     *     Move Position History for Sub-account (For Master Account) Documentation</a>
     */
    private okhttp3.Call getMovePositionHistoryForSubAccountCall(
            String symbol, Long page, Long row, Long startTime, Long endTime, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/futures/move-position";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (symbol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("symbol", symbol));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (row != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("row", row));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMovePositionHistoryForSubAccountValidateBeforeCall(
            String symbol, Long page, Long row, Long startTime, Long endTime, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {symbol, page, row, startTime, endTime, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getMovePositionHistoryForSubAccount",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getMovePositionHistoryForSubAccountCall(
                        symbol, page, row, startTime, endTime, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Move Position History for Sub-account (For Master Account) Query move position history *
     * If &#x60;startTime&#x60; and &#x60;endTime&#x60; not sent, return records of the last 90 days
     * by default with 1000 maximum limits * If &#x60;startTime&#x60; is sent and
     * &#x60;endTime&#x60; is not sent, return records of [max(startTime, now-90d), now]. * If
     * &#x60;startTime&#x60; is not sent and &#x60;endTime&#x60; is sent, return records of
     * [max(now,endTime-90d), endTime]. Weight: 150
     *
     * @param symbol (required)
     * @param page Page (required)
     * @param row (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetMovePositionHistoryForSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Move Position History for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Move-Position-History-for-Sub-account">Get
     *     Move Position History for Sub-account (For Master Account) Documentation</a>
     */
    public ApiResponse<GetMovePositionHistoryForSubAccountResponse>
            getMovePositionHistoryForSubAccount(
                    @NotNull String symbol,
                    @NotNull Long page,
                    @NotNull Long row,
                    Long startTime,
                    Long endTime,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getMovePositionHistoryForSubAccountValidateBeforeCall(
                        symbol, page, row, startTime, endTime, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetMovePositionHistoryForSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getSubAccountDepositAddress
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param coin (required)
     * @param network networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
     *     (optional)
     * @param amount (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Sub-account Deposit Address </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Sub-account-Deposit-Address">Get
     *     Sub-account Deposit Address(For Master Account) Documentation</a>
     */
    private okhttp3.Call getSubAccountDepositAddressCall(
            String email, String coin, String network, Double amount, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/deposit/subAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (amount != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "amount", DecimalFormatter.getFormatter().format(amount)));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubAccountDepositAddressValidateBeforeCall(
            String email, String coin, String network, Double amount, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, coin, network, amount, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getSubAccountDepositAddress",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Double.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getSubAccountDepositAddressCall(email, coin, network, amount, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Sub-account Deposit Address(For Master Account) Fetch sub-account deposit address *
     * &#x60;amount&#x60; needs to be sent if using LIGHTNING network Weight: 1
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param coin (required)
     * @param network networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
     *     (optional)
     * @param amount (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetSubAccountDepositAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Sub-account Deposit Address </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Sub-account-Deposit-Address">Get
     *     Sub-account Deposit Address(For Master Account) Documentation</a>
     */
    public ApiResponse<GetSubAccountDepositAddressResponse> getSubAccountDepositAddress(
            @NotNull String email,
            @NotNull String coin,
            String network,
            Double amount,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getSubAccountDepositAddressValidateBeforeCall(
                        email, coin, network, amount, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetSubAccountDepositAddressResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getSubAccountDepositHistory
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param coin (optional)
     * @param status 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User
     *     confirm,1:success) (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param offset default:0 (optional)
     * @param recvWindow (optional)
     * @param txId (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Sub-account Deposit History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Sub-account-Deposit-History">Get
     *     Sub-account Deposit History(For Master Account) Documentation</a>
     */
    private okhttp3.Call getSubAccountDepositHistoryCall(
            String email,
            String coin,
            Long status,
            Long startTime,
            Long endTime,
            Long limit,
            Long offset,
            Long recvWindow,
            String txId)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/capital/deposit/subHisrec";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        if (txId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("txId", txId));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubAccountDepositHistoryValidateBeforeCall(
            String email,
            String coin,
            Long status,
            Long startTime,
            Long endTime,
            Long limit,
            Long offset,
            Long recvWindow,
            String txId)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                email, coin, status, startTime, endTime, limit, offset, recvWindow, txId
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getSubAccountDepositHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    String.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getSubAccountDepositHistoryCall(
                        email, coin, status, startTime, endTime, limit, offset, recvWindow, txId);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Sub-account Deposit History(For Master Account) Fetch sub-account deposit history Weight:
     * 1
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param coin (optional)
     * @param status 0(0:pending,6: credited but cannot withdraw,7:Wrong Deposit,8:Waiting User
     *     confirm,1:success) (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param offset default:0 (optional)
     * @param recvWindow (optional)
     * @param txId (optional)
     * @return ApiResponse&lt;GetSubAccountDepositHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Sub-account Deposit History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Sub-account-Deposit-History">Get
     *     Sub-account Deposit History(For Master Account) Documentation</a>
     */
    public ApiResponse<GetSubAccountDepositHistoryResponse> getSubAccountDepositHistory(
            @NotNull String email,
            String coin,
            Long status,
            Long startTime,
            Long endTime,
            Long limit,
            Long offset,
            Long recvWindow,
            String txId)
            throws ApiException {
        okhttp3.Call localVarCall =
                getSubAccountDepositHistoryValidateBeforeCall(
                        email, coin, status, startTime, endTime, limit, offset, recvWindow, txId);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetSubAccountDepositHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getSummaryOfSubAccountsFuturesAccount
     *
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Summary of Sub-account&#39;s Futures Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Summary-of-Sub-accounts-Futures-Account">Get
     *     Summary of Sub-account&#39;s Futures Account(For Master Account) Documentation</a>
     */
    private okhttp3.Call getSummaryOfSubAccountsFuturesAccountCall(Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/futures/accountSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryOfSubAccountsFuturesAccountValidateBeforeCall(Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method =
                    this.getClass().getMethod("getSummaryOfSubAccountsFuturesAccount", Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getSummaryOfSubAccountsFuturesAccountCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Summary of Sub-account&#39;s Futures Account(For Master Account) Get Summary of
     * Sub-account&#39;s Futures Account Weight: 1
     *
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetSummaryOfSubAccountsFuturesAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Summary of Sub-account&#39;s Futures Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Summary-of-Sub-accounts-Futures-Account">Get
     *     Summary of Sub-account&#39;s Futures Account(For Master Account) Documentation</a>
     */
    public ApiResponse<GetSummaryOfSubAccountsFuturesAccountResponse>
            getSummaryOfSubAccountsFuturesAccount(Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                getSummaryOfSubAccountsFuturesAccountValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetSummaryOfSubAccountsFuturesAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getSummaryOfSubAccountsFuturesAccountV2
     *
     * @param futuresType 1:USDT-margined Futures，2: Coin-margined Futures (required)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Summary of Sub-account&#39;s Futures Account V2 </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Summary-of-Sub-accounts-Futures-Account-V2">Get
     *     Summary of Sub-account&#39;s Futures Account V2(For Master Account) Documentation</a>
     */
    private okhttp3.Call getSummaryOfSubAccountsFuturesAccountV2Call(
            Long futuresType, Long page, Long limit, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/sub-account/futures/accountSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (futuresType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("futuresType", futuresType));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryOfSubAccountsFuturesAccountV2ValidateBeforeCall(
            Long futuresType, Long page, Long limit, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {futuresType, page, limit, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getSummaryOfSubAccountsFuturesAccountV2",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getSummaryOfSubAccountsFuturesAccountV2Call(
                        futuresType, page, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Summary of Sub-account&#39;s Futures Account V2(For Master Account) Get Summary of
     * Sub-account&#39;s Futures Account Weight: 10
     *
     * @param futuresType 1:USDT-margined Futures，2: Coin-margined Futures (required)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetSummaryOfSubAccountsFuturesAccountV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Summary of Sub-account&#39;s Futures Account V2 </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Summary-of-Sub-accounts-Futures-Account-V2">Get
     *     Summary of Sub-account&#39;s Futures Account V2(For Master Account) Documentation</a>
     */
    public ApiResponse<GetSummaryOfSubAccountsFuturesAccountV2Response>
            getSummaryOfSubAccountsFuturesAccountV2(
                    @NotNull Long futuresType, Long page, Long limit, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getSummaryOfSubAccountsFuturesAccountV2ValidateBeforeCall(
                        futuresType, page, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetSummaryOfSubAccountsFuturesAccountV2Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getSummaryOfSubAccountsMarginAccount
     *
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Summary of Sub-account&#39;s Margin Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Summary-of-Sub-accounts-Margin-Account">Get
     *     Summary of Sub-account&#39;s Margin Account(For Master Account) Documentation</a>
     */
    private okhttp3.Call getSummaryOfSubAccountsMarginAccountCall(Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/margin/accountSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSummaryOfSubAccountsMarginAccountValidateBeforeCall(Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {recvWindow};
            Method method =
                    this.getClass().getMethod("getSummaryOfSubAccountsMarginAccount", Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getSummaryOfSubAccountsMarginAccountCall(recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Summary of Sub-account&#39;s Margin Account(For Master Account) Get Summary of
     * Sub-account&#39;s Margin Account Weight: 10
     *
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetSummaryOfSubAccountsMarginAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Summary of Sub-account&#39;s Margin Account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Get-Summary-of-Sub-accounts-Margin-Account">Get
     *     Summary of Sub-account&#39;s Margin Account(For Master Account) Documentation</a>
     */
    public ApiResponse<GetSummaryOfSubAccountsMarginAccountResponse>
            getSummaryOfSubAccountsMarginAccount(Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                getSummaryOfSubAccountsMarginAccountValidateBeforeCall(recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetSummaryOfSubAccountsMarginAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for marginTransferForSubAccount
     *
     * @param marginTransferForSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Margin Transfer for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Margin-Transfer-for-Sub-account">Margin
     *     Transfer for Sub-account(For Master Account) Documentation</a>
     */
    private okhttp3.Call marginTransferForSubAccountCall(
            MarginTransferForSubAccountRequest marginTransferForSubAccountRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/margin/transfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (marginTransferForSubAccountRequest.getEmail() != null) {
            localVarFormParams.put("email", marginTransferForSubAccountRequest.getEmail());
        }

        if (marginTransferForSubAccountRequest.getAsset() != null) {
            localVarFormParams.put("asset", marginTransferForSubAccountRequest.getAsset());
        }

        if (marginTransferForSubAccountRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(marginTransferForSubAccountRequest.getAmount()));
        }

        if (marginTransferForSubAccountRequest.getType() != null) {
            localVarFormParams.put("type", marginTransferForSubAccountRequest.getType());
        }

        if (marginTransferForSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", marginTransferForSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call marginTransferForSubAccountValidateBeforeCall(
            MarginTransferForSubAccountRequest marginTransferForSubAccountRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {marginTransferForSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "marginTransferForSubAccount",
                                    MarginTransferForSubAccountRequest.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return marginTransferForSubAccountCall(marginTransferForSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Margin Transfer for Sub-account(For Master Account) Margin Transfer for Sub-account * You
     * need to open Enable Spot &amp; Margin Trading permission for the API Key which requests this
     * endpoint. Weight: 1
     *
     * @param marginTransferForSubAccountRequest (required)
     * @return ApiResponse&lt;MarginTransferForSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Margin Transfer for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Margin-Transfer-for-Sub-account">Margin
     *     Transfer for Sub-account(For Master Account) Documentation</a>
     */
    public ApiResponse<MarginTransferForSubAccountResponse> marginTransferForSubAccount(
            @Valid @NotNull MarginTransferForSubAccountRequest marginTransferForSubAccountRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                marginTransferForSubAccountValidateBeforeCall(marginTransferForSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<MarginTransferForSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for movePositionForSubAccount
     *
     * @param movePositionForSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Move Position for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Move-Position-for-Sub-account">Move
     *     Position for Sub-account (For Master Account) Documentation</a>
     */
    private okhttp3.Call movePositionForSubAccountCall(
            MovePositionForSubAccountRequest movePositionForSubAccountRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/futures/move-position";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (movePositionForSubAccountRequest.getFromUserEmail() != null) {
            localVarFormParams.put(
                    "fromUserEmail", movePositionForSubAccountRequest.getFromUserEmail());
        }

        if (movePositionForSubAccountRequest.getToUserEmail() != null) {
            localVarFormParams.put(
                    "toUserEmail", movePositionForSubAccountRequest.getToUserEmail());
        }

        if (movePositionForSubAccountRequest.getProductType() != null) {
            localVarFormParams.put(
                    "productType", movePositionForSubAccountRequest.getProductType());
        }

        if (movePositionForSubAccountRequest.getOrderArgs() != null) {
            String json = JSON.getGson().toJson(movePositionForSubAccountRequest.getOrderArgs());
            localVarFormParams.put("orderArgs", json);
        }

        if (movePositionForSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", movePositionForSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call movePositionForSubAccountValidateBeforeCall(
            MovePositionForSubAccountRequest movePositionForSubAccountRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {movePositionForSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "movePositionForSubAccount",
                                    MovePositionForSubAccountRequest.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return movePositionForSubAccountCall(movePositionForSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Move Position for Sub-account (For Master Account) Move position between sub-master,
     * master-sub, or sub-sub accounts when necessary * You need to Enable Trading permission for
     * the API Key which requests this endpoint. * This function only support VIP level 7-9. * Only
     * master account can use the function * Quantity should be positive number only * The function
     * support normal account, PM PRO and PM PRO SPAN. * Only support for from account has positions
     * * For all orders in the same orderArgs request, if any symbol’s total close position quantity
     * is bigger than the symbol’s current position quantity, all batch orders in the same list will
     * fail simultaneously. * Only support cross margin mode * The price for move position is
     * MarkPrice only. * Not support for MSA. * Not support for the symbol under Reduce-Only.
     * Weight: 150
     *
     * @param movePositionForSubAccountRequest (required)
     * @return ApiResponse&lt;MovePositionForSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Move Position for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Move-Position-for-Sub-account">Move
     *     Position for Sub-account (For Master Account) Documentation</a>
     */
    public ApiResponse<MovePositionForSubAccountResponse> movePositionForSubAccount(
            @Valid @NotNull MovePositionForSubAccountRequest movePositionForSubAccountRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                movePositionForSubAccountValidateBeforeCall(movePositionForSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<MovePositionForSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for querySubAccountAssets
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Assets </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Assets-V3">Query
     *     Sub-account Assets(For Master Account) Documentation</a>
     */
    private okhttp3.Call querySubAccountAssetsCall(String email, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v3/sub-account/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySubAccountAssetsValidateBeforeCall(String email, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, recvWindow};
            Method method =
                    this.getClass().getMethod("querySubAccountAssets", String.class, Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return querySubAccountAssetsCall(email, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Sub-account Assets(For Master Account) Fetch sub-account assets Weight: 60
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QuerySubAccountAssetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Assets </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Assets-V3">Query
     *     Sub-account Assets(For Master Account) Documentation</a>
     */
    public ApiResponse<QuerySubAccountAssetsResponse> querySubAccountAssets(
            @NotNull String email, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall = querySubAccountAssetsValidateBeforeCall(email, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QuerySubAccountAssetsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for querySubAccountAssetsAssetManagement
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Assets </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Assets-V4">Query
     *     Sub-account Assets (For Master Account)(USER_DATA) Documentation</a>
     */
    private okhttp3.Call querySubAccountAssetsAssetManagementCall(String email, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v4/sub-account/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySubAccountAssetsAssetManagementValidateBeforeCall(
            String email, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "querySubAccountAssetsAssetManagement",
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return querySubAccountAssetsAssetManagementCall(email, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Sub-account Assets (For Master Account)(USER_DATA) Fetch sub-account assets Weight: 60
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QuerySubAccountAssetsAssetManagementResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Assets </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Assets-V4">Query
     *     Sub-account Assets (For Master Account)(USER_DATA) Documentation</a>
     */
    public ApiResponse<QuerySubAccountAssetsAssetManagementResponse>
            querySubAccountAssetsAssetManagement(@NotNull String email, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                querySubAccountAssetsAssetManagementValidateBeforeCall(email, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QuerySubAccountAssetsAssetManagementResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for querySubAccountFuturesAssetTransferHistory
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param futuresType 1:USDT-margined Futures，2: Coin-margined Futures (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Futures Asset Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Futures-Asset-Transfer-History">Query
     *     Sub-account Futures Asset Transfer History(For Master Account) Documentation</a>
     */
    private okhttp3.Call querySubAccountFuturesAssetTransferHistoryCall(
            String email,
            Long futuresType,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/futures/internalTransfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (futuresType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("futuresType", futuresType));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySubAccountFuturesAssetTransferHistoryValidateBeforeCall(
            String email,
            Long futuresType,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                email, futuresType, startTime, endTime, page, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "querySubAccountFuturesAssetTransferHistory",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return querySubAccountFuturesAssetTransferHistoryCall(
                        email, futuresType, startTime, endTime, page, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Sub-account Futures Asset Transfer History(For Master Account) Query Sub-account
     * Futures Asset Transfer History Weight: 1
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param futuresType 1:USDT-margined Futures，2: Coin-margined Futures (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QuerySubAccountFuturesAssetTransferHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Futures Asset Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Futures-Asset-Transfer-History">Query
     *     Sub-account Futures Asset Transfer History(For Master Account) Documentation</a>
     */
    public ApiResponse<QuerySubAccountFuturesAssetTransferHistoryResponse>
            querySubAccountFuturesAssetTransferHistory(
                    @NotNull String email,
                    @NotNull Long futuresType,
                    Long startTime,
                    Long endTime,
                    Long page,
                    Long limit,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                querySubAccountFuturesAssetTransferHistoryValidateBeforeCall(
                        email, futuresType, startTime, endTime, page, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QuerySubAccountFuturesAssetTransferHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for querySubAccountSpotAssetTransferHistory
     *
     * @param fromEmail (optional)
     * @param toEmail (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Spot Asset Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Spot-Asset-Transfer-History">Query
     *     Sub-account Spot Asset Transfer History(For Master Account) Documentation</a>
     */
    private okhttp3.Call querySubAccountSpotAssetTransferHistoryCall(
            String fromEmail,
            String toEmail,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/sub/transfer/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromEmail", fromEmail));
        }

        if (toEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toEmail", toEmail));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySubAccountSpotAssetTransferHistoryValidateBeforeCall(
            String fromEmail,
            String toEmail,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                fromEmail, toEmail, startTime, endTime, page, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "querySubAccountSpotAssetTransferHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return querySubAccountSpotAssetTransferHistoryCall(
                        fromEmail, toEmail, startTime, endTime, page, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Sub-account Spot Asset Transfer History(For Master Account) Query Sub-account Spot
     * Asset Transfer History * fromEmail and toEmail cannot be sent at the same time. * Return
     * fromEmail equal master account email by default. Weight: 1
     *
     * @param fromEmail (optional)
     * @param toEmail (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QuerySubAccountSpotAssetTransferHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Spot Asset Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Spot-Asset-Transfer-History">Query
     *     Sub-account Spot Asset Transfer History(For Master Account) Documentation</a>
     */
    public ApiResponse<QuerySubAccountSpotAssetTransferHistoryResponse>
            querySubAccountSpotAssetTransferHistory(
                    String fromEmail,
                    String toEmail,
                    Long startTime,
                    Long endTime,
                    Long page,
                    Long limit,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                querySubAccountSpotAssetTransferHistoryValidateBeforeCall(
                        fromEmail, toEmail, startTime, endTime, page, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QuerySubAccountSpotAssetTransferHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for querySubAccountSpotAssetsSummary
     *
     * @param email Managed sub-account email (optional)
     * @param page Default value: 1 (optional)
     * @param size default 10, max 20 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Spot Assets Summary </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Spot-Assets-Summary">Query
     *     Sub-account Spot Assets Summary(For Master Account) Documentation</a>
     */
    private okhttp3.Call querySubAccountSpotAssetsSummaryCall(
            String email, Long page, Long size, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/spotSummary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySubAccountSpotAssetsSummaryValidateBeforeCall(
            String email, Long page, Long size, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, page, size, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "querySubAccountSpotAssetsSummary",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return querySubAccountSpotAssetsSummaryCall(email, page, size, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Sub-account Spot Assets Summary(For Master Account) Get BTC valued asset summary of
     * subaccounts. Weight: 1
     *
     * @param email Managed sub-account email (optional)
     * @param page Default value: 1 (optional)
     * @param size default 10, max 20 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QuerySubAccountSpotAssetsSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Spot Assets Summary </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Sub-account-Spot-Assets-Summary">Query
     *     Sub-account Spot Assets Summary(For Master Account) Documentation</a>
     */
    public ApiResponse<QuerySubAccountSpotAssetsSummaryResponse> querySubAccountSpotAssetsSummary(
            String email, Long page, Long size, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                querySubAccountSpotAssetsSummaryValidateBeforeCall(email, page, size, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QuerySubAccountSpotAssetsSummaryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryUniversalTransferHistory
     *
     * @param fromEmail (optional)
     * @param toEmail (optional)
     * @param clientTranId (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Universal Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Universal-Transfer-History">Query
     *     Universal Transfer History(For Master Account) Documentation</a>
     */
    private okhttp3.Call queryUniversalTransferHistoryCall(
            String fromEmail,
            String toEmail,
            String clientTranId,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/universalTransfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromEmail", fromEmail));
        }

        if (toEmail != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("toEmail", toEmail));
        }

        if (clientTranId != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("clientTranId", clientTranId));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryUniversalTransferHistoryValidateBeforeCall(
            String fromEmail,
            String toEmail,
            String clientTranId,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                fromEmail, toEmail, clientTranId, startTime, endTime, page, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryUniversalTransferHistory",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryUniversalTransferHistoryCall(
                        fromEmail,
                        toEmail,
                        clientTranId,
                        startTime,
                        endTime,
                        page,
                        limit,
                        recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Universal Transfer History(For Master Account) Query Universal Transfer History *
     * fromEmail and toEmail cannot be sent at the same time. * Return fromEmail equal master
     * account email by default. * The query time period must be less than 7 days. * If startTime
     * and endTime not sent, return records of the last 7 days by default. Weight: 1
     *
     * @param fromEmail (optional)
     * @param toEmail (optional)
     * @param clientTranId (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryUniversalTransferHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Universal Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Query-Universal-Transfer-History">Query
     *     Universal Transfer History(For Master Account) Documentation</a>
     */
    public ApiResponse<QueryUniversalTransferHistoryResponse> queryUniversalTransferHistory(
            String fromEmail,
            String toEmail,
            String clientTranId,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                queryUniversalTransferHistoryValidateBeforeCall(
                        fromEmail,
                        toEmail,
                        clientTranId,
                        startTime,
                        endTime,
                        page,
                        limit,
                        recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryUniversalTransferHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for subAccountFuturesAssetTransfer
     *
     * @param subAccountFuturesAssetTransferRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Futures Asset Transfer </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Sub-account-Futures-Asset-Transfer">Sub-account
     *     Futures Asset Transfer(For Master Account) Documentation</a>
     */
    private okhttp3.Call subAccountFuturesAssetTransferCall(
            SubAccountFuturesAssetTransferRequest subAccountFuturesAssetTransferRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/futures/internalTransfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subAccountFuturesAssetTransferRequest.getFromEmail() != null) {
            localVarFormParams.put(
                    "fromEmail", subAccountFuturesAssetTransferRequest.getFromEmail());
        }

        if (subAccountFuturesAssetTransferRequest.getToEmail() != null) {
            localVarFormParams.put("toEmail", subAccountFuturesAssetTransferRequest.getToEmail());
        }

        if (subAccountFuturesAssetTransferRequest.getFuturesType() != null) {
            localVarFormParams.put(
                    "futuresType", subAccountFuturesAssetTransferRequest.getFuturesType());
        }

        if (subAccountFuturesAssetTransferRequest.getAsset() != null) {
            localVarFormParams.put("asset", subAccountFuturesAssetTransferRequest.getAsset());
        }

        if (subAccountFuturesAssetTransferRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(subAccountFuturesAssetTransferRequest.getAmount()));
        }

        if (subAccountFuturesAssetTransferRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", subAccountFuturesAssetTransferRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subAccountFuturesAssetTransferValidateBeforeCall(
            SubAccountFuturesAssetTransferRequest subAccountFuturesAssetTransferRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {subAccountFuturesAssetTransferRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "subAccountFuturesAssetTransfer",
                                    SubAccountFuturesAssetTransferRequest.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return subAccountFuturesAssetTransferCall(subAccountFuturesAssetTransferRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Sub-account Futures Asset Transfer(For Master Account) Sub-account Futures Asset Transfer *
     * Master account can transfer max 2000 times a minute * There must be sufficient margin balance
     * in futures wallet to execute transferring. Weight: 1
     *
     * @param subAccountFuturesAssetTransferRequest (required)
     * @return ApiResponse&lt;SubAccountFuturesAssetTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Futures Asset Transfer </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Sub-account-Futures-Asset-Transfer">Sub-account
     *     Futures Asset Transfer(For Master Account) Documentation</a>
     */
    public ApiResponse<SubAccountFuturesAssetTransferResponse> subAccountFuturesAssetTransfer(
            @Valid @NotNull
                    SubAccountFuturesAssetTransferRequest subAccountFuturesAssetTransferRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                subAccountFuturesAssetTransferValidateBeforeCall(
                        subAccountFuturesAssetTransferRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SubAccountFuturesAssetTransferResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for subAccountTransferHistory
     *
     * @param asset If not sent, result of all assets will be returned (optional)
     * @param type 1: transfer in, 2: transfer out (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param returnFailHistory Default &#x60;False&#x60;, return PROCESS and SUCCESS status
     *     history; If &#x60;True&#x60;,return PROCESS and SUCCESS and FAILURE status history
     *     (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Sub-account-Transfer-History">Sub-account
     *     Transfer History(For Sub-account) Documentation</a>
     */
    private okhttp3.Call subAccountTransferHistoryCall(
            String asset,
            Long type,
            Long startTime,
            Long endTime,
            Long limit,
            Boolean returnFailHistory,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/transfer/subUserHistory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (asset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset", asset));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (returnFailHistory != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("returnFailHistory", returnFailHistory));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subAccountTransferHistoryValidateBeforeCall(
            String asset,
            Long type,
            Long startTime,
            Long endTime,
            Long limit,
            Boolean returnFailHistory,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                asset, type, startTime, endTime, limit, returnFailHistory, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "subAccountTransferHistory",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Boolean.class,
                                    Long.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return subAccountTransferHistoryCall(
                        asset, type, startTime, endTime, limit, returnFailHistory, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Sub-account Transfer History(For Sub-account) Sub-account Transfer History * If type is not
     * sent, the records of type 2: transfer out will be returned by default. * If startTime and
     * endTime are not sent, the recent 30-day data will be returned. Weight: 1
     *
     * @param asset If not sent, result of all assets will be returned (optional)
     * @param type 1: transfer in, 2: transfer out (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param returnFailHistory Default &#x60;False&#x60;, return PROCESS and SUCCESS status
     *     history; If &#x60;True&#x60;,return PROCESS and SUCCESS and FAILURE status history
     *     (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;SubAccountTransferHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Transfer History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Sub-account-Transfer-History">Sub-account
     *     Transfer History(For Sub-account) Documentation</a>
     */
    public ApiResponse<SubAccountTransferHistoryResponse> subAccountTransferHistory(
            String asset,
            Long type,
            Long startTime,
            Long endTime,
            Long limit,
            Boolean returnFailHistory,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                subAccountTransferHistoryValidateBeforeCall(
                        asset, type, startTime, endTime, limit, returnFailHistory, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<SubAccountTransferHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for transferToMaster
     *
     * @param transferToMasterRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Transfer to Master </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Transfer-to-Master">Transfer
     *     to Master(For Sub-account) Documentation</a>
     */
    private okhttp3.Call transferToMasterCall(TransferToMasterRequest transferToMasterRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/transfer/subToMaster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transferToMasterRequest.getAsset() != null) {
            localVarFormParams.put("asset", transferToMasterRequest.getAsset());
        }

        if (transferToMasterRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter().format(transferToMasterRequest.getAmount()));
        }

        if (transferToMasterRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", transferToMasterRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferToMasterValidateBeforeCall(
            TransferToMasterRequest transferToMasterRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {transferToMasterRequest};
            Method method =
                    this.getClass().getMethod("transferToMaster", TransferToMasterRequest.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return transferToMasterCall(transferToMasterRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Transfer to Master(For Sub-account) Transfer to Master * You need to open Enable Spot &amp;
     * Margin Trading permission for the API Key which requests this endpoint. Weight: 1
     *
     * @param transferToMasterRequest (required)
     * @return ApiResponse&lt;TransferToMasterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Transfer to Master </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Transfer-to-Master">Transfer
     *     to Master(For Sub-account) Documentation</a>
     */
    public ApiResponse<TransferToMasterResponse> transferToMaster(
            @Valid @NotNull TransferToMasterRequest transferToMasterRequest) throws ApiException {
        okhttp3.Call localVarCall = transferToMasterValidateBeforeCall(transferToMasterRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<TransferToMasterResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for transferToSubAccountOfSameMaster
     *
     * @param transferToSubAccountOfSameMasterRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Transfer to Sub-account of Same Master </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Transfer-to-Sub-account-of-Same-Master">Transfer
     *     to Sub-account of Same Master(For Sub-account) Documentation</a>
     */
    private okhttp3.Call transferToSubAccountOfSameMasterCall(
            TransferToSubAccountOfSameMasterRequest transferToSubAccountOfSameMasterRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/transfer/subToSub";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transferToSubAccountOfSameMasterRequest.getToEmail() != null) {
            localVarFormParams.put("toEmail", transferToSubAccountOfSameMasterRequest.getToEmail());
        }

        if (transferToSubAccountOfSameMasterRequest.getAsset() != null) {
            localVarFormParams.put("asset", transferToSubAccountOfSameMasterRequest.getAsset());
        }

        if (transferToSubAccountOfSameMasterRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(transferToSubAccountOfSameMasterRequest.getAmount()));
        }

        if (transferToSubAccountOfSameMasterRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", transferToSubAccountOfSameMasterRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transferToSubAccountOfSameMasterValidateBeforeCall(
            TransferToSubAccountOfSameMasterRequest transferToSubAccountOfSameMasterRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {transferToSubAccountOfSameMasterRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "transferToSubAccountOfSameMaster",
                                    TransferToSubAccountOfSameMasterRequest.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return transferToSubAccountOfSameMasterCall(
                        transferToSubAccountOfSameMasterRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Transfer to Sub-account of Same Master(For Sub-account) Transfer to Sub-account of Same
     * Master * You need to open Enable Spot &amp; Margin Trading permission for the API Key which
     * requests this endpoint. Weight: 1
     *
     * @param transferToSubAccountOfSameMasterRequest (required)
     * @return ApiResponse&lt;TransferToSubAccountOfSameMasterResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Transfer to Sub-account of Same Master </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Transfer-to-Sub-account-of-Same-Master">Transfer
     *     to Sub-account of Same Master(For Sub-account) Documentation</a>
     */
    public ApiResponse<TransferToSubAccountOfSameMasterResponse> transferToSubAccountOfSameMaster(
            @Valid @NotNull
                    TransferToSubAccountOfSameMasterRequest transferToSubAccountOfSameMasterRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                transferToSubAccountOfSameMasterValidateBeforeCall(
                        transferToSubAccountOfSameMasterRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<TransferToSubAccountOfSameMasterResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for universalTransfer
     *
     * @param universalTransferRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Universal Transfer </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Universal-Transfer">Universal
     *     Transfer(For Master Account) Documentation</a>
     */
    private okhttp3.Call universalTransferCall(UniversalTransferRequest universalTransferRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/universalTransfer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (universalTransferRequest.getFromEmail() != null) {
            localVarFormParams.put("fromEmail", universalTransferRequest.getFromEmail());
        }

        if (universalTransferRequest.getToEmail() != null) {
            localVarFormParams.put("toEmail", universalTransferRequest.getToEmail());
        }

        if (universalTransferRequest.getFromAccountType() != null) {
            localVarFormParams.put(
                    "fromAccountType", universalTransferRequest.getFromAccountType());
        }

        if (universalTransferRequest.getToAccountType() != null) {
            localVarFormParams.put("toAccountType", universalTransferRequest.getToAccountType());
        }

        if (universalTransferRequest.getClientTranId() != null) {
            localVarFormParams.put("clientTranId", universalTransferRequest.getClientTranId());
        }

        if (universalTransferRequest.getSymbol() != null) {
            localVarFormParams.put("symbol", universalTransferRequest.getSymbol());
        }

        if (universalTransferRequest.getAsset() != null) {
            localVarFormParams.put("asset", universalTransferRequest.getAsset());
        }

        if (universalTransferRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter().format(universalTransferRequest.getAmount()));
        }

        if (universalTransferRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", universalTransferRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call universalTransferValidateBeforeCall(
            UniversalTransferRequest universalTransferRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {universalTransferRequest};
            Method method =
                    this.getClass().getMethod("universalTransfer", UniversalTransferRequest.class);
            Set<ConstraintViolation<AssetManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return universalTransferCall(universalTransferRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Universal Transfer(For Master Account) Universal Transfer * You need to enable
     * \&quot;internal transfer\&quot; option for the api key which requests this endpoint. *
     * Transfer from master account by default if fromEmail is not sent. * Transfer to master
     * account by default if toEmail is not sent. * At least either fromEmail or toEmail need to be
     * sent when the fromAccountType and the toAccountType are the same. * Supported transfer
     * scenarios: * &#x60;SPOT&#x60; transfer to &#x60;SPOT&#x60;, &#x60;USDT_FUTURE&#x60;,
     * &#x60;COIN_FUTURE&#x60; (regardless of master or sub) * &#x60;SPOT&#x60;,
     * &#x60;USDT_FUTURE&#x60;, &#x60;COIN_FUTURE&#x60; transfer to &#x60;SPOT&#x60; (regardless of
     * master or sub) * Master account &#x60;SPOT&#x60; transfer to sub-account
     * &#x60;MARGIN(Cross)&#x60;, &#x60;ISOLATED_MARGIN&#x60; * Sub-account
     * &#x60;MARGIN(Cross)&#x60;, &#x60;ISOLATED_MARGIN&#x60; transfer to master account
     * &#x60;SPOT&#x60; * Sub-account &#x60;MARGIN(Cross)&#x60; transfer to Sub-account
     * &#x60;MARGIN(Cross)&#x60; Weight: 360
     *
     * @param universalTransferRequest (required)
     * @return ApiResponse&lt;UniversalTransferResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Universal Transfer </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/asset-management/Universal-Transfer">Universal
     *     Transfer(For Master Account) Documentation</a>
     */
    public ApiResponse<UniversalTransferResponse> universalTransfer(
            @Valid @NotNull UniversalTransferRequest universalTransferRequest) throws ApiException {
        okhttp3.Call localVarCall = universalTransferValidateBeforeCall(universalTransferRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<UniversalTransferResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
