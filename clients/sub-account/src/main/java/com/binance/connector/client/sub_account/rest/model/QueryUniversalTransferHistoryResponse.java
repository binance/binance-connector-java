/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryUniversalTransferHistoryResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryUniversalTransferHistoryResponse {
    public static final String SERIALIZED_NAME_RESULT = "result";

    @SerializedName(SERIALIZED_NAME_RESULT)
    @jakarta.annotation.Nullable
    private List<@Valid QueryUniversalTransferHistoryResponseResultInner> result;

    public static final String SERIALIZED_NAME_TOTAL_COUNT = "totalCount";

    @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
    @jakarta.annotation.Nullable
    private Long totalCount;

    public QueryUniversalTransferHistoryResponse() {}

    public QueryUniversalTransferHistoryResponse result(
            @jakarta.annotation.Nullable
                    List<@Valid QueryUniversalTransferHistoryResponseResultInner> result) {
        this.result = result;
        return this;
    }

    public QueryUniversalTransferHistoryResponse addResultItem(
            QueryUniversalTransferHistoryResponseResultInner resultItem) {
        if (this.result == null) {
            this.result = new ArrayList<>();
        }
        this.result.add(resultItem);
        return this;
    }

    /**
     * Get result
     *
     * @return result
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryUniversalTransferHistoryResponseResultInner> getResult() {
        return result;
    }

    public void setResult(
            @jakarta.annotation.Nullable
                    List<@Valid QueryUniversalTransferHistoryResponseResultInner> result) {
        this.result = result;
    }

    public QueryUniversalTransferHistoryResponse totalCount(
            @jakarta.annotation.Nullable Long totalCount) {
        this.totalCount = totalCount;
        return this;
    }

    /**
     * Get totalCount
     *
     * @return totalCount
     */
    @jakarta.annotation.Nullable
    public Long getTotalCount() {
        return totalCount;
    }

    public void setTotalCount(@jakarta.annotation.Nullable Long totalCount) {
        this.totalCount = totalCount;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryUniversalTransferHistoryResponse queryUniversalTransferHistoryResponse =
                (QueryUniversalTransferHistoryResponse) o;
        return Objects.equals(this.result, queryUniversalTransferHistoryResponse.result)
                && Objects.equals(
                        this.totalCount, queryUniversalTransferHistoryResponse.totalCount);
    }

    @Override
    public int hashCode() {
        return Objects.hash(result, totalCount);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryUniversalTransferHistoryResponse {\n");
        sb.append("		result: ").append(toIndentedString(result)).append("\n");
        sb.append("		totalCount: ").append(toIndentedString(totalCount)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object resultValue = getResult();
        String resultValueAsString = "";
        resultValueAsString =
                (String)
                        ((Collection) resultValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("result=").append(urlEncode(resultValueAsString)).append("");
        Object totalCountValue = getTotalCount();
        String totalCountValueAsString = "";
        totalCountValueAsString = totalCountValue.toString();
        sb.append("totalCount=").append(urlEncode(totalCountValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("result");
        openapiFields.add("totalCount");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryUniversalTransferHistoryResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryUniversalTransferHistoryResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in QueryUniversalTransferHistoryResponse"
                                        + " is not found in the empty JSON string",
                                QueryUniversalTransferHistoryResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryUniversalTransferHistoryResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryUniversalTransferHistoryResponse` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
            JsonArray jsonArrayresult = jsonObj.getAsJsonArray("result");
            if (jsonArrayresult != null) {
                // ensure the json data is an array
                if (!jsonObj.get("result").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `result` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("result").toString()));
                }

                // validate the optional field `result` (array)
                for (int i = 0; i < jsonArrayresult.size(); i++) {
                    QueryUniversalTransferHistoryResponseResultInner.validateJsonElement(
                            jsonArrayresult.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryUniversalTransferHistoryResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'QueryUniversalTransferHistoryResponse'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryUniversalTransferHistoryResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryUniversalTransferHistoryResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryUniversalTransferHistoryResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryUniversalTransferHistoryResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryUniversalTransferHistoryResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryUniversalTransferHistoryResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryUniversalTransferHistoryResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryUniversalTransferHistoryResponse
     */
    public static QueryUniversalTransferHistoryResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, QueryUniversalTransferHistoryResponse.class);
    }

    /**
     * Convert an instance of QueryUniversalTransferHistoryResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
