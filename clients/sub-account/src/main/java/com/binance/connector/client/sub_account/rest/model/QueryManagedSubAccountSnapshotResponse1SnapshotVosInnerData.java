/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData {
    public static final String SERIALIZED_NAME_BALANCES = "balances";

    @SerializedName(SERIALIZED_NAME_BALANCES)
    @jakarta.annotation.Nullable
    private List<@Valid QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerDataBalancesInner>
            balances;

    public static final String SERIALIZED_NAME_TOTAL_ASSET_OF_BTC = "totalAssetOfBtc";

    @SerializedName(SERIALIZED_NAME_TOTAL_ASSET_OF_BTC)
    @jakarta.annotation.Nullable
    private String totalAssetOfBtc;

    public QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData() {}

    public QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData balances(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerDataBalancesInner>
                            balances) {
        this.balances = balances;
        return this;
    }

    public QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData addBalancesItem(
            QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerDataBalancesInner balancesItem) {
        if (this.balances == null) {
            this.balances = new ArrayList<>();
        }
        this.balances.add(balancesItem);
        return this;
    }

    /**
     * Get balances
     *
     * @return balances
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerDataBalancesInner>
            getBalances() {
        return balances;
    }

    public void setBalances(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerDataBalancesInner>
                            balances) {
        this.balances = balances;
    }

    public QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData totalAssetOfBtc(
            @jakarta.annotation.Nullable String totalAssetOfBtc) {
        this.totalAssetOfBtc = totalAssetOfBtc;
        return this;
    }

    /**
     * Get totalAssetOfBtc
     *
     * @return totalAssetOfBtc
     */
    @jakarta.annotation.Nullable
    public String getTotalAssetOfBtc() {
        return totalAssetOfBtc;
    }

    public void setTotalAssetOfBtc(@jakarta.annotation.Nullable String totalAssetOfBtc) {
        this.totalAssetOfBtc = totalAssetOfBtc;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData
                queryManagedSubAccountSnapshotResponse1SnapshotVosInnerData =
                        (QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData) o;
        return Objects.equals(
                        this.balances,
                        queryManagedSubAccountSnapshotResponse1SnapshotVosInnerData.balances)
                && Objects.equals(
                        this.totalAssetOfBtc,
                        queryManagedSubAccountSnapshotResponse1SnapshotVosInnerData
                                .totalAssetOfBtc);
    }

    @Override
    public int hashCode() {
        return Objects.hash(balances, totalAssetOfBtc);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData {\n");
        sb.append("		balances: ").append(toIndentedString(balances)).append("\n");
        sb.append("		totalAssetOfBtc: ").append(toIndentedString(totalAssetOfBtc)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object balancesValue = getBalances();
        String balancesValueAsString = "";
        balancesValueAsString =
                (String)
                        ((Collection) balancesValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("balances=").append(urlEncode(balancesValueAsString)).append("");
        Object totalAssetOfBtcValue = getTotalAssetOfBtc();
        String totalAssetOfBtcValueAsString = "";
        totalAssetOfBtcValueAsString = totalAssetOfBtcValue.toString();
        sb.append("totalAssetOfBtc=").append(urlEncode(totalAssetOfBtcValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("balances");
        openapiFields.add("totalAssetOfBtc");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData"
                                    + " is not found in the empty JSON string",
                                QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (jsonObj.get("balances") != null && !jsonObj.get("balances").isJsonNull()) {
            JsonArray jsonArraybalances = jsonObj.getAsJsonArray("balances");
            if (jsonArraybalances != null) {
                // ensure the json data is an array
                if (!jsonObj.get("balances").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `balances` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("balances").toString()));
                }

                // validate the optional field `balances` (array)
                for (int i = 0; i < jsonArraybalances.size(); i++) {
                    QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerDataBalancesInner
                            .validateJsonElement(jsonArraybalances.get(i));
                }
                ;
            }
        }
        if ((jsonObj.get("totalAssetOfBtc") != null && !jsonObj.get("totalAssetOfBtc").isJsonNull())
                && !jsonObj.get("totalAssetOfBtc").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalAssetOfBtc` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalAssetOfBtc").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData given an
     * JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData
     */
    public static QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData.class);
    }

    /**
     * Convert an instance of QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
