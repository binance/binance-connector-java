/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.sub_account.rest.model.CreateAVirtualSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.CreateAVirtualSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.EnableFuturesForSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.EnableFuturesForSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.EnableLeverageTokenForSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.EnableLeverageTokenForSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.EnableMarginForSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.EnableMarginForSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.EnableOptionsForSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.EnableOptionsForSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.GetFuturesPositionRiskOfSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.GetFuturesPositionRiskOfSubAccountV2Response;
import com.binance.connector.client.sub_account.rest.model.GetSubAccountsStatusOnMarginOrFuturesResponse;
import com.binance.connector.client.sub_account.rest.model.QuerySubAccountListResponse;
import com.binance.connector.client.sub_account.rest.model.QuerySubAccountTransactionStatisticsResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class AccountManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-sub-account/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public AccountManagementApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public AccountManagementApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAVirtualSubAccount
     *
     * @param createAVirtualSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Create a Virtual Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Create-a-Virtual-Sub-account">Create
     *     a Virtual Sub-account(For Master Account) Documentation</a>
     */
    private okhttp3.Call createAVirtualSubAccountCall(
            CreateAVirtualSubAccountRequest createAVirtualSubAccountRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/virtualSubAccount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createAVirtualSubAccountRequest.getSubAccountString() != null) {
            localVarFormParams.put(
                    "subAccountString", createAVirtualSubAccountRequest.getSubAccountString());
        }

        if (createAVirtualSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", createAVirtualSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAVirtualSubAccountValidateBeforeCall(
            CreateAVirtualSubAccountRequest createAVirtualSubAccountRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {createAVirtualSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "createAVirtualSubAccount",
                                    CreateAVirtualSubAccountRequest.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return createAVirtualSubAccountCall(createAVirtualSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Create a Virtual Sub-account(For Master Account) Create a Virtual Sub-account * This request
     * will generate a virtual sub account under your master account. * You need to enable
     * \&quot;trade\&quot; option for the API Key which requests this endpoint. Weight: 1
     *
     * @param createAVirtualSubAccountRequest (required)
     * @return ApiResponse&lt;CreateAVirtualSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Create a Virtual Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Create-a-Virtual-Sub-account">Create
     *     a Virtual Sub-account(For Master Account) Documentation</a>
     */
    public ApiResponse<CreateAVirtualSubAccountResponse> createAVirtualSubAccount(
            @Valid @NotNull CreateAVirtualSubAccountRequest createAVirtualSubAccountRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                createAVirtualSubAccountValidateBeforeCall(createAVirtualSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<CreateAVirtualSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for enableFuturesForSubAccount
     *
     * @param enableFuturesForSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Enable Futures for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Enable-Futures-for-Sub-account">Enable
     *     Futures for Sub-account(For Master Account) Documentation</a>
     */
    private okhttp3.Call enableFuturesForSubAccountCall(
            EnableFuturesForSubAccountRequest enableFuturesForSubAccountRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/futures/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enableFuturesForSubAccountRequest.getEmail() != null) {
            localVarFormParams.put("email", enableFuturesForSubAccountRequest.getEmail());
        }

        if (enableFuturesForSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", enableFuturesForSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableFuturesForSubAccountValidateBeforeCall(
            EnableFuturesForSubAccountRequest enableFuturesForSubAccountRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {enableFuturesForSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "enableFuturesForSubAccount",
                                    EnableFuturesForSubAccountRequest.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return enableFuturesForSubAccountCall(enableFuturesForSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Enable Futures for Sub-account(For Master Account) Enable Futures for Sub-account for Master
     * Account Weight: 1
     *
     * @param enableFuturesForSubAccountRequest (required)
     * @return ApiResponse&lt;EnableFuturesForSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Enable Futures for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Enable-Futures-for-Sub-account">Enable
     *     Futures for Sub-account(For Master Account) Documentation</a>
     */
    public ApiResponse<EnableFuturesForSubAccountResponse> enableFuturesForSubAccount(
            @Valid @NotNull EnableFuturesForSubAccountRequest enableFuturesForSubAccountRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                enableFuturesForSubAccountValidateBeforeCall(enableFuturesForSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<EnableFuturesForSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for enableLeverageTokenForSubAccount
     *
     * @param enableLeverageTokenForSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Enable Leverage Token for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Enable-Leverage-Token-for-Sub-account">Enable
     *     Leverage Token for Sub-account(For Master Account) Documentation</a>
     */
    private okhttp3.Call enableLeverageTokenForSubAccountCall(
            EnableLeverageTokenForSubAccountRequest enableLeverageTokenForSubAccountRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/blvt/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enableLeverageTokenForSubAccountRequest.getEmail() != null) {
            localVarFormParams.put("email", enableLeverageTokenForSubAccountRequest.getEmail());
        }

        if (enableLeverageTokenForSubAccountRequest.getEnableBlvt() != null) {
            localVarFormParams.put(
                    "enableBlvt", enableLeverageTokenForSubAccountRequest.getEnableBlvt());
        }

        if (enableLeverageTokenForSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", enableLeverageTokenForSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableLeverageTokenForSubAccountValidateBeforeCall(
            EnableLeverageTokenForSubAccountRequest enableLeverageTokenForSubAccountRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {enableLeverageTokenForSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "enableLeverageTokenForSubAccount",
                                    EnableLeverageTokenForSubAccountRequest.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return enableLeverageTokenForSubAccountCall(
                        enableLeverageTokenForSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Enable Leverage Token for Sub-account(For Master Account) Enable Leverage Token for
     * Sub-account Weight: 1
     *
     * @param enableLeverageTokenForSubAccountRequest (required)
     * @return ApiResponse&lt;EnableLeverageTokenForSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Enable Leverage Token for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Enable-Leverage-Token-for-Sub-account">Enable
     *     Leverage Token for Sub-account(For Master Account) Documentation</a>
     */
    public ApiResponse<EnableLeverageTokenForSubAccountResponse> enableLeverageTokenForSubAccount(
            @Valid @NotNull
                    EnableLeverageTokenForSubAccountRequest enableLeverageTokenForSubAccountRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                enableLeverageTokenForSubAccountValidateBeforeCall(
                        enableLeverageTokenForSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<EnableLeverageTokenForSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for enableMarginForSubAccount
     *
     * @param enableMarginForSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Enable Margin for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Enable-Margin-for-Sub-account">Enable
     *     Margin for Sub-account(For Master Account) Documentation</a>
     */
    private okhttp3.Call enableMarginForSubAccountCall(
            EnableMarginForSubAccountRequest enableMarginForSubAccountRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/margin/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enableMarginForSubAccountRequest.getEmail() != null) {
            localVarFormParams.put("email", enableMarginForSubAccountRequest.getEmail());
        }

        if (enableMarginForSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", enableMarginForSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableMarginForSubAccountValidateBeforeCall(
            EnableMarginForSubAccountRequest enableMarginForSubAccountRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {enableMarginForSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "enableMarginForSubAccount",
                                    EnableMarginForSubAccountRequest.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return enableMarginForSubAccountCall(enableMarginForSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Enable Margin for Sub-account(For Master Account) Enable Margin for Sub-account Weight: 1
     *
     * @param enableMarginForSubAccountRequest (required)
     * @return ApiResponse&lt;EnableMarginForSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Enable Margin for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Enable-Margin-for-Sub-account">Enable
     *     Margin for Sub-account(For Master Account) Documentation</a>
     */
    public ApiResponse<EnableMarginForSubAccountResponse> enableMarginForSubAccount(
            @Valid @NotNull EnableMarginForSubAccountRequest enableMarginForSubAccountRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                enableMarginForSubAccountValidateBeforeCall(enableMarginForSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<EnableMarginForSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for enableOptionsForSubAccount
     *
     * @param enableOptionsForSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Enable Options for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Enable-Options-for-Sub-account">Enable
     *     Options for Sub-account(For Master Account)(USER_DATA) Documentation</a>
     */
    private okhttp3.Call enableOptionsForSubAccountCall(
            EnableOptionsForSubAccountRequest enableOptionsForSubAccountRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/eoptions/enable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (enableOptionsForSubAccountRequest.getEmail() != null) {
            localVarFormParams.put("email", enableOptionsForSubAccountRequest.getEmail());
        }

        if (enableOptionsForSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", enableOptionsForSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableOptionsForSubAccountValidateBeforeCall(
            EnableOptionsForSubAccountRequest enableOptionsForSubAccountRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {enableOptionsForSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "enableOptionsForSubAccount",
                                    EnableOptionsForSubAccountRequest.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return enableOptionsForSubAccountCall(enableOptionsForSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Enable Options for Sub-account(For Master Account)(USER_DATA) Enable Options for Sub-account
     * (For Master Account). Weight: 1
     *
     * @param enableOptionsForSubAccountRequest (required)
     * @return ApiResponse&lt;EnableOptionsForSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Enable Options for Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Enable-Options-for-Sub-account">Enable
     *     Options for Sub-account(For Master Account)(USER_DATA) Documentation</a>
     */
    public ApiResponse<EnableOptionsForSubAccountResponse> enableOptionsForSubAccount(
            @Valid @NotNull EnableOptionsForSubAccountRequest enableOptionsForSubAccountRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                enableOptionsForSubAccountValidateBeforeCall(enableOptionsForSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<EnableOptionsForSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getFuturesPositionRiskOfSubAccount
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Futures Position-Risk of Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account">Get
     *     Futures Position-Risk of Sub-account(For Master Account) Documentation</a>
     */
    private okhttp3.Call getFuturesPositionRiskOfSubAccountCall(String email, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/futures/positionRisk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFuturesPositionRiskOfSubAccountValidateBeforeCall(
            String email, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getFuturesPositionRiskOfSubAccount", String.class, Long.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFuturesPositionRiskOfSubAccountCall(email, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Futures Position-Risk of Sub-account(For Master Account) Get Futures Position-Risk of
     * Sub-account Weight: 10
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFuturesPositionRiskOfSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Futures Position-Risk of Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account">Get
     *     Futures Position-Risk of Sub-account(For Master Account) Documentation</a>
     */
    public ApiResponse<GetFuturesPositionRiskOfSubAccountResponse>
            getFuturesPositionRiskOfSubAccount(@NotNull String email, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getFuturesPositionRiskOfSubAccountValidateBeforeCall(email, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFuturesPositionRiskOfSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getFuturesPositionRiskOfSubAccountV2
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param futuresType 1:USDT-margined Futures，2: Coin-margined Futures (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Futures Position-Risk of Sub-account V2 </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2">Get
     *     Futures Position-Risk of Sub-account V2(For Master Account) Documentation</a>
     */
    private okhttp3.Call getFuturesPositionRiskOfSubAccountV2Call(
            String email, Long futuresType, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/sub-account/futures/positionRisk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (futuresType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("futuresType", futuresType));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFuturesPositionRiskOfSubAccountV2ValidateBeforeCall(
            String email, Long futuresType, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, futuresType, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getFuturesPositionRiskOfSubAccountV2",
                                    String.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFuturesPositionRiskOfSubAccountV2Call(email, futuresType, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Futures Position-Risk of Sub-account V2(For Master Account) Get Futures Position-Risk of
     * Sub-account V2 Weight: 1
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param futuresType 1:USDT-margined Futures，2: Coin-margined Futures (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFuturesPositionRiskOfSubAccountV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Futures Position-Risk of Sub-account V2 </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Get-Futures-Position-Risk-of-Sub-account-V2">Get
     *     Futures Position-Risk of Sub-account V2(For Master Account) Documentation</a>
     */
    public ApiResponse<GetFuturesPositionRiskOfSubAccountV2Response>
            getFuturesPositionRiskOfSubAccountV2(
                    @NotNull String email, @NotNull Long futuresType, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getFuturesPositionRiskOfSubAccountV2ValidateBeforeCall(
                        email, futuresType, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFuturesPositionRiskOfSubAccountV2Response>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getSubAccountsStatusOnMarginOrFutures
     *
     * @param email Managed sub-account email (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Sub-account&#39;s Status on Margin Or Futures </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Get-Sub-accounts-Status-on-Margin-Or-Futures">Get
     *     Sub-account&#39;s Status on Margin Or Futures(For Master Account) Documentation</a>
     */
    private okhttp3.Call getSubAccountsStatusOnMarginOrFuturesCall(String email, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSubAccountsStatusOnMarginOrFuturesValidateBeforeCall(
            String email, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getSubAccountsStatusOnMarginOrFutures",
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getSubAccountsStatusOnMarginOrFuturesCall(email, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Sub-account&#39;s Status on Margin Or Futures(For Master Account) Get Sub-account&#39;s
     * Status on Margin Or Futures * If no email sent, all sub-accounts&#39; information will be
     * returned. Weight: 10
     *
     * @param email Managed sub-account email (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetSubAccountsStatusOnMarginOrFuturesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Sub-account&#39;s Status on Margin Or Futures </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Get-Sub-accounts-Status-on-Margin-Or-Futures">Get
     *     Sub-account&#39;s Status on Margin Or Futures(For Master Account) Documentation</a>
     */
    public ApiResponse<GetSubAccountsStatusOnMarginOrFuturesResponse>
            getSubAccountsStatusOnMarginOrFutures(String email, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getSubAccountsStatusOnMarginOrFuturesValidateBeforeCall(email, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetSubAccountsStatusOnMarginOrFuturesResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for querySubAccountList
     *
     * @param email Managed sub-account email (optional)
     * @param isFreeze true or false (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Query-Sub-account-List">Query
     *     Sub-account List(For Master Account) Documentation</a>
     */
    private okhttp3.Call querySubAccountListCall(
            String email, String isFreeze, Long page, Long limit, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (isFreeze != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isFreeze", isFreeze));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySubAccountListValidateBeforeCall(
            String email, String isFreeze, Long page, Long limit, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, isFreeze, page, limit, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "querySubAccountList",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return querySubAccountListCall(email, isFreeze, page, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Sub-account List(For Master Account) Query Sub-account List Weight: 1
     *
     * @param email Managed sub-account email (optional)
     * @param isFreeze true or false (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QuerySubAccountListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Query-Sub-account-List">Query
     *     Sub-account List(For Master Account) Documentation</a>
     */
    public ApiResponse<QuerySubAccountListResponse> querySubAccountList(
            String email, String isFreeze, Long page, Long limit, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                querySubAccountListValidateBeforeCall(email, isFreeze, page, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QuerySubAccountListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for querySubAccountTransactionStatistics
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Transaction Statistics </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Query-Sub-account-Transaction-Statistics">Query
     *     Sub-account Transaction Statistics(For Master Account)(USER_DATA) Documentation</a>
     */
    private okhttp3.Call querySubAccountTransactionStatisticsCall(String email, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/transaction-statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call querySubAccountTransactionStatisticsValidateBeforeCall(
            String email, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "querySubAccountTransactionStatistics",
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<AccountManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return querySubAccountTransactionStatisticsCall(email, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Sub-account Transaction Statistics(For Master Account)(USER_DATA) Query Sub-account
     * Transaction statistics (For Master Account). Weight: 60
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QuerySubAccountTransactionStatisticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Sub-account Transaction Statistics </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/account-management/Query-Sub-account-Transaction-Statistics">Query
     *     Sub-account Transaction Statistics(For Master Account)(USER_DATA) Documentation</a>
     */
    public ApiResponse<QuerySubAccountTransactionStatisticsResponse>
            querySubAccountTransactionStatistics(@NotNull String email, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                querySubAccountTransactionStatisticsValidateBeforeCall(email, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QuerySubAccountTransactionStatisticsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
