/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/**
 * QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
 */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public
class QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner {
    public static final String SERIALIZED_NAME_FROM_EMAIL = "fromEmail";

    @SerializedName(SERIALIZED_NAME_FROM_EMAIL)
    @jakarta.annotation.Nullable
    private String fromEmail;

    public static final String SERIALIZED_NAME_FROM_ACCOUNT_TYPE = "fromAccountType";

    @SerializedName(SERIALIZED_NAME_FROM_ACCOUNT_TYPE)
    @jakarta.annotation.Nullable
    private String fromAccountType;

    public static final String SERIALIZED_NAME_TO_EMAIL = "toEmail";

    @SerializedName(SERIALIZED_NAME_TO_EMAIL)
    @jakarta.annotation.Nullable
    private String toEmail;

    public static final String SERIALIZED_NAME_TO_ACCOUNT_TYPE = "toAccountType";

    @SerializedName(SERIALIZED_NAME_TO_ACCOUNT_TYPE)
    @jakarta.annotation.Nullable
    private String toAccountType;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_SCHEDULED_DATA = "scheduledData";

    @SerializedName(SERIALIZED_NAME_SCHEDULED_DATA)
    @jakarta.annotation.Nullable
    private Long scheduledData;

    public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";

    @SerializedName(SERIALIZED_NAME_CREATE_TIME)
    @jakarta.annotation.Nullable
    private Long createTime;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_TRAN_ID = "tranId";

    @SerializedName(SERIALIZED_NAME_TRAN_ID)
    @jakarta.annotation.Nullable
    private Long tranId;

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner() {}

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            fromEmail(@jakarta.annotation.Nullable String fromEmail) {
        this.fromEmail = fromEmail;
        return this;
    }

    /**
     * Get fromEmail
     *
     * @return fromEmail
     */
    @jakarta.annotation.Nullable
    public String getFromEmail() {
        return fromEmail;
    }

    public void setFromEmail(@jakarta.annotation.Nullable String fromEmail) {
        this.fromEmail = fromEmail;
    }

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            fromAccountType(@jakarta.annotation.Nullable String fromAccountType) {
        this.fromAccountType = fromAccountType;
        return this;
    }

    /**
     * Get fromAccountType
     *
     * @return fromAccountType
     */
    @jakarta.annotation.Nullable
    public String getFromAccountType() {
        return fromAccountType;
    }

    public void setFromAccountType(@jakarta.annotation.Nullable String fromAccountType) {
        this.fromAccountType = fromAccountType;
    }

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            toEmail(@jakarta.annotation.Nullable String toEmail) {
        this.toEmail = toEmail;
        return this;
    }

    /**
     * Get toEmail
     *
     * @return toEmail
     */
    @jakarta.annotation.Nullable
    public String getToEmail() {
        return toEmail;
    }

    public void setToEmail(@jakarta.annotation.Nullable String toEmail) {
        this.toEmail = toEmail;
    }

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            toAccountType(@jakarta.annotation.Nullable String toAccountType) {
        this.toAccountType = toAccountType;
        return this;
    }

    /**
     * Get toAccountType
     *
     * @return toAccountType
     */
    @jakarta.annotation.Nullable
    public String getToAccountType() {
        return toAccountType;
    }

    public void setToAccountType(@jakarta.annotation.Nullable String toAccountType) {
        this.toAccountType = toAccountType;
    }

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            asset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            amount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            scheduledData(@jakarta.annotation.Nullable Long scheduledData) {
        this.scheduledData = scheduledData;
        return this;
    }

    /**
     * Get scheduledData
     *
     * @return scheduledData
     */
    @jakarta.annotation.Nullable
    public Long getScheduledData() {
        return scheduledData;
    }

    public void setScheduledData(@jakarta.annotation.Nullable Long scheduledData) {
        this.scheduledData = scheduledData;
    }

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            createTime(@jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
        return this;
    }

    /**
     * Get createTime
     *
     * @return createTime
     */
    @jakarta.annotation.Nullable
    public Long getCreateTime() {
        return createTime;
    }

    public void setCreateTime(@jakarta.annotation.Nullable Long createTime) {
        this.createTime = createTime;
    }

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            tranId(@jakarta.annotation.Nullable Long tranId) {
        this.tranId = tranId;
        return this;
    }

    /**
     * Get tranId
     *
     * @return tranId
     */
    @jakarta.annotation.Nullable
    public Long getTranId() {
        return tranId;
    }

    public void setTranId(@jakarta.annotation.Nullable Long tranId) {
        this.tranId = tranId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner =
                        (QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner)
                                o;
        return Objects.equals(
                        this.fromEmail,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .fromEmail)
                && Objects.equals(
                        this.fromAccountType,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .fromAccountType)
                && Objects.equals(
                        this.toEmail,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .toEmail)
                && Objects.equals(
                        this.toAccountType,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .toAccountType)
                && Objects.equals(
                        this.asset,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .asset)
                && Objects.equals(
                        this.amount,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .amount)
                && Objects.equals(
                        this.scheduledData,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .scheduledData)
                && Objects.equals(
                        this.createTime,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .createTime)
                && Objects.equals(
                        this.status,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .status)
                && Objects.equals(
                        this.tranId,
                        queryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .tranId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                fromEmail,
                fromAccountType,
                toEmail,
                toAccountType,
                asset,
                amount,
                scheduledData,
                createTime,
                status,
                tranId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(
                "class"
                    + " QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner"
                    + " {\n");
        sb.append("		fromEmail: ").append(toIndentedString(fromEmail)).append("\n");
        sb.append("		fromAccountType: ").append(toIndentedString(fromAccountType)).append("\n");
        sb.append("		toEmail: ").append(toIndentedString(toEmail)).append("\n");
        sb.append("		toAccountType: ").append(toIndentedString(toAccountType)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		scheduledData: ").append(toIndentedString(scheduledData)).append("\n");
        sb.append("		createTime: ").append(toIndentedString(createTime)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		tranId: ").append(toIndentedString(tranId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object fromEmailValue = getFromEmail();
        String fromEmailValueAsString = "";
        fromEmailValueAsString = fromEmailValue.toString();
        sb.append("fromEmail=").append(urlEncode(fromEmailValueAsString)).append("");
        Object fromAccountTypeValue = getFromAccountType();
        String fromAccountTypeValueAsString = "";
        fromAccountTypeValueAsString = fromAccountTypeValue.toString();
        sb.append("fromAccountType=").append(urlEncode(fromAccountTypeValueAsString)).append("");
        Object toEmailValue = getToEmail();
        String toEmailValueAsString = "";
        toEmailValueAsString = toEmailValue.toString();
        sb.append("toEmail=").append(urlEncode(toEmailValueAsString)).append("");
        Object toAccountTypeValue = getToAccountType();
        String toAccountTypeValueAsString = "";
        toAccountTypeValueAsString = toAccountTypeValue.toString();
        sb.append("toAccountType=").append(urlEncode(toAccountTypeValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object scheduledDataValue = getScheduledData();
        String scheduledDataValueAsString = "";
        scheduledDataValueAsString = scheduledDataValue.toString();
        sb.append("scheduledData=").append(urlEncode(scheduledDataValueAsString)).append("");
        Object createTimeValue = getCreateTime();
        String createTimeValueAsString = "";
        createTimeValueAsString = createTimeValue.toString();
        sb.append("createTime=").append(urlEncode(createTimeValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object tranIdValue = getTranId();
        String tranIdValueAsString = "";
        tranIdValueAsString = tranIdValue.toString();
        sb.append("tranId=").append(urlEncode(tranIdValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("fromEmail");
        openapiFields.add("fromAccountType");
        openapiFields.add("toEmail");
        openapiFields.add("toAccountType");
        openapiFields.add("asset");
        openapiFields.add("amount");
        openapiFields.add("scheduledData");
        openapiFields.add("createTime");
        openapiFields.add("status");
        openapiFields.add("tranId");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner"
                                    + " is not found in the empty JSON string",
                                QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                    .openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("fromEmail") != null && !jsonObj.get("fromEmail").isJsonNull())
                && !jsonObj.get("fromEmail").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromEmail` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fromEmail").toString()));
        }
        if ((jsonObj.get("fromAccountType") != null && !jsonObj.get("fromAccountType").isJsonNull())
                && !jsonObj.get("fromAccountType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromAccountType` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("fromAccountType").toString()));
        }
        if ((jsonObj.get("toEmail") != null && !jsonObj.get("toEmail").isJsonNull())
                && !jsonObj.get("toEmail").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toEmail` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("toEmail").toString()));
        }
        if ((jsonObj.get("toAccountType") != null && !jsonObj.get("toAccountType").isJsonNull())
                && !jsonObj.get("toAccountType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toAccountType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("toAccountType").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                    .class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<
                            QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                        value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public
                        QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of
     * QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
     * given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of
     *     QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
     */
    public static
    QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
            fromJson(String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                                .class);
    }

    /**
     * Convert an instance of
     * QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
     * to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
