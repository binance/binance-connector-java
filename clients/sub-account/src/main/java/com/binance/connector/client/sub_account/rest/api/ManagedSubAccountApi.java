/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.sub_account.rest.model.DepositAssetsIntoTheManagedSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.DepositAssetsIntoTheManagedSubAccountResponse;
import com.binance.connector.client.sub_account.rest.model.GetManagedSubAccountDepositAddressResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountAssetDetailsResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountFuturesAssetDetailsResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountListResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountMarginAssetDetailsResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountSnapshotResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountTransferLogMasterAccountInvestorResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountTransferLogMasterAccountTradingResponse;
import com.binance.connector.client.sub_account.rest.model.QueryManagedSubAccountTransferLogSubAccountTradingResponse;
import com.binance.connector.client.sub_account.rest.model.WithdrawlAssetsFromTheManagedSubAccountRequest;
import com.binance.connector.client.sub_account.rest.model.WithdrawlAssetsFromTheManagedSubAccountResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class ManagedSubAccountApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-sub-account/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public ManagedSubAccountApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public ManagedSubAccountApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for depositAssetsIntoTheManagedSubAccount
     *
     * @param depositAssetsIntoTheManagedSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Deposit Assets Into The Managed Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Deposit-Assets-Into-The-Managed-Sub-account">Deposit
     *     Assets Into The Managed Sub-account(For Investor Master Account) Documentation</a>
     */
    private okhttp3.Call depositAssetsIntoTheManagedSubAccountCall(
            DepositAssetsIntoTheManagedSubAccountRequest
                    depositAssetsIntoTheManagedSubAccountRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/deposit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (depositAssetsIntoTheManagedSubAccountRequest.getToEmail() != null) {
            localVarFormParams.put(
                    "toEmail", depositAssetsIntoTheManagedSubAccountRequest.getToEmail());
        }

        if (depositAssetsIntoTheManagedSubAccountRequest.getAsset() != null) {
            localVarFormParams.put(
                    "asset", depositAssetsIntoTheManagedSubAccountRequest.getAsset());
        }

        if (depositAssetsIntoTheManagedSubAccountRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(depositAssetsIntoTheManagedSubAccountRequest.getAmount()));
        }

        if (depositAssetsIntoTheManagedSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", depositAssetsIntoTheManagedSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call depositAssetsIntoTheManagedSubAccountValidateBeforeCall(
            DepositAssetsIntoTheManagedSubAccountRequest
                    depositAssetsIntoTheManagedSubAccountRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {depositAssetsIntoTheManagedSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "depositAssetsIntoTheManagedSubAccount",
                                    DepositAssetsIntoTheManagedSubAccountRequest.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return depositAssetsIntoTheManagedSubAccountCall(
                        depositAssetsIntoTheManagedSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Deposit Assets Into The Managed Sub-account(For Investor Master Account) Deposit Assets Into
     * The Managed Sub-account * You need to enable &#x60;Enable Spot &amp; Margin Trading&#x60;
     * option for the api key which requests this endpoint Weight: 1
     *
     * @param depositAssetsIntoTheManagedSubAccountRequest (required)
     * @return ApiResponse&lt;DepositAssetsIntoTheManagedSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Deposit Assets Into The Managed Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Deposit-Assets-Into-The-Managed-Sub-account">Deposit
     *     Assets Into The Managed Sub-account(For Investor Master Account) Documentation</a>
     */
    public ApiResponse<DepositAssetsIntoTheManagedSubAccountResponse>
            depositAssetsIntoTheManagedSubAccount(
                    @Valid @NotNull
                            DepositAssetsIntoTheManagedSubAccountRequest
                                    depositAssetsIntoTheManagedSubAccountRequest)
                    throws ApiException {
        okhttp3.Call localVarCall =
                depositAssetsIntoTheManagedSubAccountValidateBeforeCall(
                        depositAssetsIntoTheManagedSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<DepositAssetsIntoTheManagedSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getManagedSubAccountDepositAddress
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param coin (required)
     * @param network networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
     *     (optional)
     * @param amount (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Managed Sub-account Deposit Address </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Get-Managed-Sub-account-Deposit-Address">Get
     *     Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
     *     Documentation</a>
     */
    private okhttp3.Call getManagedSubAccountDepositAddressCall(
            String email, String coin, String network, Double amount, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/deposit/address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (coin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coin", coin));
        }

        if (network != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("network", network));
        }

        if (amount != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "amount", DecimalFormatter.getFormatter().format(amount)));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getManagedSubAccountDepositAddressValidateBeforeCall(
            String email, String coin, String network, Double amount, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, coin, network, amount, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getManagedSubAccountDepositAddress",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Double.class,
                                    Long.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getManagedSubAccountDepositAddressCall(
                        email, coin, network, amount, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA) Get
     * investor&#39;s managed sub-account deposit address. * If &#x60;network&#x60; is not send,
     * return with default &#x60;network&#x60; of the &#x60;coin&#x60;. * * &#x60;amount&#x60; needs
     * to be sent if using LIGHTNING network Weight: 1
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param coin (required)
     * @param network networks can be found in &#x60;GET /sapi/v1/capital/deposit/address&#x60;
     *     (optional)
     * @param amount (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetManagedSubAccountDepositAddressResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Managed Sub-account Deposit Address </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Get-Managed-Sub-account-Deposit-Address">Get
     *     Managed Sub-account Deposit Address (For Investor Master Account)(USER_DATA)
     *     Documentation</a>
     */
    public ApiResponse<GetManagedSubAccountDepositAddressResponse>
            getManagedSubAccountDepositAddress(
                    @NotNull String email,
                    @NotNull String coin,
                    String network,
                    Double amount,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getManagedSubAccountDepositAddressValidateBeforeCall(
                        email, coin, network, amount, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetManagedSubAccountDepositAddressResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryManagedSubAccountAssetDetails
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account Asset Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Asset-Details">Query
     *     Managed Sub-account Asset Details(For Investor Master Account) Documentation</a>
     */
    private okhttp3.Call queryManagedSubAccountAssetDetailsCall(String email, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/asset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryManagedSubAccountAssetDetailsValidateBeforeCall(
            String email, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryManagedSubAccountAssetDetails", String.class, Long.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryManagedSubAccountAssetDetailsCall(email, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Managed Sub-account Asset Details(For Investor Master Account) Query Managed
     * Sub-account Asset Details Weight: 1
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryManagedSubAccountAssetDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account Asset Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Asset-Details">Query
     *     Managed Sub-account Asset Details(For Investor Master Account) Documentation</a>
     */
    public ApiResponse<QueryManagedSubAccountAssetDetailsResponse>
            queryManagedSubAccountAssetDetails(@NotNull String email, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                queryManagedSubAccountAssetDetailsValidateBeforeCall(email, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryManagedSubAccountAssetDetailsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryManagedSubAccountFuturesAssetDetails
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param accountType No input or input \&quot;MARGIN\&quot; to get Cross Margin account
     *     details. Input \&quot;ISOLATED_MARGIN\&quot; to get Isolated Margin account details.
     *     (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account Futures Asset Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Futures-Asset-Details">Query
     *     Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
     *     Documentation</a>
     */
    private okhttp3.Call queryManagedSubAccountFuturesAssetDetailsCall(
            String email, String accountType) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/fetch-future-asset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("accountType", accountType));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryManagedSubAccountFuturesAssetDetailsValidateBeforeCall(
            String email, String accountType) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, accountType};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryManagedSubAccountFuturesAssetDetails",
                                    String.class,
                                    String.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryManagedSubAccountFuturesAssetDetailsCall(email, accountType);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
     * Investor can use this api to query managed sub account futures asset details Weight: 60
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param accountType No input or input \&quot;MARGIN\&quot; to get Cross Margin account
     *     details. Input \&quot;ISOLATED_MARGIN\&quot; to get Isolated Margin account details.
     *     (optional)
     * @return ApiResponse&lt;QueryManagedSubAccountFuturesAssetDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account Futures Asset Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Futures-Asset-Details">Query
     *     Managed Sub-account Futures Asset Details(For Investor Master Account)(USER_DATA)
     *     Documentation</a>
     */
    public ApiResponse<QueryManagedSubAccountFuturesAssetDetailsResponse>
            queryManagedSubAccountFuturesAssetDetails(@NotNull String email, String accountType)
                    throws ApiException {
        okhttp3.Call localVarCall =
                queryManagedSubAccountFuturesAssetDetailsValidateBeforeCall(email, accountType);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryManagedSubAccountFuturesAssetDetailsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryManagedSubAccountList
     *
     * @param email Managed sub-account email (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-List">Query
     *     Managed Sub-account List(For Investor)(USER_DATA) Documentation</a>
     */
    private okhttp3.Call queryManagedSubAccountListCall(
            String email, Long page, Long limit, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryManagedSubAccountListValidateBeforeCall(
            String email, Long page, Long limit, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, page, limit, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryManagedSubAccountList",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryManagedSubAccountListCall(email, page, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Managed Sub-account List(For Investor)(USER_DATA) Get investor&#39;s managed
     * sub-account list. Weight: 60
     *
     * @param email Managed sub-account email (optional)
     * @param page Default value: 1 (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryManagedSubAccountListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account List </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-List">Query
     *     Managed Sub-account List(For Investor)(USER_DATA) Documentation</a>
     */
    public ApiResponse<QueryManagedSubAccountListResponse> queryManagedSubAccountList(
            String email, Long page, Long limit, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                queryManagedSubAccountListValidateBeforeCall(email, page, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryManagedSubAccountListResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryManagedSubAccountMarginAssetDetails
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param accountType No input or input \&quot;MARGIN\&quot; to get Cross Margin account
     *     details. Input \&quot;ISOLATED_MARGIN\&quot; to get Isolated Margin account details.
     *     (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account Margin Asset Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Margin-Asset-Details">Query
     *     Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
     *     Documentation</a>
     */
    private okhttp3.Call queryManagedSubAccountMarginAssetDetailsCall(
            String email, String accountType) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/marginAsset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (accountType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("accountType", accountType));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryManagedSubAccountMarginAssetDetailsValidateBeforeCall(
            String email, String accountType) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, accountType};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryManagedSubAccountMarginAssetDetails",
                                    String.class,
                                    String.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryManagedSubAccountMarginAssetDetailsCall(email, accountType);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
     * Investor can use this api to query managed sub account margin asset details Weight: 1
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param accountType No input or input \&quot;MARGIN\&quot; to get Cross Margin account
     *     details. Input \&quot;ISOLATED_MARGIN\&quot; to get Isolated Margin account details.
     *     (optional)
     * @return ApiResponse&lt;QueryManagedSubAccountMarginAssetDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account Margin Asset Details </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Margin-Asset-Details">Query
     *     Managed Sub-account Margin Asset Details(For Investor Master Account)(USER_DATA)
     *     Documentation</a>
     */
    public ApiResponse<QueryManagedSubAccountMarginAssetDetailsResponse>
            queryManagedSubAccountMarginAssetDetails(@NotNull String email, String accountType)
                    throws ApiException {
        okhttp3.Call localVarCall =
                queryManagedSubAccountMarginAssetDetailsValidateBeforeCall(email, accountType);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryManagedSubAccountMarginAssetDetailsResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryManagedSubAccountSnapshot
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param type \&quot;SPOT\&quot;, \&quot;MARGIN\&quot;（cross）, \&quot;FUTURES\&quot;（UM）
     *     (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account Snapshot </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Snapshot">Query
     *     Managed Sub-account Snapshot(For Investor Master Account) Documentation</a>
     */
    private okhttp3.Call queryManagedSubAccountSnapshotCall(
            String email, String type, Long startTime, Long endTime, Long limit, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/accountSnapshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryManagedSubAccountSnapshotValidateBeforeCall(
            String email, String type, Long startTime, Long endTime, Long limit, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, type, startTime, endTime, limit, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryManagedSubAccountSnapshot",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryManagedSubAccountSnapshotCall(
                        email, type, startTime, endTime, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Managed Sub-account Snapshot(For Investor Master Account) Query Managed Sub-account
     * Snapshot * The query time period must be less then 30 days * Support query within the last
     * one month only * If startTimeand endTime not sent, return records of the last 7 days by
     * default Weight: 2400
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param type \&quot;SPOT\&quot;, \&quot;MARGIN\&quot;（cross）, \&quot;FUTURES\&quot;（UM）
     *     (required)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param limit Default value: 1, Max value: 200 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryManagedSubAccountSnapshotResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub-account Snapshot </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-account-Snapshot">Query
     *     Managed Sub-account Snapshot(For Investor Master Account) Documentation</a>
     */
    public ApiResponse<QueryManagedSubAccountSnapshotResponse> queryManagedSubAccountSnapshot(
            @NotNull String email,
            @NotNull String type,
            Long startTime,
            Long endTime,
            Long limit,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                queryManagedSubAccountSnapshotValidateBeforeCall(
                        email, type, startTime, endTime, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<QueryManagedSubAccountSnapshotResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryManagedSubAccountTransferLogMasterAccountInvestor
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param startTime Start Time (required)
     * @param endTime End Time (The start time and end time interval cannot exceed half a year)
     *     (required)
     * @param page Page (required)
     * @param limit Limit (Max: 500) (required)
     * @param transfers Transfer Direction (FROM/TO) (optional)
     * @param transferFunctionAccountType Transfer function account type
     *     (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE) (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub Account Transfer Log </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-Account-Transfer-Log-Investor">Query
     *     Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
     *     Documentation</a>
     */
    private okhttp3.Call queryManagedSubAccountTransferLogMasterAccountInvestorCall(
            String email,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            String transfers,
            String transferFunctionAccountType)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/queryTransLogForInvestor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (transfers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transfers", transfers));
        }

        if (transferFunctionAccountType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "transferFunctionAccountType", transferFunctionAccountType));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryManagedSubAccountTransferLogMasterAccountInvestorValidateBeforeCall(
            String email,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            String transfers,
            String transferFunctionAccountType)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                email, startTime, endTime, page, limit, transfers, transferFunctionAccountType
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryManagedSubAccountTransferLogMasterAccountInvestor",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    String.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryManagedSubAccountTransferLogMasterAccountInvestorCall(
                        email,
                        startTime,
                        endTime,
                        page,
                        limit,
                        transfers,
                        transferFunctionAccountType);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA) Investor can
     * use this api to query managed sub account transfer log. This endpoint is available for
     * investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who
     * value flexibility in asset allocation and account application, while delegating trades to a
     * professional trading team. Please refer to
     * [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
     * Weight: 1
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param startTime Start Time (required)
     * @param endTime End Time (The start time and end time interval cannot exceed half a year)
     *     (required)
     * @param page Page (required)
     * @param limit Limit (Max: 500) (required)
     * @param transfers Transfer Direction (FROM/TO) (optional)
     * @param transferFunctionAccountType Transfer function account type
     *     (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE) (optional)
     * @return ApiResponse&lt;QueryManagedSubAccountTransferLogMasterAccountInvestorResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub Account Transfer Log </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-Account-Transfer-Log-Investor">Query
     *     Managed Sub Account Transfer Log(For Investor Master Account)(USER_DATA)
     *     Documentation</a>
     */
    public ApiResponse<QueryManagedSubAccountTransferLogMasterAccountInvestorResponse>
            queryManagedSubAccountTransferLogMasterAccountInvestor(
                    @NotNull String email,
                    @NotNull Long startTime,
                    @NotNull Long endTime,
                    @NotNull Long page,
                    @NotNull Long limit,
                    String transfers,
                    String transferFunctionAccountType)
                    throws ApiException {
        okhttp3.Call localVarCall =
                queryManagedSubAccountTransferLogMasterAccountInvestorValidateBeforeCall(
                        email,
                        startTime,
                        endTime,
                        page,
                        limit,
                        transfers,
                        transferFunctionAccountType);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<
                        QueryManagedSubAccountTransferLogMasterAccountInvestorResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryManagedSubAccountTransferLogMasterAccountTrading
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param startTime Start Time (required)
     * @param endTime End Time (The start time and end time interval cannot exceed half a year)
     *     (required)
     * @param page Page (required)
     * @param limit Limit (Max: 500) (required)
     * @param transfers Transfer Direction (FROM/TO) (optional)
     * @param transferFunctionAccountType Transfer function account type
     *     (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE) (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub Account Transfer Log </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-Account-Transfer-Log-Trading-Team-Master">Query
     *     Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
     *     Documentation</a>
     */
    private okhttp3.Call queryManagedSubAccountTransferLogMasterAccountTradingCall(
            String email,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            String transfers,
            String transferFunctionAccountType)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/queryTransLogForTradeParent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (transfers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transfers", transfers));
        }

        if (transferFunctionAccountType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "transferFunctionAccountType", transferFunctionAccountType));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryManagedSubAccountTransferLogMasterAccountTradingValidateBeforeCall(
            String email,
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            String transfers,
            String transferFunctionAccountType)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                email, startTime, endTime, page, limit, transfers, transferFunctionAccountType
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryManagedSubAccountTransferLogMasterAccountTrading",
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    String.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryManagedSubAccountTransferLogMasterAccountTradingCall(
                        email,
                        startTime,
                        endTime,
                        page,
                        limit,
                        transfers,
                        transferFunctionAccountType);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA) Trading
     * team can use this api to query managed sub account transfer log. This endpoint is available
     * for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for
     * investors who value flexibility in asset allocation and account application, while delegating
     * trades to a professional trading team. Please refer to
     * [link](https://www.binance.com/en/support/faq/how-to-get-started-with-managed-sub-account-functions-and-frequently-asked-questions-0594748722704383a7c369046e489459)
     * Weight: 60
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param startTime Start Time (required)
     * @param endTime End Time (The start time and end time interval cannot exceed half a year)
     *     (required)
     * @param page Page (required)
     * @param limit Limit (Max: 500) (required)
     * @param transfers Transfer Direction (FROM/TO) (optional)
     * @param transferFunctionAccountType Transfer function account type
     *     (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE) (optional)
     * @return ApiResponse&lt;QueryManagedSubAccountTransferLogMasterAccountTradingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub Account Transfer Log </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-Account-Transfer-Log-Trading-Team-Master">Query
     *     Managed Sub Account Transfer Log(For Trading Team Master Account)(USER_DATA)
     *     Documentation</a>
     */
    public ApiResponse<QueryManagedSubAccountTransferLogMasterAccountTradingResponse>
            queryManagedSubAccountTransferLogMasterAccountTrading(
                    @NotNull String email,
                    @NotNull Long startTime,
                    @NotNull Long endTime,
                    @NotNull Long page,
                    @NotNull Long limit,
                    String transfers,
                    String transferFunctionAccountType)
                    throws ApiException {
        okhttp3.Call localVarCall =
                queryManagedSubAccountTransferLogMasterAccountTradingValidateBeforeCall(
                        email,
                        startTime,
                        endTime,
                        page,
                        limit,
                        transfers,
                        transferFunctionAccountType);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<
                        QueryManagedSubAccountTransferLogMasterAccountTradingResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for queryManagedSubAccountTransferLogSubAccountTrading
     *
     * @param startTime Start Time (required)
     * @param endTime End Time (The start time and end time interval cannot exceed half a year)
     *     (required)
     * @param page Page (required)
     * @param limit Limit (Max: 500) (required)
     * @param transfers Transfer Direction (FROM/TO) (optional)
     * @param transferFunctionAccountType Transfer function account type
     *     (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE) (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub Account Transfer Log </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-Account-Transfer-Log-Trading-Team-Sub">Query
     *     Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
     *     Documentation</a>
     */
    private okhttp3.Call queryManagedSubAccountTransferLogSubAccountTradingCall(
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            String transfers,
            String transferFunctionAccountType,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/query-trans-log";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (transfers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transfers", transfers));
        }

        if (transferFunctionAccountType != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair(
                            "transferFunctionAccountType", transferFunctionAccountType));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call queryManagedSubAccountTransferLogSubAccountTradingValidateBeforeCall(
            Long startTime,
            Long endTime,
            Long page,
            Long limit,
            String transfers,
            String transferFunctionAccountType,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                startTime, endTime, page, limit, transfers, transferFunctionAccountType, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "queryManagedSubAccountTransferLogSubAccountTrading",
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    String.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return queryManagedSubAccountTransferLogSubAccountTradingCall(
                        startTime,
                        endTime,
                        page,
                        limit,
                        transfers,
                        transferFunctionAccountType,
                        recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA) Query
     * Managed Sub Account Transfer Log (For Trading Team Sub Account) Weight: 60
     *
     * @param startTime Start Time (required)
     * @param endTime End Time (The start time and end time interval cannot exceed half a year)
     *     (required)
     * @param page Page (required)
     * @param limit Limit (Max: 500) (required)
     * @param transfers Transfer Direction (FROM/TO) (optional)
     * @param transferFunctionAccountType Transfer function account type
     *     (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE) (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;QueryManagedSubAccountTransferLogSubAccountTradingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Managed Sub Account Transfer Log </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Query-Managed-Sub-Account-Transfer-Log-Trading-Team-Sub">Query
     *     Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
     *     Documentation</a>
     */
    public ApiResponse<QueryManagedSubAccountTransferLogSubAccountTradingResponse>
            queryManagedSubAccountTransferLogSubAccountTrading(
                    @NotNull Long startTime,
                    @NotNull Long endTime,
                    @NotNull Long page,
                    @NotNull Long limit,
                    String transfers,
                    String transferFunctionAccountType,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                queryManagedSubAccountTransferLogSubAccountTradingValidateBeforeCall(
                        startTime,
                        endTime,
                        page,
                        limit,
                        transfers,
                        transferFunctionAccountType,
                        recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<
                        QueryManagedSubAccountTransferLogSubAccountTradingResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for withdrawlAssetsFromTheManagedSubAccount
     *
     * @param withdrawlAssetsFromTheManagedSubAccountRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Withdrawl Assets From The Managed Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Withdrawl-Assets-From-The-Managed-Sub-account">Withdrawl
     *     Assets From The Managed Sub-account(For Investor Master Account) Documentation</a>
     */
    private okhttp3.Call withdrawlAssetsFromTheManagedSubAccountCall(
            WithdrawlAssetsFromTheManagedSubAccountRequest
                    withdrawlAssetsFromTheManagedSubAccountRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/managed-subaccount/withdraw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withdrawlAssetsFromTheManagedSubAccountRequest.getFromEmail() != null) {
            localVarFormParams.put(
                    "fromEmail", withdrawlAssetsFromTheManagedSubAccountRequest.getFromEmail());
        }

        if (withdrawlAssetsFromTheManagedSubAccountRequest.getAsset() != null) {
            localVarFormParams.put(
                    "asset", withdrawlAssetsFromTheManagedSubAccountRequest.getAsset());
        }

        if (withdrawlAssetsFromTheManagedSubAccountRequest.getAmount() != null) {
            localVarFormParams.put(
                    "amount",
                    DecimalFormatter.getFormatter()
                            .format(withdrawlAssetsFromTheManagedSubAccountRequest.getAmount()));
        }

        if (withdrawlAssetsFromTheManagedSubAccountRequest.getTransferDate() != null) {
            localVarFormParams.put(
                    "transferDate",
                    withdrawlAssetsFromTheManagedSubAccountRequest.getTransferDate());
        }

        if (withdrawlAssetsFromTheManagedSubAccountRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", withdrawlAssetsFromTheManagedSubAccountRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(Arrays.asList(new String[] {}));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call withdrawlAssetsFromTheManagedSubAccountValidateBeforeCall(
            WithdrawlAssetsFromTheManagedSubAccountRequest
                    withdrawlAssetsFromTheManagedSubAccountRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {withdrawlAssetsFromTheManagedSubAccountRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "withdrawlAssetsFromTheManagedSubAccount",
                                    WithdrawlAssetsFromTheManagedSubAccountRequest.class);
            Set<ConstraintViolation<ManagedSubAccountApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return withdrawlAssetsFromTheManagedSubAccountCall(
                        withdrawlAssetsFromTheManagedSubAccountRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Withdrawl Assets From The Managed Sub-account(For Investor Master Account) Withdrawl Assets
     * From The Managed Sub-account * You need to enable &#x60;Enable Spot &amp; Margin
     * Trading&#x60; option for the api key which requests this endpoint Weight: 1
     *
     * @param withdrawlAssetsFromTheManagedSubAccountRequest (required)
     * @return ApiResponse&lt;WithdrawlAssetsFromTheManagedSubAccountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Withdrawl Assets From The Managed Sub-account </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/managed-sub-account/Withdrawl-Assets-From-The-Managed-Sub-account">Withdrawl
     *     Assets From The Managed Sub-account(For Investor Master Account) Documentation</a>
     */
    public ApiResponse<WithdrawlAssetsFromTheManagedSubAccountResponse>
            withdrawlAssetsFromTheManagedSubAccount(
                    @Valid @NotNull
                            WithdrawlAssetsFromTheManagedSubAccountRequest
                                    withdrawlAssetsFromTheManagedSubAccountRequest)
                    throws ApiException {
        okhttp3.Call localVarCall =
                withdrawlAssetsFromTheManagedSubAccountValidateBeforeCall(
                        withdrawlAssetsFromTheManagedSubAccountRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<WithdrawlAssetsFromTheManagedSubAccountResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
