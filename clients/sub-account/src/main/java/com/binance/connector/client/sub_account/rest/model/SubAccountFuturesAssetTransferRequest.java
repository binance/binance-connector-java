/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** SubAccountFuturesAssetTransferRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class SubAccountFuturesAssetTransferRequest {
    public static final String SERIALIZED_NAME_FROM_EMAIL = "fromEmail";

    @SerializedName(SERIALIZED_NAME_FROM_EMAIL)
    @jakarta.annotation.Nonnull
    private String fromEmail;

    public static final String SERIALIZED_NAME_TO_EMAIL = "toEmail";

    @SerializedName(SERIALIZED_NAME_TO_EMAIL)
    @jakarta.annotation.Nonnull
    private String toEmail;

    public static final String SERIALIZED_NAME_FUTURES_TYPE = "futuresType";

    @SerializedName(SERIALIZED_NAME_FUTURES_TYPE)
    @jakarta.annotation.Nonnull
    private Long futuresType;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nonnull
    private String asset;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nonnull
    private Double amount;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public SubAccountFuturesAssetTransferRequest() {}

    public SubAccountFuturesAssetTransferRequest fromEmail(
            @jakarta.annotation.Nonnull String fromEmail) {
        this.fromEmail = fromEmail;
        return this;
    }

    /**
     * Get fromEmail
     *
     * @return fromEmail
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getFromEmail() {
        return fromEmail;
    }

    public void setFromEmail(@jakarta.annotation.Nonnull String fromEmail) {
        this.fromEmail = fromEmail;
    }

    public SubAccountFuturesAssetTransferRequest toEmail(
            @jakarta.annotation.Nonnull String toEmail) {
        this.toEmail = toEmail;
        return this;
    }

    /**
     * Get toEmail
     *
     * @return toEmail
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getToEmail() {
        return toEmail;
    }

    public void setToEmail(@jakarta.annotation.Nonnull String toEmail) {
        this.toEmail = toEmail;
    }

    public SubAccountFuturesAssetTransferRequest futuresType(
            @jakarta.annotation.Nonnull Long futuresType) {
        this.futuresType = futuresType;
        return this;
    }

    /**
     * Get futuresType
     *
     * @return futuresType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public Long getFuturesType() {
        return futuresType;
    }

    public void setFuturesType(@jakarta.annotation.Nonnull Long futuresType) {
        this.futuresType = futuresType;
    }

    public SubAccountFuturesAssetTransferRequest asset(@jakarta.annotation.Nonnull String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nonnull String asset) {
        this.asset = asset;
    }

    public SubAccountFuturesAssetTransferRequest amount(@jakarta.annotation.Nonnull Double amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nonnull Double amount) {
        this.amount = amount;
    }

    public SubAccountFuturesAssetTransferRequest recvWindow(
            @jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SubAccountFuturesAssetTransferRequest subAccountFuturesAssetTransferRequest =
                (SubAccountFuturesAssetTransferRequest) o;
        return Objects.equals(this.fromEmail, subAccountFuturesAssetTransferRequest.fromEmail)
                && Objects.equals(this.toEmail, subAccountFuturesAssetTransferRequest.toEmail)
                && Objects.equals(
                        this.futuresType, subAccountFuturesAssetTransferRequest.futuresType)
                && Objects.equals(this.asset, subAccountFuturesAssetTransferRequest.asset)
                && Objects.equals(this.amount, subAccountFuturesAssetTransferRequest.amount)
                && Objects.equals(
                        this.recvWindow, subAccountFuturesAssetTransferRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(fromEmail, toEmail, futuresType, asset, amount, recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class SubAccountFuturesAssetTransferRequest {\n");
        sb.append("		fromEmail: ").append(toIndentedString(fromEmail)).append("\n");
        sb.append("		toEmail: ").append(toIndentedString(toEmail)).append("\n");
        sb.append("		futuresType: ").append(toIndentedString(futuresType)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object fromEmailValue = getFromEmail();
        String fromEmailValueAsString = "";
        fromEmailValueAsString = fromEmailValue.toString();
        sb.append("fromEmail=").append(urlEncode(fromEmailValueAsString)).append("");
        Object toEmailValue = getToEmail();
        String toEmailValueAsString = "";
        toEmailValueAsString = toEmailValue.toString();
        sb.append("toEmail=").append(urlEncode(toEmailValueAsString)).append("");
        Object futuresTypeValue = getFuturesType();
        String futuresTypeValueAsString = "";
        futuresTypeValueAsString = futuresTypeValue.toString();
        sb.append("futuresType=").append(urlEncode(futuresTypeValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("fromEmail");
        openapiFields.add("toEmail");
        openapiFields.add("futuresType");
        openapiFields.add("asset");
        openapiFields.add("amount");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("fromEmail");
        openapiRequiredFields.add("toEmail");
        openapiRequiredFields.add("futuresType");
        openapiRequiredFields.add("asset");
        openapiRequiredFields.add("amount");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     SubAccountFuturesAssetTransferRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SubAccountFuturesAssetTransferRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SubAccountFuturesAssetTransferRequest"
                                        + " is not found in the empty JSON string",
                                SubAccountFuturesAssetTransferRequest.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SubAccountFuturesAssetTransferRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `SubAccountFuturesAssetTransferRequest` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : SubAccountFuturesAssetTransferRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("fromEmail").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromEmail` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fromEmail").toString()));
        }
        if (!jsonObj.get("toEmail").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toEmail` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("toEmail").toString()));
        }
        if (!jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SubAccountFuturesAssetTransferRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SubAccountFuturesAssetTransferRequest'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SubAccountFuturesAssetTransferRequest> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(SubAccountFuturesAssetTransferRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SubAccountFuturesAssetTransferRequest>() {
                        @Override
                        public void write(
                                JsonWriter out, SubAccountFuturesAssetTransferRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SubAccountFuturesAssetTransferRequest read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SubAccountFuturesAssetTransferRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SubAccountFuturesAssetTransferRequest
     * @throws IOException if the JSON string is invalid with respect to
     *     SubAccountFuturesAssetTransferRequest
     */
    public static SubAccountFuturesAssetTransferRequest fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, SubAccountFuturesAssetTransferRequest.class);
    }

    /**
     * Convert an instance of SubAccountFuturesAssetTransferRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
