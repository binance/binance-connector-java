/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetSubAccountDepositHistoryResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetSubAccountDepositHistoryResponseInner {
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private String id;

    public static final String SERIALIZED_NAME_AMOUNT = "amount";

    @SerializedName(SERIALIZED_NAME_AMOUNT)
    @jakarta.annotation.Nullable
    private String amount;

    public static final String SERIALIZED_NAME_COIN = "coin";

    @SerializedName(SERIALIZED_NAME_COIN)
    @jakarta.annotation.Nullable
    private String coin;

    public static final String SERIALIZED_NAME_NETWORK = "network";

    @SerializedName(SERIALIZED_NAME_NETWORK)
    @jakarta.annotation.Nullable
    private String network;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private Long status;

    public static final String SERIALIZED_NAME_ADDRESS = "address";

    @SerializedName(SERIALIZED_NAME_ADDRESS)
    @jakarta.annotation.Nullable
    private String address;

    public static final String SERIALIZED_NAME_ADDRESS_TAG = "addressTag";

    @SerializedName(SERIALIZED_NAME_ADDRESS_TAG)
    @jakarta.annotation.Nullable
    private String addressTag;

    public static final String SERIALIZED_NAME_TX_ID = "txId";

    @SerializedName(SERIALIZED_NAME_TX_ID)
    @jakarta.annotation.Nullable
    private String txId;

    public static final String SERIALIZED_NAME_INSERT_TIME = "insertTime";

    @SerializedName(SERIALIZED_NAME_INSERT_TIME)
    @jakarta.annotation.Nullable
    private Long insertTime;

    public static final String SERIALIZED_NAME_TRANSFER_TYPE = "transferType";

    @SerializedName(SERIALIZED_NAME_TRANSFER_TYPE)
    @jakarta.annotation.Nullable
    private Long transferType;

    public static final String SERIALIZED_NAME_CONFIRM_TIMES = "confirmTimes";

    @SerializedName(SERIALIZED_NAME_CONFIRM_TIMES)
    @jakarta.annotation.Nullable
    private String confirmTimes;

    public static final String SERIALIZED_NAME_UNLOCK_CONFIRM = "unlockConfirm";

    @SerializedName(SERIALIZED_NAME_UNLOCK_CONFIRM)
    @jakarta.annotation.Nullable
    private Long unlockConfirm;

    public static final String SERIALIZED_NAME_WALLET_TYPE = "walletType";

    @SerializedName(SERIALIZED_NAME_WALLET_TYPE)
    @jakarta.annotation.Nullable
    private Long walletType;

    public GetSubAccountDepositHistoryResponseInner() {}

    public GetSubAccountDepositHistoryResponseInner id(@jakarta.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable String id) {
        this.id = id;
    }

    public GetSubAccountDepositHistoryResponseInner amount(
            @jakarta.annotation.Nullable String amount) {
        this.amount = amount;
        return this;
    }

    /**
     * Get amount
     *
     * @return amount
     */
    @jakarta.annotation.Nullable
    public String getAmount() {
        return amount;
    }

    public void setAmount(@jakarta.annotation.Nullable String amount) {
        this.amount = amount;
    }

    public GetSubAccountDepositHistoryResponseInner coin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
        return this;
    }

    /**
     * Get coin
     *
     * @return coin
     */
    @jakarta.annotation.Nullable
    public String getCoin() {
        return coin;
    }

    public void setCoin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
    }

    public GetSubAccountDepositHistoryResponseInner network(
            @jakarta.annotation.Nullable String network) {
        this.network = network;
        return this;
    }

    /**
     * Get network
     *
     * @return network
     */
    @jakarta.annotation.Nullable
    public String getNetwork() {
        return network;
    }

    public void setNetwork(@jakarta.annotation.Nullable String network) {
        this.network = network;
    }

    public GetSubAccountDepositHistoryResponseInner status(
            @jakarta.annotation.Nullable Long status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public Long getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable Long status) {
        this.status = status;
    }

    public GetSubAccountDepositHistoryResponseInner address(
            @jakarta.annotation.Nullable String address) {
        this.address = address;
        return this;
    }

    /**
     * Get address
     *
     * @return address
     */
    @jakarta.annotation.Nullable
    public String getAddress() {
        return address;
    }

    public void setAddress(@jakarta.annotation.Nullable String address) {
        this.address = address;
    }

    public GetSubAccountDepositHistoryResponseInner addressTag(
            @jakarta.annotation.Nullable String addressTag) {
        this.addressTag = addressTag;
        return this;
    }

    /**
     * Get addressTag
     *
     * @return addressTag
     */
    @jakarta.annotation.Nullable
    public String getAddressTag() {
        return addressTag;
    }

    public void setAddressTag(@jakarta.annotation.Nullable String addressTag) {
        this.addressTag = addressTag;
    }

    public GetSubAccountDepositHistoryResponseInner txId(@jakarta.annotation.Nullable String txId) {
        this.txId = txId;
        return this;
    }

    /**
     * Get txId
     *
     * @return txId
     */
    @jakarta.annotation.Nullable
    public String getTxId() {
        return txId;
    }

    public void setTxId(@jakarta.annotation.Nullable String txId) {
        this.txId = txId;
    }

    public GetSubAccountDepositHistoryResponseInner insertTime(
            @jakarta.annotation.Nullable Long insertTime) {
        this.insertTime = insertTime;
        return this;
    }

    /**
     * Get insertTime
     *
     * @return insertTime
     */
    @jakarta.annotation.Nullable
    public Long getInsertTime() {
        return insertTime;
    }

    public void setInsertTime(@jakarta.annotation.Nullable Long insertTime) {
        this.insertTime = insertTime;
    }

    public GetSubAccountDepositHistoryResponseInner transferType(
            @jakarta.annotation.Nullable Long transferType) {
        this.transferType = transferType;
        return this;
    }

    /**
     * Get transferType
     *
     * @return transferType
     */
    @jakarta.annotation.Nullable
    public Long getTransferType() {
        return transferType;
    }

    public void setTransferType(@jakarta.annotation.Nullable Long transferType) {
        this.transferType = transferType;
    }

    public GetSubAccountDepositHistoryResponseInner confirmTimes(
            @jakarta.annotation.Nullable String confirmTimes) {
        this.confirmTimes = confirmTimes;
        return this;
    }

    /**
     * Get confirmTimes
     *
     * @return confirmTimes
     */
    @jakarta.annotation.Nullable
    public String getConfirmTimes() {
        return confirmTimes;
    }

    public void setConfirmTimes(@jakarta.annotation.Nullable String confirmTimes) {
        this.confirmTimes = confirmTimes;
    }

    public GetSubAccountDepositHistoryResponseInner unlockConfirm(
            @jakarta.annotation.Nullable Long unlockConfirm) {
        this.unlockConfirm = unlockConfirm;
        return this;
    }

    /**
     * Get unlockConfirm
     *
     * @return unlockConfirm
     */
    @jakarta.annotation.Nullable
    public Long getUnlockConfirm() {
        return unlockConfirm;
    }

    public void setUnlockConfirm(@jakarta.annotation.Nullable Long unlockConfirm) {
        this.unlockConfirm = unlockConfirm;
    }

    public GetSubAccountDepositHistoryResponseInner walletType(
            @jakarta.annotation.Nullable Long walletType) {
        this.walletType = walletType;
        return this;
    }

    /**
     * Get walletType
     *
     * @return walletType
     */
    @jakarta.annotation.Nullable
    public Long getWalletType() {
        return walletType;
    }

    public void setWalletType(@jakarta.annotation.Nullable Long walletType) {
        this.walletType = walletType;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSubAccountDepositHistoryResponseInner getSubAccountDepositHistoryResponseInner =
                (GetSubAccountDepositHistoryResponseInner) o;
        return Objects.equals(this.id, getSubAccountDepositHistoryResponseInner.id)
                && Objects.equals(this.amount, getSubAccountDepositHistoryResponseInner.amount)
                && Objects.equals(this.coin, getSubAccountDepositHistoryResponseInner.coin)
                && Objects.equals(this.network, getSubAccountDepositHistoryResponseInner.network)
                && Objects.equals(this.status, getSubAccountDepositHistoryResponseInner.status)
                && Objects.equals(this.address, getSubAccountDepositHistoryResponseInner.address)
                && Objects.equals(
                        this.addressTag, getSubAccountDepositHistoryResponseInner.addressTag)
                && Objects.equals(this.txId, getSubAccountDepositHistoryResponseInner.txId)
                && Objects.equals(
                        this.insertTime, getSubAccountDepositHistoryResponseInner.insertTime)
                && Objects.equals(
                        this.transferType, getSubAccountDepositHistoryResponseInner.transferType)
                && Objects.equals(
                        this.confirmTimes, getSubAccountDepositHistoryResponseInner.confirmTimes)
                && Objects.equals(
                        this.unlockConfirm, getSubAccountDepositHistoryResponseInner.unlockConfirm)
                && Objects.equals(
                        this.walletType, getSubAccountDepositHistoryResponseInner.walletType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                id,
                amount,
                coin,
                network,
                status,
                address,
                addressTag,
                txId,
                insertTime,
                transferType,
                confirmTimes,
                unlockConfirm,
                walletType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetSubAccountDepositHistoryResponseInner {\n");
        sb.append("		id: ").append(toIndentedString(id)).append("\n");
        sb.append("		amount: ").append(toIndentedString(amount)).append("\n");
        sb.append("		coin: ").append(toIndentedString(coin)).append("\n");
        sb.append("		network: ").append(toIndentedString(network)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		address: ").append(toIndentedString(address)).append("\n");
        sb.append("		addressTag: ").append(toIndentedString(addressTag)).append("\n");
        sb.append("		txId: ").append(toIndentedString(txId)).append("\n");
        sb.append("		insertTime: ").append(toIndentedString(insertTime)).append("\n");
        sb.append("		transferType: ").append(toIndentedString(transferType)).append("\n");
        sb.append("		confirmTimes: ").append(toIndentedString(confirmTimes)).append("\n");
        sb.append("		unlockConfirm: ").append(toIndentedString(unlockConfirm)).append("\n");
        sb.append("		walletType: ").append(toIndentedString(walletType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object idValue = getId();
        String idValueAsString = "";
        idValueAsString = idValue.toString();
        sb.append("id=").append(urlEncode(idValueAsString)).append("");
        Object amountValue = getAmount();
        String amountValueAsString = "";
        amountValueAsString = amountValue.toString();
        sb.append("amount=").append(urlEncode(amountValueAsString)).append("");
        Object coinValue = getCoin();
        String coinValueAsString = "";
        coinValueAsString = coinValue.toString();
        sb.append("coin=").append(urlEncode(coinValueAsString)).append("");
        Object networkValue = getNetwork();
        String networkValueAsString = "";
        networkValueAsString = networkValue.toString();
        sb.append("network=").append(urlEncode(networkValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object addressValue = getAddress();
        String addressValueAsString = "";
        addressValueAsString = addressValue.toString();
        sb.append("address=").append(urlEncode(addressValueAsString)).append("");
        Object addressTagValue = getAddressTag();
        String addressTagValueAsString = "";
        addressTagValueAsString = addressTagValue.toString();
        sb.append("addressTag=").append(urlEncode(addressTagValueAsString)).append("");
        Object txIdValue = getTxId();
        String txIdValueAsString = "";
        txIdValueAsString = txIdValue.toString();
        sb.append("txId=").append(urlEncode(txIdValueAsString)).append("");
        Object insertTimeValue = getInsertTime();
        String insertTimeValueAsString = "";
        insertTimeValueAsString = insertTimeValue.toString();
        sb.append("insertTime=").append(urlEncode(insertTimeValueAsString)).append("");
        Object transferTypeValue = getTransferType();
        String transferTypeValueAsString = "";
        transferTypeValueAsString = transferTypeValue.toString();
        sb.append("transferType=").append(urlEncode(transferTypeValueAsString)).append("");
        Object confirmTimesValue = getConfirmTimes();
        String confirmTimesValueAsString = "";
        confirmTimesValueAsString = confirmTimesValue.toString();
        sb.append("confirmTimes=").append(urlEncode(confirmTimesValueAsString)).append("");
        Object unlockConfirmValue = getUnlockConfirm();
        String unlockConfirmValueAsString = "";
        unlockConfirmValueAsString = unlockConfirmValue.toString();
        sb.append("unlockConfirm=").append(urlEncode(unlockConfirmValueAsString)).append("");
        Object walletTypeValue = getWalletType();
        String walletTypeValueAsString = "";
        walletTypeValueAsString = walletTypeValue.toString();
        sb.append("walletType=").append(urlEncode(walletTypeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("amount");
        openapiFields.add("coin");
        openapiFields.add("network");
        openapiFields.add("status");
        openapiFields.add("address");
        openapiFields.add("addressTag");
        openapiFields.add("txId");
        openapiFields.add("insertTime");
        openapiFields.add("transferType");
        openapiFields.add("confirmTimes");
        openapiFields.add("unlockConfirm");
        openapiFields.add("walletType");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetSubAccountDepositHistoryResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetSubAccountDepositHistoryResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetSubAccountDepositHistoryResponseInner is not found in"
                                    + " the empty JSON string",
                                GetSubAccountDepositHistoryResponseInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetSubAccountDepositHistoryResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetSubAccountDepositHistoryResponseInner` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
                && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        if ((jsonObj.get("amount") != null && !jsonObj.get("amount").isJsonNull())
                && !jsonObj.get("amount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `amount` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("amount").toString()));
        }
        if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull())
                && !jsonObj.get("coin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("coin").toString()));
        }
        if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull())
                && !jsonObj.get("network").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `network` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("network").toString()));
        }
        if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull())
                && !jsonObj.get("address").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `address` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("address").toString()));
        }
        if ((jsonObj.get("addressTag") != null && !jsonObj.get("addressTag").isJsonNull())
                && !jsonObj.get("addressTag").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `addressTag` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("addressTag").toString()));
        }
        if ((jsonObj.get("txId") != null && !jsonObj.get("txId").isJsonNull())
                && !jsonObj.get("txId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `txId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("txId").toString()));
        }
        if ((jsonObj.get("confirmTimes") != null && !jsonObj.get("confirmTimes").isJsonNull())
                && !jsonObj.get("confirmTimes").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `confirmTimes` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("confirmTimes").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetSubAccountDepositHistoryResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetSubAccountDepositHistoryResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetSubAccountDepositHistoryResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetSubAccountDepositHistoryResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetSubAccountDepositHistoryResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetSubAccountDepositHistoryResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetSubAccountDepositHistoryResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetSubAccountDepositHistoryResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetSubAccountDepositHistoryResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetSubAccountDepositHistoryResponseInner
     */
    public static GetSubAccountDepositHistoryResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetSubAccountDepositHistoryResponseInner.class);
    }

    /**
     * Convert an instance of GetSubAccountDepositHistoryResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
