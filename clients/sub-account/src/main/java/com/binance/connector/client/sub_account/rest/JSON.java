/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest;

import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.websocket.service.DeserializeExclusionStrategy;
import com.binance.connector.client.common.websocket.service.SerializeExclusionStrategy;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gsonfire.GsonFireBuilder;
import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Map;
import okio.ByteString;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter =
            new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder();
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(
            JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException(
                    "missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator
     * value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(
            Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException(
                    "cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    static {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder
                .registerTypeAdapter(
                        Double.class,
                        (JsonSerializer<Double>)
                                (src, typeOfSrc, context) -> {
                                    DecimalFormat df = DecimalFormatter.getFormatter();
                                    return new JsonPrimitive(df.format(src));
                                })
                .addSerializationExclusionStrategy(new SerializeExclusionStrategy())
                .addDeserializationExclusionStrategy(new DeserializeExclusionStrategy());
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .AddIpRestrictionForSubAccountApiKeyRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .AddIpRestrictionForSubAccountApiKeyResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .CreateAVirtualSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .CreateAVirtualSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .DeleteIpListForASubAccountApiKeyResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .DepositAssetsIntoTheManagedSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .DepositAssetsIntoTheManagedSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .EnableFuturesForSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .EnableFuturesForSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .EnableLeverageTokenForSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .EnableLeverageTokenForSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .EnableMarginForSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .EnableMarginForSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .EnableOptionsForSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .EnableOptionsForSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .FuturesTransferForSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .FuturesTransferForSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsFuturesAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsFuturesAccountV2Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsFuturesAccountV2Response1
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsFuturesAccountV2Response1FutureAccountResp
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsFuturesAccountV2Response1FutureAccountRespAssetsInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsFuturesAccountV2Response2
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsFuturesAccountV2Response2DeliveryAccountResp
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsFuturesAccountV2Response2DeliveryAccountRespAssetsInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsMarginAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsMarginAccountResponseMarginTradeCoeffVo
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetDetailOnSubAccountsMarginAccountResponseMarginUserAssetVoListInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetFuturesPositionRiskOfSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetFuturesPositionRiskOfSubAccountV2Response.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetFuturesPositionRiskOfSubAccountV2Response1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetFuturesPositionRiskOfSubAccountV2Response2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetIpRestrictionForASubAccountApiKeyResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetManagedSubAccountDepositAddressResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetMovePositionHistoryForSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetMovePositionHistoryForSubAccountResponseFutureMovePositionOrderVoListInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSubAccountDepositAddressResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSubAccountDepositHistoryResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSubAccountDepositHistoryResponseInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSubAccountsStatusOnMarginOrFuturesResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSubAccountsStatusOnMarginOrFuturesResponseInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsFuturesAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsFuturesAccountV2Response
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsFuturesAccountV2Response1
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsFuturesAccountV2Response1FutureAccountSummaryResp
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsFuturesAccountV2Response1FutureAccountSummaryRespSubAccountListInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsFuturesAccountV2Response2
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryRespSubAccountListInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsMarginAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .GetSummaryOfSubAccountsMarginAccountResponseSubAccountListInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .MarginTransferForSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .MarginTransferForSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .MovePositionForSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .MovePositionForSubAccountResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .MovePositionForSubAccountResponseMovePositionOrdersInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model.OrderArgs
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountAssetDetailsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountAssetDetailsResponseInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountFuturesAssetDetailsResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountFuturesAssetDetailsResponseSnapshotVosInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountFuturesAssetDetailsResponseSnapshotVosInnerData
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountFuturesAssetDetailsResponseSnapshotVosInnerDataAssetsInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountFuturesAssetDetailsResponseSnapshotVosInnerDataPositionInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountListResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountListResponseManagerSubUserInfoVoListInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountMarginAssetDetailsResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountMarginAssetDetailsResponseUserAssetsInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse1SnapshotVosInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerData
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse1SnapshotVosInnerDataBalancesInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse2SnapshotVosInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse2SnapshotVosInnerData
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse2SnapshotVosInnerDataUserAssetsInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse3.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse3SnapshotVosInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse3SnapshotVosInnerData
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse3SnapshotVosInnerDataAssetsInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountSnapshotResponse3SnapshotVosInnerDataPositionInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountTransferLogMasterAccountInvestorResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountTransferLogMasterAccountInvestorResponseManagerSubTransferHistoryVosInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountTransferLogMasterAccountTradingResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryManagedSubAccountTransferLogSubAccountTradingResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountAssetsAssetManagementResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountAssetsAssetManagementResponseBalancesInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountAssetsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountAssetsResponseBalancesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountFuturesAssetTransferHistoryResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountFuturesAssetTransferHistoryResponseTransfersInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model.QuerySubAccountListResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountListResponseSubAccountsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountSpotAssetTransferHistoryResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountSpotAssetTransferHistoryResponseInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountSpotAssetsSummaryResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountSpotAssetsSummaryResponseSpotSubUserAssetBtcVoListInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountTransactionStatisticsResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountTransactionStatisticsResponse1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountTransactionStatisticsResponse2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QuerySubAccountTransactionStatisticsResponse2TradeInfoVosInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryUniversalTransferHistoryResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .QueryUniversalTransferHistoryResponseResultInner
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .SubAccountFuturesAssetTransferRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .SubAccountFuturesAssetTransferResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .SubAccountTransferHistoryResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .SubAccountTransferHistoryResponseInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model.TransferToMasterRequest
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model.TransferToMasterResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .TransferToSubAccountOfSameMasterRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .TransferToSubAccountOfSameMasterResponse.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model.UniversalTransferRequest
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model.UniversalTransferResponse
                        .CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .WithdrawlAssetsFromTheManagedSubAccountRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(
                new com.binance.connector.client.sub_account.rest.model
                        .WithdrawlAssetsFromTheManagedSubAccountResponse
                        .CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T> Type
     * @param body The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see
                // https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /** Gson TypeAdapter for Byte Array type */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /** Gson TypeAdapter for JSR310 OffsetDateTime type */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length() - 5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /** Gson TypeAdapter for JSR310 LocalDate type */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type If the dateFormat is null, a simple "yyyy-MM-dd"
     * format will be used (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(
                                ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type If the dateFormat is null, ISO8601Utils will be
     * used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
