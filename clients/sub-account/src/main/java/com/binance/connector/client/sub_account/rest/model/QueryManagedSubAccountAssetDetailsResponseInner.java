/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryManagedSubAccountAssetDetailsResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryManagedSubAccountAssetDetailsResponseInner {
    public static final String SERIALIZED_NAME_COIN = "coin";

    @SerializedName(SERIALIZED_NAME_COIN)
    @jakarta.annotation.Nullable
    private String coin;

    public static final String SERIALIZED_NAME_NAME = "name";

    @SerializedName(SERIALIZED_NAME_NAME)
    @jakarta.annotation.Nullable
    private String name;

    public static final String SERIALIZED_NAME_TOTAL_BALANCE = "totalBalance";

    @SerializedName(SERIALIZED_NAME_TOTAL_BALANCE)
    @jakarta.annotation.Nullable
    private String totalBalance;

    public static final String SERIALIZED_NAME_AVAILABLE_BALANCE = "availableBalance";

    @SerializedName(SERIALIZED_NAME_AVAILABLE_BALANCE)
    @jakarta.annotation.Nullable
    private String availableBalance;

    public static final String SERIALIZED_NAME_IN_ORDER = "inOrder";

    @SerializedName(SERIALIZED_NAME_IN_ORDER)
    @jakarta.annotation.Nullable
    private String inOrder;

    public static final String SERIALIZED_NAME_BTC_VALUE = "btcValue";

    @SerializedName(SERIALIZED_NAME_BTC_VALUE)
    @jakarta.annotation.Nullable
    private String btcValue;

    public QueryManagedSubAccountAssetDetailsResponseInner() {}

    public QueryManagedSubAccountAssetDetailsResponseInner coin(
            @jakarta.annotation.Nullable String coin) {
        this.coin = coin;
        return this;
    }

    /**
     * Get coin
     *
     * @return coin
     */
    @jakarta.annotation.Nullable
    public String getCoin() {
        return coin;
    }

    public void setCoin(@jakarta.annotation.Nullable String coin) {
        this.coin = coin;
    }

    public QueryManagedSubAccountAssetDetailsResponseInner name(
            @jakarta.annotation.Nullable String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     *
     * @return name
     */
    @jakarta.annotation.Nullable
    public String getName() {
        return name;
    }

    public void setName(@jakarta.annotation.Nullable String name) {
        this.name = name;
    }

    public QueryManagedSubAccountAssetDetailsResponseInner totalBalance(
            @jakarta.annotation.Nullable String totalBalance) {
        this.totalBalance = totalBalance;
        return this;
    }

    /**
     * Get totalBalance
     *
     * @return totalBalance
     */
    @jakarta.annotation.Nullable
    public String getTotalBalance() {
        return totalBalance;
    }

    public void setTotalBalance(@jakarta.annotation.Nullable String totalBalance) {
        this.totalBalance = totalBalance;
    }

    public QueryManagedSubAccountAssetDetailsResponseInner availableBalance(
            @jakarta.annotation.Nullable String availableBalance) {
        this.availableBalance = availableBalance;
        return this;
    }

    /**
     * Get availableBalance
     *
     * @return availableBalance
     */
    @jakarta.annotation.Nullable
    public String getAvailableBalance() {
        return availableBalance;
    }

    public void setAvailableBalance(@jakarta.annotation.Nullable String availableBalance) {
        this.availableBalance = availableBalance;
    }

    public QueryManagedSubAccountAssetDetailsResponseInner inOrder(
            @jakarta.annotation.Nullable String inOrder) {
        this.inOrder = inOrder;
        return this;
    }

    /**
     * Get inOrder
     *
     * @return inOrder
     */
    @jakarta.annotation.Nullable
    public String getInOrder() {
        return inOrder;
    }

    public void setInOrder(@jakarta.annotation.Nullable String inOrder) {
        this.inOrder = inOrder;
    }

    public QueryManagedSubAccountAssetDetailsResponseInner btcValue(
            @jakarta.annotation.Nullable String btcValue) {
        this.btcValue = btcValue;
        return this;
    }

    /**
     * Get btcValue
     *
     * @return btcValue
     */
    @jakarta.annotation.Nullable
    public String getBtcValue() {
        return btcValue;
    }

    public void setBtcValue(@jakarta.annotation.Nullable String btcValue) {
        this.btcValue = btcValue;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryManagedSubAccountAssetDetailsResponseInner
                queryManagedSubAccountAssetDetailsResponseInner =
                        (QueryManagedSubAccountAssetDetailsResponseInner) o;
        return Objects.equals(this.coin, queryManagedSubAccountAssetDetailsResponseInner.coin)
                && Objects.equals(this.name, queryManagedSubAccountAssetDetailsResponseInner.name)
                && Objects.equals(
                        this.totalBalance,
                        queryManagedSubAccountAssetDetailsResponseInner.totalBalance)
                && Objects.equals(
                        this.availableBalance,
                        queryManagedSubAccountAssetDetailsResponseInner.availableBalance)
                && Objects.equals(
                        this.inOrder, queryManagedSubAccountAssetDetailsResponseInner.inOrder)
                && Objects.equals(
                        this.btcValue, queryManagedSubAccountAssetDetailsResponseInner.btcValue);
    }

    @Override
    public int hashCode() {
        return Objects.hash(coin, name, totalBalance, availableBalance, inOrder, btcValue);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryManagedSubAccountAssetDetailsResponseInner {\n");
        sb.append("		coin: ").append(toIndentedString(coin)).append("\n");
        sb.append("		name: ").append(toIndentedString(name)).append("\n");
        sb.append("		totalBalance: ").append(toIndentedString(totalBalance)).append("\n");
        sb.append("		availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
        sb.append("		inOrder: ").append(toIndentedString(inOrder)).append("\n");
        sb.append("		btcValue: ").append(toIndentedString(btcValue)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object coinValue = getCoin();
        String coinValueAsString = "";
        coinValueAsString = coinValue.toString();
        sb.append("coin=").append(urlEncode(coinValueAsString)).append("");
        Object nameValue = getName();
        String nameValueAsString = "";
        nameValueAsString = nameValue.toString();
        sb.append("name=").append(urlEncode(nameValueAsString)).append("");
        Object totalBalanceValue = getTotalBalance();
        String totalBalanceValueAsString = "";
        totalBalanceValueAsString = totalBalanceValue.toString();
        sb.append("totalBalance=").append(urlEncode(totalBalanceValueAsString)).append("");
        Object availableBalanceValue = getAvailableBalance();
        String availableBalanceValueAsString = "";
        availableBalanceValueAsString = availableBalanceValue.toString();
        sb.append("availableBalance=").append(urlEncode(availableBalanceValueAsString)).append("");
        Object inOrderValue = getInOrder();
        String inOrderValueAsString = "";
        inOrderValueAsString = inOrderValue.toString();
        sb.append("inOrder=").append(urlEncode(inOrderValueAsString)).append("");
        Object btcValueValue = getBtcValue();
        String btcValueValueAsString = "";
        btcValueValueAsString = btcValueValue.toString();
        sb.append("btcValue=").append(urlEncode(btcValueValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("coin");
        openapiFields.add("name");
        openapiFields.add("totalBalance");
        openapiFields.add("availableBalance");
        openapiFields.add("inOrder");
        openapiFields.add("btcValue");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryManagedSubAccountAssetDetailsResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryManagedSubAccountAssetDetailsResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " QueryManagedSubAccountAssetDetailsResponseInner is not"
                                        + " found in the empty JSON string",
                                QueryManagedSubAccountAssetDetailsResponseInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryManagedSubAccountAssetDetailsResponseInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QueryManagedSubAccountAssetDetailsResponseInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("coin") != null && !jsonObj.get("coin").isJsonNull())
                && !jsonObj.get("coin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `coin` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("coin").toString()));
        }
        if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull())
                && !jsonObj.get("name").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `name` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("name").toString()));
        }
        if ((jsonObj.get("totalBalance") != null && !jsonObj.get("totalBalance").isJsonNull())
                && !jsonObj.get("totalBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalBalance` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("totalBalance").toString()));
        }
        if ((jsonObj.get("availableBalance") != null
                        && !jsonObj.get("availableBalance").isJsonNull())
                && !jsonObj.get("availableBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `availableBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("availableBalance").toString()));
        }
        if ((jsonObj.get("inOrder") != null && !jsonObj.get("inOrder").isJsonNull())
                && !jsonObj.get("inOrder").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `inOrder` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("inOrder").toString()));
        }
        if ((jsonObj.get("btcValue") != null && !jsonObj.get("btcValue").isJsonNull())
                && !jsonObj.get("btcValue").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `btcValue` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("btcValue").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryManagedSubAccountAssetDetailsResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QueryManagedSubAccountAssetDetailsResponseInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryManagedSubAccountAssetDetailsResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(QueryManagedSubAccountAssetDetailsResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryManagedSubAccountAssetDetailsResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QueryManagedSubAccountAssetDetailsResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryManagedSubAccountAssetDetailsResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryManagedSubAccountAssetDetailsResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryManagedSubAccountAssetDetailsResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryManagedSubAccountAssetDetailsResponseInner
     */
    public static QueryManagedSubAccountAssetDetailsResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QueryManagedSubAccountAssetDetailsResponseInner.class);
    }

    /**
     * Convert an instance of QueryManagedSubAccountAssetDetailsResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
