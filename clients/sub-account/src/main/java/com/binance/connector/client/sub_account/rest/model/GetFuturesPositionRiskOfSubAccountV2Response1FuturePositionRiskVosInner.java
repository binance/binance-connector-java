/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner {
    public static final String SERIALIZED_NAME_ENTRY_PRICE = "entryPrice";

    @SerializedName(SERIALIZED_NAME_ENTRY_PRICE)
    @jakarta.annotation.Nullable
    private String entryPrice;

    public static final String SERIALIZED_NAME_LEVERAGE = "leverage";

    @SerializedName(SERIALIZED_NAME_LEVERAGE)
    @jakarta.annotation.Nullable
    private String leverage;

    public static final String SERIALIZED_NAME_MAX_NOTIONAL = "maxNotional";

    @SerializedName(SERIALIZED_NAME_MAX_NOTIONAL)
    @jakarta.annotation.Nullable
    private String maxNotional;

    public static final String SERIALIZED_NAME_LIQUIDATION_PRICE = "liquidationPrice";

    @SerializedName(SERIALIZED_NAME_LIQUIDATION_PRICE)
    @jakarta.annotation.Nullable
    private String liquidationPrice;

    public static final String SERIALIZED_NAME_MARK_PRICE = "markPrice";

    @SerializedName(SERIALIZED_NAME_MARK_PRICE)
    @jakarta.annotation.Nullable
    private String markPrice;

    public static final String SERIALIZED_NAME_POSITION_AMOUNT = "positionAmount";

    @SerializedName(SERIALIZED_NAME_POSITION_AMOUNT)
    @jakarta.annotation.Nullable
    private String positionAmount;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_UNREALIZED_PROFIT = "unrealizedProfit";

    @SerializedName(SERIALIZED_NAME_UNREALIZED_PROFIT)
    @jakarta.annotation.Nullable
    private String unrealizedProfit;

    public GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner() {}

    public GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner entryPrice(
            @jakarta.annotation.Nullable String entryPrice) {
        this.entryPrice = entryPrice;
        return this;
    }

    /**
     * Get entryPrice
     *
     * @return entryPrice
     */
    @jakarta.annotation.Nullable
    public String getEntryPrice() {
        return entryPrice;
    }

    public void setEntryPrice(@jakarta.annotation.Nullable String entryPrice) {
        this.entryPrice = entryPrice;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner leverage(
            @jakarta.annotation.Nullable String leverage) {
        this.leverage = leverage;
        return this;
    }

    /**
     * Get leverage
     *
     * @return leverage
     */
    @jakarta.annotation.Nullable
    public String getLeverage() {
        return leverage;
    }

    public void setLeverage(@jakarta.annotation.Nullable String leverage) {
        this.leverage = leverage;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner maxNotional(
            @jakarta.annotation.Nullable String maxNotional) {
        this.maxNotional = maxNotional;
        return this;
    }

    /**
     * Get maxNotional
     *
     * @return maxNotional
     */
    @jakarta.annotation.Nullable
    public String getMaxNotional() {
        return maxNotional;
    }

    public void setMaxNotional(@jakarta.annotation.Nullable String maxNotional) {
        this.maxNotional = maxNotional;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner liquidationPrice(
            @jakarta.annotation.Nullable String liquidationPrice) {
        this.liquidationPrice = liquidationPrice;
        return this;
    }

    /**
     * Get liquidationPrice
     *
     * @return liquidationPrice
     */
    @jakarta.annotation.Nullable
    public String getLiquidationPrice() {
        return liquidationPrice;
    }

    public void setLiquidationPrice(@jakarta.annotation.Nullable String liquidationPrice) {
        this.liquidationPrice = liquidationPrice;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner markPrice(
            @jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
        return this;
    }

    /**
     * Get markPrice
     *
     * @return markPrice
     */
    @jakarta.annotation.Nullable
    public String getMarkPrice() {
        return markPrice;
    }

    public void setMarkPrice(@jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner positionAmount(
            @jakarta.annotation.Nullable String positionAmount) {
        this.positionAmount = positionAmount;
        return this;
    }

    /**
     * Get positionAmount
     *
     * @return positionAmount
     */
    @jakarta.annotation.Nullable
    public String getPositionAmount() {
        return positionAmount;
    }

    public void setPositionAmount(@jakarta.annotation.Nullable String positionAmount) {
        this.positionAmount = positionAmount;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner unrealizedProfit(
            @jakarta.annotation.Nullable String unrealizedProfit) {
        this.unrealizedProfit = unrealizedProfit;
        return this;
    }

    /**
     * Get unrealizedProfit
     *
     * @return unrealizedProfit
     */
    @jakarta.annotation.Nullable
    public String getUnrealizedProfit() {
        return unrealizedProfit;
    }

    public void setUnrealizedProfit(@jakarta.annotation.Nullable String unrealizedProfit) {
        this.unrealizedProfit = unrealizedProfit;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                getFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner =
                        (GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner) o;
        return Objects.equals(
                        this.entryPrice,
                        getFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                .entryPrice)
                && Objects.equals(
                        this.leverage,
                        getFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                .leverage)
                && Objects.equals(
                        this.maxNotional,
                        getFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                .maxNotional)
                && Objects.equals(
                        this.liquidationPrice,
                        getFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                .liquidationPrice)
                && Objects.equals(
                        this.markPrice,
                        getFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                .markPrice)
                && Objects.equals(
                        this.positionAmount,
                        getFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                .positionAmount)
                && Objects.equals(
                        this.symbol,
                        getFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                .symbol)
                && Objects.equals(
                        this.unrealizedProfit,
                        getFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                .unrealizedProfit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                entryPrice,
                leverage,
                maxNotional,
                liquidationPrice,
                markPrice,
                positionAmount,
                symbol,
                unrealizedProfit);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(
                "class GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner"
                        + " {\n");
        sb.append("		entryPrice: ").append(toIndentedString(entryPrice)).append("\n");
        sb.append("		leverage: ").append(toIndentedString(leverage)).append("\n");
        sb.append("		maxNotional: ").append(toIndentedString(maxNotional)).append("\n");
        sb.append("		liquidationPrice: ").append(toIndentedString(liquidationPrice)).append("\n");
        sb.append("		markPrice: ").append(toIndentedString(markPrice)).append("\n");
        sb.append("		positionAmount: ").append(toIndentedString(positionAmount)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		unrealizedProfit: ").append(toIndentedString(unrealizedProfit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object entryPriceValue = getEntryPrice();
        String entryPriceValueAsString = "";
        entryPriceValueAsString = entryPriceValue.toString();
        sb.append("entryPrice=").append(urlEncode(entryPriceValueAsString)).append("");
        Object leverageValue = getLeverage();
        String leverageValueAsString = "";
        leverageValueAsString = leverageValue.toString();
        sb.append("leverage=").append(urlEncode(leverageValueAsString)).append("");
        Object maxNotionalValue = getMaxNotional();
        String maxNotionalValueAsString = "";
        maxNotionalValueAsString = maxNotionalValue.toString();
        sb.append("maxNotional=").append(urlEncode(maxNotionalValueAsString)).append("");
        Object liquidationPriceValue = getLiquidationPrice();
        String liquidationPriceValueAsString = "";
        liquidationPriceValueAsString = liquidationPriceValue.toString();
        sb.append("liquidationPrice=").append(urlEncode(liquidationPriceValueAsString)).append("");
        Object markPriceValue = getMarkPrice();
        String markPriceValueAsString = "";
        markPriceValueAsString = markPriceValue.toString();
        sb.append("markPrice=").append(urlEncode(markPriceValueAsString)).append("");
        Object positionAmountValue = getPositionAmount();
        String positionAmountValueAsString = "";
        positionAmountValueAsString = positionAmountValue.toString();
        sb.append("positionAmount=").append(urlEncode(positionAmountValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object unrealizedProfitValue = getUnrealizedProfit();
        String unrealizedProfitValueAsString = "";
        unrealizedProfitValueAsString = unrealizedProfitValue.toString();
        sb.append("unrealizedProfit=").append(urlEncode(unrealizedProfitValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("entryPrice");
        openapiFields.add("leverage");
        openapiFields.add("maxNotional");
        openapiFields.add("liquidationPrice");
        openapiFields.add("markPrice");
        openapiFields.add("positionAmount");
        openapiFields.add("symbol");
        openapiFields.add("unrealizedProfit");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner"
                                    + " is not found in the empty JSON string",
                                GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                    .openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("entryPrice") != null && !jsonObj.get("entryPrice").isJsonNull())
                && !jsonObj.get("entryPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `entryPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("entryPrice").toString()));
        }
        if ((jsonObj.get("leverage") != null && !jsonObj.get("leverage").isJsonNull())
                && !jsonObj.get("leverage").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `leverage` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("leverage").toString()));
        }
        if ((jsonObj.get("maxNotional") != null && !jsonObj.get("maxNotional").isJsonNull())
                && !jsonObj.get("maxNotional").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxNotional` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maxNotional").toString()));
        }
        if ((jsonObj.get("liquidationPrice") != null
                        && !jsonObj.get("liquidationPrice").isJsonNull())
                && !jsonObj.get("liquidationPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `liquidationPrice` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("liquidationPrice").toString()));
        }
        if ((jsonObj.get("markPrice") != null && !jsonObj.get("markPrice").isJsonNull())
                && !jsonObj.get("markPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `markPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("markPrice").toString()));
        }
        if ((jsonObj.get("positionAmount") != null && !jsonObj.get("positionAmount").isJsonNull())
                && !jsonObj.get("positionAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionAmount").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("unrealizedProfit") != null
                        && !jsonObj.get("unrealizedProfit").isJsonNull())
                && !jsonObj.get("unrealizedProfit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `unrealizedProfit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("unrealizedProfit").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<
                            GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                        value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public
                        GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
     * given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of
     *     GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
     */
    public static GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner
                                .class);
    }

    /**
     * Convert an instance of
     * GetFuturesPositionRiskOfSubAccountV2Response1FuturePositionRiskVosInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
