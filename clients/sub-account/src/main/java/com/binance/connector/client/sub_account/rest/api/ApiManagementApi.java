/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.sub_account.rest.model.AddIpRestrictionForSubAccountApiKeyRequest;
import com.binance.connector.client.sub_account.rest.model.AddIpRestrictionForSubAccountApiKeyResponse;
import com.binance.connector.client.sub_account.rest.model.DeleteIpListForASubAccountApiKeyResponse;
import com.binance.connector.client.sub_account.rest.model.GetIpRestrictionForASubAccountApiKeyResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class ApiManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-sub-account/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public ApiManagementApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public ApiManagementApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addIpRestrictionForSubAccountApiKey
     *
     * @param addIpRestrictionForSubAccountApiKeyRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Add IP Restriction for Sub-Account API key </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/api-management/Add-IP-Restriction-for-Sub-Account-API-key">Add
     *     IP Restriction for Sub-Account API key(For Master Account) Documentation</a>
     */
    private okhttp3.Call addIpRestrictionForSubAccountApiKeyCall(
            AddIpRestrictionForSubAccountApiKeyRequest addIpRestrictionForSubAccountApiKeyRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/sub-account/subAccountApi/ipRestriction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addIpRestrictionForSubAccountApiKeyRequest.getEmail() != null) {
            localVarFormParams.put("email", addIpRestrictionForSubAccountApiKeyRequest.getEmail());
        }

        if (addIpRestrictionForSubAccountApiKeyRequest.getSubAccountApiKey() != null) {
            localVarFormParams.put(
                    "subAccountApiKey",
                    addIpRestrictionForSubAccountApiKeyRequest.getSubAccountApiKey());
        }

        if (addIpRestrictionForSubAccountApiKeyRequest.getStatus() != null) {
            localVarFormParams.put(
                    "status", addIpRestrictionForSubAccountApiKeyRequest.getStatus());
        }

        if (addIpRestrictionForSubAccountApiKeyRequest.getIpAddress() != null) {
            localVarFormParams.put(
                    "ipAddress", addIpRestrictionForSubAccountApiKeyRequest.getIpAddress());
        }

        if (addIpRestrictionForSubAccountApiKeyRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", addIpRestrictionForSubAccountApiKeyRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addIpRestrictionForSubAccountApiKeyValidateBeforeCall(
            AddIpRestrictionForSubAccountApiKeyRequest addIpRestrictionForSubAccountApiKeyRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {addIpRestrictionForSubAccountApiKeyRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "addIpRestrictionForSubAccountApiKey",
                                    AddIpRestrictionForSubAccountApiKeyRequest.class);
            Set<ConstraintViolation<ApiManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return addIpRestrictionForSubAccountApiKeyCall(
                        addIpRestrictionForSubAccountApiKeyRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Add IP Restriction for Sub-Account API key(For Master Account) Add IP Restriction for
     * Sub-Account API key * You need to enable Enable Spot &amp; Margin Trading option for the api
     * key which requests this endpoint Weight: 3000
     *
     * @param addIpRestrictionForSubAccountApiKeyRequest (required)
     * @return ApiResponse&lt;AddIpRestrictionForSubAccountApiKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Add IP Restriction for Sub-Account API key </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/api-management/Add-IP-Restriction-for-Sub-Account-API-key">Add
     *     IP Restriction for Sub-Account API key(For Master Account) Documentation</a>
     */
    public ApiResponse<AddIpRestrictionForSubAccountApiKeyResponse>
            addIpRestrictionForSubAccountApiKey(
                    @Valid @NotNull
                            AddIpRestrictionForSubAccountApiKeyRequest
                                    addIpRestrictionForSubAccountApiKeyRequest)
                    throws ApiException {
        okhttp3.Call localVarCall =
                addIpRestrictionForSubAccountApiKeyValidateBeforeCall(
                        addIpRestrictionForSubAccountApiKeyRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<AddIpRestrictionForSubAccountApiKeyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for deleteIpListForASubAccountApiKey
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param subAccountApiKey (required)
     * @param ipAddress Can be added in batches, separated by commas (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Delete IP List For a Sub-account API Key </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/api-management/Delete-IP-List-For-a-Sub-account-API-Key">Delete
     *     IP List For a Sub-account API Key(For Master Account) Documentation</a>
     */
    private okhttp3.Call deleteIpListForASubAccountApiKeyCall(
            String email, String subAccountApiKey, String ipAddress, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (subAccountApiKey != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("subAccountApiKey", subAccountApiKey));
        }

        if (ipAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ipAddress", ipAddress));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "DELETE",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIpListForASubAccountApiKeyValidateBeforeCall(
            String email, String subAccountApiKey, String ipAddress, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, subAccountApiKey, ipAddress, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "deleteIpListForASubAccountApiKey",
                                    String.class,
                                    String.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<ApiManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return deleteIpListForASubAccountApiKeyCall(
                        email, subAccountApiKey, ipAddress, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Delete IP List For a Sub-account API Key(For Master Account) Delete IP List For a Sub-account
     * API Key * You need to enable Enable Spot &amp; Margin Trading option for the api key which
     * requests this endpoint Weight: 3000
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param subAccountApiKey (required)
     * @param ipAddress Can be added in batches, separated by commas (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;DeleteIpListForASubAccountApiKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Delete IP List For a Sub-account API Key </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/api-management/Delete-IP-List-For-a-Sub-account-API-Key">Delete
     *     IP List For a Sub-account API Key(For Master Account) Documentation</a>
     */
    public ApiResponse<DeleteIpListForASubAccountApiKeyResponse> deleteIpListForASubAccountApiKey(
            @NotNull String email,
            @NotNull String subAccountApiKey,
            String ipAddress,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                deleteIpListForASubAccountApiKeyValidateBeforeCall(
                        email, subAccountApiKey, ipAddress, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<DeleteIpListForASubAccountApiKeyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getIpRestrictionForASubAccountApiKey
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param subAccountApiKey (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get IP Restriction for a Sub-account API Key </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/api-management/Get-IP-Restriction-for-a-Sub-account-API-Key">Get
     *     IP Restriction for a Sub-account API Key(For Master Account) Documentation</a>
     */
    private okhttp3.Call getIpRestrictionForASubAccountApiKeyCall(
            String email, String subAccountApiKey, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v1/sub-account/subAccountApi/ipRestriction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        if (subAccountApiKey != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("subAccountApiKey", subAccountApiKey));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIpRestrictionForASubAccountApiKeyValidateBeforeCall(
            String email, String subAccountApiKey, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {email, subAccountApiKey, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getIpRestrictionForASubAccountApiKey",
                                    String.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<ApiManagementApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getIpRestrictionForASubAccountApiKeyCall(
                        email, subAccountApiKey, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get IP Restriction for a Sub-account API Key(For Master Account) Get IP Restriction for a
     * Sub-account API Key Weight: 3000
     *
     * @param email [Sub-account email](#email-address) (required)
     * @param subAccountApiKey (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetIpRestrictionForASubAccountApiKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get IP Restriction for a Sub-account API Key </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/sub_account/api-management/Get-IP-Restriction-for-a-Sub-account-API-Key">Get
     *     IP Restriction for a Sub-account API Key(For Master Account) Documentation</a>
     */
    public ApiResponse<GetIpRestrictionForASubAccountApiKeyResponse>
            getIpRestrictionForASubAccountApiKey(
                    @NotNull String email, @NotNull String subAccountApiKey, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getIpRestrictionForASubAccountApiKeyValidateBeforeCall(
                        email, subAccountApiKey, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetIpRestrictionForASubAccountApiKeyResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
