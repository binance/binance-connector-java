/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner {
    public static final String SERIALIZED_NAME_ENTRY_PRICE = "entryPrice";

    @SerializedName(SERIALIZED_NAME_ENTRY_PRICE)
    @jakarta.annotation.Nullable
    private String entryPrice;

    public static final String SERIALIZED_NAME_MARK_PRICE = "markPrice";

    @SerializedName(SERIALIZED_NAME_MARK_PRICE)
    @jakarta.annotation.Nullable
    private String markPrice;

    public static final String SERIALIZED_NAME_LEVERAGE = "leverage";

    @SerializedName(SERIALIZED_NAME_LEVERAGE)
    @jakarta.annotation.Nullable
    private String leverage;

    public static final String SERIALIZED_NAME_ISOLATED = "isolated";

    @SerializedName(SERIALIZED_NAME_ISOLATED)
    @jakarta.annotation.Nullable
    private String isolated;

    public static final String SERIALIZED_NAME_ISOLATED_WALLET = "isolatedWallet";

    @SerializedName(SERIALIZED_NAME_ISOLATED_WALLET)
    @jakarta.annotation.Nullable
    private String isolatedWallet;

    public static final String SERIALIZED_NAME_ISOLATED_MARGIN = "isolatedMargin";

    @SerializedName(SERIALIZED_NAME_ISOLATED_MARGIN)
    @jakarta.annotation.Nullable
    private String isolatedMargin;

    public static final String SERIALIZED_NAME_IS_AUTO_ADD_MARGIN = "isAutoAddMargin";

    @SerializedName(SERIALIZED_NAME_IS_AUTO_ADD_MARGIN)
    @jakarta.annotation.Nullable
    private String isAutoAddMargin;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private String positionSide;

    public static final String SERIALIZED_NAME_POSITION_AMOUNT = "positionAmount";

    @SerializedName(SERIALIZED_NAME_POSITION_AMOUNT)
    @jakarta.annotation.Nullable
    private String positionAmount;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_UNREALIZED_PROFIT = "unrealizedProfit";

    @SerializedName(SERIALIZED_NAME_UNREALIZED_PROFIT)
    @jakarta.annotation.Nullable
    private String unrealizedProfit;

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner() {}

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner entryPrice(
            @jakarta.annotation.Nullable String entryPrice) {
        this.entryPrice = entryPrice;
        return this;
    }

    /**
     * Get entryPrice
     *
     * @return entryPrice
     */
    @jakarta.annotation.Nullable
    public String getEntryPrice() {
        return entryPrice;
    }

    public void setEntryPrice(@jakarta.annotation.Nullable String entryPrice) {
        this.entryPrice = entryPrice;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner markPrice(
            @jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
        return this;
    }

    /**
     * Get markPrice
     *
     * @return markPrice
     */
    @jakarta.annotation.Nullable
    public String getMarkPrice() {
        return markPrice;
    }

    public void setMarkPrice(@jakarta.annotation.Nullable String markPrice) {
        this.markPrice = markPrice;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner leverage(
            @jakarta.annotation.Nullable String leverage) {
        this.leverage = leverage;
        return this;
    }

    /**
     * Get leverage
     *
     * @return leverage
     */
    @jakarta.annotation.Nullable
    public String getLeverage() {
        return leverage;
    }

    public void setLeverage(@jakarta.annotation.Nullable String leverage) {
        this.leverage = leverage;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner isolated(
            @jakarta.annotation.Nullable String isolated) {
        this.isolated = isolated;
        return this;
    }

    /**
     * Get isolated
     *
     * @return isolated
     */
    @jakarta.annotation.Nullable
    public String getIsolated() {
        return isolated;
    }

    public void setIsolated(@jakarta.annotation.Nullable String isolated) {
        this.isolated = isolated;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner isolatedWallet(
            @jakarta.annotation.Nullable String isolatedWallet) {
        this.isolatedWallet = isolatedWallet;
        return this;
    }

    /**
     * Get isolatedWallet
     *
     * @return isolatedWallet
     */
    @jakarta.annotation.Nullable
    public String getIsolatedWallet() {
        return isolatedWallet;
    }

    public void setIsolatedWallet(@jakarta.annotation.Nullable String isolatedWallet) {
        this.isolatedWallet = isolatedWallet;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner isolatedMargin(
            @jakarta.annotation.Nullable String isolatedMargin) {
        this.isolatedMargin = isolatedMargin;
        return this;
    }

    /**
     * Get isolatedMargin
     *
     * @return isolatedMargin
     */
    @jakarta.annotation.Nullable
    public String getIsolatedMargin() {
        return isolatedMargin;
    }

    public void setIsolatedMargin(@jakarta.annotation.Nullable String isolatedMargin) {
        this.isolatedMargin = isolatedMargin;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
            isAutoAddMargin(@jakarta.annotation.Nullable String isAutoAddMargin) {
        this.isAutoAddMargin = isAutoAddMargin;
        return this;
    }

    /**
     * Get isAutoAddMargin
     *
     * @return isAutoAddMargin
     */
    @jakarta.annotation.Nullable
    public String getIsAutoAddMargin() {
        return isAutoAddMargin;
    }

    public void setIsAutoAddMargin(@jakarta.annotation.Nullable String isAutoAddMargin) {
        this.isAutoAddMargin = isAutoAddMargin;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner positionSide(
            @jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    public String getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner positionAmount(
            @jakarta.annotation.Nullable String positionAmount) {
        this.positionAmount = positionAmount;
        return this;
    }

    /**
     * Get positionAmount
     *
     * @return positionAmount
     */
    @jakarta.annotation.Nullable
    public String getPositionAmount() {
        return positionAmount;
    }

    public void setPositionAmount(@jakarta.annotation.Nullable String positionAmount) {
        this.positionAmount = positionAmount;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
            unrealizedProfit(@jakarta.annotation.Nullable String unrealizedProfit) {
        this.unrealizedProfit = unrealizedProfit;
        return this;
    }

    /**
     * Get unrealizedProfit
     *
     * @return unrealizedProfit
     */
    @jakarta.annotation.Nullable
    public String getUnrealizedProfit() {
        return unrealizedProfit;
    }

    public void setUnrealizedProfit(@jakarta.annotation.Nullable String unrealizedProfit) {
        this.unrealizedProfit = unrealizedProfit;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner =
                        (GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner)
                                o;
        return Objects.equals(
                        this.entryPrice,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .entryPrice)
                && Objects.equals(
                        this.markPrice,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .markPrice)
                && Objects.equals(
                        this.leverage,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .leverage)
                && Objects.equals(
                        this.isolated,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .isolated)
                && Objects.equals(
                        this.isolatedWallet,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .isolatedWallet)
                && Objects.equals(
                        this.isolatedMargin,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .isolatedMargin)
                && Objects.equals(
                        this.isAutoAddMargin,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .isAutoAddMargin)
                && Objects.equals(
                        this.positionSide,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .positionSide)
                && Objects.equals(
                        this.positionAmount,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .positionAmount)
                && Objects.equals(
                        this.symbol,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .symbol)
                && Objects.equals(
                        this.unrealizedProfit,
                        getFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .unrealizedProfit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                entryPrice,
                markPrice,
                leverage,
                isolated,
                isolatedWallet,
                isolatedMargin,
                isAutoAddMargin,
                positionSide,
                positionAmount,
                symbol,
                unrealizedProfit);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(
                "class GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner"
                        + " {\n");
        sb.append("		entryPrice: ").append(toIndentedString(entryPrice)).append("\n");
        sb.append("		markPrice: ").append(toIndentedString(markPrice)).append("\n");
        sb.append("		leverage: ").append(toIndentedString(leverage)).append("\n");
        sb.append("		isolated: ").append(toIndentedString(isolated)).append("\n");
        sb.append("		isolatedWallet: ").append(toIndentedString(isolatedWallet)).append("\n");
        sb.append("		isolatedMargin: ").append(toIndentedString(isolatedMargin)).append("\n");
        sb.append("		isAutoAddMargin: ").append(toIndentedString(isAutoAddMargin)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		positionAmount: ").append(toIndentedString(positionAmount)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		unrealizedProfit: ").append(toIndentedString(unrealizedProfit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object entryPriceValue = getEntryPrice();
        String entryPriceValueAsString = "";
        entryPriceValueAsString = entryPriceValue.toString();
        sb.append("entryPrice=").append(urlEncode(entryPriceValueAsString)).append("");
        Object markPriceValue = getMarkPrice();
        String markPriceValueAsString = "";
        markPriceValueAsString = markPriceValue.toString();
        sb.append("markPrice=").append(urlEncode(markPriceValueAsString)).append("");
        Object leverageValue = getLeverage();
        String leverageValueAsString = "";
        leverageValueAsString = leverageValue.toString();
        sb.append("leverage=").append(urlEncode(leverageValueAsString)).append("");
        Object isolatedValue = getIsolated();
        String isolatedValueAsString = "";
        isolatedValueAsString = isolatedValue.toString();
        sb.append("isolated=").append(urlEncode(isolatedValueAsString)).append("");
        Object isolatedWalletValue = getIsolatedWallet();
        String isolatedWalletValueAsString = "";
        isolatedWalletValueAsString = isolatedWalletValue.toString();
        sb.append("isolatedWallet=").append(urlEncode(isolatedWalletValueAsString)).append("");
        Object isolatedMarginValue = getIsolatedMargin();
        String isolatedMarginValueAsString = "";
        isolatedMarginValueAsString = isolatedMarginValue.toString();
        sb.append("isolatedMargin=").append(urlEncode(isolatedMarginValueAsString)).append("");
        Object isAutoAddMarginValue = getIsAutoAddMargin();
        String isAutoAddMarginValueAsString = "";
        isAutoAddMarginValueAsString = isAutoAddMarginValue.toString();
        sb.append("isAutoAddMargin=").append(urlEncode(isAutoAddMarginValueAsString)).append("");
        Object positionSideValue = getPositionSide();
        String positionSideValueAsString = "";
        positionSideValueAsString = positionSideValue.toString();
        sb.append("positionSide=").append(urlEncode(positionSideValueAsString)).append("");
        Object positionAmountValue = getPositionAmount();
        String positionAmountValueAsString = "";
        positionAmountValueAsString = positionAmountValue.toString();
        sb.append("positionAmount=").append(urlEncode(positionAmountValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object unrealizedProfitValue = getUnrealizedProfit();
        String unrealizedProfitValueAsString = "";
        unrealizedProfitValueAsString = unrealizedProfitValue.toString();
        sb.append("unrealizedProfit=").append(urlEncode(unrealizedProfitValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("entryPrice");
        openapiFields.add("markPrice");
        openapiFields.add("leverage");
        openapiFields.add("isolated");
        openapiFields.add("isolatedWallet");
        openapiFields.add("isolatedMargin");
        openapiFields.add("isAutoAddMargin");
        openapiFields.add("positionSide");
        openapiFields.add("positionAmount");
        openapiFields.add("symbol");
        openapiFields.add("unrealizedProfit");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner"
                                    + " is not found in the empty JSON string",
                                GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                    .openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("entryPrice") != null && !jsonObj.get("entryPrice").isJsonNull())
                && !jsonObj.get("entryPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `entryPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("entryPrice").toString()));
        }
        if ((jsonObj.get("markPrice") != null && !jsonObj.get("markPrice").isJsonNull())
                && !jsonObj.get("markPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `markPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("markPrice").toString()));
        }
        if ((jsonObj.get("leverage") != null && !jsonObj.get("leverage").isJsonNull())
                && !jsonObj.get("leverage").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `leverage` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("leverage").toString()));
        }
        if ((jsonObj.get("isolated") != null && !jsonObj.get("isolated").isJsonNull())
                && !jsonObj.get("isolated").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isolated` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isolated").toString()));
        }
        if ((jsonObj.get("isolatedWallet") != null && !jsonObj.get("isolatedWallet").isJsonNull())
                && !jsonObj.get("isolatedWallet").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isolatedWallet` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isolatedWallet").toString()));
        }
        if ((jsonObj.get("isolatedMargin") != null && !jsonObj.get("isolatedMargin").isJsonNull())
                && !jsonObj.get("isolatedMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isolatedMargin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("isolatedMargin").toString()));
        }
        if ((jsonObj.get("isAutoAddMargin") != null && !jsonObj.get("isAutoAddMargin").isJsonNull())
                && !jsonObj.get("isAutoAddMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `isAutoAddMargin` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("isAutoAddMargin").toString()));
        }
        if ((jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull())
                && !jsonObj.get("positionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionSide").toString()));
        }
        if ((jsonObj.get("positionAmount") != null && !jsonObj.get("positionAmount").isJsonNull())
                && !jsonObj.get("positionAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionAmount").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("unrealizedProfit") != null
                        && !jsonObj.get("unrealizedProfit").isJsonNull())
                && !jsonObj.get("unrealizedProfit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `unrealizedProfit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("unrealizedProfit").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<
                            GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                        value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public
                        GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of
     * GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of
     *     GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
     */
    public static GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
            fromJson(String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner
                                .class);
    }

    /**
     * Convert an instance of
     * GetFuturesPositionRiskOfSubAccountV2Response2DeliveryPositionRiskVosInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
