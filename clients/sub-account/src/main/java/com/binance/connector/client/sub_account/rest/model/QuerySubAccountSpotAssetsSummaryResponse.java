/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** QuerySubAccountSpotAssetsSummaryResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QuerySubAccountSpotAssetsSummaryResponse {
    public static final String SERIALIZED_NAME_TOTAL_COUNT = "totalCount";

    @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
    @jakarta.annotation.Nullable
    private Long totalCount;

    public static final String SERIALIZED_NAME_MASTER_ACCOUNT_TOTAL_ASSET =
            "masterAccountTotalAsset";

    @SerializedName(SERIALIZED_NAME_MASTER_ACCOUNT_TOTAL_ASSET)
    @jakarta.annotation.Nullable
    private String masterAccountTotalAsset;

    public static final String SERIALIZED_NAME_SPOT_SUB_USER_ASSET_BTC_VO_LIST =
            "spotSubUserAssetBtcVoList";

    @SerializedName(SERIALIZED_NAME_SPOT_SUB_USER_ASSET_BTC_VO_LIST)
    @jakarta.annotation.Nullable
    private List<@Valid QuerySubAccountSpotAssetsSummaryResponseSpotSubUserAssetBtcVoListInner>
            spotSubUserAssetBtcVoList;

    public QuerySubAccountSpotAssetsSummaryResponse() {}

    public QuerySubAccountSpotAssetsSummaryResponse totalCount(
            @jakarta.annotation.Nullable Long totalCount) {
        this.totalCount = totalCount;
        return this;
    }

    /**
     * Get totalCount
     *
     * @return totalCount
     */
    @jakarta.annotation.Nullable
    public Long getTotalCount() {
        return totalCount;
    }

    public void setTotalCount(@jakarta.annotation.Nullable Long totalCount) {
        this.totalCount = totalCount;
    }

    public QuerySubAccountSpotAssetsSummaryResponse masterAccountTotalAsset(
            @jakarta.annotation.Nullable String masterAccountTotalAsset) {
        this.masterAccountTotalAsset = masterAccountTotalAsset;
        return this;
    }

    /**
     * Get masterAccountTotalAsset
     *
     * @return masterAccountTotalAsset
     */
    @jakarta.annotation.Nullable
    public String getMasterAccountTotalAsset() {
        return masterAccountTotalAsset;
    }

    public void setMasterAccountTotalAsset(
            @jakarta.annotation.Nullable String masterAccountTotalAsset) {
        this.masterAccountTotalAsset = masterAccountTotalAsset;
    }

    public QuerySubAccountSpotAssetsSummaryResponse spotSubUserAssetBtcVoList(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QuerySubAccountSpotAssetsSummaryResponseSpotSubUserAssetBtcVoListInner>
                            spotSubUserAssetBtcVoList) {
        this.spotSubUserAssetBtcVoList = spotSubUserAssetBtcVoList;
        return this;
    }

    public QuerySubAccountSpotAssetsSummaryResponse addSpotSubUserAssetBtcVoListItem(
            QuerySubAccountSpotAssetsSummaryResponseSpotSubUserAssetBtcVoListInner
                    spotSubUserAssetBtcVoListItem) {
        if (this.spotSubUserAssetBtcVoList == null) {
            this.spotSubUserAssetBtcVoList = new ArrayList<>();
        }
        this.spotSubUserAssetBtcVoList.add(spotSubUserAssetBtcVoListItem);
        return this;
    }

    /**
     * Get spotSubUserAssetBtcVoList
     *
     * @return spotSubUserAssetBtcVoList
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid QuerySubAccountSpotAssetsSummaryResponseSpotSubUserAssetBtcVoListInner>
            getSpotSubUserAssetBtcVoList() {
        return spotSubUserAssetBtcVoList;
    }

    public void setSpotSubUserAssetBtcVoList(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    QuerySubAccountSpotAssetsSummaryResponseSpotSubUserAssetBtcVoListInner>
                            spotSubUserAssetBtcVoList) {
        this.spotSubUserAssetBtcVoList = spotSubUserAssetBtcVoList;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuerySubAccountSpotAssetsSummaryResponse querySubAccountSpotAssetsSummaryResponse =
                (QuerySubAccountSpotAssetsSummaryResponse) o;
        return Objects.equals(this.totalCount, querySubAccountSpotAssetsSummaryResponse.totalCount)
                && Objects.equals(
                        this.masterAccountTotalAsset,
                        querySubAccountSpotAssetsSummaryResponse.masterAccountTotalAsset)
                && Objects.equals(
                        this.spotSubUserAssetBtcVoList,
                        querySubAccountSpotAssetsSummaryResponse.spotSubUserAssetBtcVoList);
    }

    @Override
    public int hashCode() {
        return Objects.hash(totalCount, masterAccountTotalAsset, spotSubUserAssetBtcVoList);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QuerySubAccountSpotAssetsSummaryResponse {\n");
        sb.append("		totalCount: ").append(toIndentedString(totalCount)).append("\n");
        sb.append("		masterAccountTotalAsset: ")
                .append(toIndentedString(masterAccountTotalAsset))
                .append("\n");
        sb.append("		spotSubUserAssetBtcVoList: ")
                .append(toIndentedString(spotSubUserAssetBtcVoList))
                .append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object totalCountValue = getTotalCount();
        String totalCountValueAsString = "";
        totalCountValueAsString = totalCountValue.toString();
        sb.append("totalCount=").append(urlEncode(totalCountValueAsString)).append("");
        Object masterAccountTotalAssetValue = getMasterAccountTotalAsset();
        String masterAccountTotalAssetValueAsString = "";
        masterAccountTotalAssetValueAsString = masterAccountTotalAssetValue.toString();
        sb.append("masterAccountTotalAsset=")
                .append(urlEncode(masterAccountTotalAssetValueAsString))
                .append("");
        Object spotSubUserAssetBtcVoListValue = getSpotSubUserAssetBtcVoList();
        String spotSubUserAssetBtcVoListValueAsString = "";
        spotSubUserAssetBtcVoListValueAsString =
                (String)
                        ((Collection) spotSubUserAssetBtcVoListValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("spotSubUserAssetBtcVoList=")
                .append(urlEncode(spotSubUserAssetBtcVoListValueAsString))
                .append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("totalCount");
        openapiFields.add("masterAccountTotalAsset");
        openapiFields.add("spotSubUserAssetBtcVoList");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QuerySubAccountSpotAssetsSummaryResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QuerySubAccountSpotAssetsSummaryResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QuerySubAccountSpotAssetsSummaryResponse is not found in"
                                    + " the empty JSON string",
                                QuerySubAccountSpotAssetsSummaryResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QuerySubAccountSpotAssetsSummaryResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QuerySubAccountSpotAssetsSummaryResponse` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("masterAccountTotalAsset") != null
                        && !jsonObj.get("masterAccountTotalAsset").isJsonNull())
                && !jsonObj.get("masterAccountTotalAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `masterAccountTotalAsset` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("masterAccountTotalAsset").toString()));
        }
        if (jsonObj.get("spotSubUserAssetBtcVoList") != null
                && !jsonObj.get("spotSubUserAssetBtcVoList").isJsonNull()) {
            JsonArray jsonArrayspotSubUserAssetBtcVoList =
                    jsonObj.getAsJsonArray("spotSubUserAssetBtcVoList");
            if (jsonArrayspotSubUserAssetBtcVoList != null) {
                // ensure the json data is an array
                if (!jsonObj.get("spotSubUserAssetBtcVoList").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `spotSubUserAssetBtcVoList` to be an array"
                                            + " in the JSON string but got `%s`",
                                    jsonObj.get("spotSubUserAssetBtcVoList").toString()));
                }

                // validate the optional field `spotSubUserAssetBtcVoList` (array)
                for (int i = 0; i < jsonArrayspotSubUserAssetBtcVoList.size(); i++) {
                    QuerySubAccountSpotAssetsSummaryResponseSpotSubUserAssetBtcVoListInner
                            .validateJsonElement(jsonArrayspotSubUserAssetBtcVoList.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QuerySubAccountSpotAssetsSummaryResponse.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QuerySubAccountSpotAssetsSummaryResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QuerySubAccountSpotAssetsSummaryResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QuerySubAccountSpotAssetsSummaryResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QuerySubAccountSpotAssetsSummaryResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, QuerySubAccountSpotAssetsSummaryResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QuerySubAccountSpotAssetsSummaryResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QuerySubAccountSpotAssetsSummaryResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QuerySubAccountSpotAssetsSummaryResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     QuerySubAccountSpotAssetsSummaryResponse
     */
    public static QuerySubAccountSpotAssetsSummaryResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, QuerySubAccountSpotAssetsSummaryResponse.class);
    }

    /**
     * Convert an instance of QuerySubAccountSpotAssetsSummaryResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
