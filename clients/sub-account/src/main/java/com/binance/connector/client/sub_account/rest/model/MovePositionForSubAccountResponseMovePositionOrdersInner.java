/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** MovePositionForSubAccountResponseMovePositionOrdersInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class MovePositionForSubAccountResponseMovePositionOrdersInner {
    public static final String SERIALIZED_NAME_FROM_USER_EMAIL = "fromUserEmail";

    @SerializedName(SERIALIZED_NAME_FROM_USER_EMAIL)
    @jakarta.annotation.Nullable
    private String fromUserEmail;

    public static final String SERIALIZED_NAME_TO_USER_EMAIL = "toUserEmail";

    @SerializedName(SERIALIZED_NAME_TO_USER_EMAIL)
    @jakarta.annotation.Nullable
    private String toUserEmail;

    public static final String SERIALIZED_NAME_PRODUCT_TYPE = "productType";

    @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
    @jakarta.annotation.Nullable
    private String productType;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_PRICE_TYPE = "priceType";

    @SerializedName(SERIALIZED_NAME_PRICE_TYPE)
    @jakarta.annotation.Nullable
    private String priceType;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private String quantity;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private String positionSide;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_SUCCESS = "success";

    @SerializedName(SERIALIZED_NAME_SUCCESS)
    @jakarta.annotation.Nullable
    private Boolean success;

    public MovePositionForSubAccountResponseMovePositionOrdersInner() {}

    public MovePositionForSubAccountResponseMovePositionOrdersInner fromUserEmail(
            @jakarta.annotation.Nullable String fromUserEmail) {
        this.fromUserEmail = fromUserEmail;
        return this;
    }

    /**
     * Get fromUserEmail
     *
     * @return fromUserEmail
     */
    @jakarta.annotation.Nullable
    public String getFromUserEmail() {
        return fromUserEmail;
    }

    public void setFromUserEmail(@jakarta.annotation.Nullable String fromUserEmail) {
        this.fromUserEmail = fromUserEmail;
    }

    public MovePositionForSubAccountResponseMovePositionOrdersInner toUserEmail(
            @jakarta.annotation.Nullable String toUserEmail) {
        this.toUserEmail = toUserEmail;
        return this;
    }

    /**
     * Get toUserEmail
     *
     * @return toUserEmail
     */
    @jakarta.annotation.Nullable
    public String getToUserEmail() {
        return toUserEmail;
    }

    public void setToUserEmail(@jakarta.annotation.Nullable String toUserEmail) {
        this.toUserEmail = toUserEmail;
    }

    public MovePositionForSubAccountResponseMovePositionOrdersInner productType(
            @jakarta.annotation.Nullable String productType) {
        this.productType = productType;
        return this;
    }

    /**
     * Get productType
     *
     * @return productType
     */
    @jakarta.annotation.Nullable
    public String getProductType() {
        return productType;
    }

    public void setProductType(@jakarta.annotation.Nullable String productType) {
        this.productType = productType;
    }

    public MovePositionForSubAccountResponseMovePositionOrdersInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public MovePositionForSubAccountResponseMovePositionOrdersInner priceType(
            @jakarta.annotation.Nullable String priceType) {
        this.priceType = priceType;
        return this;
    }

    /**
     * Get priceType
     *
     * @return priceType
     */
    @jakarta.annotation.Nullable
    public String getPriceType() {
        return priceType;
    }

    public void setPriceType(@jakarta.annotation.Nullable String priceType) {
        this.priceType = priceType;
    }

    public MovePositionForSubAccountResponseMovePositionOrdersInner price(
            @jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public MovePositionForSubAccountResponseMovePositionOrdersInner quantity(
            @jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    public String getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable String quantity) {
        this.quantity = quantity;
    }

    public MovePositionForSubAccountResponseMovePositionOrdersInner positionSide(
            @jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    public String getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
    }

    public MovePositionForSubAccountResponseMovePositionOrdersInner side(
            @jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public MovePositionForSubAccountResponseMovePositionOrdersInner success(
            @jakarta.annotation.Nullable Boolean success) {
        this.success = success;
        return this;
    }

    /**
     * Get success
     *
     * @return success
     */
    @jakarta.annotation.Nullable
    public Boolean getSuccess() {
        return success;
    }

    public void setSuccess(@jakarta.annotation.Nullable Boolean success) {
        this.success = success;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MovePositionForSubAccountResponseMovePositionOrdersInner
                movePositionForSubAccountResponseMovePositionOrdersInner =
                        (MovePositionForSubAccountResponseMovePositionOrdersInner) o;
        return Objects.equals(
                        this.fromUserEmail,
                        movePositionForSubAccountResponseMovePositionOrdersInner.fromUserEmail)
                && Objects.equals(
                        this.toUserEmail,
                        movePositionForSubAccountResponseMovePositionOrdersInner.toUserEmail)
                && Objects.equals(
                        this.productType,
                        movePositionForSubAccountResponseMovePositionOrdersInner.productType)
                && Objects.equals(
                        this.symbol,
                        movePositionForSubAccountResponseMovePositionOrdersInner.symbol)
                && Objects.equals(
                        this.priceType,
                        movePositionForSubAccountResponseMovePositionOrdersInner.priceType)
                && Objects.equals(
                        this.price, movePositionForSubAccountResponseMovePositionOrdersInner.price)
                && Objects.equals(
                        this.quantity,
                        movePositionForSubAccountResponseMovePositionOrdersInner.quantity)
                && Objects.equals(
                        this.positionSide,
                        movePositionForSubAccountResponseMovePositionOrdersInner.positionSide)
                && Objects.equals(
                        this.side, movePositionForSubAccountResponseMovePositionOrdersInner.side)
                && Objects.equals(
                        this.success,
                        movePositionForSubAccountResponseMovePositionOrdersInner.success);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                fromUserEmail,
                toUserEmail,
                productType,
                symbol,
                priceType,
                price,
                quantity,
                positionSide,
                side,
                success);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class MovePositionForSubAccountResponseMovePositionOrdersInner {\n");
        sb.append("		fromUserEmail: ").append(toIndentedString(fromUserEmail)).append("\n");
        sb.append("		toUserEmail: ").append(toIndentedString(toUserEmail)).append("\n");
        sb.append("		productType: ").append(toIndentedString(productType)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		priceType: ").append(toIndentedString(priceType)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		success: ").append(toIndentedString(success)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object fromUserEmailValue = getFromUserEmail();
        String fromUserEmailValueAsString = "";
        fromUserEmailValueAsString = fromUserEmailValue.toString();
        sb.append("fromUserEmail=").append(urlEncode(fromUserEmailValueAsString)).append("");
        Object toUserEmailValue = getToUserEmail();
        String toUserEmailValueAsString = "";
        toUserEmailValueAsString = toUserEmailValue.toString();
        sb.append("toUserEmail=").append(urlEncode(toUserEmailValueAsString)).append("");
        Object productTypeValue = getProductType();
        String productTypeValueAsString = "";
        productTypeValueAsString = productTypeValue.toString();
        sb.append("productType=").append(urlEncode(productTypeValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object priceTypeValue = getPriceType();
        String priceTypeValueAsString = "";
        priceTypeValueAsString = priceTypeValue.toString();
        sb.append("priceType=").append(urlEncode(priceTypeValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object positionSideValue = getPositionSide();
        String positionSideValueAsString = "";
        positionSideValueAsString = positionSideValue.toString();
        sb.append("positionSide=").append(urlEncode(positionSideValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object successValue = getSuccess();
        String successValueAsString = "";
        successValueAsString = successValue.toString();
        sb.append("success=").append(urlEncode(successValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("fromUserEmail");
        openapiFields.add("toUserEmail");
        openapiFields.add("productType");
        openapiFields.add("symbol");
        openapiFields.add("priceType");
        openapiFields.add("price");
        openapiFields.add("quantity");
        openapiFields.add("positionSide");
        openapiFields.add("side");
        openapiFields.add("success");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     MovePositionForSubAccountResponseMovePositionOrdersInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!MovePositionForSubAccountResponseMovePositionOrdersInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " MovePositionForSubAccountResponseMovePositionOrdersInner is"
                                    + " not found in the empty JSON string",
                                MovePositionForSubAccountResponseMovePositionOrdersInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!MovePositionForSubAccountResponseMovePositionOrdersInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `MovePositionForSubAccountResponseMovePositionOrdersInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("fromUserEmail") != null && !jsonObj.get("fromUserEmail").isJsonNull())
                && !jsonObj.get("fromUserEmail").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `fromUserEmail` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("fromUserEmail").toString()));
        }
        if ((jsonObj.get("toUserEmail") != null && !jsonObj.get("toUserEmail").isJsonNull())
                && !jsonObj.get("toUserEmail").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `toUserEmail` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("toUserEmail").toString()));
        }
        if ((jsonObj.get("productType") != null && !jsonObj.get("productType").isJsonNull())
                && !jsonObj.get("productType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `productType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("productType").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("priceType") != null && !jsonObj.get("priceType").isJsonNull())
                && !jsonObj.get("priceType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("priceType").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("quantity") != null && !jsonObj.get("quantity").isJsonNull())
                && !jsonObj.get("quantity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `quantity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("quantity").toString()));
        }
        if ((jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull())
                && !jsonObj.get("positionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionSide").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!MovePositionForSubAccountResponseMovePositionOrdersInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'MovePositionForSubAccountResponseMovePositionOrdersInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<MovePositionForSubAccountResponseMovePositionOrdersInner>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            MovePositionForSubAccountResponseMovePositionOrdersInner
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<MovePositionForSubAccountResponseMovePositionOrdersInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                MovePositionForSubAccountResponseMovePositionOrdersInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public MovePositionForSubAccountResponseMovePositionOrdersInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of MovePositionForSubAccountResponseMovePositionOrdersInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of MovePositionForSubAccountResponseMovePositionOrdersInner
     * @throws IOException if the JSON string is invalid with respect to
     *     MovePositionForSubAccountResponseMovePositionOrdersInner
     */
    public static MovePositionForSubAccountResponseMovePositionOrdersInner fromJson(
            String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString, MovePositionForSubAccountResponseMovePositionOrdersInner.class);
    }

    /**
     * Convert an instance of MovePositionForSubAccountResponseMovePositionOrdersInner to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
