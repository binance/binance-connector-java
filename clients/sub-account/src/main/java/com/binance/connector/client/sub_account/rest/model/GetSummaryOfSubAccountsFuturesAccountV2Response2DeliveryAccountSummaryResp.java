/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp {
    public static final String SERIALIZED_NAME_TOTAL_MARGIN_BALANCE_OF_B_T_C =
            "totalMarginBalanceOfBTC";

    @SerializedName(SERIALIZED_NAME_TOTAL_MARGIN_BALANCE_OF_B_T_C)
    @jakarta.annotation.Nullable
    private String totalMarginBalanceOfBTC;

    public static final String SERIALIZED_NAME_TOTAL_UNREALIZED_PROFIT_OF_B_T_C =
            "totalUnrealizedProfitOfBTC";

    @SerializedName(SERIALIZED_NAME_TOTAL_UNREALIZED_PROFIT_OF_B_T_C)
    @jakarta.annotation.Nullable
    private String totalUnrealizedProfitOfBTC;

    public static final String SERIALIZED_NAME_TOTAL_WALLET_BALANCE_OF_B_T_C =
            "totalWalletBalanceOfBTC";

    @SerializedName(SERIALIZED_NAME_TOTAL_WALLET_BALANCE_OF_B_T_C)
    @jakarta.annotation.Nullable
    private String totalWalletBalanceOfBTC;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_SUB_ACCOUNT_LIST = "subAccountList";

    @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_LIST)
    @jakarta.annotation.Nullable
    private List<
                    @Valid
                    GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryRespSubAccountListInner>
            subAccountList;

    public GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp() {}

    public GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
            totalMarginBalanceOfBTC(@jakarta.annotation.Nullable String totalMarginBalanceOfBTC) {
        this.totalMarginBalanceOfBTC = totalMarginBalanceOfBTC;
        return this;
    }

    /**
     * Get totalMarginBalanceOfBTC
     *
     * @return totalMarginBalanceOfBTC
     */
    @jakarta.annotation.Nullable
    public String getTotalMarginBalanceOfBTC() {
        return totalMarginBalanceOfBTC;
    }

    public void setTotalMarginBalanceOfBTC(
            @jakarta.annotation.Nullable String totalMarginBalanceOfBTC) {
        this.totalMarginBalanceOfBTC = totalMarginBalanceOfBTC;
    }

    public GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
            totalUnrealizedProfitOfBTC(
                    @jakarta.annotation.Nullable String totalUnrealizedProfitOfBTC) {
        this.totalUnrealizedProfitOfBTC = totalUnrealizedProfitOfBTC;
        return this;
    }

    /**
     * Get totalUnrealizedProfitOfBTC
     *
     * @return totalUnrealizedProfitOfBTC
     */
    @jakarta.annotation.Nullable
    public String getTotalUnrealizedProfitOfBTC() {
        return totalUnrealizedProfitOfBTC;
    }

    public void setTotalUnrealizedProfitOfBTC(
            @jakarta.annotation.Nullable String totalUnrealizedProfitOfBTC) {
        this.totalUnrealizedProfitOfBTC = totalUnrealizedProfitOfBTC;
    }

    public GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
            totalWalletBalanceOfBTC(@jakarta.annotation.Nullable String totalWalletBalanceOfBTC) {
        this.totalWalletBalanceOfBTC = totalWalletBalanceOfBTC;
        return this;
    }

    /**
     * Get totalWalletBalanceOfBTC
     *
     * @return totalWalletBalanceOfBTC
     */
    @jakarta.annotation.Nullable
    public String getTotalWalletBalanceOfBTC() {
        return totalWalletBalanceOfBTC;
    }

    public void setTotalWalletBalanceOfBTC(
            @jakarta.annotation.Nullable String totalWalletBalanceOfBTC) {
        this.totalWalletBalanceOfBTC = totalWalletBalanceOfBTC;
    }

    public GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
            subAccountList(
                    @jakarta.annotation.Nullable
                            List<
                                            @Valid
                                            GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryRespSubAccountListInner>
                                    subAccountList) {
        this.subAccountList = subAccountList;
        return this;
    }

    public GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
            addSubAccountListItem(
                    GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryRespSubAccountListInner
                            subAccountListItem) {
        if (this.subAccountList == null) {
            this.subAccountList = new ArrayList<>();
        }
        this.subAccountList.add(subAccountListItem);
        return this;
    }

    /**
     * Get subAccountList
     *
     * @return subAccountList
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<
                    @Valid
                    GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryRespSubAccountListInner>
            getSubAccountList() {
        return subAccountList;
    }

    public void setSubAccountList(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryRespSubAccountListInner>
                            subAccountList) {
        this.subAccountList = subAccountList;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                getSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp =
                        (GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp)
                                o;
        return Objects.equals(
                        this.totalMarginBalanceOfBTC,
                        getSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                .totalMarginBalanceOfBTC)
                && Objects.equals(
                        this.totalUnrealizedProfitOfBTC,
                        getSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                .totalUnrealizedProfitOfBTC)
                && Objects.equals(
                        this.totalWalletBalanceOfBTC,
                        getSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                .totalWalletBalanceOfBTC)
                && Objects.equals(
                        this.asset,
                        getSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                .asset)
                && Objects.equals(
                        this.subAccountList,
                        getSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                .subAccountList);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                totalMarginBalanceOfBTC,
                totalUnrealizedProfitOfBTC,
                totalWalletBalanceOfBTC,
                asset,
                subAccountList);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(
                "class GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp"
                        + " {\n");
        sb.append("		totalMarginBalanceOfBTC: ")
                .append(toIndentedString(totalMarginBalanceOfBTC))
                .append("\n");
        sb.append("		totalUnrealizedProfitOfBTC: ")
                .append(toIndentedString(totalUnrealizedProfitOfBTC))
                .append("\n");
        sb.append("		totalWalletBalanceOfBTC: ")
                .append(toIndentedString(totalWalletBalanceOfBTC))
                .append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		subAccountList: ").append(toIndentedString(subAccountList)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object totalMarginBalanceOfBTCValue = getTotalMarginBalanceOfBTC();
        String totalMarginBalanceOfBTCValueAsString = "";
        totalMarginBalanceOfBTCValueAsString = totalMarginBalanceOfBTCValue.toString();
        sb.append("totalMarginBalanceOfBTC=")
                .append(urlEncode(totalMarginBalanceOfBTCValueAsString))
                .append("");
        Object totalUnrealizedProfitOfBTCValue = getTotalUnrealizedProfitOfBTC();
        String totalUnrealizedProfitOfBTCValueAsString = "";
        totalUnrealizedProfitOfBTCValueAsString = totalUnrealizedProfitOfBTCValue.toString();
        sb.append("totalUnrealizedProfitOfBTC=")
                .append(urlEncode(totalUnrealizedProfitOfBTCValueAsString))
                .append("");
        Object totalWalletBalanceOfBTCValue = getTotalWalletBalanceOfBTC();
        String totalWalletBalanceOfBTCValueAsString = "";
        totalWalletBalanceOfBTCValueAsString = totalWalletBalanceOfBTCValue.toString();
        sb.append("totalWalletBalanceOfBTC=")
                .append(urlEncode(totalWalletBalanceOfBTCValueAsString))
                .append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object subAccountListValue = getSubAccountList();
        String subAccountListValueAsString = "";
        subAccountListValueAsString =
                (String)
                        ((Collection) subAccountListValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("subAccountList=").append(urlEncode(subAccountListValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("totalMarginBalanceOfBTC");
        openapiFields.add("totalUnrealizedProfitOfBTC");
        openapiFields.add("totalWalletBalanceOfBTC");
        openapiFields.add("asset");
        openapiFields.add("subAccountList");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                    .openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp"
                                    + " is not found in the empty JSON string",
                                GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                    .openapiFields
                    .contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("totalMarginBalanceOfBTC") != null
                        && !jsonObj.get("totalMarginBalanceOfBTC").isJsonNull())
                && !jsonObj.get("totalMarginBalanceOfBTC").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalMarginBalanceOfBTC` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("totalMarginBalanceOfBTC").toString()));
        }
        if ((jsonObj.get("totalUnrealizedProfitOfBTC") != null
                        && !jsonObj.get("totalUnrealizedProfitOfBTC").isJsonNull())
                && !jsonObj.get("totalUnrealizedProfitOfBTC").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalUnrealizedProfitOfBTC` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("totalUnrealizedProfitOfBTC").toString()));
        }
        if ((jsonObj.get("totalWalletBalanceOfBTC") != null
                        && !jsonObj.get("totalWalletBalanceOfBTC").isJsonNull())
                && !jsonObj.get("totalWalletBalanceOfBTC").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalWalletBalanceOfBTC` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("totalWalletBalanceOfBTC").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if (jsonObj.get("subAccountList") != null && !jsonObj.get("subAccountList").isJsonNull()) {
            JsonArray jsonArraysubAccountList = jsonObj.getAsJsonArray("subAccountList");
            if (jsonArraysubAccountList != null) {
                // ensure the json data is an array
                if (!jsonObj.get("subAccountList").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `subAccountList` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("subAccountList").toString()));
                }

                // validate the optional field `subAccountList` (array)
                for (int i = 0; i < jsonArraysubAccountList.size(); i++) {
                    GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryRespSubAccountListInner
                            .validateJsonElement(jsonArraysubAccountList.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp.class
                    .isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes
                // 'GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp' and
                // its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<
                            GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp>
                    thisAdapter =
                            gson.getDelegateAdapter(
                                    this,
                                    TypeToken.get(
                                            GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                                    .class));

            return (TypeAdapter<T>)
                    new TypeAdapter<
                            GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                        value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public
                        GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of
     * GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of
     *     GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
     * @throws IOException if the JSON string is invalid with respect to
     *     GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
     */
    public static GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
            fromJson(String jsonString) throws IOException {
        return JSON.getGson()
                .fromJson(
                        jsonString,
                        GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp
                                .class);
    }

    /**
     * Convert an instance of
     * GetSummaryOfSubAccountsFuturesAccountV2Response2DeliveryAccountSummaryResp to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
