/*
 * Binance Sub Account REST API
 * OpenAPI Specification for the Binance Sub Account REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.sub_account.rest.model;

import com.binance.connector.client.sub_account.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QuerySubAccountSpotAssetTransferHistoryResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QuerySubAccountSpotAssetTransferHistoryResponseInner {
    public static final String SERIALIZED_NAME_FROM = "from";

    @SerializedName(SERIALIZED_NAME_FROM)
    @jakarta.annotation.Nullable
    private String from;

    public static final String SERIALIZED_NAME_TO = "to";

    @SerializedName(SERIALIZED_NAME_TO)
    @jakarta.annotation.Nullable
    private String to;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_QTY = "qty";

    @SerializedName(SERIALIZED_NAME_QTY)
    @jakarta.annotation.Nullable
    private String qty;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_TRAN_ID = "tranId";

    @SerializedName(SERIALIZED_NAME_TRAN_ID)
    @jakarta.annotation.Nullable
    private Long tranId;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public QuerySubAccountSpotAssetTransferHistoryResponseInner() {}

    public QuerySubAccountSpotAssetTransferHistoryResponseInner from(
            @jakarta.annotation.Nullable String from) {
        this.from = from;
        return this;
    }

    /**
     * Get from
     *
     * @return from
     */
    @jakarta.annotation.Nullable
    public String getFrom() {
        return from;
    }

    public void setFrom(@jakarta.annotation.Nullable String from) {
        this.from = from;
    }

    public QuerySubAccountSpotAssetTransferHistoryResponseInner to(
            @jakarta.annotation.Nullable String to) {
        this.to = to;
        return this;
    }

    /**
     * Get to
     *
     * @return to
     */
    @jakarta.annotation.Nullable
    public String getTo() {
        return to;
    }

    public void setTo(@jakarta.annotation.Nullable String to) {
        this.to = to;
    }

    public QuerySubAccountSpotAssetTransferHistoryResponseInner asset(
            @jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public QuerySubAccountSpotAssetTransferHistoryResponseInner qty(
            @jakarta.annotation.Nullable String qty) {
        this.qty = qty;
        return this;
    }

    /**
     * Get qty
     *
     * @return qty
     */
    @jakarta.annotation.Nullable
    public String getQty() {
        return qty;
    }

    public void setQty(@jakarta.annotation.Nullable String qty) {
        this.qty = qty;
    }

    public QuerySubAccountSpotAssetTransferHistoryResponseInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public QuerySubAccountSpotAssetTransferHistoryResponseInner tranId(
            @jakarta.annotation.Nullable Long tranId) {
        this.tranId = tranId;
        return this;
    }

    /**
     * Get tranId
     *
     * @return tranId
     */
    @jakarta.annotation.Nullable
    public Long getTranId() {
        return tranId;
    }

    public void setTranId(@jakarta.annotation.Nullable Long tranId) {
        this.tranId = tranId;
    }

    public QuerySubAccountSpotAssetTransferHistoryResponseInner time(
            @jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuerySubAccountSpotAssetTransferHistoryResponseInner
                querySubAccountSpotAssetTransferHistoryResponseInner =
                        (QuerySubAccountSpotAssetTransferHistoryResponseInner) o;
        return Objects.equals(this.from, querySubAccountSpotAssetTransferHistoryResponseInner.from)
                && Objects.equals(this.to, querySubAccountSpotAssetTransferHistoryResponseInner.to)
                && Objects.equals(
                        this.asset, querySubAccountSpotAssetTransferHistoryResponseInner.asset)
                && Objects.equals(
                        this.qty, querySubAccountSpotAssetTransferHistoryResponseInner.qty)
                && Objects.equals(
                        this.status, querySubAccountSpotAssetTransferHistoryResponseInner.status)
                && Objects.equals(
                        this.tranId, querySubAccountSpotAssetTransferHistoryResponseInner.tranId)
                && Objects.equals(
                        this.time, querySubAccountSpotAssetTransferHistoryResponseInner.time);
    }

    @Override
    public int hashCode() {
        return Objects.hash(from, to, asset, qty, status, tranId, time);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QuerySubAccountSpotAssetTransferHistoryResponseInner {\n");
        sb.append("		from: ").append(toIndentedString(from)).append("\n");
        sb.append("		to: ").append(toIndentedString(to)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		qty: ").append(toIndentedString(qty)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		tranId: ").append(toIndentedString(tranId)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object fromValue = getFrom();
        String fromValueAsString = "";
        fromValueAsString = fromValue.toString();
        sb.append("from=").append(urlEncode(fromValueAsString)).append("");
        Object toValue = getTo();
        String toValueAsString = "";
        toValueAsString = toValue.toString();
        sb.append("to=").append(urlEncode(toValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object qtyValue = getQty();
        String qtyValueAsString = "";
        qtyValueAsString = qtyValue.toString();
        sb.append("qty=").append(urlEncode(qtyValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object tranIdValue = getTranId();
        String tranIdValueAsString = "";
        tranIdValueAsString = tranIdValue.toString();
        sb.append("tranId=").append(urlEncode(tranIdValueAsString)).append("");
        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("from");
        openapiFields.add("to");
        openapiFields.add("asset");
        openapiFields.add("qty");
        openapiFields.add("status");
        openapiFields.add("tranId");
        openapiFields.add("time");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QuerySubAccountSpotAssetTransferHistoryResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QuerySubAccountSpotAssetTransferHistoryResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " QuerySubAccountSpotAssetTransferHistoryResponseInner is not"
                                    + " found in the empty JSON string",
                                QuerySubAccountSpotAssetTransferHistoryResponseInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QuerySubAccountSpotAssetTransferHistoryResponseInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QuerySubAccountSpotAssetTransferHistoryResponseInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull())
                && !jsonObj.get("from").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `from` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("from").toString()));
        }
        if ((jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull())
                && !jsonObj.get("to").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `to` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("to").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("qty") != null && !jsonObj.get("qty").isJsonNull())
                && !jsonObj.get("qty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `qty` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("qty").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QuerySubAccountSpotAssetTransferHistoryResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'QuerySubAccountSpotAssetTransferHistoryResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QuerySubAccountSpotAssetTransferHistoryResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    QuerySubAccountSpotAssetTransferHistoryResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QuerySubAccountSpotAssetTransferHistoryResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                QuerySubAccountSpotAssetTransferHistoryResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QuerySubAccountSpotAssetTransferHistoryResponseInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QuerySubAccountSpotAssetTransferHistoryResponseInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of QuerySubAccountSpotAssetTransferHistoryResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QuerySubAccountSpotAssetTransferHistoryResponseInner
     */
    public static QuerySubAccountSpotAssetTransferHistoryResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, QuerySubAccountSpotAssetTransferHistoryResponseInner.class);
    }

    /**
     * Convert an instance of QuerySubAccountSpotAssetTransferHistoryResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
