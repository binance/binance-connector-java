/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.api;

import static org.junit.Assert.assertEquals;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.auth.BinanceAuthenticationFactory;
import com.binance.connector.client.common.auth.SignatureAuthentication;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.configuration.SignatureConfiguration;
import com.binance.connector.client.common.sign.HmacSignatureGenerator;
import com.binance.connector.client.common.sign.SignatureGenerator;
import com.binance.connector.client.crypto_loan.rest.model.CheckCollateralRepayRateResponse;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanAdjustLtvRequest;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanAdjustLtvResponse;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanBorrowRequest;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanBorrowResponse;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanCollateralRepaymentRequest;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanCollateralRepaymentResponse;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanRepayRequest;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanRepayResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanAssetsDataResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanBorrowHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanCollateralAssetsDataResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanLiquidationHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanLtvAdjustmentHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanOngoingOrdersResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanRepaymentHistoryResponse;
import jakarta.validation.constraints.*;
import okhttp3.Call;
import okhttp3.Request;
import org.bouncycastle.crypto.CryptoException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

/** API tests for FlexibleRateApi */
public class FlexibleRateApiTest {

    private FlexibleRateApi api;
    private ApiClient apiClientSpy;
    private SignatureGenerator signatureGeneratorSpy;

    @BeforeEach
    public void initApiClient() throws ApiException {
        ClientConfiguration clientConfiguration = new ClientConfiguration();
        clientConfiguration.setUrl("http://localhost:8080");
        SignatureConfiguration signatureConfiguration = new SignatureConfiguration();
        signatureConfiguration.setApiKey("apiKey");
        signatureConfiguration.setSecretKey("secretKey");
        clientConfiguration.setSignatureConfiguration(signatureConfiguration);

        HmacSignatureGenerator signatureGenerator =
                new HmacSignatureGenerator(signatureConfiguration.getSecretKey());
        signatureGeneratorSpy = Mockito.spy(signatureGenerator);
        SignatureAuthentication signatureAuthentication =
                new SignatureAuthentication(
                        signatureConfiguration.getApiKey(), signatureGeneratorSpy);
        SignatureAuthentication authenticationSpy = Mockito.spy(signatureAuthentication);
        Mockito.doReturn("1736393892000").when(authenticationSpy).buildTimestamp();

        BinanceAuthenticationFactory factoryMock = Mockito.mock(BinanceAuthenticationFactory.class);
        Mockito.doReturn(authenticationSpy)
                .when(factoryMock)
                .getAuthentication(signatureConfiguration);

        ApiClient apiClient = new ApiClient(clientConfiguration, factoryMock);

        apiClientSpy = Mockito.spy(apiClient);
        Mockito.doReturn(new ApiResponse<>(200, null))
                .when(apiClientSpy)
                .execute(Mockito.any(), Mockito.any(java.lang.reflect.Type.class));
        Mockito.doReturn(new ApiResponse<>(200, null)).when(apiClientSpy).execute(Mockito.any());
        Mockito.doReturn("1736393892000").when(apiClientSpy).buildTimestamp();

        api = new FlexibleRateApi(apiClientSpy);
    }

    /**
     * Check Collateral Repay Rate (USER_DATA)
     *
     * <p>Weight: 6000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkCollateralRepayRateTest() throws ApiException, CryptoException {
        String loanCoin = "";
        String collateralCoin = "";
        Long recvWindow = 5000L;
        ApiResponse<CheckCollateralRepayRateResponse> response =
                api.checkCollateralRepayRate(loanCoin, collateralCoin, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&collateralCoin=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "f49759cc0241450a3fbea110128c62034563a77fc6c27127278cd4e405221aa5",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/repay/rate", actualRequest.url().encodedPath());
    }

    /**
     * Flexible Loan Adjust LTV(TRADE)
     *
     * <p>Flexible Loan Adjust LTV * API Key needs Spot &amp; Margin Trading permission for this
     * endpoint Weight: 6000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flexibleLoanAdjustLtvTest() throws ApiException, CryptoException {
        FlexibleLoanAdjustLtvRequest flexibleLoanAdjustLtvRequest =
                new FlexibleLoanAdjustLtvRequest();

        flexibleLoanAdjustLtvRequest.loanCoin("");
        flexibleLoanAdjustLtvRequest.collateralCoin("");
        flexibleLoanAdjustLtvRequest.adjustmentAmount(1d);
        flexibleLoanAdjustLtvRequest.direction("");

        ApiResponse<FlexibleLoanAdjustLtvResponse> response =
                api.flexibleLoanAdjustLtv(flexibleLoanAdjustLtvRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000collateralCoin=&loanCoin=&adjustmentAmount=1&direction=",
                signInputCaptor.getValue());
        assertEquals(
                "120fe5c873088b09decd8c270c42e9103ac3f348610822ddbe5289943918baba",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/adjust/ltv", actualRequest.url().encodedPath());
    }

    /**
     * Flexible Loan Borrow(TRADE)
     *
     * <p>Borrow Flexible Loan * Only available for master account * You can customize LTV by
     * entering loanAmount and collateralAmount. Weight: 6000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flexibleLoanBorrowTest() throws ApiException, CryptoException {
        FlexibleLoanBorrowRequest flexibleLoanBorrowRequest = new FlexibleLoanBorrowRequest();

        flexibleLoanBorrowRequest.loanCoin("");
        flexibleLoanBorrowRequest.collateralCoin("");

        ApiResponse<FlexibleLoanBorrowResponse> response =
                api.flexibleLoanBorrow(flexibleLoanBorrowRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000collateralCoin=&loanCoin=", signInputCaptor.getValue());
        assertEquals(
                "4ce6b14df8387f7fad89b74f1f6fc807a3864ed56315be51e7e2b637e342a67d",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/borrow", actualRequest.url().encodedPath());
    }

    /**
     * Flexible Loan Collateral Repayment (TRADE)
     *
     * <p>Weight: 6000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flexibleLoanCollateralRepaymentTest() throws ApiException, CryptoException {
        FlexibleLoanCollateralRepaymentRequest flexibleLoanCollateralRepaymentRequest =
                new FlexibleLoanCollateralRepaymentRequest();

        flexibleLoanCollateralRepaymentRequest.loanCoin("");
        flexibleLoanCollateralRepaymentRequest.collateralCoin("");
        flexibleLoanCollateralRepaymentRequest.repayAmount(1d);

        ApiResponse<FlexibleLoanCollateralRepaymentResponse> response =
                api.flexibleLoanCollateralRepayment(flexibleLoanCollateralRepaymentRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000collateralCoin=&loanCoin=&repayAmount=1",
                signInputCaptor.getValue());
        assertEquals(
                "4901a7e5ee97147bb48abeb186304109d2e7b3a0533db9f895624d8b331d6ea4",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/repay/collateral", actualRequest.url().encodedPath());
    }

    /**
     * Flexible Loan Repay(TRADE)
     *
     * <p>Flexible Loan Repay * repayAmount is mandatory even fullRepayment &#x3D; FALSE Weight:
     * 6000
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flexibleLoanRepayTest() throws ApiException, CryptoException {
        FlexibleLoanRepayRequest flexibleLoanRepayRequest = new FlexibleLoanRepayRequest();

        flexibleLoanRepayRequest.loanCoin("");
        flexibleLoanRepayRequest.collateralCoin("");
        flexibleLoanRepayRequest.repayAmount(1d);

        ApiResponse<FlexibleLoanRepayResponse> response =
                api.flexibleLoanRepay(flexibleLoanRepayRequest);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "timestamp=1736393892000collateralCoin=&loanCoin=&repayAmount=1",
                signInputCaptor.getValue());
        assertEquals(
                "4901a7e5ee97147bb48abeb186304109d2e7b3a0533db9f895624d8b331d6ea4",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/repay", actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Loan Assets Data(USER_DATA)
     *
     * <p>Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown
     * in USD value. Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleLoanAssetsDataTest() throws ApiException, CryptoException {
        String loanCoin = "";
        Long recvWindow = 5000L;
        ApiResponse<GetFlexibleLoanAssetsDataResponse> response =
                api.getFlexibleLoanAssetsData(loanCoin, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&recvWindow=5000&timestamp=1736393892000", signInputCaptor.getValue());
        assertEquals(
                "2a09517b57df001aaf35228b8642b62271321de1e3714ccb1f56606355218630",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/loanable/data", actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Loan Borrow History(USER_DATA)
     *
     * <p>Get Flexible Loan Borrow History * If startTime and endTime are not sent, the recent
     * 90-day data will be returned. * The max interval between startTime and endTime is 180 days.
     * Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleLoanBorrowHistoryTest() throws ApiException, CryptoException {
        String loanCoin = "";
        String collateralCoin = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long limit = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetFlexibleLoanBorrowHistoryResponse> response =
                api.getFlexibleLoanBorrowHistory(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&collateralCoin=&startTime=1623319461670&endTime=1641782889000&current=1&limit=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "783b1032640c844b7bd8cd7e911ea212f1e43d197e20e7a1b21d63e572fd75c7",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/borrow/history", actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Loan Collateral Assets Data(USER_DATA)
     *
     * <p>Get LTV information and collateral limit of flexible loan&#39;s collateral assets. The
     * collateral limit is shown in USD value. Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleLoanCollateralAssetsDataTest() throws ApiException, CryptoException {
        String collateralCoin = "";
        Long recvWindow = 5000L;
        ApiResponse<GetFlexibleLoanCollateralAssetsDataResponse> response =
                api.getFlexibleLoanCollateralAssetsData(collateralCoin, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "collateralCoin=&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "55075b58719a54df8f08bc09d0797b888e135d419c7e19dfe4987b5f83354c8e",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/collateral/data", actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Loan Liquidation History (USER_DATA)
     *
     * <p>Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleLoanLiquidationHistoryTest() throws ApiException, CryptoException {
        String loanCoin = "";
        String collateralCoin = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long limit = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetFlexibleLoanLiquidationHistoryResponse> response =
                api.getFlexibleLoanLiquidationHistory(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&collateralCoin=&startTime=1623319461670&endTime=1641782889000&current=1&limit=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "783b1032640c844b7bd8cd7e911ea212f1e43d197e20e7a1b21d63e572fd75c7",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v2/loan/flexible/liquidation/history", actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Loan LTV Adjustment History(USER_DATA)
     *
     * <p>Get Flexible Loan LTV Adjustment History * If startTime and endTime are not sent, the
     * recent 90-day data will be returned. * The max interval between startTime and endTime is 180
     * days. Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleLoanLtvAdjustmentHistoryTest() throws ApiException, CryptoException {
        String loanCoin = "";
        String collateralCoin = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long limit = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetFlexibleLoanLtvAdjustmentHistoryResponse> response =
                api.getFlexibleLoanLtvAdjustmentHistory(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&collateralCoin=&startTime=1623319461670&endTime=1641782889000&current=1&limit=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "783b1032640c844b7bd8cd7e911ea212f1e43d197e20e7a1b21d63e572fd75c7",
                actualRequest.url().queryParameter("signature"));
        assertEquals(
                "/sapi/v2/loan/flexible/ltv/adjustment/history", actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Loan Ongoing Orders(USER_DATA)
     *
     * <p>Get Flexible Loan Ongoing Orders Weight: 300
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleLoanOngoingOrdersTest() throws ApiException, CryptoException {
        String loanCoin = "";
        String collateralCoin = "";
        Long current = 1L;
        Long limit = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetFlexibleLoanOngoingOrdersResponse> response =
                api.getFlexibleLoanOngoingOrders(
                        loanCoin, collateralCoin, current, limit, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&collateralCoin=&current=1&limit=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "60ca806a57899002561ea1a2fe27470825b14c95b4a19144c49b7d0458c28733",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/ongoing/orders", actualRequest.url().encodedPath());
    }

    /**
     * Get Flexible Loan Repayment History(USER_DATA)
     *
     * <p>Get Flexible Loan Repayment History * If startTime and endTime are not sent, the recent
     * 90-day data will be returned. * The max interval between startTime and endTime is 180 days.
     * Weight: 400
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlexibleLoanRepaymentHistoryTest() throws ApiException, CryptoException {
        String loanCoin = "";
        String collateralCoin = "";
        Long startTime = 1623319461670L;
        Long endTime = 1641782889000L;
        Long current = 1L;
        Long limit = 10L;
        Long recvWindow = 5000L;
        ApiResponse<GetFlexibleLoanRepaymentHistoryResponse> response =
                api.getFlexibleLoanRepaymentHistory(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);

        ArgumentCaptor<Call> callArgumentCaptor = ArgumentCaptor.forClass(Call.class);
        Mockito.verify(apiClientSpy)
                .execute(callArgumentCaptor.capture(), Mockito.any(java.lang.reflect.Type.class));

        ArgumentCaptor<String> signInputCaptor = ArgumentCaptor.forClass(String.class);
        Mockito.verify(signatureGeneratorSpy).signAsString(signInputCaptor.capture());

        Call captorValue = callArgumentCaptor.getValue();
        Request actualRequest = captorValue.request();

        assertEquals(
                "loanCoin=&collateralCoin=&startTime=1623319461670&endTime=1641782889000&current=1&limit=10&recvWindow=5000&timestamp=1736393892000",
                signInputCaptor.getValue());
        assertEquals(
                "783b1032640c844b7bd8cd7e911ea212f1e43d197e20e7a1b21d63e572fd75c7",
                actualRequest.url().queryParameter("signature"));
        assertEquals("/sapi/v2/loan/flexible/repay/history", actualRequest.url().encodedPath());
    }
}
