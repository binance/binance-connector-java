/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.model;

import com.binance.connector.client.crypto_loan.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetLoanOngoingOrdersResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetLoanOngoingOrdersResponseRowsInner {
    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_LOAN_COIN = "loanCoin";

    @SerializedName(SERIALIZED_NAME_LOAN_COIN)
    @jakarta.annotation.Nullable
    private String loanCoin;

    public static final String SERIALIZED_NAME_TOTAL_DEBT = "totalDebt";

    @SerializedName(SERIALIZED_NAME_TOTAL_DEBT)
    @jakarta.annotation.Nullable
    private String totalDebt;

    public static final String SERIALIZED_NAME_RESIDUAL_INTEREST = "residualInterest";

    @SerializedName(SERIALIZED_NAME_RESIDUAL_INTEREST)
    @jakarta.annotation.Nullable
    private String residualInterest;

    public static final String SERIALIZED_NAME_COLLATERAL_COIN = "collateralCoin";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_COIN)
    @jakarta.annotation.Nullable
    private String collateralCoin;

    public static final String SERIALIZED_NAME_COLLATERAL_AMOUNT = "collateralAmount";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_AMOUNT)
    @jakarta.annotation.Nullable
    private String collateralAmount;

    public static final String SERIALIZED_NAME_CURRENT_L_T_V = "currentLTV";

    @SerializedName(SERIALIZED_NAME_CURRENT_L_T_V)
    @jakarta.annotation.Nullable
    private String currentLTV;

    public static final String SERIALIZED_NAME_EXPIRATION_TIME = "expirationTime";

    @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME)
    @jakarta.annotation.Nullable
    private Long expirationTime;

    public GetLoanOngoingOrdersResponseRowsInner() {}

    public GetLoanOngoingOrdersResponseRowsInner orderId(
            @jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public GetLoanOngoingOrdersResponseRowsInner loanCoin(
            @jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
        return this;
    }

    /**
     * Get loanCoin
     *
     * @return loanCoin
     */
    @jakarta.annotation.Nullable
    public String getLoanCoin() {
        return loanCoin;
    }

    public void setLoanCoin(@jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
    }

    public GetLoanOngoingOrdersResponseRowsInner totalDebt(
            @jakarta.annotation.Nullable String totalDebt) {
        this.totalDebt = totalDebt;
        return this;
    }

    /**
     * Get totalDebt
     *
     * @return totalDebt
     */
    @jakarta.annotation.Nullable
    public String getTotalDebt() {
        return totalDebt;
    }

    public void setTotalDebt(@jakarta.annotation.Nullable String totalDebt) {
        this.totalDebt = totalDebt;
    }

    public GetLoanOngoingOrdersResponseRowsInner residualInterest(
            @jakarta.annotation.Nullable String residualInterest) {
        this.residualInterest = residualInterest;
        return this;
    }

    /**
     * Get residualInterest
     *
     * @return residualInterest
     */
    @jakarta.annotation.Nullable
    public String getResidualInterest() {
        return residualInterest;
    }

    public void setResidualInterest(@jakarta.annotation.Nullable String residualInterest) {
        this.residualInterest = residualInterest;
    }

    public GetLoanOngoingOrdersResponseRowsInner collateralCoin(
            @jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
        return this;
    }

    /**
     * Get collateralCoin
     *
     * @return collateralCoin
     */
    @jakarta.annotation.Nullable
    public String getCollateralCoin() {
        return collateralCoin;
    }

    public void setCollateralCoin(@jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
    }

    public GetLoanOngoingOrdersResponseRowsInner collateralAmount(
            @jakarta.annotation.Nullable String collateralAmount) {
        this.collateralAmount = collateralAmount;
        return this;
    }

    /**
     * Get collateralAmount
     *
     * @return collateralAmount
     */
    @jakarta.annotation.Nullable
    public String getCollateralAmount() {
        return collateralAmount;
    }

    public void setCollateralAmount(@jakarta.annotation.Nullable String collateralAmount) {
        this.collateralAmount = collateralAmount;
    }

    public GetLoanOngoingOrdersResponseRowsInner currentLTV(
            @jakarta.annotation.Nullable String currentLTV) {
        this.currentLTV = currentLTV;
        return this;
    }

    /**
     * Get currentLTV
     *
     * @return currentLTV
     */
    @jakarta.annotation.Nullable
    public String getCurrentLTV() {
        return currentLTV;
    }

    public void setCurrentLTV(@jakarta.annotation.Nullable String currentLTV) {
        this.currentLTV = currentLTV;
    }

    public GetLoanOngoingOrdersResponseRowsInner expirationTime(
            @jakarta.annotation.Nullable Long expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }

    /**
     * Get expirationTime
     *
     * @return expirationTime
     */
    @jakarta.annotation.Nullable
    public Long getExpirationTime() {
        return expirationTime;
    }

    public void setExpirationTime(@jakarta.annotation.Nullable Long expirationTime) {
        this.expirationTime = expirationTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLoanOngoingOrdersResponseRowsInner getLoanOngoingOrdersResponseRowsInner =
                (GetLoanOngoingOrdersResponseRowsInner) o;
        return Objects.equals(this.orderId, getLoanOngoingOrdersResponseRowsInner.orderId)
                && Objects.equals(this.loanCoin, getLoanOngoingOrdersResponseRowsInner.loanCoin)
                && Objects.equals(this.totalDebt, getLoanOngoingOrdersResponseRowsInner.totalDebt)
                && Objects.equals(
                        this.residualInterest,
                        getLoanOngoingOrdersResponseRowsInner.residualInterest)
                && Objects.equals(
                        this.collateralCoin, getLoanOngoingOrdersResponseRowsInner.collateralCoin)
                && Objects.equals(
                        this.collateralAmount,
                        getLoanOngoingOrdersResponseRowsInner.collateralAmount)
                && Objects.equals(this.currentLTV, getLoanOngoingOrdersResponseRowsInner.currentLTV)
                && Objects.equals(
                        this.expirationTime, getLoanOngoingOrdersResponseRowsInner.expirationTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                orderId,
                loanCoin,
                totalDebt,
                residualInterest,
                collateralCoin,
                collateralAmount,
                currentLTV,
                expirationTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetLoanOngoingOrdersResponseRowsInner {\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		loanCoin: ").append(toIndentedString(loanCoin)).append("\n");
        sb.append("		totalDebt: ").append(toIndentedString(totalDebt)).append("\n");
        sb.append("		residualInterest: ").append(toIndentedString(residualInterest)).append("\n");
        sb.append("		collateralCoin: ").append(toIndentedString(collateralCoin)).append("\n");
        sb.append("		collateralAmount: ").append(toIndentedString(collateralAmount)).append("\n");
        sb.append("		currentLTV: ").append(toIndentedString(currentLTV)).append("\n");
        sb.append("		expirationTime: ").append(toIndentedString(expirationTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object loanCoinValue = getLoanCoin();
        String loanCoinValueAsString = "";
        loanCoinValueAsString = loanCoinValue.toString();
        sb.append("loanCoin=").append(urlEncode(loanCoinValueAsString)).append("");
        Object totalDebtValue = getTotalDebt();
        String totalDebtValueAsString = "";
        totalDebtValueAsString = totalDebtValue.toString();
        sb.append("totalDebt=").append(urlEncode(totalDebtValueAsString)).append("");
        Object residualInterestValue = getResidualInterest();
        String residualInterestValueAsString = "";
        residualInterestValueAsString = residualInterestValue.toString();
        sb.append("residualInterest=").append(urlEncode(residualInterestValueAsString)).append("");
        Object collateralCoinValue = getCollateralCoin();
        String collateralCoinValueAsString = "";
        collateralCoinValueAsString = collateralCoinValue.toString();
        sb.append("collateralCoin=").append(urlEncode(collateralCoinValueAsString)).append("");
        Object collateralAmountValue = getCollateralAmount();
        String collateralAmountValueAsString = "";
        collateralAmountValueAsString = collateralAmountValue.toString();
        sb.append("collateralAmount=").append(urlEncode(collateralAmountValueAsString)).append("");
        Object currentLTVValue = getCurrentLTV();
        String currentLTVValueAsString = "";
        currentLTVValueAsString = currentLTVValue.toString();
        sb.append("currentLTV=").append(urlEncode(currentLTVValueAsString)).append("");
        Object expirationTimeValue = getExpirationTime();
        String expirationTimeValueAsString = "";
        expirationTimeValueAsString = expirationTimeValue.toString();
        sb.append("expirationTime=").append(urlEncode(expirationTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderId");
        openapiFields.add("loanCoin");
        openapiFields.add("totalDebt");
        openapiFields.add("residualInterest");
        openapiFields.add("collateralCoin");
        openapiFields.add("collateralAmount");
        openapiFields.add("currentLTV");
        openapiFields.add("expirationTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetLoanOngoingOrdersResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetLoanOngoingOrdersResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetLoanOngoingOrdersResponseRowsInner"
                                        + " is not found in the empty JSON string",
                                GetLoanOngoingOrdersResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetLoanOngoingOrdersResponseRowsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetLoanOngoingOrdersResponseRowsInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("loanCoin") != null && !jsonObj.get("loanCoin").isJsonNull())
                && !jsonObj.get("loanCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `loanCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("loanCoin").toString()));
        }
        if ((jsonObj.get("totalDebt") != null && !jsonObj.get("totalDebt").isJsonNull())
                && !jsonObj.get("totalDebt").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalDebt` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("totalDebt").toString()));
        }
        if ((jsonObj.get("residualInterest") != null
                        && !jsonObj.get("residualInterest").isJsonNull())
                && !jsonObj.get("residualInterest").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `residualInterest` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("residualInterest").toString()));
        }
        if ((jsonObj.get("collateralCoin") != null && !jsonObj.get("collateralCoin").isJsonNull())
                && !jsonObj.get("collateralCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collateralCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collateralCoin").toString()));
        }
        if ((jsonObj.get("collateralAmount") != null
                        && !jsonObj.get("collateralAmount").isJsonNull())
                && !jsonObj.get("collateralAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collateralAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("collateralAmount").toString()));
        }
        if ((jsonObj.get("currentLTV") != null && !jsonObj.get("currentLTV").isJsonNull())
                && !jsonObj.get("currentLTV").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `currentLTV` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("currentLTV").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetLoanOngoingOrdersResponseRowsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetLoanOngoingOrdersResponseRowsInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetLoanOngoingOrdersResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetLoanOngoingOrdersResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetLoanOngoingOrdersResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetLoanOngoingOrdersResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetLoanOngoingOrdersResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetLoanOngoingOrdersResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetLoanOngoingOrdersResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetLoanOngoingOrdersResponseRowsInner
     */
    public static GetLoanOngoingOrdersResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetLoanOngoingOrdersResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetLoanOngoingOrdersResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
