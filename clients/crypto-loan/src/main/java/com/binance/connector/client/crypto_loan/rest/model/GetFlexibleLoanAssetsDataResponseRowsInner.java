/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.model;

import com.binance.connector.client.crypto_loan.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFlexibleLoanAssetsDataResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFlexibleLoanAssetsDataResponseRowsInner {
    public static final String SERIALIZED_NAME_LOAN_COIN = "loanCoin";

    @SerializedName(SERIALIZED_NAME_LOAN_COIN)
    @jakarta.annotation.Nullable
    private String loanCoin;

    public static final String SERIALIZED_NAME_FLEXIBLE_INTEREST_RATE = "flexibleInterestRate";

    @SerializedName(SERIALIZED_NAME_FLEXIBLE_INTEREST_RATE)
    @jakarta.annotation.Nullable
    private String flexibleInterestRate;

    public static final String SERIALIZED_NAME_FLEXIBLE_MIN_LIMIT = "flexibleMinLimit";

    @SerializedName(SERIALIZED_NAME_FLEXIBLE_MIN_LIMIT)
    @jakarta.annotation.Nullable
    private String flexibleMinLimit;

    public static final String SERIALIZED_NAME_FLEXIBLE_MAX_LIMIT = "flexibleMaxLimit";

    @SerializedName(SERIALIZED_NAME_FLEXIBLE_MAX_LIMIT)
    @jakarta.annotation.Nullable
    private String flexibleMaxLimit;

    public GetFlexibleLoanAssetsDataResponseRowsInner() {}

    public GetFlexibleLoanAssetsDataResponseRowsInner loanCoin(
            @jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
        return this;
    }

    /**
     * Get loanCoin
     *
     * @return loanCoin
     */
    @jakarta.annotation.Nullable
    public String getLoanCoin() {
        return loanCoin;
    }

    public void setLoanCoin(@jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
    }

    public GetFlexibleLoanAssetsDataResponseRowsInner flexibleInterestRate(
            @jakarta.annotation.Nullable String flexibleInterestRate) {
        this.flexibleInterestRate = flexibleInterestRate;
        return this;
    }

    /**
     * Get flexibleInterestRate
     *
     * @return flexibleInterestRate
     */
    @jakarta.annotation.Nullable
    public String getFlexibleInterestRate() {
        return flexibleInterestRate;
    }

    public void setFlexibleInterestRate(@jakarta.annotation.Nullable String flexibleInterestRate) {
        this.flexibleInterestRate = flexibleInterestRate;
    }

    public GetFlexibleLoanAssetsDataResponseRowsInner flexibleMinLimit(
            @jakarta.annotation.Nullable String flexibleMinLimit) {
        this.flexibleMinLimit = flexibleMinLimit;
        return this;
    }

    /**
     * Get flexibleMinLimit
     *
     * @return flexibleMinLimit
     */
    @jakarta.annotation.Nullable
    public String getFlexibleMinLimit() {
        return flexibleMinLimit;
    }

    public void setFlexibleMinLimit(@jakarta.annotation.Nullable String flexibleMinLimit) {
        this.flexibleMinLimit = flexibleMinLimit;
    }

    public GetFlexibleLoanAssetsDataResponseRowsInner flexibleMaxLimit(
            @jakarta.annotation.Nullable String flexibleMaxLimit) {
        this.flexibleMaxLimit = flexibleMaxLimit;
        return this;
    }

    /**
     * Get flexibleMaxLimit
     *
     * @return flexibleMaxLimit
     */
    @jakarta.annotation.Nullable
    public String getFlexibleMaxLimit() {
        return flexibleMaxLimit;
    }

    public void setFlexibleMaxLimit(@jakarta.annotation.Nullable String flexibleMaxLimit) {
        this.flexibleMaxLimit = flexibleMaxLimit;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFlexibleLoanAssetsDataResponseRowsInner getFlexibleLoanAssetsDataResponseRowsInner =
                (GetFlexibleLoanAssetsDataResponseRowsInner) o;
        return Objects.equals(this.loanCoin, getFlexibleLoanAssetsDataResponseRowsInner.loanCoin)
                && Objects.equals(
                        this.flexibleInterestRate,
                        getFlexibleLoanAssetsDataResponseRowsInner.flexibleInterestRate)
                && Objects.equals(
                        this.flexibleMinLimit,
                        getFlexibleLoanAssetsDataResponseRowsInner.flexibleMinLimit)
                && Objects.equals(
                        this.flexibleMaxLimit,
                        getFlexibleLoanAssetsDataResponseRowsInner.flexibleMaxLimit);
    }

    @Override
    public int hashCode() {
        return Objects.hash(loanCoin, flexibleInterestRate, flexibleMinLimit, flexibleMaxLimit);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetFlexibleLoanAssetsDataResponseRowsInner {\n");
        sb.append("		loanCoin: ").append(toIndentedString(loanCoin)).append("\n");
        sb.append("		flexibleInterestRate: ")
                .append(toIndentedString(flexibleInterestRate))
                .append("\n");
        sb.append("		flexibleMinLimit: ").append(toIndentedString(flexibleMinLimit)).append("\n");
        sb.append("		flexibleMaxLimit: ").append(toIndentedString(flexibleMaxLimit)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object loanCoinValue = getLoanCoin();
        String loanCoinValueAsString = "";
        loanCoinValueAsString = loanCoinValue.toString();
        sb.append("loanCoin=").append(urlEncode(loanCoinValueAsString)).append("");
        Object flexibleInterestRateValue = getFlexibleInterestRate();
        String flexibleInterestRateValueAsString = "";
        flexibleInterestRateValueAsString = flexibleInterestRateValue.toString();
        sb.append("flexibleInterestRate=")
                .append(urlEncode(flexibleInterestRateValueAsString))
                .append("");
        Object flexibleMinLimitValue = getFlexibleMinLimit();
        String flexibleMinLimitValueAsString = "";
        flexibleMinLimitValueAsString = flexibleMinLimitValue.toString();
        sb.append("flexibleMinLimit=").append(urlEncode(flexibleMinLimitValueAsString)).append("");
        Object flexibleMaxLimitValue = getFlexibleMaxLimit();
        String flexibleMaxLimitValueAsString = "";
        flexibleMaxLimitValueAsString = flexibleMaxLimitValue.toString();
        sb.append("flexibleMaxLimit=").append(urlEncode(flexibleMaxLimitValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("loanCoin");
        openapiFields.add("flexibleInterestRate");
        openapiFields.add("flexibleMinLimit");
        openapiFields.add("flexibleMaxLimit");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFlexibleLoanAssetsDataResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFlexibleLoanAssetsDataResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetFlexibleLoanAssetsDataResponseRowsInner is not found in"
                                    + " the empty JSON string",
                                GetFlexibleLoanAssetsDataResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFlexibleLoanAssetsDataResponseRowsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetFlexibleLoanAssetsDataResponseRowsInner` properties."
                                    + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("loanCoin") != null && !jsonObj.get("loanCoin").isJsonNull())
                && !jsonObj.get("loanCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `loanCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("loanCoin").toString()));
        }
        if ((jsonObj.get("flexibleInterestRate") != null
                        && !jsonObj.get("flexibleInterestRate").isJsonNull())
                && !jsonObj.get("flexibleInterestRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `flexibleInterestRate` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("flexibleInterestRate").toString()));
        }
        if ((jsonObj.get("flexibleMinLimit") != null
                        && !jsonObj.get("flexibleMinLimit").isJsonNull())
                && !jsonObj.get("flexibleMinLimit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `flexibleMinLimit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("flexibleMinLimit").toString()));
        }
        if ((jsonObj.get("flexibleMaxLimit") != null
                        && !jsonObj.get("flexibleMaxLimit").isJsonNull())
                && !jsonObj.get("flexibleMaxLimit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `flexibleMaxLimit` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("flexibleMaxLimit").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFlexibleLoanAssetsDataResponseRowsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetFlexibleLoanAssetsDataResponseRowsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetFlexibleLoanAssetsDataResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetFlexibleLoanAssetsDataResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetFlexibleLoanAssetsDataResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetFlexibleLoanAssetsDataResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetFlexibleLoanAssetsDataResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFlexibleLoanAssetsDataResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFlexibleLoanAssetsDataResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFlexibleLoanAssetsDataResponseRowsInner
     */
    public static GetFlexibleLoanAssetsDataResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetFlexibleLoanAssetsDataResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetFlexibleLoanAssetsDataResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
