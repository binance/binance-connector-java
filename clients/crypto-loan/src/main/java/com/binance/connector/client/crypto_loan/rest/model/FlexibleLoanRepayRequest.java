/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.model;

import com.binance.connector.client.crypto_loan.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** FlexibleLoanRepayRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FlexibleLoanRepayRequest {
    public static final String SERIALIZED_NAME_LOAN_COIN = "loanCoin";

    @SerializedName(SERIALIZED_NAME_LOAN_COIN)
    @jakarta.annotation.Nonnull
    private String loanCoin;

    public static final String SERIALIZED_NAME_COLLATERAL_COIN = "collateralCoin";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_COIN)
    @jakarta.annotation.Nonnull
    private String collateralCoin;

    public static final String SERIALIZED_NAME_REPAY_AMOUNT = "repayAmount";

    @SerializedName(SERIALIZED_NAME_REPAY_AMOUNT)
    @jakarta.annotation.Nonnull
    private Double repayAmount;

    public static final String SERIALIZED_NAME_COLLATERAL_RETURN = "collateralReturn";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_RETURN)
    @jakarta.annotation.Nullable
    private Boolean collateralReturn;

    public static final String SERIALIZED_NAME_FULL_REPAYMENT = "fullRepayment";

    @SerializedName(SERIALIZED_NAME_FULL_REPAYMENT)
    @jakarta.annotation.Nullable
    private Boolean fullRepayment;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public FlexibleLoanRepayRequest() {}

    public FlexibleLoanRepayRequest loanCoin(@jakarta.annotation.Nonnull String loanCoin) {
        this.loanCoin = loanCoin;
        return this;
    }

    /**
     * Get loanCoin
     *
     * @return loanCoin
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getLoanCoin() {
        return loanCoin;
    }

    public void setLoanCoin(@jakarta.annotation.Nonnull String loanCoin) {
        this.loanCoin = loanCoin;
    }

    public FlexibleLoanRepayRequest collateralCoin(
            @jakarta.annotation.Nonnull String collateralCoin) {
        this.collateralCoin = collateralCoin;
        return this;
    }

    /**
     * Get collateralCoin
     *
     * @return collateralCoin
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getCollateralCoin() {
        return collateralCoin;
    }

    public void setCollateralCoin(@jakarta.annotation.Nonnull String collateralCoin) {
        this.collateralCoin = collateralCoin;
    }

    public FlexibleLoanRepayRequest repayAmount(@jakarta.annotation.Nonnull Double repayAmount) {
        this.repayAmount = repayAmount;
        return this;
    }

    /**
     * Get repayAmount
     *
     * @return repayAmount
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Double getRepayAmount() {
        return repayAmount;
    }

    public void setRepayAmount(@jakarta.annotation.Nonnull Double repayAmount) {
        this.repayAmount = repayAmount;
    }

    public FlexibleLoanRepayRequest collateralReturn(
            @jakarta.annotation.Nullable Boolean collateralReturn) {
        this.collateralReturn = collateralReturn;
        return this;
    }

    /**
     * Get collateralReturn
     *
     * @return collateralReturn
     */
    @jakarta.annotation.Nullable
    public Boolean getCollateralReturn() {
        return collateralReturn;
    }

    public void setCollateralReturn(@jakarta.annotation.Nullable Boolean collateralReturn) {
        this.collateralReturn = collateralReturn;
    }

    public FlexibleLoanRepayRequest fullRepayment(
            @jakarta.annotation.Nullable Boolean fullRepayment) {
        this.fullRepayment = fullRepayment;
        return this;
    }

    /**
     * Get fullRepayment
     *
     * @return fullRepayment
     */
    @jakarta.annotation.Nullable
    public Boolean getFullRepayment() {
        return fullRepayment;
    }

    public void setFullRepayment(@jakarta.annotation.Nullable Boolean fullRepayment) {
        this.fullRepayment = fullRepayment;
    }

    public FlexibleLoanRepayRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FlexibleLoanRepayRequest flexibleLoanRepayRequest = (FlexibleLoanRepayRequest) o;
        return Objects.equals(this.loanCoin, flexibleLoanRepayRequest.loanCoin)
                && Objects.equals(this.collateralCoin, flexibleLoanRepayRequest.collateralCoin)
                && Objects.equals(this.repayAmount, flexibleLoanRepayRequest.repayAmount)
                && Objects.equals(this.collateralReturn, flexibleLoanRepayRequest.collateralReturn)
                && Objects.equals(this.fullRepayment, flexibleLoanRepayRequest.fullRepayment)
                && Objects.equals(this.recvWindow, flexibleLoanRepayRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                loanCoin, collateralCoin, repayAmount, collateralReturn, fullRepayment, recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FlexibleLoanRepayRequest {\n");
        sb.append("		loanCoin: ").append(toIndentedString(loanCoin)).append("\n");
        sb.append("		collateralCoin: ").append(toIndentedString(collateralCoin)).append("\n");
        sb.append("		repayAmount: ").append(toIndentedString(repayAmount)).append("\n");
        sb.append("		collateralReturn: ").append(toIndentedString(collateralReturn)).append("\n");
        sb.append("		fullRepayment: ").append(toIndentedString(fullRepayment)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object loanCoinValue = getLoanCoin();
        String loanCoinValueAsString = "";
        loanCoinValueAsString = loanCoinValue.toString();
        sb.append("loanCoin=").append(urlEncode(loanCoinValueAsString)).append("");
        Object collateralCoinValue = getCollateralCoin();
        String collateralCoinValueAsString = "";
        collateralCoinValueAsString = collateralCoinValue.toString();
        sb.append("collateralCoin=").append(urlEncode(collateralCoinValueAsString)).append("");
        Object repayAmountValue = getRepayAmount();
        String repayAmountValueAsString = "";
        repayAmountValueAsString = repayAmountValue.toString();
        sb.append("repayAmount=").append(urlEncode(repayAmountValueAsString)).append("");
        Object collateralReturnValue = getCollateralReturn();
        String collateralReturnValueAsString = "";
        collateralReturnValueAsString = collateralReturnValue.toString();
        sb.append("collateralReturn=").append(urlEncode(collateralReturnValueAsString)).append("");
        Object fullRepaymentValue = getFullRepayment();
        String fullRepaymentValueAsString = "";
        fullRepaymentValueAsString = fullRepaymentValue.toString();
        sb.append("fullRepayment=").append(urlEncode(fullRepaymentValueAsString)).append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("loanCoin");
        openapiFields.add("collateralCoin");
        openapiFields.add("repayAmount");
        openapiFields.add("collateralReturn");
        openapiFields.add("fullRepayment");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("loanCoin");
        openapiRequiredFields.add("collateralCoin");
        openapiRequiredFields.add("repayAmount");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to FlexibleLoanRepayRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FlexibleLoanRepayRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FlexibleLoanRepayRequest is not found"
                                        + " in the empty JSON string",
                                FlexibleLoanRepayRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FlexibleLoanRepayRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FlexibleLoanRepayRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : FlexibleLoanRepayRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("loanCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `loanCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("loanCoin").toString()));
        }
        if (!jsonObj.get("collateralCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collateralCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collateralCoin").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FlexibleLoanRepayRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FlexibleLoanRepayRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FlexibleLoanRepayRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(FlexibleLoanRepayRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FlexibleLoanRepayRequest>() {
                        @Override
                        public void write(JsonWriter out, FlexibleLoanRepayRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FlexibleLoanRepayRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FlexibleLoanRepayRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FlexibleLoanRepayRequest
     * @throws IOException if the JSON string is invalid with respect to FlexibleLoanRepayRequest
     */
    public static FlexibleLoanRepayRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FlexibleLoanRepayRequest.class);
    }

    /**
     * Convert an instance of FlexibleLoanRepayRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
