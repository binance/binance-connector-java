/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.model;

import com.binance.connector.client.crypto_loan.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** FlexibleLoanAdjustLtvResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class FlexibleLoanAdjustLtvResponse {
    public static final String SERIALIZED_NAME_LOAN_COIN = "loanCoin";

    @SerializedName(SERIALIZED_NAME_LOAN_COIN)
    @jakarta.annotation.Nullable
    private String loanCoin;

    public static final String SERIALIZED_NAME_COLLATERAL_COIN = "collateralCoin";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_COIN)
    @jakarta.annotation.Nullable
    private String collateralCoin;

    public static final String SERIALIZED_NAME_DIRECTION = "direction";

    @SerializedName(SERIALIZED_NAME_DIRECTION)
    @jakarta.annotation.Nullable
    private String direction;

    public static final String SERIALIZED_NAME_ADJUSTMENT_AMOUNT = "adjustmentAmount";

    @SerializedName(SERIALIZED_NAME_ADJUSTMENT_AMOUNT)
    @jakarta.annotation.Nullable
    private String adjustmentAmount;

    public static final String SERIALIZED_NAME_CURRENT_L_T_V = "currentLTV";

    @SerializedName(SERIALIZED_NAME_CURRENT_L_T_V)
    @jakarta.annotation.Nullable
    private String currentLTV;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public FlexibleLoanAdjustLtvResponse() {}

    public FlexibleLoanAdjustLtvResponse loanCoin(@jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
        return this;
    }

    /**
     * Get loanCoin
     *
     * @return loanCoin
     */
    @jakarta.annotation.Nullable
    public String getLoanCoin() {
        return loanCoin;
    }

    public void setLoanCoin(@jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
    }

    public FlexibleLoanAdjustLtvResponse collateralCoin(
            @jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
        return this;
    }

    /**
     * Get collateralCoin
     *
     * @return collateralCoin
     */
    @jakarta.annotation.Nullable
    public String getCollateralCoin() {
        return collateralCoin;
    }

    public void setCollateralCoin(@jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
    }

    public FlexibleLoanAdjustLtvResponse direction(@jakarta.annotation.Nullable String direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get direction
     *
     * @return direction
     */
    @jakarta.annotation.Nullable
    public String getDirection() {
        return direction;
    }

    public void setDirection(@jakarta.annotation.Nullable String direction) {
        this.direction = direction;
    }

    public FlexibleLoanAdjustLtvResponse adjustmentAmount(
            @jakarta.annotation.Nullable String adjustmentAmount) {
        this.adjustmentAmount = adjustmentAmount;
        return this;
    }

    /**
     * Get adjustmentAmount
     *
     * @return adjustmentAmount
     */
    @jakarta.annotation.Nullable
    public String getAdjustmentAmount() {
        return adjustmentAmount;
    }

    public void setAdjustmentAmount(@jakarta.annotation.Nullable String adjustmentAmount) {
        this.adjustmentAmount = adjustmentAmount;
    }

    public FlexibleLoanAdjustLtvResponse currentLTV(
            @jakarta.annotation.Nullable String currentLTV) {
        this.currentLTV = currentLTV;
        return this;
    }

    /**
     * Get currentLTV
     *
     * @return currentLTV
     */
    @jakarta.annotation.Nullable
    public String getCurrentLTV() {
        return currentLTV;
    }

    public void setCurrentLTV(@jakarta.annotation.Nullable String currentLTV) {
        this.currentLTV = currentLTV;
    }

    public FlexibleLoanAdjustLtvResponse status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FlexibleLoanAdjustLtvResponse flexibleLoanAdjustLtvResponse =
                (FlexibleLoanAdjustLtvResponse) o;
        return Objects.equals(this.loanCoin, flexibleLoanAdjustLtvResponse.loanCoin)
                && Objects.equals(this.collateralCoin, flexibleLoanAdjustLtvResponse.collateralCoin)
                && Objects.equals(this.direction, flexibleLoanAdjustLtvResponse.direction)
                && Objects.equals(
                        this.adjustmentAmount, flexibleLoanAdjustLtvResponse.adjustmentAmount)
                && Objects.equals(this.currentLTV, flexibleLoanAdjustLtvResponse.currentLTV)
                && Objects.equals(this.status, flexibleLoanAdjustLtvResponse.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                loanCoin, collateralCoin, direction, adjustmentAmount, currentLTV, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class FlexibleLoanAdjustLtvResponse {\n");
        sb.append("		loanCoin: ").append(toIndentedString(loanCoin)).append("\n");
        sb.append("		collateralCoin: ").append(toIndentedString(collateralCoin)).append("\n");
        sb.append("		direction: ").append(toIndentedString(direction)).append("\n");
        sb.append("		adjustmentAmount: ").append(toIndentedString(adjustmentAmount)).append("\n");
        sb.append("		currentLTV: ").append(toIndentedString(currentLTV)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object loanCoinValue = getLoanCoin();
        String loanCoinValueAsString = "";
        loanCoinValueAsString = loanCoinValue.toString();
        sb.append("loanCoin=").append(urlEncode(loanCoinValueAsString)).append("");
        Object collateralCoinValue = getCollateralCoin();
        String collateralCoinValueAsString = "";
        collateralCoinValueAsString = collateralCoinValue.toString();
        sb.append("collateralCoin=").append(urlEncode(collateralCoinValueAsString)).append("");
        Object directionValue = getDirection();
        String directionValueAsString = "";
        directionValueAsString = directionValue.toString();
        sb.append("direction=").append(urlEncode(directionValueAsString)).append("");
        Object adjustmentAmountValue = getAdjustmentAmount();
        String adjustmentAmountValueAsString = "";
        adjustmentAmountValueAsString = adjustmentAmountValue.toString();
        sb.append("adjustmentAmount=").append(urlEncode(adjustmentAmountValueAsString)).append("");
        Object currentLTVValue = getCurrentLTV();
        String currentLTVValueAsString = "";
        currentLTVValueAsString = currentLTVValue.toString();
        sb.append("currentLTV=").append(urlEncode(currentLTVValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("loanCoin");
        openapiFields.add("collateralCoin");
        openapiFields.add("direction");
        openapiFields.add("adjustmentAmount");
        openapiFields.add("currentLTV");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     FlexibleLoanAdjustLtvResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!FlexibleLoanAdjustLtvResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in FlexibleLoanAdjustLtvResponse is not"
                                        + " found in the empty JSON string",
                                FlexibleLoanAdjustLtvResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!FlexibleLoanAdjustLtvResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `FlexibleLoanAdjustLtvResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("loanCoin") != null && !jsonObj.get("loanCoin").isJsonNull())
                && !jsonObj.get("loanCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `loanCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("loanCoin").toString()));
        }
        if ((jsonObj.get("collateralCoin") != null && !jsonObj.get("collateralCoin").isJsonNull())
                && !jsonObj.get("collateralCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collateralCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collateralCoin").toString()));
        }
        if ((jsonObj.get("direction") != null && !jsonObj.get("direction").isJsonNull())
                && !jsonObj.get("direction").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `direction` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("direction").toString()));
        }
        if ((jsonObj.get("adjustmentAmount") != null
                        && !jsonObj.get("adjustmentAmount").isJsonNull())
                && !jsonObj.get("adjustmentAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `adjustmentAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("adjustmentAmount").toString()));
        }
        if ((jsonObj.get("currentLTV") != null && !jsonObj.get("currentLTV").isJsonNull())
                && !jsonObj.get("currentLTV").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `currentLTV` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("currentLTV").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!FlexibleLoanAdjustLtvResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'FlexibleLoanAdjustLtvResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<FlexibleLoanAdjustLtvResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(FlexibleLoanAdjustLtvResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<FlexibleLoanAdjustLtvResponse>() {
                        @Override
                        public void write(JsonWriter out, FlexibleLoanAdjustLtvResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public FlexibleLoanAdjustLtvResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of FlexibleLoanAdjustLtvResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of FlexibleLoanAdjustLtvResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     FlexibleLoanAdjustLtvResponse
     */
    public static FlexibleLoanAdjustLtvResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, FlexibleLoanAdjustLtvResponse.class);
    }

    /**
     * Convert an instance of FlexibleLoanAdjustLtvResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
