/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.model;

import com.binance.connector.client.crypto_loan.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetCollateralAssetsDataResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetCollateralAssetsDataResponseRowsInner {
    public static final String SERIALIZED_NAME_COLLATERAL_COIN = "collateralCoin";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_COIN)
    @jakarta.annotation.Nullable
    private String collateralCoin;

    public static final String SERIALIZED_NAME_INITIAL_L_T_V = "initialLTV";

    @SerializedName(SERIALIZED_NAME_INITIAL_L_T_V)
    @jakarta.annotation.Nullable
    private String initialLTV;

    public static final String SERIALIZED_NAME_MARGIN_CALL_L_T_V = "marginCallLTV";

    @SerializedName(SERIALIZED_NAME_MARGIN_CALL_L_T_V)
    @jakarta.annotation.Nullable
    private String marginCallLTV;

    public static final String SERIALIZED_NAME_LIQUIDATION_L_T_V = "liquidationLTV";

    @SerializedName(SERIALIZED_NAME_LIQUIDATION_L_T_V)
    @jakarta.annotation.Nullable
    private String liquidationLTV;

    public static final String SERIALIZED_NAME_MAX_LIMIT = "maxLimit";

    @SerializedName(SERIALIZED_NAME_MAX_LIMIT)
    @jakarta.annotation.Nullable
    private String maxLimit;

    public static final String SERIALIZED_NAME_VIP_LEVEL = "vipLevel";

    @SerializedName(SERIALIZED_NAME_VIP_LEVEL)
    @jakarta.annotation.Nullable
    private Long vipLevel;

    public GetCollateralAssetsDataResponseRowsInner() {}

    public GetCollateralAssetsDataResponseRowsInner collateralCoin(
            @jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
        return this;
    }

    /**
     * Get collateralCoin
     *
     * @return collateralCoin
     */
    @jakarta.annotation.Nullable
    public String getCollateralCoin() {
        return collateralCoin;
    }

    public void setCollateralCoin(@jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
    }

    public GetCollateralAssetsDataResponseRowsInner initialLTV(
            @jakarta.annotation.Nullable String initialLTV) {
        this.initialLTV = initialLTV;
        return this;
    }

    /**
     * Get initialLTV
     *
     * @return initialLTV
     */
    @jakarta.annotation.Nullable
    public String getInitialLTV() {
        return initialLTV;
    }

    public void setInitialLTV(@jakarta.annotation.Nullable String initialLTV) {
        this.initialLTV = initialLTV;
    }

    public GetCollateralAssetsDataResponseRowsInner marginCallLTV(
            @jakarta.annotation.Nullable String marginCallLTV) {
        this.marginCallLTV = marginCallLTV;
        return this;
    }

    /**
     * Get marginCallLTV
     *
     * @return marginCallLTV
     */
    @jakarta.annotation.Nullable
    public String getMarginCallLTV() {
        return marginCallLTV;
    }

    public void setMarginCallLTV(@jakarta.annotation.Nullable String marginCallLTV) {
        this.marginCallLTV = marginCallLTV;
    }

    public GetCollateralAssetsDataResponseRowsInner liquidationLTV(
            @jakarta.annotation.Nullable String liquidationLTV) {
        this.liquidationLTV = liquidationLTV;
        return this;
    }

    /**
     * Get liquidationLTV
     *
     * @return liquidationLTV
     */
    @jakarta.annotation.Nullable
    public String getLiquidationLTV() {
        return liquidationLTV;
    }

    public void setLiquidationLTV(@jakarta.annotation.Nullable String liquidationLTV) {
        this.liquidationLTV = liquidationLTV;
    }

    public GetCollateralAssetsDataResponseRowsInner maxLimit(
            @jakarta.annotation.Nullable String maxLimit) {
        this.maxLimit = maxLimit;
        return this;
    }

    /**
     * Get maxLimit
     *
     * @return maxLimit
     */
    @jakarta.annotation.Nullable
    public String getMaxLimit() {
        return maxLimit;
    }

    public void setMaxLimit(@jakarta.annotation.Nullable String maxLimit) {
        this.maxLimit = maxLimit;
    }

    public GetCollateralAssetsDataResponseRowsInner vipLevel(
            @jakarta.annotation.Nullable Long vipLevel) {
        this.vipLevel = vipLevel;
        return this;
    }

    /**
     * Get vipLevel
     *
     * @return vipLevel
     */
    @jakarta.annotation.Nullable
    public Long getVipLevel() {
        return vipLevel;
    }

    public void setVipLevel(@jakarta.annotation.Nullable Long vipLevel) {
        this.vipLevel = vipLevel;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCollateralAssetsDataResponseRowsInner getCollateralAssetsDataResponseRowsInner =
                (GetCollateralAssetsDataResponseRowsInner) o;
        return Objects.equals(
                        this.collateralCoin,
                        getCollateralAssetsDataResponseRowsInner.collateralCoin)
                && Objects.equals(
                        this.initialLTV, getCollateralAssetsDataResponseRowsInner.initialLTV)
                && Objects.equals(
                        this.marginCallLTV, getCollateralAssetsDataResponseRowsInner.marginCallLTV)
                && Objects.equals(
                        this.liquidationLTV,
                        getCollateralAssetsDataResponseRowsInner.liquidationLTV)
                && Objects.equals(this.maxLimit, getCollateralAssetsDataResponseRowsInner.maxLimit)
                && Objects.equals(this.vipLevel, getCollateralAssetsDataResponseRowsInner.vipLevel);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                collateralCoin, initialLTV, marginCallLTV, liquidationLTV, maxLimit, vipLevel);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetCollateralAssetsDataResponseRowsInner {\n");
        sb.append("		collateralCoin: ").append(toIndentedString(collateralCoin)).append("\n");
        sb.append("		initialLTV: ").append(toIndentedString(initialLTV)).append("\n");
        sb.append("		marginCallLTV: ").append(toIndentedString(marginCallLTV)).append("\n");
        sb.append("		liquidationLTV: ").append(toIndentedString(liquidationLTV)).append("\n");
        sb.append("		maxLimit: ").append(toIndentedString(maxLimit)).append("\n");
        sb.append("		vipLevel: ").append(toIndentedString(vipLevel)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object collateralCoinValue = getCollateralCoin();
        String collateralCoinValueAsString = "";
        collateralCoinValueAsString = collateralCoinValue.toString();
        sb.append("collateralCoin=").append(urlEncode(collateralCoinValueAsString)).append("");
        Object initialLTVValue = getInitialLTV();
        String initialLTVValueAsString = "";
        initialLTVValueAsString = initialLTVValue.toString();
        sb.append("initialLTV=").append(urlEncode(initialLTVValueAsString)).append("");
        Object marginCallLTVValue = getMarginCallLTV();
        String marginCallLTVValueAsString = "";
        marginCallLTVValueAsString = marginCallLTVValue.toString();
        sb.append("marginCallLTV=").append(urlEncode(marginCallLTVValueAsString)).append("");
        Object liquidationLTVValue = getLiquidationLTV();
        String liquidationLTVValueAsString = "";
        liquidationLTVValueAsString = liquidationLTVValue.toString();
        sb.append("liquidationLTV=").append(urlEncode(liquidationLTVValueAsString)).append("");
        Object maxLimitValue = getMaxLimit();
        String maxLimitValueAsString = "";
        maxLimitValueAsString = maxLimitValue.toString();
        sb.append("maxLimit=").append(urlEncode(maxLimitValueAsString)).append("");
        Object vipLevelValue = getVipLevel();
        String vipLevelValueAsString = "";
        vipLevelValueAsString = vipLevelValue.toString();
        sb.append("vipLevel=").append(urlEncode(vipLevelValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("collateralCoin");
        openapiFields.add("initialLTV");
        openapiFields.add("marginCallLTV");
        openapiFields.add("liquidationLTV");
        openapiFields.add("maxLimit");
        openapiFields.add("vipLevel");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetCollateralAssetsDataResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetCollateralAssetsDataResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " GetCollateralAssetsDataResponseRowsInner is not found in"
                                    + " the empty JSON string",
                                GetCollateralAssetsDataResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetCollateralAssetsDataResponseRowsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetCollateralAssetsDataResponseRowsInner` properties."
                                        + " JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("collateralCoin") != null && !jsonObj.get("collateralCoin").isJsonNull())
                && !jsonObj.get("collateralCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collateralCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collateralCoin").toString()));
        }
        if ((jsonObj.get("initialLTV") != null && !jsonObj.get("initialLTV").isJsonNull())
                && !jsonObj.get("initialLTV").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `initialLTV` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("initialLTV").toString()));
        }
        if ((jsonObj.get("marginCallLTV") != null && !jsonObj.get("marginCallLTV").isJsonNull())
                && !jsonObj.get("marginCallLTV").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `marginCallLTV` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("marginCallLTV").toString()));
        }
        if ((jsonObj.get("liquidationLTV") != null && !jsonObj.get("liquidationLTV").isJsonNull())
                && !jsonObj.get("liquidationLTV").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `liquidationLTV` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("liquidationLTV").toString()));
        }
        if ((jsonObj.get("maxLimit") != null && !jsonObj.get("maxLimit").isJsonNull())
                && !jsonObj.get("maxLimit").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `maxLimit` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("maxLimit").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetCollateralAssetsDataResponseRowsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetCollateralAssetsDataResponseRowsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetCollateralAssetsDataResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetCollateralAssetsDataResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetCollateralAssetsDataResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetCollateralAssetsDataResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetCollateralAssetsDataResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetCollateralAssetsDataResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetCollateralAssetsDataResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetCollateralAssetsDataResponseRowsInner
     */
    public static GetCollateralAssetsDataResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetCollateralAssetsDataResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetCollateralAssetsDataResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
