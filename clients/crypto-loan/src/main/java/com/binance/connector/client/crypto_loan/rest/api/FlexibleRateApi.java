/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.api;

import com.binance.connector.client.common.ApiClient;
import com.binance.connector.client.common.ApiException;
import com.binance.connector.client.common.ApiResponse;
import com.binance.connector.client.common.DecimalFormatter;
import com.binance.connector.client.common.Pair;
import com.binance.connector.client.common.SystemUtil;
import com.binance.connector.client.common.configuration.ClientConfiguration;
import com.binance.connector.client.common.exception.ConstraintViolationException;
import com.binance.connector.client.crypto_loan.rest.model.CheckCollateralRepayRateResponse;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanAdjustLtvRequest;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanAdjustLtvResponse;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanBorrowRequest;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanBorrowResponse;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanCollateralRepaymentRequest;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanCollateralRepaymentResponse;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanRepayRequest;
import com.binance.connector.client.crypto_loan.rest.model.FlexibleLoanRepayResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanAssetsDataResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanBorrowHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanCollateralAssetsDataResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanLiquidationHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanLtvAdjustmentHistoryResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanOngoingOrdersResponse;
import com.binance.connector.client.crypto_loan.rest.model.GetFlexibleLoanRepaymentHistoryResponse;
import com.google.gson.reflect.TypeToken;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.Valid;
import jakarta.validation.Validation;
import jakarta.validation.Validator;
import jakarta.validation.constraints.*;
import jakarta.validation.executable.ExecutableValidator;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.hibernate.validator.messageinterpolation.ParameterMessageInterpolator;

public class FlexibleRateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    private static final String USER_AGENT =
            String.format(
                    "binance-crypto-loan/1.0.0 (Java/%s; %s; %s)",
                    SystemUtil.getJavaVersion(), SystemUtil.getOs(), SystemUtil.getArch());
    private static final boolean HAS_TIME_UNIT = false;

    public FlexibleRateApi(ClientConfiguration clientConfiguration) {
        this(new ApiClient(clientConfiguration));
    }

    public FlexibleRateApi(ApiClient apiClient) {
        apiClient.setUserAgent(USER_AGENT);
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkCollateralRepayRate
     *
     * @param loanCoin (required)
     * @param collateralCoin (required)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Check Collateral Repay Rate </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Check-Collateral-Repay-Rate">Check
     *     Collateral Repay Rate (USER_DATA) Documentation</a>
     */
    private okhttp3.Call checkCollateralRepayRateCall(
            String loanCoin, String collateralCoin, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/repay/rate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkCollateralRepayRateValidateBeforeCall(
            String loanCoin, String collateralCoin, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {loanCoin, collateralCoin, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "checkCollateralRepayRate",
                                    String.class,
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return checkCollateralRepayRateCall(loanCoin, collateralCoin, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Check Collateral Repay Rate (USER_DATA) Weight: 6000
     *
     * @param loanCoin (required)
     * @param collateralCoin (required)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;CheckCollateralRepayRateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Check Collateral Repay Rate </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Check-Collateral-Repay-Rate">Check
     *     Collateral Repay Rate (USER_DATA) Documentation</a>
     */
    public ApiResponse<CheckCollateralRepayRateResponse> checkCollateralRepayRate(
            @NotNull String loanCoin, @NotNull String collateralCoin, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                checkCollateralRepayRateValidateBeforeCall(loanCoin, collateralCoin, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<CheckCollateralRepayRateResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for flexibleLoanAdjustLtv
     *
     * @param flexibleLoanAdjustLtvRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Flexible Loan Adjust LTV </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Adjust-LTV">Flexible
     *     Loan Adjust LTV(TRADE) Documentation</a>
     */
    private okhttp3.Call flexibleLoanAdjustLtvCall(
            FlexibleLoanAdjustLtvRequest flexibleLoanAdjustLtvRequest) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/adjust/ltv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flexibleLoanAdjustLtvRequest.getLoanCoin() != null) {
            localVarFormParams.put("loanCoin", flexibleLoanAdjustLtvRequest.getLoanCoin());
        }

        if (flexibleLoanAdjustLtvRequest.getCollateralCoin() != null) {
            localVarFormParams.put(
                    "collateralCoin", flexibleLoanAdjustLtvRequest.getCollateralCoin());
        }

        if (flexibleLoanAdjustLtvRequest.getAdjustmentAmount() != null) {
            localVarFormParams.put(
                    "adjustmentAmount",
                    DecimalFormatter.getFormatter()
                            .format(flexibleLoanAdjustLtvRequest.getAdjustmentAmount()));
        }

        if (flexibleLoanAdjustLtvRequest.getDirection() != null) {
            localVarFormParams.put("direction", flexibleLoanAdjustLtvRequest.getDirection());
        }

        if (flexibleLoanAdjustLtvRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", flexibleLoanAdjustLtvRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flexibleLoanAdjustLtvValidateBeforeCall(
            FlexibleLoanAdjustLtvRequest flexibleLoanAdjustLtvRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {flexibleLoanAdjustLtvRequest};
            Method method =
                    this.getClass()
                            .getMethod("flexibleLoanAdjustLtv", FlexibleLoanAdjustLtvRequest.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return flexibleLoanAdjustLtvCall(flexibleLoanAdjustLtvRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Flexible Loan Adjust LTV(TRADE) Flexible Loan Adjust LTV * API Key needs Spot &amp; Margin
     * Trading permission for this endpoint Weight: 6000
     *
     * @param flexibleLoanAdjustLtvRequest (required)
     * @return ApiResponse&lt;FlexibleLoanAdjustLtvResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Flexible Loan Adjust LTV </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Adjust-LTV">Flexible
     *     Loan Adjust LTV(TRADE) Documentation</a>
     */
    public ApiResponse<FlexibleLoanAdjustLtvResponse> flexibleLoanAdjustLtv(
            @Valid @NotNull FlexibleLoanAdjustLtvRequest flexibleLoanAdjustLtvRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                flexibleLoanAdjustLtvValidateBeforeCall(flexibleLoanAdjustLtvRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FlexibleLoanAdjustLtvResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for flexibleLoanBorrow
     *
     * @param flexibleLoanBorrowRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Flexible Loan Borrow </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Borrow">Flexible
     *     Loan Borrow(TRADE) Documentation</a>
     */
    private okhttp3.Call flexibleLoanBorrowCall(FlexibleLoanBorrowRequest flexibleLoanBorrowRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/borrow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flexibleLoanBorrowRequest.getLoanCoin() != null) {
            localVarFormParams.put("loanCoin", flexibleLoanBorrowRequest.getLoanCoin());
        }

        if (flexibleLoanBorrowRequest.getCollateralCoin() != null) {
            localVarFormParams.put("collateralCoin", flexibleLoanBorrowRequest.getCollateralCoin());
        }

        if (flexibleLoanBorrowRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", flexibleLoanBorrowRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flexibleLoanBorrowValidateBeforeCall(
            FlexibleLoanBorrowRequest flexibleLoanBorrowRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {flexibleLoanBorrowRequest};
            Method method =
                    this.getClass()
                            .getMethod("flexibleLoanBorrow", FlexibleLoanBorrowRequest.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return flexibleLoanBorrowCall(flexibleLoanBorrowRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Flexible Loan Borrow(TRADE) Borrow Flexible Loan * Only available for master account * You
     * can customize LTV by entering loanAmount and collateralAmount. Weight: 6000
     *
     * @param flexibleLoanBorrowRequest (required)
     * @return ApiResponse&lt;FlexibleLoanBorrowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Flexible Loan Borrow </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Borrow">Flexible
     *     Loan Borrow(TRADE) Documentation</a>
     */
    public ApiResponse<FlexibleLoanBorrowResponse> flexibleLoanBorrow(
            @Valid @NotNull FlexibleLoanBorrowRequest flexibleLoanBorrowRequest)
            throws ApiException {
        okhttp3.Call localVarCall = flexibleLoanBorrowValidateBeforeCall(flexibleLoanBorrowRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FlexibleLoanBorrowResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for flexibleLoanCollateralRepayment
     *
     * @param flexibleLoanCollateralRepaymentRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Flexible Loan Collateral Repayment </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Collateral-Repay">Flexible
     *     Loan Collateral Repayment (TRADE) Documentation</a>
     */
    private okhttp3.Call flexibleLoanCollateralRepaymentCall(
            FlexibleLoanCollateralRepaymentRequest flexibleLoanCollateralRepaymentRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/repay/collateral";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flexibleLoanCollateralRepaymentRequest.getLoanCoin() != null) {
            localVarFormParams.put(
                    "loanCoin", flexibleLoanCollateralRepaymentRequest.getLoanCoin());
        }

        if (flexibleLoanCollateralRepaymentRequest.getCollateralCoin() != null) {
            localVarFormParams.put(
                    "collateralCoin", flexibleLoanCollateralRepaymentRequest.getCollateralCoin());
        }

        if (flexibleLoanCollateralRepaymentRequest.getRepayAmount() != null) {
            localVarFormParams.put(
                    "repayAmount",
                    DecimalFormatter.getFormatter()
                            .format(flexibleLoanCollateralRepaymentRequest.getRepayAmount()));
        }

        if (flexibleLoanCollateralRepaymentRequest.getFullRepayment() != null) {
            localVarFormParams.put(
                    "fullRepayment", flexibleLoanCollateralRepaymentRequest.getFullRepayment());
        }

        if (flexibleLoanCollateralRepaymentRequest.getRecvWindow() != null) {
            localVarFormParams.put(
                    "recvWindow", flexibleLoanCollateralRepaymentRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flexibleLoanCollateralRepaymentValidateBeforeCall(
            FlexibleLoanCollateralRepaymentRequest flexibleLoanCollateralRepaymentRequest)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {flexibleLoanCollateralRepaymentRequest};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "flexibleLoanCollateralRepayment",
                                    FlexibleLoanCollateralRepaymentRequest.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return flexibleLoanCollateralRepaymentCall(flexibleLoanCollateralRepaymentRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Flexible Loan Collateral Repayment (TRADE) Weight: 6000
     *
     * @param flexibleLoanCollateralRepaymentRequest (required)
     * @return ApiResponse&lt;FlexibleLoanCollateralRepaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Flexible Loan Collateral Repayment </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Collateral-Repay">Flexible
     *     Loan Collateral Repayment (TRADE) Documentation</a>
     */
    public ApiResponse<FlexibleLoanCollateralRepaymentResponse> flexibleLoanCollateralRepayment(
            @Valid @NotNull
                    FlexibleLoanCollateralRepaymentRequest flexibleLoanCollateralRepaymentRequest)
            throws ApiException {
        okhttp3.Call localVarCall =
                flexibleLoanCollateralRepaymentValidateBeforeCall(
                        flexibleLoanCollateralRepaymentRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FlexibleLoanCollateralRepaymentResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for flexibleLoanRepay
     *
     * @param flexibleLoanRepayRequest (required)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Flexible Loan Repay </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Repay">Flexible
     *     Loan Repay(TRADE) Documentation</a>
     */
    private okhttp3.Call flexibleLoanRepayCall(FlexibleLoanRepayRequest flexibleLoanRepayRequest)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/repay";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flexibleLoanRepayRequest.getLoanCoin() != null) {
            localVarFormParams.put("loanCoin", flexibleLoanRepayRequest.getLoanCoin());
        }

        if (flexibleLoanRepayRequest.getCollateralCoin() != null) {
            localVarFormParams.put("collateralCoin", flexibleLoanRepayRequest.getCollateralCoin());
        }

        if (flexibleLoanRepayRequest.getRepayAmount() != null) {
            localVarFormParams.put(
                    "repayAmount",
                    DecimalFormatter.getFormatter()
                            .format(flexibleLoanRepayRequest.getRepayAmount()));
        }

        if (flexibleLoanRepayRequest.getCollateralReturn() != null) {
            localVarFormParams.put(
                    "collateralReturn", flexibleLoanRepayRequest.getCollateralReturn());
        }

        if (flexibleLoanRepayRequest.getFullRepayment() != null) {
            localVarFormParams.put("fullRepayment", flexibleLoanRepayRequest.getFullRepayment());
        }

        if (flexibleLoanRepayRequest.getRecvWindow() != null) {
            localVarFormParams.put("recvWindow", flexibleLoanRepayRequest.getRecvWindow());
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "POST",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flexibleLoanRepayValidateBeforeCall(
            FlexibleLoanRepayRequest flexibleLoanRepayRequest) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {flexibleLoanRepayRequest};
            Method method =
                    this.getClass().getMethod("flexibleLoanRepay", FlexibleLoanRepayRequest.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return flexibleLoanRepayCall(flexibleLoanRepayRequest);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Flexible Loan Repay(TRADE) Flexible Loan Repay * repayAmount is mandatory even fullRepayment
     * &#x3D; FALSE Weight: 6000
     *
     * @param flexibleLoanRepayRequest (required)
     * @return ApiResponse&lt;FlexibleLoanRepayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Flexible Loan Repay </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/trade/Flexible-Loan-Repay">Flexible
     *     Loan Repay(TRADE) Documentation</a>
     */
    public ApiResponse<FlexibleLoanRepayResponse> flexibleLoanRepay(
            @Valid @NotNull FlexibleLoanRepayRequest flexibleLoanRepayRequest) throws ApiException {
        okhttp3.Call localVarCall = flexibleLoanRepayValidateBeforeCall(flexibleLoanRepayRequest);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<FlexibleLoanRepayResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getFlexibleLoanAssetsData
     *
     * @param loanCoin (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Assets Data </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/market-data/Get-Flexible-Loan-Assets-Data">Get
     *     Flexible Loan Assets Data(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getFlexibleLoanAssetsDataCall(String loanCoin, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/loanable/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlexibleLoanAssetsDataValidateBeforeCall(
            String loanCoin, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {loanCoin, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod("getFlexibleLoanAssetsData", String.class, Long.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFlexibleLoanAssetsDataCall(loanCoin, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Flexible Loan Assets Data(USER_DATA) Get interest rate and borrow limit of flexible
     * loanable assets. The borrow limit is shown in USD value. Weight: 400
     *
     * @param loanCoin (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFlexibleLoanAssetsDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Assets Data </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/market-data/Get-Flexible-Loan-Assets-Data">Get
     *     Flexible Loan Assets Data(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetFlexibleLoanAssetsDataResponse> getFlexibleLoanAssetsData(
            String loanCoin, Long recvWindow) throws ApiException {
        okhttp3.Call localVarCall =
                getFlexibleLoanAssetsDataValidateBeforeCall(loanCoin, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFlexibleLoanAssetsDataResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getFlexibleLoanBorrowHistory
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Borrow History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Borrow-History">Get
     *     Flexible Loan Borrow History(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getFlexibleLoanBorrowHistoryCall(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/borrow/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlexibleLoanBorrowHistoryValidateBeforeCall(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getFlexibleLoanBorrowHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFlexibleLoanBorrowHistoryCall(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Flexible Loan Borrow History(USER_DATA) Get Flexible Loan Borrow History * If startTime
     * and endTime are not sent, the recent 90-day data will be returned. * The max interval between
     * startTime and endTime is 180 days. Weight: 400
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFlexibleLoanBorrowHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Borrow History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Borrow-History">Get
     *     Flexible Loan Borrow History(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetFlexibleLoanBorrowHistoryResponse> getFlexibleLoanBorrowHistory(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getFlexibleLoanBorrowHistoryValidateBeforeCall(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFlexibleLoanBorrowHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getFlexibleLoanCollateralAssetsData
     *
     * @param collateralCoin (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Collateral Assets Data </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/market-data/Get-Flexible-Loan-Collateral-Assets-Data">Get
     *     Flexible Loan Collateral Assets Data(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getFlexibleLoanCollateralAssetsDataCall(
            String collateralCoin, Long recvWindow) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/collateral/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlexibleLoanCollateralAssetsDataValidateBeforeCall(
            String collateralCoin, Long recvWindow) throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {collateralCoin, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getFlexibleLoanCollateralAssetsData",
                                    String.class,
                                    Long.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFlexibleLoanCollateralAssetsDataCall(collateralCoin, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Flexible Loan Collateral Assets Data(USER_DATA) Get LTV information and collateral limit
     * of flexible loan&#39;s collateral assets. The collateral limit is shown in USD value. Weight:
     * 400
     *
     * @param collateralCoin (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFlexibleLoanCollateralAssetsDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Collateral Assets Data </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/market-data/Get-Flexible-Loan-Collateral-Assets-Data">Get
     *     Flexible Loan Collateral Assets Data(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetFlexibleLoanCollateralAssetsDataResponse>
            getFlexibleLoanCollateralAssetsData(String collateralCoin, Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getFlexibleLoanCollateralAssetsDataValidateBeforeCall(collateralCoin, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFlexibleLoanCollateralAssetsDataResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getFlexibleLoanLiquidationHistory
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Liquidation History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Liquidation-History">Get
     *     Flexible Loan Liquidation History (USER_DATA) Documentation</a>
     */
    private okhttp3.Call getFlexibleLoanLiquidationHistoryCall(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/liquidation/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlexibleLoanLiquidationHistoryValidateBeforeCall(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getFlexibleLoanLiquidationHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFlexibleLoanLiquidationHistoryCall(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Flexible Loan Liquidation History (USER_DATA) Weight: 400
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFlexibleLoanLiquidationHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Liquidation History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Liquidation-History">Get
     *     Flexible Loan Liquidation History (USER_DATA) Documentation</a>
     */
    public ApiResponse<GetFlexibleLoanLiquidationHistoryResponse> getFlexibleLoanLiquidationHistory(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getFlexibleLoanLiquidationHistoryValidateBeforeCall(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFlexibleLoanLiquidationHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getFlexibleLoanLtvAdjustmentHistory
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan LTV Adjustment History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-LTV-Adjustment-History">Get
     *     Flexible Loan LTV Adjustment History(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getFlexibleLoanLtvAdjustmentHistoryCall(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/ltv/adjustment/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlexibleLoanLtvAdjustmentHistoryValidateBeforeCall(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getFlexibleLoanLtvAdjustmentHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFlexibleLoanLtvAdjustmentHistoryCall(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Flexible Loan LTV Adjustment History(USER_DATA) Get Flexible Loan LTV Adjustment History
     * * If startTime and endTime are not sent, the recent 90-day data will be returned. * The max
     * interval between startTime and endTime is 180 days. Weight: 400
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFlexibleLoanLtvAdjustmentHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan LTV Adjustment History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-LTV-Adjustment-History">Get
     *     Flexible Loan LTV Adjustment History(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetFlexibleLoanLtvAdjustmentHistoryResponse>
            getFlexibleLoanLtvAdjustmentHistory(
                    String loanCoin,
                    String collateralCoin,
                    Long startTime,
                    Long endTime,
                    Long current,
                    Long limit,
                    Long recvWindow)
                    throws ApiException {
        okhttp3.Call localVarCall =
                getFlexibleLoanLtvAdjustmentHistoryValidateBeforeCall(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFlexibleLoanLtvAdjustmentHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getFlexibleLoanOngoingOrders
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Ongoing Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Ongoing-Orders">Get
     *     Flexible Loan Ongoing Orders(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getFlexibleLoanOngoingOrdersCall(
            String loanCoin, String collateralCoin, Long current, Long limit, Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/ongoing/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlexibleLoanOngoingOrdersValidateBeforeCall(
            String loanCoin, String collateralCoin, Long current, Long limit, Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {loanCoin, collateralCoin, current, limit, recvWindow};
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getFlexibleLoanOngoingOrders",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFlexibleLoanOngoingOrdersCall(
                        loanCoin, collateralCoin, current, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Flexible Loan Ongoing Orders(USER_DATA) Get Flexible Loan Ongoing Orders Weight: 300
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFlexibleLoanOngoingOrdersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Ongoing Orders </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Ongoing-Orders">Get
     *     Flexible Loan Ongoing Orders(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetFlexibleLoanOngoingOrdersResponse> getFlexibleLoanOngoingOrders(
            String loanCoin, String collateralCoin, Long current, Long limit, Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getFlexibleLoanOngoingOrdersValidateBeforeCall(
                        loanCoin, collateralCoin, current, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFlexibleLoanOngoingOrdersResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Build call for getFlexibleLoanRepaymentHistory
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Repayment History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Repayment-History">Get
     *     Flexible Loan Repayment History(USER_DATA) Documentation</a>
     */
    private okhttp3.Call getFlexibleLoanRepaymentHistoryCall(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {};

        // Determine Base Path to Use
        if (localCustomBaseUrl != null) {
            basePath = localCustomBaseUrl;
        } else if (localBasePaths.length > 0) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sapi/v2/loan/flexible/repay/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (loanCoin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("loanCoin", loanCoin));
        }

        if (collateralCoin != null) {
            localVarQueryParams.addAll(
                    localVarApiClient.parameterToPair("collateralCoin", collateralCoin));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (current != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("current", current));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (recvWindow != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recvWindow", recvWindow));
        }

        final String[] localVarAccepts = {"application/json"};
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {"application/x-www-form-urlencoded"};
        final String localVarContentType =
                localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }
        List<String> localVarAuthNames = new ArrayList<>();
        localVarAuthNames.addAll(
                Arrays.asList(
                        new String[] {
                            "binanceSignature",
                        }));
        if (HAS_TIME_UNIT) {
            localVarAuthNames.add("timeUnit");
        }
        return localVarApiClient.buildCall(
                basePath,
                localVarPath,
                "GET",
                localVarQueryParams,
                localVarCollectionQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarCookieParams,
                localVarFormParams,
                localVarAuthNames.toArray(new String[0]));
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlexibleLoanRepaymentHistoryValidateBeforeCall(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        try {
            Validator validator =
                    Validation.byDefaultProvider()
                            .configure()
                            .messageInterpolator(new ParameterMessageInterpolator())
                            .buildValidatorFactory()
                            .getValidator();
            ExecutableValidator executableValidator = validator.forExecutables();

            Object[] parameterValues = {
                loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow
            };
            Method method =
                    this.getClass()
                            .getMethod(
                                    "getFlexibleLoanRepaymentHistory",
                                    String.class,
                                    String.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class,
                                    Long.class);
            Set<ConstraintViolation<FlexibleRateApi>> violations =
                    executableValidator.validateParameters(this, method, parameterValues);

            if (violations.size() == 0) {
                return getFlexibleLoanRepaymentHistoryCall(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);
            } else {
                throw new ConstraintViolationException((Set) violations);
            }
        } catch (NoSuchMethodException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        } catch (SecurityException e) {
            e.printStackTrace();
            throw new ApiException(e.getMessage());
        }
    }

    /**
     * Get Flexible Loan Repayment History(USER_DATA) Get Flexible Loan Repayment History * If
     * startTime and endTime are not sent, the recent 90-day data will be returned. * The max
     * interval between startTime and endTime is 180 days. Weight: 400
     *
     * @param loanCoin (optional)
     * @param collateralCoin (optional)
     * @param startTime (optional)
     * @param endTime (optional)
     * @param current Current querying page. Start from 1; default: 1; max: 1000 (optional)
     * @param limit Default: 10; max: 100 (optional)
     * @param recvWindow (optional)
     * @return ApiResponse&lt;GetFlexibleLoanRepaymentHistoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
     *     response body
     * @http.response.details
     *     <table border="1">
     * <caption>Response Details</caption>
     * <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
     * <tr><td> 200 </td><td> Get Flexible Loan Repayment History </td><td>  -  </td></tr>
     * </table>
     *
     * @see <a
     *     href="https://developers.binance.com/docs/crypto_loan/flexible-rate/user-information/Get-Flexible-Loan-Repayment-History">Get
     *     Flexible Loan Repayment History(USER_DATA) Documentation</a>
     */
    public ApiResponse<GetFlexibleLoanRepaymentHistoryResponse> getFlexibleLoanRepaymentHistory(
            String loanCoin,
            String collateralCoin,
            Long startTime,
            Long endTime,
            Long current,
            Long limit,
            Long recvWindow)
            throws ApiException {
        okhttp3.Call localVarCall =
                getFlexibleLoanRepaymentHistoryValidateBeforeCall(
                        loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow);
        java.lang.reflect.Type localVarReturnType =
                new TypeToken<GetFlexibleLoanRepaymentHistoryResponse>() {}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }
}
