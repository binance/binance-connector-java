/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.model;

import com.binance.connector.client.crypto_loan.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetLoanBorrowHistoryResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetLoanBorrowHistoryResponseRowsInner {
    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_LOAN_COIN = "loanCoin";

    @SerializedName(SERIALIZED_NAME_LOAN_COIN)
    @jakarta.annotation.Nullable
    private String loanCoin;

    public static final String SERIALIZED_NAME_INITIAL_LOAN_AMOUNT = "initialLoanAmount";

    @SerializedName(SERIALIZED_NAME_INITIAL_LOAN_AMOUNT)
    @jakarta.annotation.Nullable
    private String initialLoanAmount;

    public static final String SERIALIZED_NAME_HOURLY_INTEREST_RATE = "hourlyInterestRate";

    @SerializedName(SERIALIZED_NAME_HOURLY_INTEREST_RATE)
    @jakarta.annotation.Nullable
    private String hourlyInterestRate;

    public static final String SERIALIZED_NAME_LOAN_TERM = "loanTerm";

    @SerializedName(SERIALIZED_NAME_LOAN_TERM)
    @jakarta.annotation.Nullable
    private String loanTerm;

    public static final String SERIALIZED_NAME_COLLATERAL_COIN = "collateralCoin";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_COIN)
    @jakarta.annotation.Nullable
    private String collateralCoin;

    public static final String SERIALIZED_NAME_INITIAL_COLLATERAL_AMOUNT =
            "initialCollateralAmount";

    @SerializedName(SERIALIZED_NAME_INITIAL_COLLATERAL_AMOUNT)
    @jakarta.annotation.Nullable
    private String initialCollateralAmount;

    public static final String SERIALIZED_NAME_BORROW_TIME = "borrowTime";

    @SerializedName(SERIALIZED_NAME_BORROW_TIME)
    @jakarta.annotation.Nullable
    private Long borrowTime;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public GetLoanBorrowHistoryResponseRowsInner() {}

    public GetLoanBorrowHistoryResponseRowsInner orderId(
            @jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public GetLoanBorrowHistoryResponseRowsInner loanCoin(
            @jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
        return this;
    }

    /**
     * Get loanCoin
     *
     * @return loanCoin
     */
    @jakarta.annotation.Nullable
    public String getLoanCoin() {
        return loanCoin;
    }

    public void setLoanCoin(@jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
    }

    public GetLoanBorrowHistoryResponseRowsInner initialLoanAmount(
            @jakarta.annotation.Nullable String initialLoanAmount) {
        this.initialLoanAmount = initialLoanAmount;
        return this;
    }

    /**
     * Get initialLoanAmount
     *
     * @return initialLoanAmount
     */
    @jakarta.annotation.Nullable
    public String getInitialLoanAmount() {
        return initialLoanAmount;
    }

    public void setInitialLoanAmount(@jakarta.annotation.Nullable String initialLoanAmount) {
        this.initialLoanAmount = initialLoanAmount;
    }

    public GetLoanBorrowHistoryResponseRowsInner hourlyInterestRate(
            @jakarta.annotation.Nullable String hourlyInterestRate) {
        this.hourlyInterestRate = hourlyInterestRate;
        return this;
    }

    /**
     * Get hourlyInterestRate
     *
     * @return hourlyInterestRate
     */
    @jakarta.annotation.Nullable
    public String getHourlyInterestRate() {
        return hourlyInterestRate;
    }

    public void setHourlyInterestRate(@jakarta.annotation.Nullable String hourlyInterestRate) {
        this.hourlyInterestRate = hourlyInterestRate;
    }

    public GetLoanBorrowHistoryResponseRowsInner loanTerm(
            @jakarta.annotation.Nullable String loanTerm) {
        this.loanTerm = loanTerm;
        return this;
    }

    /**
     * Get loanTerm
     *
     * @return loanTerm
     */
    @jakarta.annotation.Nullable
    public String getLoanTerm() {
        return loanTerm;
    }

    public void setLoanTerm(@jakarta.annotation.Nullable String loanTerm) {
        this.loanTerm = loanTerm;
    }

    public GetLoanBorrowHistoryResponseRowsInner collateralCoin(
            @jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
        return this;
    }

    /**
     * Get collateralCoin
     *
     * @return collateralCoin
     */
    @jakarta.annotation.Nullable
    public String getCollateralCoin() {
        return collateralCoin;
    }

    public void setCollateralCoin(@jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
    }

    public GetLoanBorrowHistoryResponseRowsInner initialCollateralAmount(
            @jakarta.annotation.Nullable String initialCollateralAmount) {
        this.initialCollateralAmount = initialCollateralAmount;
        return this;
    }

    /**
     * Get initialCollateralAmount
     *
     * @return initialCollateralAmount
     */
    @jakarta.annotation.Nullable
    public String getInitialCollateralAmount() {
        return initialCollateralAmount;
    }

    public void setInitialCollateralAmount(
            @jakarta.annotation.Nullable String initialCollateralAmount) {
        this.initialCollateralAmount = initialCollateralAmount;
    }

    public GetLoanBorrowHistoryResponseRowsInner borrowTime(
            @jakarta.annotation.Nullable Long borrowTime) {
        this.borrowTime = borrowTime;
        return this;
    }

    /**
     * Get borrowTime
     *
     * @return borrowTime
     */
    @jakarta.annotation.Nullable
    public Long getBorrowTime() {
        return borrowTime;
    }

    public void setBorrowTime(@jakarta.annotation.Nullable Long borrowTime) {
        this.borrowTime = borrowTime;
    }

    public GetLoanBorrowHistoryResponseRowsInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetLoanBorrowHistoryResponseRowsInner getLoanBorrowHistoryResponseRowsInner =
                (GetLoanBorrowHistoryResponseRowsInner) o;
        return Objects.equals(this.orderId, getLoanBorrowHistoryResponseRowsInner.orderId)
                && Objects.equals(this.loanCoin, getLoanBorrowHistoryResponseRowsInner.loanCoin)
                && Objects.equals(
                        this.initialLoanAmount,
                        getLoanBorrowHistoryResponseRowsInner.initialLoanAmount)
                && Objects.equals(
                        this.hourlyInterestRate,
                        getLoanBorrowHistoryResponseRowsInner.hourlyInterestRate)
                && Objects.equals(this.loanTerm, getLoanBorrowHistoryResponseRowsInner.loanTerm)
                && Objects.equals(
                        this.collateralCoin, getLoanBorrowHistoryResponseRowsInner.collateralCoin)
                && Objects.equals(
                        this.initialCollateralAmount,
                        getLoanBorrowHistoryResponseRowsInner.initialCollateralAmount)
                && Objects.equals(this.borrowTime, getLoanBorrowHistoryResponseRowsInner.borrowTime)
                && Objects.equals(this.status, getLoanBorrowHistoryResponseRowsInner.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                orderId,
                loanCoin,
                initialLoanAmount,
                hourlyInterestRate,
                loanTerm,
                collateralCoin,
                initialCollateralAmount,
                borrowTime,
                status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetLoanBorrowHistoryResponseRowsInner {\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		loanCoin: ").append(toIndentedString(loanCoin)).append("\n");
        sb.append("		initialLoanAmount: ").append(toIndentedString(initialLoanAmount)).append("\n");
        sb.append("		hourlyInterestRate: ")
                .append(toIndentedString(hourlyInterestRate))
                .append("\n");
        sb.append("		loanTerm: ").append(toIndentedString(loanTerm)).append("\n");
        sb.append("		collateralCoin: ").append(toIndentedString(collateralCoin)).append("\n");
        sb.append("		initialCollateralAmount: ")
                .append(toIndentedString(initialCollateralAmount))
                .append("\n");
        sb.append("		borrowTime: ").append(toIndentedString(borrowTime)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object loanCoinValue = getLoanCoin();
        String loanCoinValueAsString = "";
        loanCoinValueAsString = loanCoinValue.toString();
        sb.append("loanCoin=").append(urlEncode(loanCoinValueAsString)).append("");
        Object initialLoanAmountValue = getInitialLoanAmount();
        String initialLoanAmountValueAsString = "";
        initialLoanAmountValueAsString = initialLoanAmountValue.toString();
        sb.append("initialLoanAmount=")
                .append(urlEncode(initialLoanAmountValueAsString))
                .append("");
        Object hourlyInterestRateValue = getHourlyInterestRate();
        String hourlyInterestRateValueAsString = "";
        hourlyInterestRateValueAsString = hourlyInterestRateValue.toString();
        sb.append("hourlyInterestRate=")
                .append(urlEncode(hourlyInterestRateValueAsString))
                .append("");
        Object loanTermValue = getLoanTerm();
        String loanTermValueAsString = "";
        loanTermValueAsString = loanTermValue.toString();
        sb.append("loanTerm=").append(urlEncode(loanTermValueAsString)).append("");
        Object collateralCoinValue = getCollateralCoin();
        String collateralCoinValueAsString = "";
        collateralCoinValueAsString = collateralCoinValue.toString();
        sb.append("collateralCoin=").append(urlEncode(collateralCoinValueAsString)).append("");
        Object initialCollateralAmountValue = getInitialCollateralAmount();
        String initialCollateralAmountValueAsString = "";
        initialCollateralAmountValueAsString = initialCollateralAmountValue.toString();
        sb.append("initialCollateralAmount=")
                .append(urlEncode(initialCollateralAmountValueAsString))
                .append("");
        Object borrowTimeValue = getBorrowTime();
        String borrowTimeValueAsString = "";
        borrowTimeValueAsString = borrowTimeValue.toString();
        sb.append("borrowTime=").append(urlEncode(borrowTimeValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("orderId");
        openapiFields.add("loanCoin");
        openapiFields.add("initialLoanAmount");
        openapiFields.add("hourlyInterestRate");
        openapiFields.add("loanTerm");
        openapiFields.add("collateralCoin");
        openapiFields.add("initialCollateralAmount");
        openapiFields.add("borrowTime");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetLoanBorrowHistoryResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetLoanBorrowHistoryResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetLoanBorrowHistoryResponseRowsInner"
                                        + " is not found in the empty JSON string",
                                GetLoanBorrowHistoryResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetLoanBorrowHistoryResponseRowsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `GetLoanBorrowHistoryResponseRowsInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("loanCoin") != null && !jsonObj.get("loanCoin").isJsonNull())
                && !jsonObj.get("loanCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `loanCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("loanCoin").toString()));
        }
        if ((jsonObj.get("initialLoanAmount") != null
                        && !jsonObj.get("initialLoanAmount").isJsonNull())
                && !jsonObj.get("initialLoanAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `initialLoanAmount` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("initialLoanAmount").toString()));
        }
        if ((jsonObj.get("hourlyInterestRate") != null
                        && !jsonObj.get("hourlyInterestRate").isJsonNull())
                && !jsonObj.get("hourlyInterestRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `hourlyInterestRate` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("hourlyInterestRate").toString()));
        }
        if ((jsonObj.get("loanTerm") != null && !jsonObj.get("loanTerm").isJsonNull())
                && !jsonObj.get("loanTerm").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `loanTerm` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("loanTerm").toString()));
        }
        if ((jsonObj.get("collateralCoin") != null && !jsonObj.get("collateralCoin").isJsonNull())
                && !jsonObj.get("collateralCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collateralCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collateralCoin").toString()));
        }
        if ((jsonObj.get("initialCollateralAmount") != null
                        && !jsonObj.get("initialCollateralAmount").isJsonNull())
                && !jsonObj.get("initialCollateralAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `initialCollateralAmount` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("initialCollateralAmount").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetLoanBorrowHistoryResponseRowsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetLoanBorrowHistoryResponseRowsInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetLoanBorrowHistoryResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetLoanBorrowHistoryResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetLoanBorrowHistoryResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, GetLoanBorrowHistoryResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetLoanBorrowHistoryResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetLoanBorrowHistoryResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetLoanBorrowHistoryResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetLoanBorrowHistoryResponseRowsInner
     */
    public static GetLoanBorrowHistoryResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, GetLoanBorrowHistoryResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetLoanBorrowHistoryResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
