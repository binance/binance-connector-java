/*
 * Binance Crypto Loan REST API
 * OpenAPI Specification for the Binance Crypto Loan REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.crypto_loan.rest.model;

import com.binance.connector.client.crypto_loan.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetFlexibleLoanRepaymentHistoryResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetFlexibleLoanRepaymentHistoryResponseRowsInner {
    public static final String SERIALIZED_NAME_LOAN_COIN = "loanCoin";

    @SerializedName(SERIALIZED_NAME_LOAN_COIN)
    @jakarta.annotation.Nullable
    private String loanCoin;

    public static final String SERIALIZED_NAME_REPAY_AMOUNT = "repayAmount";

    @SerializedName(SERIALIZED_NAME_REPAY_AMOUNT)
    @jakarta.annotation.Nullable
    private String repayAmount;

    public static final String SERIALIZED_NAME_COLLATERAL_COIN = "collateralCoin";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_COIN)
    @jakarta.annotation.Nullable
    private String collateralCoin;

    public static final String SERIALIZED_NAME_COLLATERAL_RETURN = "collateralReturn";

    @SerializedName(SERIALIZED_NAME_COLLATERAL_RETURN)
    @jakarta.annotation.Nullable
    private String collateralReturn;

    public static final String SERIALIZED_NAME_REPAY_STATUS = "repayStatus";

    @SerializedName(SERIALIZED_NAME_REPAY_STATUS)
    @jakarta.annotation.Nullable
    private String repayStatus;

    public static final String SERIALIZED_NAME_REPAY_TIME = "repayTime";

    @SerializedName(SERIALIZED_NAME_REPAY_TIME)
    @jakarta.annotation.Nullable
    private Long repayTime;

    public GetFlexibleLoanRepaymentHistoryResponseRowsInner() {}

    public GetFlexibleLoanRepaymentHistoryResponseRowsInner loanCoin(
            @jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
        return this;
    }

    /**
     * Get loanCoin
     *
     * @return loanCoin
     */
    @jakarta.annotation.Nullable
    public String getLoanCoin() {
        return loanCoin;
    }

    public void setLoanCoin(@jakarta.annotation.Nullable String loanCoin) {
        this.loanCoin = loanCoin;
    }

    public GetFlexibleLoanRepaymentHistoryResponseRowsInner repayAmount(
            @jakarta.annotation.Nullable String repayAmount) {
        this.repayAmount = repayAmount;
        return this;
    }

    /**
     * Get repayAmount
     *
     * @return repayAmount
     */
    @jakarta.annotation.Nullable
    public String getRepayAmount() {
        return repayAmount;
    }

    public void setRepayAmount(@jakarta.annotation.Nullable String repayAmount) {
        this.repayAmount = repayAmount;
    }

    public GetFlexibleLoanRepaymentHistoryResponseRowsInner collateralCoin(
            @jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
        return this;
    }

    /**
     * Get collateralCoin
     *
     * @return collateralCoin
     */
    @jakarta.annotation.Nullable
    public String getCollateralCoin() {
        return collateralCoin;
    }

    public void setCollateralCoin(@jakarta.annotation.Nullable String collateralCoin) {
        this.collateralCoin = collateralCoin;
    }

    public GetFlexibleLoanRepaymentHistoryResponseRowsInner collateralReturn(
            @jakarta.annotation.Nullable String collateralReturn) {
        this.collateralReturn = collateralReturn;
        return this;
    }

    /**
     * Get collateralReturn
     *
     * @return collateralReturn
     */
    @jakarta.annotation.Nullable
    public String getCollateralReturn() {
        return collateralReturn;
    }

    public void setCollateralReturn(@jakarta.annotation.Nullable String collateralReturn) {
        this.collateralReturn = collateralReturn;
    }

    public GetFlexibleLoanRepaymentHistoryResponseRowsInner repayStatus(
            @jakarta.annotation.Nullable String repayStatus) {
        this.repayStatus = repayStatus;
        return this;
    }

    /**
     * Get repayStatus
     *
     * @return repayStatus
     */
    @jakarta.annotation.Nullable
    public String getRepayStatus() {
        return repayStatus;
    }

    public void setRepayStatus(@jakarta.annotation.Nullable String repayStatus) {
        this.repayStatus = repayStatus;
    }

    public GetFlexibleLoanRepaymentHistoryResponseRowsInner repayTime(
            @jakarta.annotation.Nullable Long repayTime) {
        this.repayTime = repayTime;
        return this;
    }

    /**
     * Get repayTime
     *
     * @return repayTime
     */
    @jakarta.annotation.Nullable
    public Long getRepayTime() {
        return repayTime;
    }

    public void setRepayTime(@jakarta.annotation.Nullable Long repayTime) {
        this.repayTime = repayTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetFlexibleLoanRepaymentHistoryResponseRowsInner
                getFlexibleLoanRepaymentHistoryResponseRowsInner =
                        (GetFlexibleLoanRepaymentHistoryResponseRowsInner) o;
        return Objects.equals(
                        this.loanCoin, getFlexibleLoanRepaymentHistoryResponseRowsInner.loanCoin)
                && Objects.equals(
                        this.repayAmount,
                        getFlexibleLoanRepaymentHistoryResponseRowsInner.repayAmount)
                && Objects.equals(
                        this.collateralCoin,
                        getFlexibleLoanRepaymentHistoryResponseRowsInner.collateralCoin)
                && Objects.equals(
                        this.collateralReturn,
                        getFlexibleLoanRepaymentHistoryResponseRowsInner.collateralReturn)
                && Objects.equals(
                        this.repayStatus,
                        getFlexibleLoanRepaymentHistoryResponseRowsInner.repayStatus)
                && Objects.equals(
                        this.repayTime, getFlexibleLoanRepaymentHistoryResponseRowsInner.repayTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                loanCoin, repayAmount, collateralCoin, collateralReturn, repayStatus, repayTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetFlexibleLoanRepaymentHistoryResponseRowsInner {\n");
        sb.append("		loanCoin: ").append(toIndentedString(loanCoin)).append("\n");
        sb.append("		repayAmount: ").append(toIndentedString(repayAmount)).append("\n");
        sb.append("		collateralCoin: ").append(toIndentedString(collateralCoin)).append("\n");
        sb.append("		collateralReturn: ").append(toIndentedString(collateralReturn)).append("\n");
        sb.append("		repayStatus: ").append(toIndentedString(repayStatus)).append("\n");
        sb.append("		repayTime: ").append(toIndentedString(repayTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object loanCoinValue = getLoanCoin();
        String loanCoinValueAsString = "";
        loanCoinValueAsString = loanCoinValue.toString();
        sb.append("loanCoin=").append(urlEncode(loanCoinValueAsString)).append("");
        Object repayAmountValue = getRepayAmount();
        String repayAmountValueAsString = "";
        repayAmountValueAsString = repayAmountValue.toString();
        sb.append("repayAmount=").append(urlEncode(repayAmountValueAsString)).append("");
        Object collateralCoinValue = getCollateralCoin();
        String collateralCoinValueAsString = "";
        collateralCoinValueAsString = collateralCoinValue.toString();
        sb.append("collateralCoin=").append(urlEncode(collateralCoinValueAsString)).append("");
        Object collateralReturnValue = getCollateralReturn();
        String collateralReturnValueAsString = "";
        collateralReturnValueAsString = collateralReturnValue.toString();
        sb.append("collateralReturn=").append(urlEncode(collateralReturnValueAsString)).append("");
        Object repayStatusValue = getRepayStatus();
        String repayStatusValueAsString = "";
        repayStatusValueAsString = repayStatusValue.toString();
        sb.append("repayStatus=").append(urlEncode(repayStatusValueAsString)).append("");
        Object repayTimeValue = getRepayTime();
        String repayTimeValueAsString = "";
        repayTimeValueAsString = repayTimeValue.toString();
        sb.append("repayTime=").append(urlEncode(repayTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("loanCoin");
        openapiFields.add("repayAmount");
        openapiFields.add("collateralCoin");
        openapiFields.add("collateralReturn");
        openapiFields.add("repayStatus");
        openapiFields.add("repayTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetFlexibleLoanRepaymentHistoryResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetFlexibleLoanRepaymentHistoryResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                        + " GetFlexibleLoanRepaymentHistoryResponseRowsInner is not"
                                        + " found in the empty JSON string",
                                GetFlexibleLoanRepaymentHistoryResponseRowsInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetFlexibleLoanRepaymentHistoryResponseRowsInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetFlexibleLoanRepaymentHistoryResponseRowsInner`"
                                        + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("loanCoin") != null && !jsonObj.get("loanCoin").isJsonNull())
                && !jsonObj.get("loanCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `loanCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("loanCoin").toString()));
        }
        if ((jsonObj.get("repayAmount") != null && !jsonObj.get("repayAmount").isJsonNull())
                && !jsonObj.get("repayAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `repayAmount` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("repayAmount").toString()));
        }
        if ((jsonObj.get("collateralCoin") != null && !jsonObj.get("collateralCoin").isJsonNull())
                && !jsonObj.get("collateralCoin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collateralCoin` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("collateralCoin").toString()));
        }
        if ((jsonObj.get("collateralReturn") != null
                        && !jsonObj.get("collateralReturn").isJsonNull())
                && !jsonObj.get("collateralReturn").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `collateralReturn` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("collateralReturn").toString()));
        }
        if ((jsonObj.get("repayStatus") != null && !jsonObj.get("repayStatus").isJsonNull())
                && !jsonObj.get("repayStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `repayStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("repayStatus").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetFlexibleLoanRepaymentHistoryResponseRowsInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'GetFlexibleLoanRepaymentHistoryResponseRowsInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetFlexibleLoanRepaymentHistoryResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(GetFlexibleLoanRepaymentHistoryResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetFlexibleLoanRepaymentHistoryResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                GetFlexibleLoanRepaymentHistoryResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetFlexibleLoanRepaymentHistoryResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetFlexibleLoanRepaymentHistoryResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetFlexibleLoanRepaymentHistoryResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetFlexibleLoanRepaymentHistoryResponseRowsInner
     */
    public static GetFlexibleLoanRepaymentHistoryResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, GetFlexibleLoanRepaymentHistoryResponseRowsInner.class);
    }

    /**
     * Convert an instance of GetFlexibleLoanRepaymentHistoryResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
