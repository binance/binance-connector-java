/*
 * Binance Public Spot WebSocket API
 * OpenAPI Specifications for the Binance Public Spot WebSocket API  API documents:   - [Github web-socket-api documentation file](https://github.com/binance/binance-spot-api-docs/blob/master/web-socket-api.md)   - [General API information for web-socket-api on website](https://developers.binance.com/docs/binance-spot-api-docs/web-socket-api/general-api-information)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.common.websocket.dtos;

import com.binance.connector.client.common.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import java.io.IOException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.HashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeMap;
import java.util.stream.Collectors;

/** SessionLogonResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.11.0")
public class SessionLogonResponse extends BaseDTO {
    private static final int DIFF_TILL_POSITION_INDEX = 1;
    private static final int MAX_DECIMAL_DIGITS = 30;
    private static DecimalFormat df;
    public static final String SERIALIZED_NAME_ID = "id";

    @SerializedName(SERIALIZED_NAME_ID)
    @jakarta.annotation.Nullable
    private String id;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private Integer status;

    public static final String SERIALIZED_NAME_RESULT = "result";

    @SerializedName(SERIALIZED_NAME_RESULT)
    @jakarta.annotation.Nullable
    private SessionLogonResponseResult result;

    public SessionLogonResponse() {}

    public SessionLogonResponse id(@jakarta.annotation.Nullable String id) {
        this.id = id;
        return this;
    }

    /**
     * Get id
     *
     * @return id
     */
    @jakarta.annotation.Nullable
    public String getId() {
        return id;
    }

    public void setId(@jakarta.annotation.Nullable String id) {
        this.id = id;
    }

    public SessionLogonResponse status(@jakarta.annotation.Nullable Integer status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public Integer getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable Integer status) {
        this.status = status;
    }

    public SessionLogonResponse result(
            @jakarta.annotation.Nullable SessionLogonResponseResult result) {
        this.result = result;
        return this;
    }

    /**
     * Get result
     *
     * @return result
     */
    @jakarta.annotation.Nullable
    @Valid
    public SessionLogonResponseResult getResult() {
        return result;
    }

    public void setResult(@jakarta.annotation.Nullable SessionLogonResponseResult result) {
        this.result = result;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SessionLogonResponse sessionLogonResponse = (SessionLogonResponse) o;
        return Objects.equals(this.id, sessionLogonResponse.id)
                && Objects.equals(this.status, sessionLogonResponse.status)
                && Objects.equals(this.result, sessionLogonResponse.result);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, status, result);
    }

    @Override
    public String toString() {
        String sb =
                "class SessionLogonResponse {\n"
                        + "		id: "
                        + toIndentedString(id)
                        + "\n"
                        + "		status: "
                        + toIndentedString(status)
                        + "\n"
                        + "		result: "
                        + toIndentedString(result)
                        + "\n"
                        + "}";
        return sb;
    }

    public String toUrlQueryString() {
        Map<String, String> valMap = new TreeMap<String, String>();
        valMap.put("apiKey", getApiKey());
        Object idValue = getId();
        if (idValue != null) {
            String idValueAsString = "";
            idValueAsString = idValue.toString();
            valMap.put("id", urlEncode(idValueAsString));
        }
        Object statusValue = getStatus();
        if (statusValue != null) {
            String statusValueAsString = "";
            statusValueAsString = statusValue.toString();
            valMap.put("status", urlEncode(statusValueAsString));
        }
        Object resultValue = getResult();
        if (resultValue != null) {
            String resultValueAsString = "";
            resultValueAsString = resultValue.toString();
            valMap.put("result", urlEncode(resultValueAsString));
        }
        valMap.put("timestamp", getTimestamp());
        return valMap.keySet().stream()
                .map(key -> key + "=" + valMap.get(key))
                .collect(Collectors.joining("&"));
    }

    public Map<String, Object> toMap() {
        Map<String, Object> valMap = new TreeMap<String, Object>();
        valMap.put("apiKey", getApiKey());
        Object idValue = getId();
        if (idValue != null) {
            valMap.put("id", idValue);
        }
        Object statusValue = getStatus();
        if (statusValue != null) {
            valMap.put("status", statusValue);
        }
        Object resultValue = getResult();
        if (resultValue != null) {
            valMap.put("result", resultValue);
        }
        valMap.put("timestamp", getTimestamp());
        return valMap;
    }

    public static String urlEncode(String s) {
        return URLEncoder.encode(s, StandardCharsets.UTF_8);
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    private static final HashSet<String> openapiFields;
    private static final HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("id");
        openapiFields.add("status");
        openapiFields.add("result");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SessionLogonResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!SessionLogonResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in SessionLogonResponse is not found in"
                                        + " the empty JSON string",
                                SessionLogonResponse.openapiRequiredFields));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!SessionLogonResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `SessionLogonResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull())
                && !jsonObj.get("id").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `id` to be a primitive type in the JSON string but"
                                    + " got `%s`",
                            jsonObj.get("id").toString()));
        }
        // validate the optional field `result`
        if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
            SessionLogonResponseResult.validateJsonElement(jsonObj.get("result"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SessionLogonResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SessionLogonResponse' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<SessionLogonResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(SessionLogonResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<SessionLogonResponse>() {
                        @Override
                        public void write(JsonWriter out, SessionLogonResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public SessionLogonResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of SessionLogonResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SessionLogonResponse
     * @throws IOException if the JSON string is invalid with respect to SessionLogonResponse
     */
    public static SessionLogonResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SessionLogonResponse.class);
    }

    /**
     * Convert an instance of SessionLogonResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }

    private static DecimalFormat getFormatter() {
        if (null == df) {
            // Overrides the default Locale
            DecimalFormatSymbols symbols = new DecimalFormatSymbols(Locale.ENGLISH);
            df = new DecimalFormat("#,##0.###", symbols);
            df.setMaximumFractionDigits(MAX_DECIMAL_DIGITS);
            df.setGroupingUsed(false);
        }
        return df;
    }
}
