/*
 * Common file
 * Dummy file to generate common files
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.common;

import java.util.Map;

/** Representing a Server configuration. */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.11.0")
public class ServerConfiguration {
    private final String URL;
    private final String description;
    private final Map<String, ServerVariable> variables;

    /**
     * @param url A URL to the target host.
     * @param description A description of the host designated by the URL.
     * @param variables A map between a variable name and its value. The value is used for
     *     substitution in the server's URL template.
     */
    public ServerConfiguration(
            String url, String description, Map<String, ServerVariable> variables) {
        this.URL = url;
        this.description = description;
        this.variables = variables;
    }

    /**
     * Format URL template using given variables.
     *
     * @param variables A map between a variable name and its value.
     * @return Formatted URL.
     */
    public String setURL(Map<String, String> variables) {
        String url = this.URL;

        // go through variables and replace placeholders
        for (Map.Entry<String, ServerVariable> variable : this.variables.entrySet()) {
            String name = variable.getKey();
            ServerVariable serverVariable = variable.getValue();
            String value = serverVariable.getDefaultValue();

            if (variables != null && variables.containsKey(name)) {
                value = variables.get(name);
                if (!serverVariable.getEnumValues().isEmpty()
                        && !serverVariable.getEnumValues().contains(value)) {
                    throw new IllegalArgumentException(
                            "The variable "
                                    + name
                                    + " in the server URL has invalid value "
                                    + value
                                    + ".");
                }
            }
            url = url.replace("{" + name + "}", value);
        }
        return url;
    }
}
