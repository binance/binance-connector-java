/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryUmConditionalOrderHistoryResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryUmConditionalOrderHistoryResponse {
    public static final String SERIALIZED_NAME_NEW_CLIENT_STRATEGY_ID = "newClientStrategyId";

    @SerializedName(SERIALIZED_NAME_NEW_CLIENT_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private String newClientStrategyId;

    public static final String SERIALIZED_NAME_STRATEGY_ID = "strategyId";

    @SerializedName(SERIALIZED_NAME_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private Long strategyId;

    public static final String SERIALIZED_NAME_STRATEGY_STATUS = "strategyStatus";

    @SerializedName(SERIALIZED_NAME_STRATEGY_STATUS)
    @jakarta.annotation.Nullable
    private String strategyStatus;

    public static final String SERIALIZED_NAME_STRATEGY_TYPE = "strategyType";

    @SerializedName(SERIALIZED_NAME_STRATEGY_TYPE)
    @jakarta.annotation.Nullable
    private String strategyType;

    public static final String SERIALIZED_NAME_ORIG_QTY = "origQty";

    @SerializedName(SERIALIZED_NAME_ORIG_QTY)
    @jakarta.annotation.Nullable
    private String origQty;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_REDUCE_ONLY = "reduceOnly";

    @SerializedName(SERIALIZED_NAME_REDUCE_ONLY)
    @jakarta.annotation.Nullable
    private Boolean reduceOnly;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private String positionSide;

    public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";

    @SerializedName(SERIALIZED_NAME_STOP_PRICE)
    @jakarta.annotation.Nullable
    private String stopPrice;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_BOOK_TIME = "bookTime";

    @SerializedName(SERIALIZED_NAME_BOOK_TIME)
    @jakarta.annotation.Nullable
    private Long bookTime;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public static final String SERIALIZED_NAME_TRIGGER_TIME = "triggerTime";

    @SerializedName(SERIALIZED_NAME_TRIGGER_TIME)
    @jakarta.annotation.Nullable
    private Long triggerTime;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String timeInForce;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_ACTIVATE_PRICE = "activatePrice";

    @SerializedName(SERIALIZED_NAME_ACTIVATE_PRICE)
    @jakarta.annotation.Nullable
    private String activatePrice;

    public static final String SERIALIZED_NAME_PRICE_RATE = "priceRate";

    @SerializedName(SERIALIZED_NAME_PRICE_RATE)
    @jakarta.annotation.Nullable
    private String priceRate;

    public static final String SERIALIZED_NAME_WORKING_TYPE = "workingType";

    @SerializedName(SERIALIZED_NAME_WORKING_TYPE)
    @jakarta.annotation.Nullable
    private String workingType;

    public static final String SERIALIZED_NAME_PRICE_PROTECT = "priceProtect";

    @SerializedName(SERIALIZED_NAME_PRICE_PROTECT)
    @jakarta.annotation.Nullable
    private Boolean priceProtect;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private String selfTradePreventionMode;

    public static final String SERIALIZED_NAME_GOOD_TILL_DATE = "goodTillDate";

    @SerializedName(SERIALIZED_NAME_GOOD_TILL_DATE)
    @jakarta.annotation.Nullable
    private Long goodTillDate;

    public QueryUmConditionalOrderHistoryResponse() {}

    public QueryUmConditionalOrderHistoryResponse newClientStrategyId(
            @jakarta.annotation.Nullable String newClientStrategyId) {
        this.newClientStrategyId = newClientStrategyId;
        return this;
    }

    /**
     * Get newClientStrategyId
     *
     * @return newClientStrategyId
     */
    @jakarta.annotation.Nullable
    public String getNewClientStrategyId() {
        return newClientStrategyId;
    }

    public void setNewClientStrategyId(@jakarta.annotation.Nullable String newClientStrategyId) {
        this.newClientStrategyId = newClientStrategyId;
    }

    public QueryUmConditionalOrderHistoryResponse strategyId(
            @jakarta.annotation.Nullable Long strategyId) {
        this.strategyId = strategyId;
        return this;
    }

    /**
     * Get strategyId
     *
     * @return strategyId
     */
    @jakarta.annotation.Nullable
    public Long getStrategyId() {
        return strategyId;
    }

    public void setStrategyId(@jakarta.annotation.Nullable Long strategyId) {
        this.strategyId = strategyId;
    }

    public QueryUmConditionalOrderHistoryResponse strategyStatus(
            @jakarta.annotation.Nullable String strategyStatus) {
        this.strategyStatus = strategyStatus;
        return this;
    }

    /**
     * Get strategyStatus
     *
     * @return strategyStatus
     */
    @jakarta.annotation.Nullable
    public String getStrategyStatus() {
        return strategyStatus;
    }

    public void setStrategyStatus(@jakarta.annotation.Nullable String strategyStatus) {
        this.strategyStatus = strategyStatus;
    }

    public QueryUmConditionalOrderHistoryResponse strategyType(
            @jakarta.annotation.Nullable String strategyType) {
        this.strategyType = strategyType;
        return this;
    }

    /**
     * Get strategyType
     *
     * @return strategyType
     */
    @jakarta.annotation.Nullable
    public String getStrategyType() {
        return strategyType;
    }

    public void setStrategyType(@jakarta.annotation.Nullable String strategyType) {
        this.strategyType = strategyType;
    }

    public QueryUmConditionalOrderHistoryResponse origQty(
            @jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
        return this;
    }

    /**
     * Get origQty
     *
     * @return origQty
     */
    @jakarta.annotation.Nullable
    public String getOrigQty() {
        return origQty;
    }

    public void setOrigQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
    }

    public QueryUmConditionalOrderHistoryResponse price(@jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public QueryUmConditionalOrderHistoryResponse reduceOnly(
            @jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
        return this;
    }

    /**
     * Get reduceOnly
     *
     * @return reduceOnly
     */
    @jakarta.annotation.Nullable
    public Boolean getReduceOnly() {
        return reduceOnly;
    }

    public void setReduceOnly(@jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
    }

    public QueryUmConditionalOrderHistoryResponse side(@jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public QueryUmConditionalOrderHistoryResponse positionSide(
            @jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    public String getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
    }

    public QueryUmConditionalOrderHistoryResponse stopPrice(
            @jakarta.annotation.Nullable String stopPrice) {
        this.stopPrice = stopPrice;
        return this;
    }

    /**
     * Get stopPrice
     *
     * @return stopPrice
     */
    @jakarta.annotation.Nullable
    public String getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(@jakarta.annotation.Nullable String stopPrice) {
        this.stopPrice = stopPrice;
    }

    public QueryUmConditionalOrderHistoryResponse symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public QueryUmConditionalOrderHistoryResponse orderId(
            @jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public QueryUmConditionalOrderHistoryResponse status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public QueryUmConditionalOrderHistoryResponse bookTime(
            @jakarta.annotation.Nullable Long bookTime) {
        this.bookTime = bookTime;
        return this;
    }

    /**
     * Get bookTime
     *
     * @return bookTime
     */
    @jakarta.annotation.Nullable
    public Long getBookTime() {
        return bookTime;
    }

    public void setBookTime(@jakarta.annotation.Nullable Long bookTime) {
        this.bookTime = bookTime;
    }

    public QueryUmConditionalOrderHistoryResponse updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    public QueryUmConditionalOrderHistoryResponse triggerTime(
            @jakarta.annotation.Nullable Long triggerTime) {
        this.triggerTime = triggerTime;
        return this;
    }

    /**
     * Get triggerTime
     *
     * @return triggerTime
     */
    @jakarta.annotation.Nullable
    public Long getTriggerTime() {
        return triggerTime;
    }

    public void setTriggerTime(@jakarta.annotation.Nullable Long triggerTime) {
        this.triggerTime = triggerTime;
    }

    public QueryUmConditionalOrderHistoryResponse timeInForce(
            @jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public String getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
    }

    public QueryUmConditionalOrderHistoryResponse type(@jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public QueryUmConditionalOrderHistoryResponse activatePrice(
            @jakarta.annotation.Nullable String activatePrice) {
        this.activatePrice = activatePrice;
        return this;
    }

    /**
     * Get activatePrice
     *
     * @return activatePrice
     */
    @jakarta.annotation.Nullable
    public String getActivatePrice() {
        return activatePrice;
    }

    public void setActivatePrice(@jakarta.annotation.Nullable String activatePrice) {
        this.activatePrice = activatePrice;
    }

    public QueryUmConditionalOrderHistoryResponse priceRate(
            @jakarta.annotation.Nullable String priceRate) {
        this.priceRate = priceRate;
        return this;
    }

    /**
     * Get priceRate
     *
     * @return priceRate
     */
    @jakarta.annotation.Nullable
    public String getPriceRate() {
        return priceRate;
    }

    public void setPriceRate(@jakarta.annotation.Nullable String priceRate) {
        this.priceRate = priceRate;
    }

    public QueryUmConditionalOrderHistoryResponse workingType(
            @jakarta.annotation.Nullable String workingType) {
        this.workingType = workingType;
        return this;
    }

    /**
     * Get workingType
     *
     * @return workingType
     */
    @jakarta.annotation.Nullable
    public String getWorkingType() {
        return workingType;
    }

    public void setWorkingType(@jakarta.annotation.Nullable String workingType) {
        this.workingType = workingType;
    }

    public QueryUmConditionalOrderHistoryResponse priceProtect(
            @jakarta.annotation.Nullable Boolean priceProtect) {
        this.priceProtect = priceProtect;
        return this;
    }

    /**
     * Get priceProtect
     *
     * @return priceProtect
     */
    @jakarta.annotation.Nullable
    public Boolean getPriceProtect() {
        return priceProtect;
    }

    public void setPriceProtect(@jakarta.annotation.Nullable Boolean priceProtect) {
        this.priceProtect = priceProtect;
    }

    public QueryUmConditionalOrderHistoryResponse selfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    public String getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public QueryUmConditionalOrderHistoryResponse goodTillDate(
            @jakarta.annotation.Nullable Long goodTillDate) {
        this.goodTillDate = goodTillDate;
        return this;
    }

    /**
     * Get goodTillDate
     *
     * @return goodTillDate
     */
    @jakarta.annotation.Nullable
    public Long getGoodTillDate() {
        return goodTillDate;
    }

    public void setGoodTillDate(@jakarta.annotation.Nullable Long goodTillDate) {
        this.goodTillDate = goodTillDate;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryUmConditionalOrderHistoryResponse queryUmConditionalOrderHistoryResponse =
                (QueryUmConditionalOrderHistoryResponse) o;
        return Objects.equals(
                        this.newClientStrategyId,
                        queryUmConditionalOrderHistoryResponse.newClientStrategyId)
                && Objects.equals(
                        this.strategyId, queryUmConditionalOrderHistoryResponse.strategyId)
                && Objects.equals(
                        this.strategyStatus, queryUmConditionalOrderHistoryResponse.strategyStatus)
                && Objects.equals(
                        this.strategyType, queryUmConditionalOrderHistoryResponse.strategyType)
                && Objects.equals(this.origQty, queryUmConditionalOrderHistoryResponse.origQty)
                && Objects.equals(this.price, queryUmConditionalOrderHistoryResponse.price)
                && Objects.equals(
                        this.reduceOnly, queryUmConditionalOrderHistoryResponse.reduceOnly)
                && Objects.equals(this.side, queryUmConditionalOrderHistoryResponse.side)
                && Objects.equals(
                        this.positionSide, queryUmConditionalOrderHistoryResponse.positionSide)
                && Objects.equals(this.stopPrice, queryUmConditionalOrderHistoryResponse.stopPrice)
                && Objects.equals(this.symbol, queryUmConditionalOrderHistoryResponse.symbol)
                && Objects.equals(this.orderId, queryUmConditionalOrderHistoryResponse.orderId)
                && Objects.equals(this.status, queryUmConditionalOrderHistoryResponse.status)
                && Objects.equals(this.bookTime, queryUmConditionalOrderHistoryResponse.bookTime)
                && Objects.equals(
                        this.updateTime, queryUmConditionalOrderHistoryResponse.updateTime)
                && Objects.equals(
                        this.triggerTime, queryUmConditionalOrderHistoryResponse.triggerTime)
                && Objects.equals(
                        this.timeInForce, queryUmConditionalOrderHistoryResponse.timeInForce)
                && Objects.equals(this.type, queryUmConditionalOrderHistoryResponse.type)
                && Objects.equals(
                        this.activatePrice, queryUmConditionalOrderHistoryResponse.activatePrice)
                && Objects.equals(this.priceRate, queryUmConditionalOrderHistoryResponse.priceRate)
                && Objects.equals(
                        this.workingType, queryUmConditionalOrderHistoryResponse.workingType)
                && Objects.equals(
                        this.priceProtect, queryUmConditionalOrderHistoryResponse.priceProtect)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        queryUmConditionalOrderHistoryResponse.selfTradePreventionMode)
                && Objects.equals(
                        this.goodTillDate, queryUmConditionalOrderHistoryResponse.goodTillDate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                newClientStrategyId,
                strategyId,
                strategyStatus,
                strategyType,
                origQty,
                price,
                reduceOnly,
                side,
                positionSide,
                stopPrice,
                symbol,
                orderId,
                status,
                bookTime,
                updateTime,
                triggerTime,
                timeInForce,
                type,
                activatePrice,
                priceRate,
                workingType,
                priceProtect,
                selfTradePreventionMode,
                goodTillDate);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryUmConditionalOrderHistoryResponse {\n");
        sb.append("		newClientStrategyId: ")
                .append(toIndentedString(newClientStrategyId))
                .append("\n");
        sb.append("		strategyId: ").append(toIndentedString(strategyId)).append("\n");
        sb.append("		strategyStatus: ").append(toIndentedString(strategyStatus)).append("\n");
        sb.append("		strategyType: ").append(toIndentedString(strategyType)).append("\n");
        sb.append("		origQty: ").append(toIndentedString(origQty)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		reduceOnly: ").append(toIndentedString(reduceOnly)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		bookTime: ").append(toIndentedString(bookTime)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("		triggerTime: ").append(toIndentedString(triggerTime)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		activatePrice: ").append(toIndentedString(activatePrice)).append("\n");
        sb.append("		priceRate: ").append(toIndentedString(priceRate)).append("\n");
        sb.append("		workingType: ").append(toIndentedString(workingType)).append("\n");
        sb.append("		priceProtect: ").append(toIndentedString(priceProtect)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		goodTillDate: ").append(toIndentedString(goodTillDate)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object newClientStrategyIdValue = getNewClientStrategyId();
        String newClientStrategyIdValueAsString = "";
        newClientStrategyIdValueAsString = newClientStrategyIdValue.toString();
        sb.append("newClientStrategyId=")
                .append(urlEncode(newClientStrategyIdValueAsString))
                .append("");
        Object strategyIdValue = getStrategyId();
        String strategyIdValueAsString = "";
        strategyIdValueAsString = strategyIdValue.toString();
        sb.append("strategyId=").append(urlEncode(strategyIdValueAsString)).append("");
        Object strategyStatusValue = getStrategyStatus();
        String strategyStatusValueAsString = "";
        strategyStatusValueAsString = strategyStatusValue.toString();
        sb.append("strategyStatus=").append(urlEncode(strategyStatusValueAsString)).append("");
        Object strategyTypeValue = getStrategyType();
        String strategyTypeValueAsString = "";
        strategyTypeValueAsString = strategyTypeValue.toString();
        sb.append("strategyType=").append(urlEncode(strategyTypeValueAsString)).append("");
        Object origQtyValue = getOrigQty();
        String origQtyValueAsString = "";
        origQtyValueAsString = origQtyValue.toString();
        sb.append("origQty=").append(urlEncode(origQtyValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object reduceOnlyValue = getReduceOnly();
        String reduceOnlyValueAsString = "";
        reduceOnlyValueAsString = reduceOnlyValue.toString();
        sb.append("reduceOnly=").append(urlEncode(reduceOnlyValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object positionSideValue = getPositionSide();
        String positionSideValueAsString = "";
        positionSideValueAsString = positionSideValue.toString();
        sb.append("positionSide=").append(urlEncode(positionSideValueAsString)).append("");
        Object stopPriceValue = getStopPrice();
        String stopPriceValueAsString = "";
        stopPriceValueAsString = stopPriceValue.toString();
        sb.append("stopPrice=").append(urlEncode(stopPriceValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object bookTimeValue = getBookTime();
        String bookTimeValueAsString = "";
        bookTimeValueAsString = bookTimeValue.toString();
        sb.append("bookTime=").append(urlEncode(bookTimeValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        Object triggerTimeValue = getTriggerTime();
        String triggerTimeValueAsString = "";
        triggerTimeValueAsString = triggerTimeValue.toString();
        sb.append("triggerTime=").append(urlEncode(triggerTimeValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString = timeInForceValue.toString();
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object activatePriceValue = getActivatePrice();
        String activatePriceValueAsString = "";
        activatePriceValueAsString = activatePriceValue.toString();
        sb.append("activatePrice=").append(urlEncode(activatePriceValueAsString)).append("");
        Object priceRateValue = getPriceRate();
        String priceRateValueAsString = "";
        priceRateValueAsString = priceRateValue.toString();
        sb.append("priceRate=").append(urlEncode(priceRateValueAsString)).append("");
        Object workingTypeValue = getWorkingType();
        String workingTypeValueAsString = "";
        workingTypeValueAsString = workingTypeValue.toString();
        sb.append("workingType=").append(urlEncode(workingTypeValueAsString)).append("");
        Object priceProtectValue = getPriceProtect();
        String priceProtectValueAsString = "";
        priceProtectValueAsString = priceProtectValue.toString();
        sb.append("priceProtect=").append(urlEncode(priceProtectValueAsString)).append("");
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        String selfTradePreventionModeValueAsString = "";
        selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
        sb.append("selfTradePreventionMode=")
                .append(urlEncode(selfTradePreventionModeValueAsString))
                .append("");
        Object goodTillDateValue = getGoodTillDate();
        String goodTillDateValueAsString = "";
        goodTillDateValueAsString = goodTillDateValue.toString();
        sb.append("goodTillDate=").append(urlEncode(goodTillDateValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("newClientStrategyId");
        openapiFields.add("strategyId");
        openapiFields.add("strategyStatus");
        openapiFields.add("strategyType");
        openapiFields.add("origQty");
        openapiFields.add("price");
        openapiFields.add("reduceOnly");
        openapiFields.add("side");
        openapiFields.add("positionSide");
        openapiFields.add("stopPrice");
        openapiFields.add("symbol");
        openapiFields.add("orderId");
        openapiFields.add("status");
        openapiFields.add("bookTime");
        openapiFields.add("updateTime");
        openapiFields.add("triggerTime");
        openapiFields.add("timeInForce");
        openapiFields.add("type");
        openapiFields.add("activatePrice");
        openapiFields.add("priceRate");
        openapiFields.add("workingType");
        openapiFields.add("priceProtect");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("goodTillDate");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryUmConditionalOrderHistoryResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryUmConditionalOrderHistoryResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in QueryUmConditionalOrderHistoryResponse"
                                        + " is not found in the empty JSON string",
                                QueryUmConditionalOrderHistoryResponse.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryUmConditionalOrderHistoryResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryUmConditionalOrderHistoryResponse` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("newClientStrategyId") != null
                        && !jsonObj.get("newClientStrategyId").isJsonNull())
                && !jsonObj.get("newClientStrategyId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newClientStrategyId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("newClientStrategyId").toString()));
        }
        if ((jsonObj.get("strategyStatus") != null && !jsonObj.get("strategyStatus").isJsonNull())
                && !jsonObj.get("strategyStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strategyStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strategyStatus").toString()));
        }
        if ((jsonObj.get("strategyType") != null && !jsonObj.get("strategyType").isJsonNull())
                && !jsonObj.get("strategyType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `strategyType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("strategyType").toString()));
        }
        if ((jsonObj.get("origQty") != null && !jsonObj.get("origQty").isJsonNull())
                && !jsonObj.get("origQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("origQty").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull())
                && !jsonObj.get("positionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionSide").toString()));
        }
        if ((jsonObj.get("stopPrice") != null && !jsonObj.get("stopPrice").isJsonNull())
                && !jsonObj.get("stopPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `stopPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("stopPrice").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull())
                && !jsonObj.get("timeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("activatePrice") != null && !jsonObj.get("activatePrice").isJsonNull())
                && !jsonObj.get("activatePrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `activatePrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("activatePrice").toString()));
        }
        if ((jsonObj.get("priceRate") != null && !jsonObj.get("priceRate").isJsonNull())
                && !jsonObj.get("priceRate").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceRate` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("priceRate").toString()));
        }
        if ((jsonObj.get("workingType") != null && !jsonObj.get("workingType").isJsonNull())
                && !jsonObj.get("workingType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `workingType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("workingType").toString()));
        }
        if ((jsonObj.get("selfTradePreventionMode") != null
                        && !jsonObj.get("selfTradePreventionMode").isJsonNull())
                && !jsonObj.get("selfTradePreventionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `selfTradePreventionMode` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("selfTradePreventionMode").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryUmConditionalOrderHistoryResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'QueryUmConditionalOrderHistoryResponse'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryUmConditionalOrderHistoryResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryUmConditionalOrderHistoryResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryUmConditionalOrderHistoryResponse>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryUmConditionalOrderHistoryResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryUmConditionalOrderHistoryResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryUmConditionalOrderHistoryResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryUmConditionalOrderHistoryResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryUmConditionalOrderHistoryResponse
     */
    public static QueryUmConditionalOrderHistoryResponse fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, QueryUmConditionalOrderHistoryResponse.class);
    }

    /**
     * Convert an instance of QueryUmConditionalOrderHistoryResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
