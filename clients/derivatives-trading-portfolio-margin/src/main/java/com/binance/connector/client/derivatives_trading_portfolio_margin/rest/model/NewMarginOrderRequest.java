/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** NewMarginOrderRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class NewMarginOrderRequest {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nonnull
    private Side side;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nonnull
    private Type type;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private Double quantity;

    public static final String SERIALIZED_NAME_QUOTE_ORDER_QTY = "quoteOrderQty";

    @SerializedName(SERIALIZED_NAME_QUOTE_ORDER_QTY)
    @jakarta.annotation.Nullable
    private Double quoteOrderQty;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private Double price;

    public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";

    @SerializedName(SERIALIZED_NAME_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double stopPrice;

    public static final String SERIALIZED_NAME_NEW_CLIENT_ORDER_ID = "newClientOrderId";

    @SerializedName(SERIALIZED_NAME_NEW_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String newClientOrderId;

    public static final String SERIALIZED_NAME_NEW_ORDER_RESP_TYPE = "newOrderRespType";

    @SerializedName(SERIALIZED_NAME_NEW_ORDER_RESP_TYPE)
    @jakarta.annotation.Nullable
    private NewOrderRespType newOrderRespType;

    public static final String SERIALIZED_NAME_ICEBERG_QTY = "icebergQty";

    @SerializedName(SERIALIZED_NAME_ICEBERG_QTY)
    @jakarta.annotation.Nullable
    private Double icebergQty;

    public static final String SERIALIZED_NAME_SIDE_EFFECT_TYPE = "sideEffectType";

    @SerializedName(SERIALIZED_NAME_SIDE_EFFECT_TYPE)
    @jakarta.annotation.Nullable
    private SideEffectType sideEffectType;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private TimeInForce timeInForce;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private SelfTradePreventionMode selfTradePreventionMode;

    public static final String SERIALIZED_NAME_AUTO_REPAY_AT_CANCEL = "autoRepayAtCancel";

    @SerializedName(SERIALIZED_NAME_AUTO_REPAY_AT_CANCEL)
    @jakarta.annotation.Nullable
    private Boolean autoRepayAtCancel;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public NewMarginOrderRequest() {}

    public NewMarginOrderRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public NewMarginOrderRequest side(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Side getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
    }

    public NewMarginOrderRequest type(@jakarta.annotation.Nonnull Type type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Type getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nonnull Type type) {
        this.type = type;
    }

    public NewMarginOrderRequest quantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
    }

    public NewMarginOrderRequest quoteOrderQty(@jakarta.annotation.Nullable Double quoteOrderQty) {
        this.quoteOrderQty = quoteOrderQty;
        return this;
    }

    /**
     * Get quoteOrderQty
     *
     * @return quoteOrderQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getQuoteOrderQty() {
        return quoteOrderQty;
    }

    public void setQuoteOrderQty(@jakarta.annotation.Nullable Double quoteOrderQty) {
        this.quoteOrderQty = quoteOrderQty;
    }

    public NewMarginOrderRequest price(@jakarta.annotation.Nullable Double price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable Double price) {
        this.price = price;
    }

    public NewMarginOrderRequest stopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
        return this;
    }

    /**
     * Get stopPrice
     *
     * @return stopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
    }

    public NewMarginOrderRequest newClientOrderId(
            @jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
        return this;
    }

    /**
     * Get newClientOrderId
     *
     * @return newClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getNewClientOrderId() {
        return newClientOrderId;
    }

    public void setNewClientOrderId(@jakarta.annotation.Nullable String newClientOrderId) {
        this.newClientOrderId = newClientOrderId;
    }

    public NewMarginOrderRequest newOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
        return this;
    }

    /**
     * Get newOrderRespType
     *
     * @return newOrderRespType
     */
    @jakarta.annotation.Nullable
    @Valid
    public NewOrderRespType getNewOrderRespType() {
        return newOrderRespType;
    }

    public void setNewOrderRespType(
            @jakarta.annotation.Nullable NewOrderRespType newOrderRespType) {
        this.newOrderRespType = newOrderRespType;
    }

    public NewMarginOrderRequest icebergQty(@jakarta.annotation.Nullable Double icebergQty) {
        this.icebergQty = icebergQty;
        return this;
    }

    /**
     * Get icebergQty
     *
     * @return icebergQty
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getIcebergQty() {
        return icebergQty;
    }

    public void setIcebergQty(@jakarta.annotation.Nullable Double icebergQty) {
        this.icebergQty = icebergQty;
    }

    public NewMarginOrderRequest sideEffectType(
            @jakarta.annotation.Nullable SideEffectType sideEffectType) {
        this.sideEffectType = sideEffectType;
        return this;
    }

    /**
     * Get sideEffectType
     *
     * @return sideEffectType
     */
    @jakarta.annotation.Nullable
    @Valid
    public SideEffectType getSideEffectType() {
        return sideEffectType;
    }

    public void setSideEffectType(@jakarta.annotation.Nullable SideEffectType sideEffectType) {
        this.sideEffectType = sideEffectType;
    }

    public NewMarginOrderRequest timeInForce(@jakarta.annotation.Nullable TimeInForce timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public TimeInForce getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable TimeInForce timeInForce) {
        this.timeInForce = timeInForce;
    }

    public NewMarginOrderRequest selfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    @Valid
    public SelfTradePreventionMode getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable SelfTradePreventionMode selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public NewMarginOrderRequest autoRepayAtCancel(
            @jakarta.annotation.Nullable Boolean autoRepayAtCancel) {
        this.autoRepayAtCancel = autoRepayAtCancel;
        return this;
    }

    /**
     * Get autoRepayAtCancel
     *
     * @return autoRepayAtCancel
     */
    @jakarta.annotation.Nullable
    public Boolean getAutoRepayAtCancel() {
        return autoRepayAtCancel;
    }

    public void setAutoRepayAtCancel(@jakarta.annotation.Nullable Boolean autoRepayAtCancel) {
        this.autoRepayAtCancel = autoRepayAtCancel;
    }

    public NewMarginOrderRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NewMarginOrderRequest newMarginOrderRequest = (NewMarginOrderRequest) o;
        return Objects.equals(this.symbol, newMarginOrderRequest.symbol)
                && Objects.equals(this.side, newMarginOrderRequest.side)
                && Objects.equals(this.type, newMarginOrderRequest.type)
                && Objects.equals(this.quantity, newMarginOrderRequest.quantity)
                && Objects.equals(this.quoteOrderQty, newMarginOrderRequest.quoteOrderQty)
                && Objects.equals(this.price, newMarginOrderRequest.price)
                && Objects.equals(this.stopPrice, newMarginOrderRequest.stopPrice)
                && Objects.equals(this.newClientOrderId, newMarginOrderRequest.newClientOrderId)
                && Objects.equals(this.newOrderRespType, newMarginOrderRequest.newOrderRespType)
                && Objects.equals(this.icebergQty, newMarginOrderRequest.icebergQty)
                && Objects.equals(this.sideEffectType, newMarginOrderRequest.sideEffectType)
                && Objects.equals(this.timeInForce, newMarginOrderRequest.timeInForce)
                && Objects.equals(
                        this.selfTradePreventionMode, newMarginOrderRequest.selfTradePreventionMode)
                && Objects.equals(this.autoRepayAtCancel, newMarginOrderRequest.autoRepayAtCancel)
                && Objects.equals(this.recvWindow, newMarginOrderRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                side,
                type,
                quantity,
                quoteOrderQty,
                price,
                stopPrice,
                newClientOrderId,
                newOrderRespType,
                icebergQty,
                sideEffectType,
                timeInForce,
                selfTradePreventionMode,
                autoRepayAtCancel,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NewMarginOrderRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		quoteOrderQty: ").append(toIndentedString(quoteOrderQty)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
        sb.append("		newClientOrderId: ").append(toIndentedString(newClientOrderId)).append("\n");
        sb.append("		newOrderRespType: ").append(toIndentedString(newOrderRespType)).append("\n");
        sb.append("		icebergQty: ").append(toIndentedString(icebergQty)).append("\n");
        sb.append("		sideEffectType: ").append(toIndentedString(sideEffectType)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		autoRepayAtCancel: ").append(toIndentedString(autoRepayAtCancel)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object quoteOrderQtyValue = getQuoteOrderQty();
        String quoteOrderQtyValueAsString = "";
        quoteOrderQtyValueAsString = quoteOrderQtyValue.toString();
        sb.append("quoteOrderQty=").append(urlEncode(quoteOrderQtyValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object stopPriceValue = getStopPrice();
        String stopPriceValueAsString = "";
        stopPriceValueAsString = stopPriceValue.toString();
        sb.append("stopPrice=").append(urlEncode(stopPriceValueAsString)).append("");
        Object newClientOrderIdValue = getNewClientOrderId();
        String newClientOrderIdValueAsString = "";
        newClientOrderIdValueAsString = newClientOrderIdValue.toString();
        sb.append("newClientOrderId=").append(urlEncode(newClientOrderIdValueAsString)).append("");
        Object newOrderRespTypeValue = getNewOrderRespType();
        String newOrderRespTypeValueAsString = "";
        newOrderRespTypeValueAsString = newOrderRespTypeValue.toString();
        sb.append("newOrderRespType=").append(urlEncode(newOrderRespTypeValueAsString)).append("");
        Object icebergQtyValue = getIcebergQty();
        String icebergQtyValueAsString = "";
        icebergQtyValueAsString = icebergQtyValue.toString();
        sb.append("icebergQty=").append(urlEncode(icebergQtyValueAsString)).append("");
        Object sideEffectTypeValue = getSideEffectType();
        String sideEffectTypeValueAsString = "";
        sideEffectTypeValueAsString = sideEffectTypeValue.toString();
        sb.append("sideEffectType=").append(urlEncode(sideEffectTypeValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString = timeInForceValue.toString();
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        String selfTradePreventionModeValueAsString = "";
        selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
        sb.append("selfTradePreventionMode=")
                .append(urlEncode(selfTradePreventionModeValueAsString))
                .append("");
        Object autoRepayAtCancelValue = getAutoRepayAtCancel();
        String autoRepayAtCancelValueAsString = "";
        autoRepayAtCancelValueAsString = autoRepayAtCancelValue.toString();
        sb.append("autoRepayAtCancel=")
                .append(urlEncode(autoRepayAtCancelValueAsString))
                .append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("side");
        openapiFields.add("type");
        openapiFields.add("quantity");
        openapiFields.add("quoteOrderQty");
        openapiFields.add("price");
        openapiFields.add("stopPrice");
        openapiFields.add("newClientOrderId");
        openapiFields.add("newOrderRespType");
        openapiFields.add("icebergQty");
        openapiFields.add("sideEffectType");
        openapiFields.add("timeInForce");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("autoRepayAtCancel");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("side");
        openapiRequiredFields.add("type");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to NewMarginOrderRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!NewMarginOrderRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in NewMarginOrderRequest is not found in"
                                        + " the empty JSON string",
                                NewMarginOrderRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!NewMarginOrderRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `NewMarginOrderRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : NewMarginOrderRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        // validate the required field `side`
        Side.validateJsonElement(jsonObj.get("side"));
        // validate the required field `type`
        Type.validateJsonElement(jsonObj.get("type"));
        if ((jsonObj.get("newClientOrderId") != null
                        && !jsonObj.get("newClientOrderId").isJsonNull())
                && !jsonObj.get("newClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("newClientOrderId").toString()));
        }
        // validate the optional field `newOrderRespType`
        if (jsonObj.get("newOrderRespType") != null
                && !jsonObj.get("newOrderRespType").isJsonNull()) {
            NewOrderRespType.validateJsonElement(jsonObj.get("newOrderRespType"));
        }
        // validate the optional field `sideEffectType`
        if (jsonObj.get("sideEffectType") != null && !jsonObj.get("sideEffectType").isJsonNull()) {
            SideEffectType.validateJsonElement(jsonObj.get("sideEffectType"));
        }
        // validate the optional field `timeInForce`
        if (jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) {
            TimeInForce.validateJsonElement(jsonObj.get("timeInForce"));
        }
        // validate the optional field `selfTradePreventionMode`
        if (jsonObj.get("selfTradePreventionMode") != null
                && !jsonObj.get("selfTradePreventionMode").isJsonNull()) {
            SelfTradePreventionMode.validateJsonElement(jsonObj.get("selfTradePreventionMode"));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NewMarginOrderRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NewMarginOrderRequest' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NewMarginOrderRequest> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(NewMarginOrderRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<NewMarginOrderRequest>() {
                        @Override
                        public void write(JsonWriter out, NewMarginOrderRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public NewMarginOrderRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of NewMarginOrderRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NewMarginOrderRequest
     * @throws IOException if the JSON string is invalid with respect to NewMarginOrderRequest
     */
    public static NewMarginOrderRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NewMarginOrderRequest.class);
    }

    /**
     * Convert an instance of NewMarginOrderRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
