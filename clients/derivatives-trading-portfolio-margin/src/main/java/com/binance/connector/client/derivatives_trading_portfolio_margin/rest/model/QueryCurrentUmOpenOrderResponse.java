/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryCurrentUmOpenOrderResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryCurrentUmOpenOrderResponse {
    public static final String SERIALIZED_NAME_AVG_PRICE = "avgPrice";

    @SerializedName(SERIALIZED_NAME_AVG_PRICE)
    @jakarta.annotation.Nullable
    private String avgPrice;

    public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "clientOrderId";

    @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String clientOrderId;

    public static final String SERIALIZED_NAME_CUM_QUOTE = "cumQuote";

    @SerializedName(SERIALIZED_NAME_CUM_QUOTE)
    @jakarta.annotation.Nullable
    private String cumQuote;

    public static final String SERIALIZED_NAME_EXECUTED_QTY = "executedQty";

    @SerializedName(SERIALIZED_NAME_EXECUTED_QTY)
    @jakarta.annotation.Nullable
    private String executedQty;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_ORIG_QTY = "origQty";

    @SerializedName(SERIALIZED_NAME_ORIG_QTY)
    @jakarta.annotation.Nullable
    private String origQty;

    public static final String SERIALIZED_NAME_ORIG_TYPE = "origType";

    @SerializedName(SERIALIZED_NAME_ORIG_TYPE)
    @jakarta.annotation.Nullable
    private String origType;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_REDUCE_ONLY = "reduceOnly";

    @SerializedName(SERIALIZED_NAME_REDUCE_ONLY)
    @jakarta.annotation.Nullable
    private Boolean reduceOnly;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private String positionSide;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String timeInForce;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public static final String SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE =
            "selfTradePreventionMode";

    @SerializedName(SERIALIZED_NAME_SELF_TRADE_PREVENTION_MODE)
    @jakarta.annotation.Nullable
    private String selfTradePreventionMode;

    public static final String SERIALIZED_NAME_GOOD_TILL_DATE = "goodTillDate";

    @SerializedName(SERIALIZED_NAME_GOOD_TILL_DATE)
    @jakarta.annotation.Nullable
    private Long goodTillDate;

    public static final String SERIALIZED_NAME_PRICE_MATCH = "priceMatch";

    @SerializedName(SERIALIZED_NAME_PRICE_MATCH)
    @jakarta.annotation.Nullable
    private String priceMatch;

    public QueryCurrentUmOpenOrderResponse() {}

    public QueryCurrentUmOpenOrderResponse avgPrice(@jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
        return this;
    }

    /**
     * Get avgPrice
     *
     * @return avgPrice
     */
    @jakarta.annotation.Nullable
    public String getAvgPrice() {
        return avgPrice;
    }

    public void setAvgPrice(@jakarta.annotation.Nullable String avgPrice) {
        this.avgPrice = avgPrice;
    }

    public QueryCurrentUmOpenOrderResponse clientOrderId(
            @jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
        return this;
    }

    /**
     * Get clientOrderId
     *
     * @return clientOrderId
     */
    @jakarta.annotation.Nullable
    public String getClientOrderId() {
        return clientOrderId;
    }

    public void setClientOrderId(@jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }

    public QueryCurrentUmOpenOrderResponse cumQuote(@jakarta.annotation.Nullable String cumQuote) {
        this.cumQuote = cumQuote;
        return this;
    }

    /**
     * Get cumQuote
     *
     * @return cumQuote
     */
    @jakarta.annotation.Nullable
    public String getCumQuote() {
        return cumQuote;
    }

    public void setCumQuote(@jakarta.annotation.Nullable String cumQuote) {
        this.cumQuote = cumQuote;
    }

    public QueryCurrentUmOpenOrderResponse executedQty(
            @jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
        return this;
    }

    /**
     * Get executedQty
     *
     * @return executedQty
     */
    @jakarta.annotation.Nullable
    public String getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
    }

    public QueryCurrentUmOpenOrderResponse orderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public QueryCurrentUmOpenOrderResponse origQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
        return this;
    }

    /**
     * Get origQty
     *
     * @return origQty
     */
    @jakarta.annotation.Nullable
    public String getOrigQty() {
        return origQty;
    }

    public void setOrigQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
    }

    public QueryCurrentUmOpenOrderResponse origType(@jakarta.annotation.Nullable String origType) {
        this.origType = origType;
        return this;
    }

    /**
     * Get origType
     *
     * @return origType
     */
    @jakarta.annotation.Nullable
    public String getOrigType() {
        return origType;
    }

    public void setOrigType(@jakarta.annotation.Nullable String origType) {
        this.origType = origType;
    }

    public QueryCurrentUmOpenOrderResponse price(@jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public QueryCurrentUmOpenOrderResponse reduceOnly(
            @jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
        return this;
    }

    /**
     * Get reduceOnly
     *
     * @return reduceOnly
     */
    @jakarta.annotation.Nullable
    public Boolean getReduceOnly() {
        return reduceOnly;
    }

    public void setReduceOnly(@jakarta.annotation.Nullable Boolean reduceOnly) {
        this.reduceOnly = reduceOnly;
    }

    public QueryCurrentUmOpenOrderResponse side(@jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public QueryCurrentUmOpenOrderResponse positionSide(
            @jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    public String getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable String positionSide) {
        this.positionSide = positionSide;
    }

    public QueryCurrentUmOpenOrderResponse status(@jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public QueryCurrentUmOpenOrderResponse symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public QueryCurrentUmOpenOrderResponse time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public QueryCurrentUmOpenOrderResponse timeInForce(
            @jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public String getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
    }

    public QueryCurrentUmOpenOrderResponse type(@jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public QueryCurrentUmOpenOrderResponse updateTime(
            @jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    public QueryCurrentUmOpenOrderResponse selfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
        return this;
    }

    /**
     * Get selfTradePreventionMode
     *
     * @return selfTradePreventionMode
     */
    @jakarta.annotation.Nullable
    public String getSelfTradePreventionMode() {
        return selfTradePreventionMode;
    }

    public void setSelfTradePreventionMode(
            @jakarta.annotation.Nullable String selfTradePreventionMode) {
        this.selfTradePreventionMode = selfTradePreventionMode;
    }

    public QueryCurrentUmOpenOrderResponse goodTillDate(
            @jakarta.annotation.Nullable Long goodTillDate) {
        this.goodTillDate = goodTillDate;
        return this;
    }

    /**
     * Get goodTillDate
     *
     * @return goodTillDate
     */
    @jakarta.annotation.Nullable
    public Long getGoodTillDate() {
        return goodTillDate;
    }

    public void setGoodTillDate(@jakarta.annotation.Nullable Long goodTillDate) {
        this.goodTillDate = goodTillDate;
    }

    public QueryCurrentUmOpenOrderResponse priceMatch(
            @jakarta.annotation.Nullable String priceMatch) {
        this.priceMatch = priceMatch;
        return this;
    }

    /**
     * Get priceMatch
     *
     * @return priceMatch
     */
    @jakarta.annotation.Nullable
    public String getPriceMatch() {
        return priceMatch;
    }

    public void setPriceMatch(@jakarta.annotation.Nullable String priceMatch) {
        this.priceMatch = priceMatch;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryCurrentUmOpenOrderResponse queryCurrentUmOpenOrderResponse =
                (QueryCurrentUmOpenOrderResponse) o;
        return Objects.equals(this.avgPrice, queryCurrentUmOpenOrderResponse.avgPrice)
                && Objects.equals(this.clientOrderId, queryCurrentUmOpenOrderResponse.clientOrderId)
                && Objects.equals(this.cumQuote, queryCurrentUmOpenOrderResponse.cumQuote)
                && Objects.equals(this.executedQty, queryCurrentUmOpenOrderResponse.executedQty)
                && Objects.equals(this.orderId, queryCurrentUmOpenOrderResponse.orderId)
                && Objects.equals(this.origQty, queryCurrentUmOpenOrderResponse.origQty)
                && Objects.equals(this.origType, queryCurrentUmOpenOrderResponse.origType)
                && Objects.equals(this.price, queryCurrentUmOpenOrderResponse.price)
                && Objects.equals(this.reduceOnly, queryCurrentUmOpenOrderResponse.reduceOnly)
                && Objects.equals(this.side, queryCurrentUmOpenOrderResponse.side)
                && Objects.equals(this.positionSide, queryCurrentUmOpenOrderResponse.positionSide)
                && Objects.equals(this.status, queryCurrentUmOpenOrderResponse.status)
                && Objects.equals(this.symbol, queryCurrentUmOpenOrderResponse.symbol)
                && Objects.equals(this.time, queryCurrentUmOpenOrderResponse.time)
                && Objects.equals(this.timeInForce, queryCurrentUmOpenOrderResponse.timeInForce)
                && Objects.equals(this.type, queryCurrentUmOpenOrderResponse.type)
                && Objects.equals(this.updateTime, queryCurrentUmOpenOrderResponse.updateTime)
                && Objects.equals(
                        this.selfTradePreventionMode,
                        queryCurrentUmOpenOrderResponse.selfTradePreventionMode)
                && Objects.equals(this.goodTillDate, queryCurrentUmOpenOrderResponse.goodTillDate)
                && Objects.equals(this.priceMatch, queryCurrentUmOpenOrderResponse.priceMatch);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                avgPrice,
                clientOrderId,
                cumQuote,
                executedQty,
                orderId,
                origQty,
                origType,
                price,
                reduceOnly,
                side,
                positionSide,
                status,
                symbol,
                time,
                timeInForce,
                type,
                updateTime,
                selfTradePreventionMode,
                goodTillDate,
                priceMatch);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryCurrentUmOpenOrderResponse {\n");
        sb.append("		avgPrice: ").append(toIndentedString(avgPrice)).append("\n");
        sb.append("		clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
        sb.append("		cumQuote: ").append(toIndentedString(cumQuote)).append("\n");
        sb.append("		executedQty: ").append(toIndentedString(executedQty)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		origQty: ").append(toIndentedString(origQty)).append("\n");
        sb.append("		origType: ").append(toIndentedString(origType)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		reduceOnly: ").append(toIndentedString(reduceOnly)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("		selfTradePreventionMode: ")
                .append(toIndentedString(selfTradePreventionMode))
                .append("\n");
        sb.append("		goodTillDate: ").append(toIndentedString(goodTillDate)).append("\n");
        sb.append("		priceMatch: ").append(toIndentedString(priceMatch)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object avgPriceValue = getAvgPrice();
        String avgPriceValueAsString = "";
        avgPriceValueAsString = avgPriceValue.toString();
        sb.append("avgPrice=").append(urlEncode(avgPriceValueAsString)).append("");
        Object clientOrderIdValue = getClientOrderId();
        String clientOrderIdValueAsString = "";
        clientOrderIdValueAsString = clientOrderIdValue.toString();
        sb.append("clientOrderId=").append(urlEncode(clientOrderIdValueAsString)).append("");
        Object cumQuoteValue = getCumQuote();
        String cumQuoteValueAsString = "";
        cumQuoteValueAsString = cumQuoteValue.toString();
        sb.append("cumQuote=").append(urlEncode(cumQuoteValueAsString)).append("");
        Object executedQtyValue = getExecutedQty();
        String executedQtyValueAsString = "";
        executedQtyValueAsString = executedQtyValue.toString();
        sb.append("executedQty=").append(urlEncode(executedQtyValueAsString)).append("");
        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object origQtyValue = getOrigQty();
        String origQtyValueAsString = "";
        origQtyValueAsString = origQtyValue.toString();
        sb.append("origQty=").append(urlEncode(origQtyValueAsString)).append("");
        Object origTypeValue = getOrigType();
        String origTypeValueAsString = "";
        origTypeValueAsString = origTypeValue.toString();
        sb.append("origType=").append(urlEncode(origTypeValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object reduceOnlyValue = getReduceOnly();
        String reduceOnlyValueAsString = "";
        reduceOnlyValueAsString = reduceOnlyValue.toString();
        sb.append("reduceOnly=").append(urlEncode(reduceOnlyValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object positionSideValue = getPositionSide();
        String positionSideValueAsString = "";
        positionSideValueAsString = positionSideValue.toString();
        sb.append("positionSide=").append(urlEncode(positionSideValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString = timeInForceValue.toString();
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        Object selfTradePreventionModeValue = getSelfTradePreventionMode();
        String selfTradePreventionModeValueAsString = "";
        selfTradePreventionModeValueAsString = selfTradePreventionModeValue.toString();
        sb.append("selfTradePreventionMode=")
                .append(urlEncode(selfTradePreventionModeValueAsString))
                .append("");
        Object goodTillDateValue = getGoodTillDate();
        String goodTillDateValueAsString = "";
        goodTillDateValueAsString = goodTillDateValue.toString();
        sb.append("goodTillDate=").append(urlEncode(goodTillDateValueAsString)).append("");
        Object priceMatchValue = getPriceMatch();
        String priceMatchValueAsString = "";
        priceMatchValueAsString = priceMatchValue.toString();
        sb.append("priceMatch=").append(urlEncode(priceMatchValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("avgPrice");
        openapiFields.add("clientOrderId");
        openapiFields.add("cumQuote");
        openapiFields.add("executedQty");
        openapiFields.add("orderId");
        openapiFields.add("origQty");
        openapiFields.add("origType");
        openapiFields.add("price");
        openapiFields.add("reduceOnly");
        openapiFields.add("side");
        openapiFields.add("positionSide");
        openapiFields.add("status");
        openapiFields.add("symbol");
        openapiFields.add("time");
        openapiFields.add("timeInForce");
        openapiFields.add("type");
        openapiFields.add("updateTime");
        openapiFields.add("selfTradePreventionMode");
        openapiFields.add("goodTillDate");
        openapiFields.add("priceMatch");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryCurrentUmOpenOrderResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryCurrentUmOpenOrderResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in QueryCurrentUmOpenOrderResponse is not"
                                        + " found in the empty JSON string",
                                QueryCurrentUmOpenOrderResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryCurrentUmOpenOrderResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `QueryCurrentUmOpenOrderResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("avgPrice") != null && !jsonObj.get("avgPrice").isJsonNull())
                && !jsonObj.get("avgPrice").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `avgPrice` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("avgPrice").toString()));
        }
        if ((jsonObj.get("clientOrderId") != null && !jsonObj.get("clientOrderId").isJsonNull())
                && !jsonObj.get("clientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `clientOrderId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("clientOrderId").toString()));
        }
        if ((jsonObj.get("cumQuote") != null && !jsonObj.get("cumQuote").isJsonNull())
                && !jsonObj.get("cumQuote").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cumQuote` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("cumQuote").toString()));
        }
        if ((jsonObj.get("executedQty") != null && !jsonObj.get("executedQty").isJsonNull())
                && !jsonObj.get("executedQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedQty").toString()));
        }
        if ((jsonObj.get("origQty") != null && !jsonObj.get("origQty").isJsonNull())
                && !jsonObj.get("origQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("origQty").toString()));
        }
        if ((jsonObj.get("origType") != null && !jsonObj.get("origType").isJsonNull())
                && !jsonObj.get("origType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("origType").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull())
                && !jsonObj.get("positionSide").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `positionSide` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("positionSide").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull())
                && !jsonObj.get("timeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("selfTradePreventionMode") != null
                        && !jsonObj.get("selfTradePreventionMode").isJsonNull())
                && !jsonObj.get("selfTradePreventionMode").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `selfTradePreventionMode` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("selfTradePreventionMode").toString()));
        }
        if ((jsonObj.get("priceMatch") != null && !jsonObj.get("priceMatch").isJsonNull())
                && !jsonObj.get("priceMatch").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceMatch` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("priceMatch").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryCurrentUmOpenOrderResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'QueryCurrentUmOpenOrderResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryCurrentUmOpenOrderResponse> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryCurrentUmOpenOrderResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryCurrentUmOpenOrderResponse>() {
                        @Override
                        public void write(JsonWriter out, QueryCurrentUmOpenOrderResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryCurrentUmOpenOrderResponse read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryCurrentUmOpenOrderResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryCurrentUmOpenOrderResponse
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryCurrentUmOpenOrderResponse
     */
    public static QueryCurrentUmOpenOrderResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, QueryCurrentUmOpenOrderResponse.class);
    }

    /**
     * Convert an instance of QueryCurrentUmOpenOrderResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
