/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** NewCmConditionalOrderRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class NewCmConditionalOrderRequest {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nonnull
    private String symbol;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nonnull
    private Side side;

    public static final String SERIALIZED_NAME_POSITION_SIDE = "positionSide";

    @SerializedName(SERIALIZED_NAME_POSITION_SIDE)
    @jakarta.annotation.Nullable
    private PositionSide positionSide;

    public static final String SERIALIZED_NAME_STRATEGY_TYPE = "strategyType";

    @SerializedName(SERIALIZED_NAME_STRATEGY_TYPE)
    @jakarta.annotation.Nonnull
    private StrategyType strategyType;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private TimeInForce timeInForce;

    public static final String SERIALIZED_NAME_QUANTITY = "quantity";

    @SerializedName(SERIALIZED_NAME_QUANTITY)
    @jakarta.annotation.Nullable
    private Double quantity;

    public static final String SERIALIZED_NAME_REDUCE_ONLY = "reduceOnly";

    @SerializedName(SERIALIZED_NAME_REDUCE_ONLY)
    @jakarta.annotation.Nullable
    private String reduceOnly;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private Double price;

    public static final String SERIALIZED_NAME_WORKING_TYPE = "workingType";

    @SerializedName(SERIALIZED_NAME_WORKING_TYPE)
    @jakarta.annotation.Nullable
    private WorkingType workingType;

    public static final String SERIALIZED_NAME_PRICE_PROTECT = "priceProtect";

    @SerializedName(SERIALIZED_NAME_PRICE_PROTECT)
    @jakarta.annotation.Nullable
    private String priceProtect;

    public static final String SERIALIZED_NAME_NEW_CLIENT_STRATEGY_ID = "newClientStrategyId";

    @SerializedName(SERIALIZED_NAME_NEW_CLIENT_STRATEGY_ID)
    @jakarta.annotation.Nullable
    private String newClientStrategyId;

    public static final String SERIALIZED_NAME_STOP_PRICE = "stopPrice";

    @SerializedName(SERIALIZED_NAME_STOP_PRICE)
    @jakarta.annotation.Nullable
    private Double stopPrice;

    public static final String SERIALIZED_NAME_ACTIVATION_PRICE = "activationPrice";

    @SerializedName(SERIALIZED_NAME_ACTIVATION_PRICE)
    @jakarta.annotation.Nullable
    private Double activationPrice;

    public static final String SERIALIZED_NAME_CALLBACK_RATE = "callbackRate";

    @SerializedName(SERIALIZED_NAME_CALLBACK_RATE)
    @jakarta.annotation.Nullable
    private Double callbackRate;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public NewCmConditionalOrderRequest() {}

    public NewCmConditionalOrderRequest symbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nonnull String symbol) {
        this.symbol = symbol;
    }

    public NewCmConditionalOrderRequest side(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public Side getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nonnull Side side) {
        this.side = side;
    }

    public NewCmConditionalOrderRequest positionSide(
            @jakarta.annotation.Nullable PositionSide positionSide) {
        this.positionSide = positionSide;
        return this;
    }

    /**
     * Get positionSide
     *
     * @return positionSide
     */
    @jakarta.annotation.Nullable
    @Valid
    public PositionSide getPositionSide() {
        return positionSide;
    }

    public void setPositionSide(@jakarta.annotation.Nullable PositionSide positionSide) {
        this.positionSide = positionSide;
    }

    public NewCmConditionalOrderRequest strategyType(
            @jakarta.annotation.Nonnull StrategyType strategyType) {
        this.strategyType = strategyType;
        return this;
    }

    /**
     * Get strategyType
     *
     * @return strategyType
     */
    @jakarta.annotation.Nonnull
    @NotNull
    @Valid
    public StrategyType getStrategyType() {
        return strategyType;
    }

    public void setStrategyType(@jakarta.annotation.Nonnull StrategyType strategyType) {
        this.strategyType = strategyType;
    }

    public NewCmConditionalOrderRequest timeInForce(
            @jakarta.annotation.Nullable TimeInForce timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    @Valid
    public TimeInForce getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable TimeInForce timeInForce) {
        this.timeInForce = timeInForce;
    }

    public NewCmConditionalOrderRequest quantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
        return this;
    }

    /**
     * Get quantity
     *
     * @return quantity
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getQuantity() {
        return quantity;
    }

    public void setQuantity(@jakarta.annotation.Nullable Double quantity) {
        this.quantity = quantity;
    }

    public NewCmConditionalOrderRequest reduceOnly(@jakarta.annotation.Nullable String reduceOnly) {
        this.reduceOnly = reduceOnly;
        return this;
    }

    /**
     * Get reduceOnly
     *
     * @return reduceOnly
     */
    @jakarta.annotation.Nullable
    public String getReduceOnly() {
        return reduceOnly;
    }

    public void setReduceOnly(@jakarta.annotation.Nullable String reduceOnly) {
        this.reduceOnly = reduceOnly;
    }

    public NewCmConditionalOrderRequest price(@jakarta.annotation.Nullable Double price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable Double price) {
        this.price = price;
    }

    public NewCmConditionalOrderRequest workingType(
            @jakarta.annotation.Nullable WorkingType workingType) {
        this.workingType = workingType;
        return this;
    }

    /**
     * Get workingType
     *
     * @return workingType
     */
    @jakarta.annotation.Nullable
    @Valid
    public WorkingType getWorkingType() {
        return workingType;
    }

    public void setWorkingType(@jakarta.annotation.Nullable WorkingType workingType) {
        this.workingType = workingType;
    }

    public NewCmConditionalOrderRequest priceProtect(
            @jakarta.annotation.Nullable String priceProtect) {
        this.priceProtect = priceProtect;
        return this;
    }

    /**
     * Get priceProtect
     *
     * @return priceProtect
     */
    @jakarta.annotation.Nullable
    public String getPriceProtect() {
        return priceProtect;
    }

    public void setPriceProtect(@jakarta.annotation.Nullable String priceProtect) {
        this.priceProtect = priceProtect;
    }

    public NewCmConditionalOrderRequest newClientStrategyId(
            @jakarta.annotation.Nullable String newClientStrategyId) {
        this.newClientStrategyId = newClientStrategyId;
        return this;
    }

    /**
     * Get newClientStrategyId
     *
     * @return newClientStrategyId
     */
    @jakarta.annotation.Nullable
    public String getNewClientStrategyId() {
        return newClientStrategyId;
    }

    public void setNewClientStrategyId(@jakarta.annotation.Nullable String newClientStrategyId) {
        this.newClientStrategyId = newClientStrategyId;
    }

    public NewCmConditionalOrderRequest stopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
        return this;
    }

    /**
     * Get stopPrice
     *
     * @return stopPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getStopPrice() {
        return stopPrice;
    }

    public void setStopPrice(@jakarta.annotation.Nullable Double stopPrice) {
        this.stopPrice = stopPrice;
    }

    public NewCmConditionalOrderRequest activationPrice(
            @jakarta.annotation.Nullable Double activationPrice) {
        this.activationPrice = activationPrice;
        return this;
    }

    /**
     * Get activationPrice
     *
     * @return activationPrice
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getActivationPrice() {
        return activationPrice;
    }

    public void setActivationPrice(@jakarta.annotation.Nullable Double activationPrice) {
        this.activationPrice = activationPrice;
    }

    public NewCmConditionalOrderRequest callbackRate(
            @jakarta.annotation.Nullable Double callbackRate) {
        this.callbackRate = callbackRate;
        return this;
    }

    /**
     * Get callbackRate
     *
     * @return callbackRate
     */
    @jakarta.annotation.Nullable
    @Valid
    public Double getCallbackRate() {
        return callbackRate;
    }

    public void setCallbackRate(@jakarta.annotation.Nullable Double callbackRate) {
        this.callbackRate = callbackRate;
    }

    public NewCmConditionalOrderRequest recvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        NewCmConditionalOrderRequest newCmConditionalOrderRequest =
                (NewCmConditionalOrderRequest) o;
        return Objects.equals(this.symbol, newCmConditionalOrderRequest.symbol)
                && Objects.equals(this.side, newCmConditionalOrderRequest.side)
                && Objects.equals(this.positionSide, newCmConditionalOrderRequest.positionSide)
                && Objects.equals(this.strategyType, newCmConditionalOrderRequest.strategyType)
                && Objects.equals(this.timeInForce, newCmConditionalOrderRequest.timeInForce)
                && Objects.equals(this.quantity, newCmConditionalOrderRequest.quantity)
                && Objects.equals(this.reduceOnly, newCmConditionalOrderRequest.reduceOnly)
                && Objects.equals(this.price, newCmConditionalOrderRequest.price)
                && Objects.equals(this.workingType, newCmConditionalOrderRequest.workingType)
                && Objects.equals(this.priceProtect, newCmConditionalOrderRequest.priceProtect)
                && Objects.equals(
                        this.newClientStrategyId, newCmConditionalOrderRequest.newClientStrategyId)
                && Objects.equals(this.stopPrice, newCmConditionalOrderRequest.stopPrice)
                && Objects.equals(
                        this.activationPrice, newCmConditionalOrderRequest.activationPrice)
                && Objects.equals(this.callbackRate, newCmConditionalOrderRequest.callbackRate)
                && Objects.equals(this.recvWindow, newCmConditionalOrderRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                side,
                positionSide,
                strategyType,
                timeInForce,
                quantity,
                reduceOnly,
                price,
                workingType,
                priceProtect,
                newClientStrategyId,
                stopPrice,
                activationPrice,
                callbackRate,
                recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class NewCmConditionalOrderRequest {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		positionSide: ").append(toIndentedString(positionSide)).append("\n");
        sb.append("		strategyType: ").append(toIndentedString(strategyType)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		quantity: ").append(toIndentedString(quantity)).append("\n");
        sb.append("		reduceOnly: ").append(toIndentedString(reduceOnly)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		workingType: ").append(toIndentedString(workingType)).append("\n");
        sb.append("		priceProtect: ").append(toIndentedString(priceProtect)).append("\n");
        sb.append("		newClientStrategyId: ")
                .append(toIndentedString(newClientStrategyId))
                .append("\n");
        sb.append("		stopPrice: ").append(toIndentedString(stopPrice)).append("\n");
        sb.append("		activationPrice: ").append(toIndentedString(activationPrice)).append("\n");
        sb.append("		callbackRate: ").append(toIndentedString(callbackRate)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object positionSideValue = getPositionSide();
        String positionSideValueAsString = "";
        positionSideValueAsString = positionSideValue.toString();
        sb.append("positionSide=").append(urlEncode(positionSideValueAsString)).append("");
        Object strategyTypeValue = getStrategyType();
        String strategyTypeValueAsString = "";
        strategyTypeValueAsString = strategyTypeValue.toString();
        sb.append("strategyType=").append(urlEncode(strategyTypeValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString = timeInForceValue.toString();
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object quantityValue = getQuantity();
        String quantityValueAsString = "";
        quantityValueAsString = quantityValue.toString();
        sb.append("quantity=").append(urlEncode(quantityValueAsString)).append("");
        Object reduceOnlyValue = getReduceOnly();
        String reduceOnlyValueAsString = "";
        reduceOnlyValueAsString = reduceOnlyValue.toString();
        sb.append("reduceOnly=").append(urlEncode(reduceOnlyValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object workingTypeValue = getWorkingType();
        String workingTypeValueAsString = "";
        workingTypeValueAsString = workingTypeValue.toString();
        sb.append("workingType=").append(urlEncode(workingTypeValueAsString)).append("");
        Object priceProtectValue = getPriceProtect();
        String priceProtectValueAsString = "";
        priceProtectValueAsString = priceProtectValue.toString();
        sb.append("priceProtect=").append(urlEncode(priceProtectValueAsString)).append("");
        Object newClientStrategyIdValue = getNewClientStrategyId();
        String newClientStrategyIdValueAsString = "";
        newClientStrategyIdValueAsString = newClientStrategyIdValue.toString();
        sb.append("newClientStrategyId=")
                .append(urlEncode(newClientStrategyIdValueAsString))
                .append("");
        Object stopPriceValue = getStopPrice();
        String stopPriceValueAsString = "";
        stopPriceValueAsString = stopPriceValue.toString();
        sb.append("stopPrice=").append(urlEncode(stopPriceValueAsString)).append("");
        Object activationPriceValue = getActivationPrice();
        String activationPriceValueAsString = "";
        activationPriceValueAsString = activationPriceValue.toString();
        sb.append("activationPrice=").append(urlEncode(activationPriceValueAsString)).append("");
        Object callbackRateValue = getCallbackRate();
        String callbackRateValueAsString = "";
        callbackRateValueAsString = callbackRateValue.toString();
        sb.append("callbackRate=").append(urlEncode(callbackRateValueAsString)).append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("side");
        openapiFields.add("positionSide");
        openapiFields.add("strategyType");
        openapiFields.add("timeInForce");
        openapiFields.add("quantity");
        openapiFields.add("reduceOnly");
        openapiFields.add("price");
        openapiFields.add("workingType");
        openapiFields.add("priceProtect");
        openapiFields.add("newClientStrategyId");
        openapiFields.add("stopPrice");
        openapiFields.add("activationPrice");
        openapiFields.add("callbackRate");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("symbol");
        openapiRequiredFields.add("side");
        openapiRequiredFields.add("strategyType");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     NewCmConditionalOrderRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!NewCmConditionalOrderRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in NewCmConditionalOrderRequest is not"
                                        + " found in the empty JSON string",
                                NewCmConditionalOrderRequest.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!NewCmConditionalOrderRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `NewCmConditionalOrderRequest` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : NewCmConditionalOrderRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        // validate the required field `side`
        Side.validateJsonElement(jsonObj.get("side"));
        // validate the optional field `positionSide`
        if (jsonObj.get("positionSide") != null && !jsonObj.get("positionSide").isJsonNull()) {
            PositionSide.validateJsonElement(jsonObj.get("positionSide"));
        }
        // validate the required field `strategyType`
        StrategyType.validateJsonElement(jsonObj.get("strategyType"));
        // validate the optional field `timeInForce`
        if (jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull()) {
            TimeInForce.validateJsonElement(jsonObj.get("timeInForce"));
        }
        if ((jsonObj.get("reduceOnly") != null && !jsonObj.get("reduceOnly").isJsonNull())
                && !jsonObj.get("reduceOnly").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `reduceOnly` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("reduceOnly").toString()));
        }
        // validate the optional field `workingType`
        if (jsonObj.get("workingType") != null && !jsonObj.get("workingType").isJsonNull()) {
            WorkingType.validateJsonElement(jsonObj.get("workingType"));
        }
        if ((jsonObj.get("priceProtect") != null && !jsonObj.get("priceProtect").isJsonNull())
                && !jsonObj.get("priceProtect").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `priceProtect` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("priceProtect").toString()));
        }
        if ((jsonObj.get("newClientStrategyId") != null
                        && !jsonObj.get("newClientStrategyId").isJsonNull())
                && !jsonObj.get("newClientStrategyId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `newClientStrategyId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("newClientStrategyId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!NewCmConditionalOrderRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'NewCmConditionalOrderRequest' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<NewCmConditionalOrderRequest> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(NewCmConditionalOrderRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<NewCmConditionalOrderRequest>() {
                        @Override
                        public void write(JsonWriter out, NewCmConditionalOrderRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public NewCmConditionalOrderRequest read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of NewCmConditionalOrderRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of NewCmConditionalOrderRequest
     * @throws IOException if the JSON string is invalid with respect to
     *     NewCmConditionalOrderRequest
     */
    public static NewCmConditionalOrderRequest fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, NewCmConditionalOrderRequest.class);
    }

    /**
     * Convert an instance of NewCmConditionalOrderRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
