/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import org.hibernate.validator.constraints.*;

/** CancelMarginAccountAllOpenOrdersOnASymbolResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class CancelMarginAccountAllOpenOrdersOnASymbolResponseInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_ORIG_CLIENT_ORDER_ID = "origClientOrderId";

    @SerializedName(SERIALIZED_NAME_ORIG_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String origClientOrderId;

    public static final String SERIALIZED_NAME_ORDER_ID = "orderId";

    @SerializedName(SERIALIZED_NAME_ORDER_ID)
    @jakarta.annotation.Nullable
    private Long orderId;

    public static final String SERIALIZED_NAME_ORDER_LIST_ID = "orderListId";

    @SerializedName(SERIALIZED_NAME_ORDER_LIST_ID)
    @jakarta.annotation.Nullable
    private Long orderListId;

    public static final String SERIALIZED_NAME_CLIENT_ORDER_ID = "clientOrderId";

    @SerializedName(SERIALIZED_NAME_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String clientOrderId;

    public static final String SERIALIZED_NAME_PRICE = "price";

    @SerializedName(SERIALIZED_NAME_PRICE)
    @jakarta.annotation.Nullable
    private String price;

    public static final String SERIALIZED_NAME_ORIG_QTY = "origQty";

    @SerializedName(SERIALIZED_NAME_ORIG_QTY)
    @jakarta.annotation.Nullable
    private String origQty;

    public static final String SERIALIZED_NAME_EXECUTED_QTY = "executedQty";

    @SerializedName(SERIALIZED_NAME_EXECUTED_QTY)
    @jakarta.annotation.Nullable
    private String executedQty;

    public static final String SERIALIZED_NAME_CUMMULATIVE_QUOTE_QTY = "cummulativeQuoteQty";

    @SerializedName(SERIALIZED_NAME_CUMMULATIVE_QUOTE_QTY)
    @jakarta.annotation.Nullable
    private String cummulativeQuoteQty;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public static final String SERIALIZED_NAME_TIME_IN_FORCE = "timeInForce";

    @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
    @jakarta.annotation.Nullable
    private String timeInForce;

    public static final String SERIALIZED_NAME_TYPE = "type";

    @SerializedName(SERIALIZED_NAME_TYPE)
    @jakarta.annotation.Nullable
    private String type;

    public static final String SERIALIZED_NAME_SIDE = "side";

    @SerializedName(SERIALIZED_NAME_SIDE)
    @jakarta.annotation.Nullable
    private String side;

    public static final String SERIALIZED_NAME_CONTINGENCY_TYPE = "contingencyType";

    @SerializedName(SERIALIZED_NAME_CONTINGENCY_TYPE)
    @jakarta.annotation.Nullable
    private String contingencyType;

    public static final String SERIALIZED_NAME_LIST_STATUS_TYPE = "listStatusType";

    @SerializedName(SERIALIZED_NAME_LIST_STATUS_TYPE)
    @jakarta.annotation.Nullable
    private String listStatusType;

    public static final String SERIALIZED_NAME_LIST_ORDER_STATUS = "listOrderStatus";

    @SerializedName(SERIALIZED_NAME_LIST_ORDER_STATUS)
    @jakarta.annotation.Nullable
    private String listOrderStatus;

    public static final String SERIALIZED_NAME_LIST_CLIENT_ORDER_ID = "listClientOrderId";

    @SerializedName(SERIALIZED_NAME_LIST_CLIENT_ORDER_ID)
    @jakarta.annotation.Nullable
    private String listClientOrderId;

    public static final String SERIALIZED_NAME_TRANSACTION_TIME = "transactionTime";

    @SerializedName(SERIALIZED_NAME_TRANSACTION_TIME)
    @jakarta.annotation.Nullable
    private Long transactionTime;

    public static final String SERIALIZED_NAME_ORDERS = "orders";

    @SerializedName(SERIALIZED_NAME_ORDERS)
    @jakarta.annotation.Nullable
    private List<@Valid CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrdersInner> orders;

    public static final String SERIALIZED_NAME_ORDER_REPORTS = "orderReports";

    @SerializedName(SERIALIZED_NAME_ORDER_REPORTS)
    @jakarta.annotation.Nullable
    private List<@Valid CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrderReportsInner>
            orderReports;

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner() {}

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner symbol(
            @jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner origClientOrderId(
            @jakarta.annotation.Nullable String origClientOrderId) {
        this.origClientOrderId = origClientOrderId;
        return this;
    }

    /**
     * Get origClientOrderId
     *
     * @return origClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getOrigClientOrderId() {
        return origClientOrderId;
    }

    public void setOrigClientOrderId(@jakarta.annotation.Nullable String origClientOrderId) {
        this.origClientOrderId = origClientOrderId;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner orderId(
            @jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
        return this;
    }

    /**
     * Get orderId
     *
     * @return orderId
     */
    @jakarta.annotation.Nullable
    public Long getOrderId() {
        return orderId;
    }

    public void setOrderId(@jakarta.annotation.Nullable Long orderId) {
        this.orderId = orderId;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner orderListId(
            @jakarta.annotation.Nullable Long orderListId) {
        this.orderListId = orderListId;
        return this;
    }

    /**
     * Get orderListId
     *
     * @return orderListId
     */
    @jakarta.annotation.Nullable
    public Long getOrderListId() {
        return orderListId;
    }

    public void setOrderListId(@jakarta.annotation.Nullable Long orderListId) {
        this.orderListId = orderListId;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner clientOrderId(
            @jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
        return this;
    }

    /**
     * Get clientOrderId
     *
     * @return clientOrderId
     */
    @jakarta.annotation.Nullable
    public String getClientOrderId() {
        return clientOrderId;
    }

    public void setClientOrderId(@jakarta.annotation.Nullable String clientOrderId) {
        this.clientOrderId = clientOrderId;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner price(
            @jakarta.annotation.Nullable String price) {
        this.price = price;
        return this;
    }

    /**
     * Get price
     *
     * @return price
     */
    @jakarta.annotation.Nullable
    public String getPrice() {
        return price;
    }

    public void setPrice(@jakarta.annotation.Nullable String price) {
        this.price = price;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner origQty(
            @jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
        return this;
    }

    /**
     * Get origQty
     *
     * @return origQty
     */
    @jakarta.annotation.Nullable
    public String getOrigQty() {
        return origQty;
    }

    public void setOrigQty(@jakarta.annotation.Nullable String origQty) {
        this.origQty = origQty;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner executedQty(
            @jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
        return this;
    }

    /**
     * Get executedQty
     *
     * @return executedQty
     */
    @jakarta.annotation.Nullable
    public String getExecutedQty() {
        return executedQty;
    }

    public void setExecutedQty(@jakarta.annotation.Nullable String executedQty) {
        this.executedQty = executedQty;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner cummulativeQuoteQty(
            @jakarta.annotation.Nullable String cummulativeQuoteQty) {
        this.cummulativeQuoteQty = cummulativeQuoteQty;
        return this;
    }

    /**
     * Get cummulativeQuoteQty
     *
     * @return cummulativeQuoteQty
     */
    @jakarta.annotation.Nullable
    public String getCummulativeQuoteQty() {
        return cummulativeQuoteQty;
    }

    public void setCummulativeQuoteQty(@jakarta.annotation.Nullable String cummulativeQuoteQty) {
        this.cummulativeQuoteQty = cummulativeQuoteQty;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner timeInForce(
            @jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
        return this;
    }

    /**
     * Get timeInForce
     *
     * @return timeInForce
     */
    @jakarta.annotation.Nullable
    public String getTimeInForce() {
        return timeInForce;
    }

    public void setTimeInForce(@jakarta.annotation.Nullable String timeInForce) {
        this.timeInForce = timeInForce;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner type(
            @jakarta.annotation.Nullable String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     *
     * @return type
     */
    @jakarta.annotation.Nullable
    public String getType() {
        return type;
    }

    public void setType(@jakarta.annotation.Nullable String type) {
        this.type = type;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner side(
            @jakarta.annotation.Nullable String side) {
        this.side = side;
        return this;
    }

    /**
     * Get side
     *
     * @return side
     */
    @jakarta.annotation.Nullable
    public String getSide() {
        return side;
    }

    public void setSide(@jakarta.annotation.Nullable String side) {
        this.side = side;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner contingencyType(
            @jakarta.annotation.Nullable String contingencyType) {
        this.contingencyType = contingencyType;
        return this;
    }

    /**
     * Get contingencyType
     *
     * @return contingencyType
     */
    @jakarta.annotation.Nullable
    public String getContingencyType() {
        return contingencyType;
    }

    public void setContingencyType(@jakarta.annotation.Nullable String contingencyType) {
        this.contingencyType = contingencyType;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner listStatusType(
            @jakarta.annotation.Nullable String listStatusType) {
        this.listStatusType = listStatusType;
        return this;
    }

    /**
     * Get listStatusType
     *
     * @return listStatusType
     */
    @jakarta.annotation.Nullable
    public String getListStatusType() {
        return listStatusType;
    }

    public void setListStatusType(@jakarta.annotation.Nullable String listStatusType) {
        this.listStatusType = listStatusType;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner listOrderStatus(
            @jakarta.annotation.Nullable String listOrderStatus) {
        this.listOrderStatus = listOrderStatus;
        return this;
    }

    /**
     * Get listOrderStatus
     *
     * @return listOrderStatus
     */
    @jakarta.annotation.Nullable
    public String getListOrderStatus() {
        return listOrderStatus;
    }

    public void setListOrderStatus(@jakarta.annotation.Nullable String listOrderStatus) {
        this.listOrderStatus = listOrderStatus;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner listClientOrderId(
            @jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
        return this;
    }

    /**
     * Get listClientOrderId
     *
     * @return listClientOrderId
     */
    @jakarta.annotation.Nullable
    public String getListClientOrderId() {
        return listClientOrderId;
    }

    public void setListClientOrderId(@jakarta.annotation.Nullable String listClientOrderId) {
        this.listClientOrderId = listClientOrderId;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner transactionTime(
            @jakarta.annotation.Nullable Long transactionTime) {
        this.transactionTime = transactionTime;
        return this;
    }

    /**
     * Get transactionTime
     *
     * @return transactionTime
     */
    @jakarta.annotation.Nullable
    public Long getTransactionTime() {
        return transactionTime;
    }

    public void setTransactionTime(@jakarta.annotation.Nullable Long transactionTime) {
        this.transactionTime = transactionTime;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner orders(
            @jakarta.annotation.Nullable
                    List<@Valid CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrdersInner>
                            orders) {
        this.orders = orders;
        return this;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner addOrdersItem(
            CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrdersInner ordersItem) {
        if (this.orders == null) {
            this.orders = new ArrayList<>();
        }
        this.orders.add(ordersItem);
        return this;
    }

    /**
     * Get orders
     *
     * @return orders
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrdersInner>
            getOrders() {
        return orders;
    }

    public void setOrders(
            @jakarta.annotation.Nullable
                    List<@Valid CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrdersInner>
                            orders) {
        this.orders = orders;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner orderReports(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrderReportsInner>
                            orderReports) {
        this.orderReports = orderReports;
        return this;
    }

    public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner addOrderReportsItem(
            CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrderReportsInner
                    orderReportsItem) {
        if (this.orderReports == null) {
            this.orderReports = new ArrayList<>();
        }
        this.orderReports.add(orderReportsItem);
        return this;
    }

    /**
     * Get orderReports
     *
     * @return orderReports
     */
    @jakarta.annotation.Nullable
    @Valid
    public List<@Valid CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrderReportsInner>
            getOrderReports() {
        return orderReports;
    }

    public void setOrderReports(
            @jakarta.annotation.Nullable
                    List<
                                    @Valid
                                    CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrderReportsInner>
                            orderReports) {
        this.orderReports = orderReports;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CancelMarginAccountAllOpenOrdersOnASymbolResponseInner
                cancelMarginAccountAllOpenOrdersOnASymbolResponseInner =
                        (CancelMarginAccountAllOpenOrdersOnASymbolResponseInner) o;
        return Objects.equals(
                        this.symbol, cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.symbol)
                && Objects.equals(
                        this.origClientOrderId,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.origClientOrderId)
                && Objects.equals(
                        this.orderId,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.orderId)
                && Objects.equals(
                        this.orderListId,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.orderListId)
                && Objects.equals(
                        this.clientOrderId,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.clientOrderId)
                && Objects.equals(
                        this.price, cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.price)
                && Objects.equals(
                        this.origQty,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.origQty)
                && Objects.equals(
                        this.executedQty,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.executedQty)
                && Objects.equals(
                        this.cummulativeQuoteQty,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.cummulativeQuoteQty)
                && Objects.equals(
                        this.status, cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.status)
                && Objects.equals(
                        this.timeInForce,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.timeInForce)
                && Objects.equals(
                        this.type, cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.type)
                && Objects.equals(
                        this.side, cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.side)
                && Objects.equals(
                        this.contingencyType,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.contingencyType)
                && Objects.equals(
                        this.listStatusType,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.listStatusType)
                && Objects.equals(
                        this.listOrderStatus,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.listOrderStatus)
                && Objects.equals(
                        this.listClientOrderId,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.listClientOrderId)
                && Objects.equals(
                        this.transactionTime,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.transactionTime)
                && Objects.equals(
                        this.orders, cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.orders)
                && Objects.equals(
                        this.orderReports,
                        cancelMarginAccountAllOpenOrdersOnASymbolResponseInner.orderReports);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                symbol,
                origClientOrderId,
                orderId,
                orderListId,
                clientOrderId,
                price,
                origQty,
                executedQty,
                cummulativeQuoteQty,
                status,
                timeInForce,
                type,
                side,
                contingencyType,
                listStatusType,
                listOrderStatus,
                listClientOrderId,
                transactionTime,
                orders,
                orderReports);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class CancelMarginAccountAllOpenOrdersOnASymbolResponseInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		origClientOrderId: ").append(toIndentedString(origClientOrderId)).append("\n");
        sb.append("		orderId: ").append(toIndentedString(orderId)).append("\n");
        sb.append("		orderListId: ").append(toIndentedString(orderListId)).append("\n");
        sb.append("		clientOrderId: ").append(toIndentedString(clientOrderId)).append("\n");
        sb.append("		price: ").append(toIndentedString(price)).append("\n");
        sb.append("		origQty: ").append(toIndentedString(origQty)).append("\n");
        sb.append("		executedQty: ").append(toIndentedString(executedQty)).append("\n");
        sb.append("		cummulativeQuoteQty: ")
                .append(toIndentedString(cummulativeQuoteQty))
                .append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("		timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
        sb.append("		type: ").append(toIndentedString(type)).append("\n");
        sb.append("		side: ").append(toIndentedString(side)).append("\n");
        sb.append("		contingencyType: ").append(toIndentedString(contingencyType)).append("\n");
        sb.append("		listStatusType: ").append(toIndentedString(listStatusType)).append("\n");
        sb.append("		listOrderStatus: ").append(toIndentedString(listOrderStatus)).append("\n");
        sb.append("		listClientOrderId: ").append(toIndentedString(listClientOrderId)).append("\n");
        sb.append("		transactionTime: ").append(toIndentedString(transactionTime)).append("\n");
        sb.append("		orders: ").append(toIndentedString(orders)).append("\n");
        sb.append("		orderReports: ").append(toIndentedString(orderReports)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object origClientOrderIdValue = getOrigClientOrderId();
        String origClientOrderIdValueAsString = "";
        origClientOrderIdValueAsString = origClientOrderIdValue.toString();
        sb.append("origClientOrderId=")
                .append(urlEncode(origClientOrderIdValueAsString))
                .append("");
        Object orderIdValue = getOrderId();
        String orderIdValueAsString = "";
        orderIdValueAsString = orderIdValue.toString();
        sb.append("orderId=").append(urlEncode(orderIdValueAsString)).append("");
        Object orderListIdValue = getOrderListId();
        String orderListIdValueAsString = "";
        orderListIdValueAsString = orderListIdValue.toString();
        sb.append("orderListId=").append(urlEncode(orderListIdValueAsString)).append("");
        Object clientOrderIdValue = getClientOrderId();
        String clientOrderIdValueAsString = "";
        clientOrderIdValueAsString = clientOrderIdValue.toString();
        sb.append("clientOrderId=").append(urlEncode(clientOrderIdValueAsString)).append("");
        Object priceValue = getPrice();
        String priceValueAsString = "";
        priceValueAsString = priceValue.toString();
        sb.append("price=").append(urlEncode(priceValueAsString)).append("");
        Object origQtyValue = getOrigQty();
        String origQtyValueAsString = "";
        origQtyValueAsString = origQtyValue.toString();
        sb.append("origQty=").append(urlEncode(origQtyValueAsString)).append("");
        Object executedQtyValue = getExecutedQty();
        String executedQtyValueAsString = "";
        executedQtyValueAsString = executedQtyValue.toString();
        sb.append("executedQty=").append(urlEncode(executedQtyValueAsString)).append("");
        Object cummulativeQuoteQtyValue = getCummulativeQuoteQty();
        String cummulativeQuoteQtyValueAsString = "";
        cummulativeQuoteQtyValueAsString = cummulativeQuoteQtyValue.toString();
        sb.append("cummulativeQuoteQty=")
                .append(urlEncode(cummulativeQuoteQtyValueAsString))
                .append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        Object timeInForceValue = getTimeInForce();
        String timeInForceValueAsString = "";
        timeInForceValueAsString = timeInForceValue.toString();
        sb.append("timeInForce=").append(urlEncode(timeInForceValueAsString)).append("");
        Object typeValue = getType();
        String typeValueAsString = "";
        typeValueAsString = typeValue.toString();
        sb.append("type=").append(urlEncode(typeValueAsString)).append("");
        Object sideValue = getSide();
        String sideValueAsString = "";
        sideValueAsString = sideValue.toString();
        sb.append("side=").append(urlEncode(sideValueAsString)).append("");
        Object contingencyTypeValue = getContingencyType();
        String contingencyTypeValueAsString = "";
        contingencyTypeValueAsString = contingencyTypeValue.toString();
        sb.append("contingencyType=").append(urlEncode(contingencyTypeValueAsString)).append("");
        Object listStatusTypeValue = getListStatusType();
        String listStatusTypeValueAsString = "";
        listStatusTypeValueAsString = listStatusTypeValue.toString();
        sb.append("listStatusType=").append(urlEncode(listStatusTypeValueAsString)).append("");
        Object listOrderStatusValue = getListOrderStatus();
        String listOrderStatusValueAsString = "";
        listOrderStatusValueAsString = listOrderStatusValue.toString();
        sb.append("listOrderStatus=").append(urlEncode(listOrderStatusValueAsString)).append("");
        Object listClientOrderIdValue = getListClientOrderId();
        String listClientOrderIdValueAsString = "";
        listClientOrderIdValueAsString = listClientOrderIdValue.toString();
        sb.append("listClientOrderId=")
                .append(urlEncode(listClientOrderIdValueAsString))
                .append("");
        Object transactionTimeValue = getTransactionTime();
        String transactionTimeValueAsString = "";
        transactionTimeValueAsString = transactionTimeValue.toString();
        sb.append("transactionTime=").append(urlEncode(transactionTimeValueAsString)).append("");
        Object ordersValue = getOrders();
        String ordersValueAsString = "";
        ordersValueAsString =
                (String)
                        ((Collection) ordersValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("orders=").append(urlEncode(ordersValueAsString)).append("");
        Object orderReportsValue = getOrderReports();
        String orderReportsValueAsString = "";
        orderReportsValueAsString =
                (String)
                        ((Collection) orderReportsValue)
                                .stream().map(Object::toString).collect(Collectors.joining(","));
        sb.append("orderReports=").append(urlEncode(orderReportsValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("origClientOrderId");
        openapiFields.add("orderId");
        openapiFields.add("orderListId");
        openapiFields.add("clientOrderId");
        openapiFields.add("price");
        openapiFields.add("origQty");
        openapiFields.add("executedQty");
        openapiFields.add("cummulativeQuoteQty");
        openapiFields.add("status");
        openapiFields.add("timeInForce");
        openapiFields.add("type");
        openapiFields.add("side");
        openapiFields.add("contingencyType");
        openapiFields.add("listStatusType");
        openapiFields.add("listOrderStatus");
        openapiFields.add("listClientOrderId");
        openapiFields.add("transactionTime");
        openapiFields.add("orders");
        openapiFields.add("orderReports");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     CancelMarginAccountAllOpenOrdersOnASymbolResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!CancelMarginAccountAllOpenOrdersOnASymbolResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in"
                                    + " CancelMarginAccountAllOpenOrdersOnASymbolResponseInner is"
                                    + " not found in the empty JSON string",
                                CancelMarginAccountAllOpenOrdersOnASymbolResponseInner
                                        .openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!CancelMarginAccountAllOpenOrdersOnASymbolResponseInner.openapiFields.contains(
                    entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `CancelMarginAccountAllOpenOrdersOnASymbolResponseInner`"
                                    + " properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("origClientOrderId") != null
                        && !jsonObj.get("origClientOrderId").isJsonNull())
                && !jsonObj.get("origClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("origClientOrderId").toString()));
        }
        if ((jsonObj.get("clientOrderId") != null && !jsonObj.get("clientOrderId").isJsonNull())
                && !jsonObj.get("clientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `clientOrderId` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("clientOrderId").toString()));
        }
        if ((jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull())
                && !jsonObj.get("price").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `price` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("price").toString()));
        }
        if ((jsonObj.get("origQty") != null && !jsonObj.get("origQty").isJsonNull())
                && !jsonObj.get("origQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `origQty` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("origQty").toString()));
        }
        if ((jsonObj.get("executedQty") != null && !jsonObj.get("executedQty").isJsonNull())
                && !jsonObj.get("executedQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `executedQty` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("executedQty").toString()));
        }
        if ((jsonObj.get("cummulativeQuoteQty") != null
                        && !jsonObj.get("cummulativeQuoteQty").isJsonNull())
                && !jsonObj.get("cummulativeQuoteQty").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cummulativeQuoteQty` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("cummulativeQuoteQty").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
        if ((jsonObj.get("timeInForce") != null && !jsonObj.get("timeInForce").isJsonNull())
                && !jsonObj.get("timeInForce").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `timeInForce` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("timeInForce").toString()));
        }
        if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull())
                && !jsonObj.get("type").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `type` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("type").toString()));
        }
        if ((jsonObj.get("side") != null && !jsonObj.get("side").isJsonNull())
                && !jsonObj.get("side").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `side` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("side").toString()));
        }
        if ((jsonObj.get("contingencyType") != null && !jsonObj.get("contingencyType").isJsonNull())
                && !jsonObj.get("contingencyType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `contingencyType` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("contingencyType").toString()));
        }
        if ((jsonObj.get("listStatusType") != null && !jsonObj.get("listStatusType").isJsonNull())
                && !jsonObj.get("listStatusType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listStatusType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("listStatusType").toString()));
        }
        if ((jsonObj.get("listOrderStatus") != null && !jsonObj.get("listOrderStatus").isJsonNull())
                && !jsonObj.get("listOrderStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listOrderStatus` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listOrderStatus").toString()));
        }
        if ((jsonObj.get("listClientOrderId") != null
                        && !jsonObj.get("listClientOrderId").isJsonNull())
                && !jsonObj.get("listClientOrderId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `listClientOrderId` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("listClientOrderId").toString()));
        }
        if (jsonObj.get("orders") != null && !jsonObj.get("orders").isJsonNull()) {
            JsonArray jsonArrayorders = jsonObj.getAsJsonArray("orders");
            if (jsonArrayorders != null) {
                // ensure the json data is an array
                if (!jsonObj.get("orders").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `orders` to be an array in the JSON string"
                                            + " but got `%s`",
                                    jsonObj.get("orders").toString()));
                }

                // validate the optional field `orders` (array)
                for (int i = 0; i < jsonArrayorders.size(); i++) {
                    CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrdersInner
                            .validateJsonElement(jsonArrayorders.get(i));
                }
                ;
            }
        }
        if (jsonObj.get("orderReports") != null && !jsonObj.get("orderReports").isJsonNull()) {
            JsonArray jsonArrayorderReports = jsonObj.getAsJsonArray("orderReports");
            if (jsonArrayorderReports != null) {
                // ensure the json data is an array
                if (!jsonObj.get("orderReports").isJsonArray()) {
                    throw new IllegalArgumentException(
                            String.format(
                                    "Expected the field `orderReports` to be an array in the JSON"
                                            + " string but got `%s`",
                                    jsonObj.get("orderReports").toString()));
                }

                // validate the optional field `orderReports` (array)
                for (int i = 0; i < jsonArrayorderReports.size(); i++) {
                    CancelMarginAccountAllOpenOrdersOnASymbolResponseInnerOrderReportsInner
                            .validateJsonElement(jsonArrayorderReports.get(i));
                }
                ;
            }
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!CancelMarginAccountAllOpenOrdersOnASymbolResponseInner.class.isAssignableFrom(
                    type.getRawType())) {
                return null; // this class only serializes
                // 'CancelMarginAccountAllOpenOrdersOnASymbolResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CancelMarginAccountAllOpenOrdersOnASymbolResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this,
                            TypeToken.get(
                                    CancelMarginAccountAllOpenOrdersOnASymbolResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<CancelMarginAccountAllOpenOrdersOnASymbolResponseInner>() {
                        @Override
                        public void write(
                                JsonWriter out,
                                CancelMarginAccountAllOpenOrdersOnASymbolResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public CancelMarginAccountAllOpenOrdersOnASymbolResponseInner read(
                                JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of CancelMarginAccountAllOpenOrdersOnASymbolResponseInner given an JSON
     * string
     *
     * @param jsonString JSON string
     * @return An instance of CancelMarginAccountAllOpenOrdersOnASymbolResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     CancelMarginAccountAllOpenOrdersOnASymbolResponseInner
     */
    public static CancelMarginAccountAllOpenOrdersOnASymbolResponseInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson()
                .fromJson(jsonString, CancelMarginAccountAllOpenOrdersOnASymbolResponseInner.class);
    }

    /**
     * Convert an instance of CancelMarginAccountAllOpenOrdersOnASymbolResponseInner to an JSON
     * string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
