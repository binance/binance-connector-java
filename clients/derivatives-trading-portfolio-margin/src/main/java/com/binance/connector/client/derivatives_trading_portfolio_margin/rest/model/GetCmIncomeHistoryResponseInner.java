/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** GetCmIncomeHistoryResponseInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class GetCmIncomeHistoryResponseInner {
    public static final String SERIALIZED_NAME_SYMBOL = "symbol";

    @SerializedName(SERIALIZED_NAME_SYMBOL)
    @jakarta.annotation.Nullable
    private String symbol;

    public static final String SERIALIZED_NAME_INCOME_TYPE = "incomeType";

    @SerializedName(SERIALIZED_NAME_INCOME_TYPE)
    @jakarta.annotation.Nullable
    private String incomeType;

    public static final String SERIALIZED_NAME_INCOME = "income";

    @SerializedName(SERIALIZED_NAME_INCOME)
    @jakarta.annotation.Nullable
    private String income;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_INFO = "info";

    @SerializedName(SERIALIZED_NAME_INFO)
    @jakarta.annotation.Nullable
    private String info;

    public static final String SERIALIZED_NAME_TIME = "time";

    @SerializedName(SERIALIZED_NAME_TIME)
    @jakarta.annotation.Nullable
    private Long time;

    public static final String SERIALIZED_NAME_TRAN_ID = "tranId";

    @SerializedName(SERIALIZED_NAME_TRAN_ID)
    @jakarta.annotation.Nullable
    private String tranId;

    public static final String SERIALIZED_NAME_TRADE_ID = "tradeId";

    @SerializedName(SERIALIZED_NAME_TRADE_ID)
    @jakarta.annotation.Nullable
    private String tradeId;

    public GetCmIncomeHistoryResponseInner() {}

    public GetCmIncomeHistoryResponseInner symbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
        return this;
    }

    /**
     * Get symbol
     *
     * @return symbol
     */
    @jakarta.annotation.Nullable
    public String getSymbol() {
        return symbol;
    }

    public void setSymbol(@jakarta.annotation.Nullable String symbol) {
        this.symbol = symbol;
    }

    public GetCmIncomeHistoryResponseInner incomeType(
            @jakarta.annotation.Nullable String incomeType) {
        this.incomeType = incomeType;
        return this;
    }

    /**
     * Get incomeType
     *
     * @return incomeType
     */
    @jakarta.annotation.Nullable
    public String getIncomeType() {
        return incomeType;
    }

    public void setIncomeType(@jakarta.annotation.Nullable String incomeType) {
        this.incomeType = incomeType;
    }

    public GetCmIncomeHistoryResponseInner income(@jakarta.annotation.Nullable String income) {
        this.income = income;
        return this;
    }

    /**
     * Get income
     *
     * @return income
     */
    @jakarta.annotation.Nullable
    public String getIncome() {
        return income;
    }

    public void setIncome(@jakarta.annotation.Nullable String income) {
        this.income = income;
    }

    public GetCmIncomeHistoryResponseInner asset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public GetCmIncomeHistoryResponseInner info(@jakarta.annotation.Nullable String info) {
        this.info = info;
        return this;
    }

    /**
     * Get info
     *
     * @return info
     */
    @jakarta.annotation.Nullable
    public String getInfo() {
        return info;
    }

    public void setInfo(@jakarta.annotation.Nullable String info) {
        this.info = info;
    }

    public GetCmIncomeHistoryResponseInner time(@jakarta.annotation.Nullable Long time) {
        this.time = time;
        return this;
    }

    /**
     * Get time
     *
     * @return time
     */
    @jakarta.annotation.Nullable
    public Long getTime() {
        return time;
    }

    public void setTime(@jakarta.annotation.Nullable Long time) {
        this.time = time;
    }

    public GetCmIncomeHistoryResponseInner tranId(@jakarta.annotation.Nullable String tranId) {
        this.tranId = tranId;
        return this;
    }

    /**
     * Get tranId
     *
     * @return tranId
     */
    @jakarta.annotation.Nullable
    public String getTranId() {
        return tranId;
    }

    public void setTranId(@jakarta.annotation.Nullable String tranId) {
        this.tranId = tranId;
    }

    public GetCmIncomeHistoryResponseInner tradeId(@jakarta.annotation.Nullable String tradeId) {
        this.tradeId = tradeId;
        return this;
    }

    /**
     * Get tradeId
     *
     * @return tradeId
     */
    @jakarta.annotation.Nullable
    public String getTradeId() {
        return tradeId;
    }

    public void setTradeId(@jakarta.annotation.Nullable String tradeId) {
        this.tradeId = tradeId;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCmIncomeHistoryResponseInner getCmIncomeHistoryResponseInner =
                (GetCmIncomeHistoryResponseInner) o;
        return Objects.equals(this.symbol, getCmIncomeHistoryResponseInner.symbol)
                && Objects.equals(this.incomeType, getCmIncomeHistoryResponseInner.incomeType)
                && Objects.equals(this.income, getCmIncomeHistoryResponseInner.income)
                && Objects.equals(this.asset, getCmIncomeHistoryResponseInner.asset)
                && Objects.equals(this.info, getCmIncomeHistoryResponseInner.info)
                && Objects.equals(this.time, getCmIncomeHistoryResponseInner.time)
                && Objects.equals(this.tranId, getCmIncomeHistoryResponseInner.tranId)
                && Objects.equals(this.tradeId, getCmIncomeHistoryResponseInner.tradeId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(symbol, incomeType, income, asset, info, time, tranId, tradeId);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GetCmIncomeHistoryResponseInner {\n");
        sb.append("		symbol: ").append(toIndentedString(symbol)).append("\n");
        sb.append("		incomeType: ").append(toIndentedString(incomeType)).append("\n");
        sb.append("		income: ").append(toIndentedString(income)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		info: ").append(toIndentedString(info)).append("\n");
        sb.append("		time: ").append(toIndentedString(time)).append("\n");
        sb.append("		tranId: ").append(toIndentedString(tranId)).append("\n");
        sb.append("		tradeId: ").append(toIndentedString(tradeId)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object symbolValue = getSymbol();
        String symbolValueAsString = "";
        symbolValueAsString = symbolValue.toString();
        sb.append("symbol=").append(urlEncode(symbolValueAsString)).append("");
        Object incomeTypeValue = getIncomeType();
        String incomeTypeValueAsString = "";
        incomeTypeValueAsString = incomeTypeValue.toString();
        sb.append("incomeType=").append(urlEncode(incomeTypeValueAsString)).append("");
        Object incomeValue = getIncome();
        String incomeValueAsString = "";
        incomeValueAsString = incomeValue.toString();
        sb.append("income=").append(urlEncode(incomeValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object infoValue = getInfo();
        String infoValueAsString = "";
        infoValueAsString = infoValue.toString();
        sb.append("info=").append(urlEncode(infoValueAsString)).append("");
        Object timeValue = getTime();
        String timeValueAsString = "";
        timeValueAsString = timeValue.toString();
        sb.append("time=").append(urlEncode(timeValueAsString)).append("");
        Object tranIdValue = getTranId();
        String tranIdValueAsString = "";
        tranIdValueAsString = tranIdValue.toString();
        sb.append("tranId=").append(urlEncode(tranIdValueAsString)).append("");
        Object tradeIdValue = getTradeId();
        String tradeIdValueAsString = "";
        tradeIdValueAsString = tradeIdValue.toString();
        sb.append("tradeId=").append(urlEncode(tradeIdValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("symbol");
        openapiFields.add("incomeType");
        openapiFields.add("income");
        openapiFields.add("asset");
        openapiFields.add("info");
        openapiFields.add("time");
        openapiFields.add("tranId");
        openapiFields.add("tradeId");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     GetCmIncomeHistoryResponseInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!GetCmIncomeHistoryResponseInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in GetCmIncomeHistoryResponseInner is not"
                                        + " found in the empty JSON string",
                                GetCmIncomeHistoryResponseInner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!GetCmIncomeHistoryResponseInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `GetCmIncomeHistoryResponseInner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull())
                && !jsonObj.get("symbol").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `symbol` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("symbol").toString()));
        }
        if ((jsonObj.get("incomeType") != null && !jsonObj.get("incomeType").isJsonNull())
                && !jsonObj.get("incomeType").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `incomeType` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("incomeType").toString()));
        }
        if ((jsonObj.get("income") != null && !jsonObj.get("income").isJsonNull())
                && !jsonObj.get("income").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `income` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("income").toString()));
        }
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull())
                && !jsonObj.get("info").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `info` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("info").toString()));
        }
        if ((jsonObj.get("tranId") != null && !jsonObj.get("tranId").isJsonNull())
                && !jsonObj.get("tranId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `tranId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("tranId").toString()));
        }
        if ((jsonObj.get("tradeId") != null && !jsonObj.get("tradeId").isJsonNull())
                && !jsonObj.get("tradeId").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `tradeId` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("tradeId").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!GetCmIncomeHistoryResponseInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'GetCmIncomeHistoryResponseInner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<GetCmIncomeHistoryResponseInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(GetCmIncomeHistoryResponseInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<GetCmIncomeHistoryResponseInner>() {
                        @Override
                        public void write(JsonWriter out, GetCmIncomeHistoryResponseInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public GetCmIncomeHistoryResponseInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of GetCmIncomeHistoryResponseInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of GetCmIncomeHistoryResponseInner
     * @throws IOException if the JSON string is invalid with respect to
     *     GetCmIncomeHistoryResponseInner
     */
    public static GetCmIncomeHistoryResponseInner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, GetCmIncomeHistoryResponseInner.class);
    }

    /**
     * Convert an instance of GetCmIncomeHistoryResponseInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
