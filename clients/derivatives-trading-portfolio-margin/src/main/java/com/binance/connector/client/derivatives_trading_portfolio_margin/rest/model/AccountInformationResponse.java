/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AccountInformationResponse */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountInformationResponse {
    public static final String SERIALIZED_NAME_UNI_M_M_R = "uniMMR";

    @SerializedName(SERIALIZED_NAME_UNI_M_M_R)
    @jakarta.annotation.Nullable
    private String uniMMR;

    public static final String SERIALIZED_NAME_ACCOUNT_EQUITY = "accountEquity";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_EQUITY)
    @jakarta.annotation.Nullable
    private String accountEquity;

    public static final String SERIALIZED_NAME_ACTUAL_EQUITY = "actualEquity";

    @SerializedName(SERIALIZED_NAME_ACTUAL_EQUITY)
    @jakarta.annotation.Nullable
    private String actualEquity;

    public static final String SERIALIZED_NAME_ACCOUNT_INITIAL_MARGIN = "accountInitialMargin";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_INITIAL_MARGIN)
    @jakarta.annotation.Nullable
    private String accountInitialMargin;

    public static final String SERIALIZED_NAME_ACCOUNT_MAINT_MARGIN = "accountMaintMargin";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_MAINT_MARGIN)
    @jakarta.annotation.Nullable
    private String accountMaintMargin;

    public static final String SERIALIZED_NAME_ACCOUNT_STATUS = "accountStatus";

    @SerializedName(SERIALIZED_NAME_ACCOUNT_STATUS)
    @jakarta.annotation.Nullable
    private String accountStatus;

    public static final String SERIALIZED_NAME_VIRTUAL_MAX_WITHDRAW_AMOUNT =
            "virtualMaxWithdrawAmount";

    @SerializedName(SERIALIZED_NAME_VIRTUAL_MAX_WITHDRAW_AMOUNT)
    @jakarta.annotation.Nullable
    private String virtualMaxWithdrawAmount;

    public static final String SERIALIZED_NAME_TOTAL_AVAILABLE_BALANCE = "totalAvailableBalance";

    @SerializedName(SERIALIZED_NAME_TOTAL_AVAILABLE_BALANCE)
    @jakarta.annotation.Nullable
    private String totalAvailableBalance;

    public static final String SERIALIZED_NAME_TOTAL_MARGIN_OPEN_LOSS = "totalMarginOpenLoss";

    @SerializedName(SERIALIZED_NAME_TOTAL_MARGIN_OPEN_LOSS)
    @jakarta.annotation.Nullable
    private String totalMarginOpenLoss;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public AccountInformationResponse() {}

    public AccountInformationResponse uniMMR(@jakarta.annotation.Nullable String uniMMR) {
        this.uniMMR = uniMMR;
        return this;
    }

    /**
     * Get uniMMR
     *
     * @return uniMMR
     */
    @jakarta.annotation.Nullable
    public String getUniMMR() {
        return uniMMR;
    }

    public void setUniMMR(@jakarta.annotation.Nullable String uniMMR) {
        this.uniMMR = uniMMR;
    }

    public AccountInformationResponse accountEquity(
            @jakarta.annotation.Nullable String accountEquity) {
        this.accountEquity = accountEquity;
        return this;
    }

    /**
     * Get accountEquity
     *
     * @return accountEquity
     */
    @jakarta.annotation.Nullable
    public String getAccountEquity() {
        return accountEquity;
    }

    public void setAccountEquity(@jakarta.annotation.Nullable String accountEquity) {
        this.accountEquity = accountEquity;
    }

    public AccountInformationResponse actualEquity(
            @jakarta.annotation.Nullable String actualEquity) {
        this.actualEquity = actualEquity;
        return this;
    }

    /**
     * Get actualEquity
     *
     * @return actualEquity
     */
    @jakarta.annotation.Nullable
    public String getActualEquity() {
        return actualEquity;
    }

    public void setActualEquity(@jakarta.annotation.Nullable String actualEquity) {
        this.actualEquity = actualEquity;
    }

    public AccountInformationResponse accountInitialMargin(
            @jakarta.annotation.Nullable String accountInitialMargin) {
        this.accountInitialMargin = accountInitialMargin;
        return this;
    }

    /**
     * Get accountInitialMargin
     *
     * @return accountInitialMargin
     */
    @jakarta.annotation.Nullable
    public String getAccountInitialMargin() {
        return accountInitialMargin;
    }

    public void setAccountInitialMargin(@jakarta.annotation.Nullable String accountInitialMargin) {
        this.accountInitialMargin = accountInitialMargin;
    }

    public AccountInformationResponse accountMaintMargin(
            @jakarta.annotation.Nullable String accountMaintMargin) {
        this.accountMaintMargin = accountMaintMargin;
        return this;
    }

    /**
     * Get accountMaintMargin
     *
     * @return accountMaintMargin
     */
    @jakarta.annotation.Nullable
    public String getAccountMaintMargin() {
        return accountMaintMargin;
    }

    public void setAccountMaintMargin(@jakarta.annotation.Nullable String accountMaintMargin) {
        this.accountMaintMargin = accountMaintMargin;
    }

    public AccountInformationResponse accountStatus(
            @jakarta.annotation.Nullable String accountStatus) {
        this.accountStatus = accountStatus;
        return this;
    }

    /**
     * Get accountStatus
     *
     * @return accountStatus
     */
    @jakarta.annotation.Nullable
    public String getAccountStatus() {
        return accountStatus;
    }

    public void setAccountStatus(@jakarta.annotation.Nullable String accountStatus) {
        this.accountStatus = accountStatus;
    }

    public AccountInformationResponse virtualMaxWithdrawAmount(
            @jakarta.annotation.Nullable String virtualMaxWithdrawAmount) {
        this.virtualMaxWithdrawAmount = virtualMaxWithdrawAmount;
        return this;
    }

    /**
     * Get virtualMaxWithdrawAmount
     *
     * @return virtualMaxWithdrawAmount
     */
    @jakarta.annotation.Nullable
    public String getVirtualMaxWithdrawAmount() {
        return virtualMaxWithdrawAmount;
    }

    public void setVirtualMaxWithdrawAmount(
            @jakarta.annotation.Nullable String virtualMaxWithdrawAmount) {
        this.virtualMaxWithdrawAmount = virtualMaxWithdrawAmount;
    }

    public AccountInformationResponse totalAvailableBalance(
            @jakarta.annotation.Nullable String totalAvailableBalance) {
        this.totalAvailableBalance = totalAvailableBalance;
        return this;
    }

    /**
     * Get totalAvailableBalance
     *
     * @return totalAvailableBalance
     */
    @jakarta.annotation.Nullable
    public String getTotalAvailableBalance() {
        return totalAvailableBalance;
    }

    public void setTotalAvailableBalance(
            @jakarta.annotation.Nullable String totalAvailableBalance) {
        this.totalAvailableBalance = totalAvailableBalance;
    }

    public AccountInformationResponse totalMarginOpenLoss(
            @jakarta.annotation.Nullable String totalMarginOpenLoss) {
        this.totalMarginOpenLoss = totalMarginOpenLoss;
        return this;
    }

    /**
     * Get totalMarginOpenLoss
     *
     * @return totalMarginOpenLoss
     */
    @jakarta.annotation.Nullable
    public String getTotalMarginOpenLoss() {
        return totalMarginOpenLoss;
    }

    public void setTotalMarginOpenLoss(@jakarta.annotation.Nullable String totalMarginOpenLoss) {
        this.totalMarginOpenLoss = totalMarginOpenLoss;
    }

    public AccountInformationResponse updateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountInformationResponse accountInformationResponse = (AccountInformationResponse) o;
        return Objects.equals(this.uniMMR, accountInformationResponse.uniMMR)
                && Objects.equals(this.accountEquity, accountInformationResponse.accountEquity)
                && Objects.equals(this.actualEquity, accountInformationResponse.actualEquity)
                && Objects.equals(
                        this.accountInitialMargin, accountInformationResponse.accountInitialMargin)
                && Objects.equals(
                        this.accountMaintMargin, accountInformationResponse.accountMaintMargin)
                && Objects.equals(this.accountStatus, accountInformationResponse.accountStatus)
                && Objects.equals(
                        this.virtualMaxWithdrawAmount,
                        accountInformationResponse.virtualMaxWithdrawAmount)
                && Objects.equals(
                        this.totalAvailableBalance,
                        accountInformationResponse.totalAvailableBalance)
                && Objects.equals(
                        this.totalMarginOpenLoss, accountInformationResponse.totalMarginOpenLoss)
                && Objects.equals(this.updateTime, accountInformationResponse.updateTime);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                uniMMR,
                accountEquity,
                actualEquity,
                accountInitialMargin,
                accountMaintMargin,
                accountStatus,
                virtualMaxWithdrawAmount,
                totalAvailableBalance,
                totalMarginOpenLoss,
                updateTime);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountInformationResponse {\n");
        sb.append("		uniMMR: ").append(toIndentedString(uniMMR)).append("\n");
        sb.append("		accountEquity: ").append(toIndentedString(accountEquity)).append("\n");
        sb.append("		actualEquity: ").append(toIndentedString(actualEquity)).append("\n");
        sb.append("		accountInitialMargin: ")
                .append(toIndentedString(accountInitialMargin))
                .append("\n");
        sb.append("		accountMaintMargin: ")
                .append(toIndentedString(accountMaintMargin))
                .append("\n");
        sb.append("		accountStatus: ").append(toIndentedString(accountStatus)).append("\n");
        sb.append("		virtualMaxWithdrawAmount: ")
                .append(toIndentedString(virtualMaxWithdrawAmount))
                .append("\n");
        sb.append("		totalAvailableBalance: ")
                .append(toIndentedString(totalAvailableBalance))
                .append("\n");
        sb.append("		totalMarginOpenLoss: ")
                .append(toIndentedString(totalMarginOpenLoss))
                .append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object uniMMRValue = getUniMMR();
        String uniMMRValueAsString = "";
        uniMMRValueAsString = uniMMRValue.toString();
        sb.append("uniMMR=").append(urlEncode(uniMMRValueAsString)).append("");
        Object accountEquityValue = getAccountEquity();
        String accountEquityValueAsString = "";
        accountEquityValueAsString = accountEquityValue.toString();
        sb.append("accountEquity=").append(urlEncode(accountEquityValueAsString)).append("");
        Object actualEquityValue = getActualEquity();
        String actualEquityValueAsString = "";
        actualEquityValueAsString = actualEquityValue.toString();
        sb.append("actualEquity=").append(urlEncode(actualEquityValueAsString)).append("");
        Object accountInitialMarginValue = getAccountInitialMargin();
        String accountInitialMarginValueAsString = "";
        accountInitialMarginValueAsString = accountInitialMarginValue.toString();
        sb.append("accountInitialMargin=")
                .append(urlEncode(accountInitialMarginValueAsString))
                .append("");
        Object accountMaintMarginValue = getAccountMaintMargin();
        String accountMaintMarginValueAsString = "";
        accountMaintMarginValueAsString = accountMaintMarginValue.toString();
        sb.append("accountMaintMargin=")
                .append(urlEncode(accountMaintMarginValueAsString))
                .append("");
        Object accountStatusValue = getAccountStatus();
        String accountStatusValueAsString = "";
        accountStatusValueAsString = accountStatusValue.toString();
        sb.append("accountStatus=").append(urlEncode(accountStatusValueAsString)).append("");
        Object virtualMaxWithdrawAmountValue = getVirtualMaxWithdrawAmount();
        String virtualMaxWithdrawAmountValueAsString = "";
        virtualMaxWithdrawAmountValueAsString = virtualMaxWithdrawAmountValue.toString();
        sb.append("virtualMaxWithdrawAmount=")
                .append(urlEncode(virtualMaxWithdrawAmountValueAsString))
                .append("");
        Object totalAvailableBalanceValue = getTotalAvailableBalance();
        String totalAvailableBalanceValueAsString = "";
        totalAvailableBalanceValueAsString = totalAvailableBalanceValue.toString();
        sb.append("totalAvailableBalance=")
                .append(urlEncode(totalAvailableBalanceValueAsString))
                .append("");
        Object totalMarginOpenLossValue = getTotalMarginOpenLoss();
        String totalMarginOpenLossValueAsString = "";
        totalMarginOpenLossValueAsString = totalMarginOpenLossValue.toString();
        sb.append("totalMarginOpenLoss=")
                .append(urlEncode(totalMarginOpenLossValueAsString))
                .append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("uniMMR");
        openapiFields.add("accountEquity");
        openapiFields.add("actualEquity");
        openapiFields.add("accountInitialMargin");
        openapiFields.add("accountMaintMargin");
        openapiFields.add("accountStatus");
        openapiFields.add("virtualMaxWithdrawAmount");
        openapiFields.add("totalAvailableBalance");
        openapiFields.add("totalMarginOpenLoss");
        openapiFields.add("updateTime");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to AccountInformationResponse
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountInformationResponse.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountInformationResponse is not"
                                        + " found in the empty JSON string",
                                AccountInformationResponse.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountInformationResponse.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AccountInformationResponse` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("uniMMR") != null && !jsonObj.get("uniMMR").isJsonNull())
                && !jsonObj.get("uniMMR").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `uniMMR` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("uniMMR").toString()));
        }
        if ((jsonObj.get("accountEquity") != null && !jsonObj.get("accountEquity").isJsonNull())
                && !jsonObj.get("accountEquity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `accountEquity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("accountEquity").toString()));
        }
        if ((jsonObj.get("actualEquity") != null && !jsonObj.get("actualEquity").isJsonNull())
                && !jsonObj.get("actualEquity").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `actualEquity` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("actualEquity").toString()));
        }
        if ((jsonObj.get("accountInitialMargin") != null
                        && !jsonObj.get("accountInitialMargin").isJsonNull())
                && !jsonObj.get("accountInitialMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `accountInitialMargin` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("accountInitialMargin").toString()));
        }
        if ((jsonObj.get("accountMaintMargin") != null
                        && !jsonObj.get("accountMaintMargin").isJsonNull())
                && !jsonObj.get("accountMaintMargin").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `accountMaintMargin` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("accountMaintMargin").toString()));
        }
        if ((jsonObj.get("accountStatus") != null && !jsonObj.get("accountStatus").isJsonNull())
                && !jsonObj.get("accountStatus").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `accountStatus` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("accountStatus").toString()));
        }
        if ((jsonObj.get("virtualMaxWithdrawAmount") != null
                        && !jsonObj.get("virtualMaxWithdrawAmount").isJsonNull())
                && !jsonObj.get("virtualMaxWithdrawAmount").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `virtualMaxWithdrawAmount` to be a primitive type"
                                    + " in the JSON string but got `%s`",
                            jsonObj.get("virtualMaxWithdrawAmount").toString()));
        }
        if ((jsonObj.get("totalAvailableBalance") != null
                        && !jsonObj.get("totalAvailableBalance").isJsonNull())
                && !jsonObj.get("totalAvailableBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalAvailableBalance` to be a primitive type in"
                                    + " the JSON string but got `%s`",
                            jsonObj.get("totalAvailableBalance").toString()));
        }
        if ((jsonObj.get("totalMarginOpenLoss") != null
                        && !jsonObj.get("totalMarginOpenLoss").isJsonNull())
                && !jsonObj.get("totalMarginOpenLoss").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalMarginOpenLoss` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalMarginOpenLoss").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountInformationResponse.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountInformationResponse' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountInformationResponse> thisAdapter =
                    gson.getDelegateAdapter(this, TypeToken.get(AccountInformationResponse.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountInformationResponse>() {
                        @Override
                        public void write(JsonWriter out, AccountInformationResponse value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountInformationResponse read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountInformationResponse given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountInformationResponse
     * @throws IOException if the JSON string is invalid with respect to AccountInformationResponse
     */
    public static AccountInformationResponse fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountInformationResponse.class);
    }

    /**
     * Convert an instance of AccountInformationResponse to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
