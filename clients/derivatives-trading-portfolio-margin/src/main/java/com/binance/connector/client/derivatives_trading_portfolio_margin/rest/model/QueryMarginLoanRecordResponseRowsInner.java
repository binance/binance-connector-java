/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** QueryMarginLoanRecordResponseRowsInner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class QueryMarginLoanRecordResponseRowsInner {
    public static final String SERIALIZED_NAME_TX_ID = "txId";

    @SerializedName(SERIALIZED_NAME_TX_ID)
    @jakarta.annotation.Nullable
    private Long txId;

    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_PRINCIPAL = "principal";

    @SerializedName(SERIALIZED_NAME_PRINCIPAL)
    @jakarta.annotation.Nullable
    private String principal;

    public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";

    @SerializedName(SERIALIZED_NAME_TIMESTAMP)
    @jakarta.annotation.Nullable
    private Long timestamp;

    public static final String SERIALIZED_NAME_STATUS = "status";

    @SerializedName(SERIALIZED_NAME_STATUS)
    @jakarta.annotation.Nullable
    private String status;

    public QueryMarginLoanRecordResponseRowsInner() {}

    public QueryMarginLoanRecordResponseRowsInner txId(@jakarta.annotation.Nullable Long txId) {
        this.txId = txId;
        return this;
    }

    /**
     * Get txId
     *
     * @return txId
     */
    @jakarta.annotation.Nullable
    public Long getTxId() {
        return txId;
    }

    public void setTxId(@jakarta.annotation.Nullable Long txId) {
        this.txId = txId;
    }

    public QueryMarginLoanRecordResponseRowsInner asset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public QueryMarginLoanRecordResponseRowsInner principal(
            @jakarta.annotation.Nullable String principal) {
        this.principal = principal;
        return this;
    }

    /**
     * Get principal
     *
     * @return principal
     */
    @jakarta.annotation.Nullable
    public String getPrincipal() {
        return principal;
    }

    public void setPrincipal(@jakarta.annotation.Nullable String principal) {
        this.principal = principal;
    }

    public QueryMarginLoanRecordResponseRowsInner timestamp(
            @jakarta.annotation.Nullable Long timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get timestamp
     *
     * @return timestamp
     */
    @jakarta.annotation.Nullable
    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(@jakarta.annotation.Nullable Long timestamp) {
        this.timestamp = timestamp;
    }

    public QueryMarginLoanRecordResponseRowsInner status(
            @jakarta.annotation.Nullable String status) {
        this.status = status;
        return this;
    }

    /**
     * Get status
     *
     * @return status
     */
    @jakarta.annotation.Nullable
    public String getStatus() {
        return status;
    }

    public void setStatus(@jakarta.annotation.Nullable String status) {
        this.status = status;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryMarginLoanRecordResponseRowsInner queryMarginLoanRecordResponseRowsInner =
                (QueryMarginLoanRecordResponseRowsInner) o;
        return Objects.equals(this.txId, queryMarginLoanRecordResponseRowsInner.txId)
                && Objects.equals(this.asset, queryMarginLoanRecordResponseRowsInner.asset)
                && Objects.equals(this.principal, queryMarginLoanRecordResponseRowsInner.principal)
                && Objects.equals(this.timestamp, queryMarginLoanRecordResponseRowsInner.timestamp)
                && Objects.equals(this.status, queryMarginLoanRecordResponseRowsInner.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(txId, asset, principal, timestamp, status);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryMarginLoanRecordResponseRowsInner {\n");
        sb.append("		txId: ").append(toIndentedString(txId)).append("\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		principal: ").append(toIndentedString(principal)).append("\n");
        sb.append("		timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("		status: ").append(toIndentedString(status)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object txIdValue = getTxId();
        String txIdValueAsString = "";
        txIdValueAsString = txIdValue.toString();
        sb.append("txId=").append(urlEncode(txIdValueAsString)).append("");
        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object principalValue = getPrincipal();
        String principalValueAsString = "";
        principalValueAsString = principalValue.toString();
        sb.append("principal=").append(urlEncode(principalValueAsString)).append("");
        Object timestampValue = getTimestamp();
        String timestampValueAsString = "";
        timestampValueAsString = timestampValue.toString();
        sb.append("timestamp=").append(urlEncode(timestampValueAsString)).append("");
        Object statusValue = getStatus();
        String statusValueAsString = "";
        statusValueAsString = statusValue.toString();
        sb.append("status=").append(urlEncode(statusValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("txId");
        openapiFields.add("asset");
        openapiFields.add("principal");
        openapiFields.add("timestamp");
        openapiFields.add("status");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     QueryMarginLoanRecordResponseRowsInner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!QueryMarginLoanRecordResponseRowsInner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in QueryMarginLoanRecordResponseRowsInner"
                                        + " is not found in the empty JSON string",
                                QueryMarginLoanRecordResponseRowsInner.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!QueryMarginLoanRecordResponseRowsInner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `QueryMarginLoanRecordResponseRowsInner` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("principal") != null && !jsonObj.get("principal").isJsonNull())
                && !jsonObj.get("principal").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `principal` to be a primitive type in the JSON"
                                    + " string but got `%s`",
                            jsonObj.get("principal").toString()));
        }
        if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull())
                && !jsonObj.get("status").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `status` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("status").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!QueryMarginLoanRecordResponseRowsInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'QueryMarginLoanRecordResponseRowsInner'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<QueryMarginLoanRecordResponseRowsInner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(QueryMarginLoanRecordResponseRowsInner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<QueryMarginLoanRecordResponseRowsInner>() {
                        @Override
                        public void write(
                                JsonWriter out, QueryMarginLoanRecordResponseRowsInner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public QueryMarginLoanRecordResponseRowsInner read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of QueryMarginLoanRecordResponseRowsInner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of QueryMarginLoanRecordResponseRowsInner
     * @throws IOException if the JSON string is invalid with respect to
     *     QueryMarginLoanRecordResponseRowsInner
     */
    public static QueryMarginLoanRecordResponseRowsInner fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, QueryMarginLoanRecordResponseRowsInner.class);
    }

    /**
     * Convert an instance of QueryMarginLoanRecordResponseRowsInner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
