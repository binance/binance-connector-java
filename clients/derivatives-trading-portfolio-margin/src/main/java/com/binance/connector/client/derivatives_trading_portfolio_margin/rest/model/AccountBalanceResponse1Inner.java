/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** AccountBalanceResponse1Inner */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class AccountBalanceResponse1Inner {
    public static final String SERIALIZED_NAME_ASSET = "asset";

    @SerializedName(SERIALIZED_NAME_ASSET)
    @jakarta.annotation.Nullable
    private String asset;

    public static final String SERIALIZED_NAME_TOTAL_WALLET_BALANCE = "totalWalletBalance";

    @SerializedName(SERIALIZED_NAME_TOTAL_WALLET_BALANCE)
    @jakarta.annotation.Nullable
    private String totalWalletBalance;

    public static final String SERIALIZED_NAME_CROSS_MARGIN_ASSET = "crossMarginAsset";

    @SerializedName(SERIALIZED_NAME_CROSS_MARGIN_ASSET)
    @jakarta.annotation.Nullable
    private String crossMarginAsset;

    public static final String SERIALIZED_NAME_CROSS_MARGIN_BORROWED = "crossMarginBorrowed";

    @SerializedName(SERIALIZED_NAME_CROSS_MARGIN_BORROWED)
    @jakarta.annotation.Nullable
    private String crossMarginBorrowed;

    public static final String SERIALIZED_NAME_CROSS_MARGIN_FREE = "crossMarginFree";

    @SerializedName(SERIALIZED_NAME_CROSS_MARGIN_FREE)
    @jakarta.annotation.Nullable
    private String crossMarginFree;

    public static final String SERIALIZED_NAME_CROSS_MARGIN_INTEREST = "crossMarginInterest";

    @SerializedName(SERIALIZED_NAME_CROSS_MARGIN_INTEREST)
    @jakarta.annotation.Nullable
    private String crossMarginInterest;

    public static final String SERIALIZED_NAME_CROSS_MARGIN_LOCKED = "crossMarginLocked";

    @SerializedName(SERIALIZED_NAME_CROSS_MARGIN_LOCKED)
    @jakarta.annotation.Nullable
    private String crossMarginLocked;

    public static final String SERIALIZED_NAME_UM_WALLET_BALANCE = "umWalletBalance";

    @SerializedName(SERIALIZED_NAME_UM_WALLET_BALANCE)
    @jakarta.annotation.Nullable
    private String umWalletBalance;

    public static final String SERIALIZED_NAME_UM_UNREALIZED_P_N_L = "umUnrealizedPNL";

    @SerializedName(SERIALIZED_NAME_UM_UNREALIZED_P_N_L)
    @jakarta.annotation.Nullable
    private String umUnrealizedPNL;

    public static final String SERIALIZED_NAME_CM_WALLET_BALANCE = "cmWalletBalance";

    @SerializedName(SERIALIZED_NAME_CM_WALLET_BALANCE)
    @jakarta.annotation.Nullable
    private String cmWalletBalance;

    public static final String SERIALIZED_NAME_CM_UNREALIZED_P_N_L = "cmUnrealizedPNL";

    @SerializedName(SERIALIZED_NAME_CM_UNREALIZED_P_N_L)
    @jakarta.annotation.Nullable
    private String cmUnrealizedPNL;

    public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";

    @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
    @jakarta.annotation.Nullable
    private Long updateTime;

    public static final String SERIALIZED_NAME_NEGATIVE_BALANCE = "negativeBalance";

    @SerializedName(SERIALIZED_NAME_NEGATIVE_BALANCE)
    @jakarta.annotation.Nullable
    private String negativeBalance;

    public AccountBalanceResponse1Inner() {}

    public AccountBalanceResponse1Inner asset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
        return this;
    }

    /**
     * Get asset
     *
     * @return asset
     */
    @jakarta.annotation.Nullable
    public String getAsset() {
        return asset;
    }

    public void setAsset(@jakarta.annotation.Nullable String asset) {
        this.asset = asset;
    }

    public AccountBalanceResponse1Inner totalWalletBalance(
            @jakarta.annotation.Nullable String totalWalletBalance) {
        this.totalWalletBalance = totalWalletBalance;
        return this;
    }

    /**
     * Get totalWalletBalance
     *
     * @return totalWalletBalance
     */
    @jakarta.annotation.Nullable
    public String getTotalWalletBalance() {
        return totalWalletBalance;
    }

    public void setTotalWalletBalance(@jakarta.annotation.Nullable String totalWalletBalance) {
        this.totalWalletBalance = totalWalletBalance;
    }

    public AccountBalanceResponse1Inner crossMarginAsset(
            @jakarta.annotation.Nullable String crossMarginAsset) {
        this.crossMarginAsset = crossMarginAsset;
        return this;
    }

    /**
     * Get crossMarginAsset
     *
     * @return crossMarginAsset
     */
    @jakarta.annotation.Nullable
    public String getCrossMarginAsset() {
        return crossMarginAsset;
    }

    public void setCrossMarginAsset(@jakarta.annotation.Nullable String crossMarginAsset) {
        this.crossMarginAsset = crossMarginAsset;
    }

    public AccountBalanceResponse1Inner crossMarginBorrowed(
            @jakarta.annotation.Nullable String crossMarginBorrowed) {
        this.crossMarginBorrowed = crossMarginBorrowed;
        return this;
    }

    /**
     * Get crossMarginBorrowed
     *
     * @return crossMarginBorrowed
     */
    @jakarta.annotation.Nullable
    public String getCrossMarginBorrowed() {
        return crossMarginBorrowed;
    }

    public void setCrossMarginBorrowed(@jakarta.annotation.Nullable String crossMarginBorrowed) {
        this.crossMarginBorrowed = crossMarginBorrowed;
    }

    public AccountBalanceResponse1Inner crossMarginFree(
            @jakarta.annotation.Nullable String crossMarginFree) {
        this.crossMarginFree = crossMarginFree;
        return this;
    }

    /**
     * Get crossMarginFree
     *
     * @return crossMarginFree
     */
    @jakarta.annotation.Nullable
    public String getCrossMarginFree() {
        return crossMarginFree;
    }

    public void setCrossMarginFree(@jakarta.annotation.Nullable String crossMarginFree) {
        this.crossMarginFree = crossMarginFree;
    }

    public AccountBalanceResponse1Inner crossMarginInterest(
            @jakarta.annotation.Nullable String crossMarginInterest) {
        this.crossMarginInterest = crossMarginInterest;
        return this;
    }

    /**
     * Get crossMarginInterest
     *
     * @return crossMarginInterest
     */
    @jakarta.annotation.Nullable
    public String getCrossMarginInterest() {
        return crossMarginInterest;
    }

    public void setCrossMarginInterest(@jakarta.annotation.Nullable String crossMarginInterest) {
        this.crossMarginInterest = crossMarginInterest;
    }

    public AccountBalanceResponse1Inner crossMarginLocked(
            @jakarta.annotation.Nullable String crossMarginLocked) {
        this.crossMarginLocked = crossMarginLocked;
        return this;
    }

    /**
     * Get crossMarginLocked
     *
     * @return crossMarginLocked
     */
    @jakarta.annotation.Nullable
    public String getCrossMarginLocked() {
        return crossMarginLocked;
    }

    public void setCrossMarginLocked(@jakarta.annotation.Nullable String crossMarginLocked) {
        this.crossMarginLocked = crossMarginLocked;
    }

    public AccountBalanceResponse1Inner umWalletBalance(
            @jakarta.annotation.Nullable String umWalletBalance) {
        this.umWalletBalance = umWalletBalance;
        return this;
    }

    /**
     * Get umWalletBalance
     *
     * @return umWalletBalance
     */
    @jakarta.annotation.Nullable
    public String getUmWalletBalance() {
        return umWalletBalance;
    }

    public void setUmWalletBalance(@jakarta.annotation.Nullable String umWalletBalance) {
        this.umWalletBalance = umWalletBalance;
    }

    public AccountBalanceResponse1Inner umUnrealizedPNL(
            @jakarta.annotation.Nullable String umUnrealizedPNL) {
        this.umUnrealizedPNL = umUnrealizedPNL;
        return this;
    }

    /**
     * Get umUnrealizedPNL
     *
     * @return umUnrealizedPNL
     */
    @jakarta.annotation.Nullable
    public String getUmUnrealizedPNL() {
        return umUnrealizedPNL;
    }

    public void setUmUnrealizedPNL(@jakarta.annotation.Nullable String umUnrealizedPNL) {
        this.umUnrealizedPNL = umUnrealizedPNL;
    }

    public AccountBalanceResponse1Inner cmWalletBalance(
            @jakarta.annotation.Nullable String cmWalletBalance) {
        this.cmWalletBalance = cmWalletBalance;
        return this;
    }

    /**
     * Get cmWalletBalance
     *
     * @return cmWalletBalance
     */
    @jakarta.annotation.Nullable
    public String getCmWalletBalance() {
        return cmWalletBalance;
    }

    public void setCmWalletBalance(@jakarta.annotation.Nullable String cmWalletBalance) {
        this.cmWalletBalance = cmWalletBalance;
    }

    public AccountBalanceResponse1Inner cmUnrealizedPNL(
            @jakarta.annotation.Nullable String cmUnrealizedPNL) {
        this.cmUnrealizedPNL = cmUnrealizedPNL;
        return this;
    }

    /**
     * Get cmUnrealizedPNL
     *
     * @return cmUnrealizedPNL
     */
    @jakarta.annotation.Nullable
    public String getCmUnrealizedPNL() {
        return cmUnrealizedPNL;
    }

    public void setCmUnrealizedPNL(@jakarta.annotation.Nullable String cmUnrealizedPNL) {
        this.cmUnrealizedPNL = cmUnrealizedPNL;
    }

    public AccountBalanceResponse1Inner updateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
        return this;
    }

    /**
     * Get updateTime
     *
     * @return updateTime
     */
    @jakarta.annotation.Nullable
    public Long getUpdateTime() {
        return updateTime;
    }

    public void setUpdateTime(@jakarta.annotation.Nullable Long updateTime) {
        this.updateTime = updateTime;
    }

    public AccountBalanceResponse1Inner negativeBalance(
            @jakarta.annotation.Nullable String negativeBalance) {
        this.negativeBalance = negativeBalance;
        return this;
    }

    /**
     * Get negativeBalance
     *
     * @return negativeBalance
     */
    @jakarta.annotation.Nullable
    public String getNegativeBalance() {
        return negativeBalance;
    }

    public void setNegativeBalance(@jakarta.annotation.Nullable String negativeBalance) {
        this.negativeBalance = negativeBalance;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountBalanceResponse1Inner accountBalanceResponse1Inner =
                (AccountBalanceResponse1Inner) o;
        return Objects.equals(this.asset, accountBalanceResponse1Inner.asset)
                && Objects.equals(
                        this.totalWalletBalance, accountBalanceResponse1Inner.totalWalletBalance)
                && Objects.equals(
                        this.crossMarginAsset, accountBalanceResponse1Inner.crossMarginAsset)
                && Objects.equals(
                        this.crossMarginBorrowed, accountBalanceResponse1Inner.crossMarginBorrowed)
                && Objects.equals(
                        this.crossMarginFree, accountBalanceResponse1Inner.crossMarginFree)
                && Objects.equals(
                        this.crossMarginInterest, accountBalanceResponse1Inner.crossMarginInterest)
                && Objects.equals(
                        this.crossMarginLocked, accountBalanceResponse1Inner.crossMarginLocked)
                && Objects.equals(
                        this.umWalletBalance, accountBalanceResponse1Inner.umWalletBalance)
                && Objects.equals(
                        this.umUnrealizedPNL, accountBalanceResponse1Inner.umUnrealizedPNL)
                && Objects.equals(
                        this.cmWalletBalance, accountBalanceResponse1Inner.cmWalletBalance)
                && Objects.equals(
                        this.cmUnrealizedPNL, accountBalanceResponse1Inner.cmUnrealizedPNL)
                && Objects.equals(this.updateTime, accountBalanceResponse1Inner.updateTime)
                && Objects.equals(
                        this.negativeBalance, accountBalanceResponse1Inner.negativeBalance);
    }

    @Override
    public int hashCode() {
        return Objects.hash(
                asset,
                totalWalletBalance,
                crossMarginAsset,
                crossMarginBorrowed,
                crossMarginFree,
                crossMarginInterest,
                crossMarginLocked,
                umWalletBalance,
                umUnrealizedPNL,
                cmWalletBalance,
                cmUnrealizedPNL,
                updateTime,
                negativeBalance);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AccountBalanceResponse1Inner {\n");
        sb.append("		asset: ").append(toIndentedString(asset)).append("\n");
        sb.append("		totalWalletBalance: ")
                .append(toIndentedString(totalWalletBalance))
                .append("\n");
        sb.append("		crossMarginAsset: ").append(toIndentedString(crossMarginAsset)).append("\n");
        sb.append("		crossMarginBorrowed: ")
                .append(toIndentedString(crossMarginBorrowed))
                .append("\n");
        sb.append("		crossMarginFree: ").append(toIndentedString(crossMarginFree)).append("\n");
        sb.append("		crossMarginInterest: ")
                .append(toIndentedString(crossMarginInterest))
                .append("\n");
        sb.append("		crossMarginLocked: ").append(toIndentedString(crossMarginLocked)).append("\n");
        sb.append("		umWalletBalance: ").append(toIndentedString(umWalletBalance)).append("\n");
        sb.append("		umUnrealizedPNL: ").append(toIndentedString(umUnrealizedPNL)).append("\n");
        sb.append("		cmWalletBalance: ").append(toIndentedString(cmWalletBalance)).append("\n");
        sb.append("		cmUnrealizedPNL: ").append(toIndentedString(cmUnrealizedPNL)).append("\n");
        sb.append("		updateTime: ").append(toIndentedString(updateTime)).append("\n");
        sb.append("		negativeBalance: ").append(toIndentedString(negativeBalance)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object assetValue = getAsset();
        String assetValueAsString = "";
        assetValueAsString = assetValue.toString();
        sb.append("asset=").append(urlEncode(assetValueAsString)).append("");
        Object totalWalletBalanceValue = getTotalWalletBalance();
        String totalWalletBalanceValueAsString = "";
        totalWalletBalanceValueAsString = totalWalletBalanceValue.toString();
        sb.append("totalWalletBalance=")
                .append(urlEncode(totalWalletBalanceValueAsString))
                .append("");
        Object crossMarginAssetValue = getCrossMarginAsset();
        String crossMarginAssetValueAsString = "";
        crossMarginAssetValueAsString = crossMarginAssetValue.toString();
        sb.append("crossMarginAsset=").append(urlEncode(crossMarginAssetValueAsString)).append("");
        Object crossMarginBorrowedValue = getCrossMarginBorrowed();
        String crossMarginBorrowedValueAsString = "";
        crossMarginBorrowedValueAsString = crossMarginBorrowedValue.toString();
        sb.append("crossMarginBorrowed=")
                .append(urlEncode(crossMarginBorrowedValueAsString))
                .append("");
        Object crossMarginFreeValue = getCrossMarginFree();
        String crossMarginFreeValueAsString = "";
        crossMarginFreeValueAsString = crossMarginFreeValue.toString();
        sb.append("crossMarginFree=").append(urlEncode(crossMarginFreeValueAsString)).append("");
        Object crossMarginInterestValue = getCrossMarginInterest();
        String crossMarginInterestValueAsString = "";
        crossMarginInterestValueAsString = crossMarginInterestValue.toString();
        sb.append("crossMarginInterest=")
                .append(urlEncode(crossMarginInterestValueAsString))
                .append("");
        Object crossMarginLockedValue = getCrossMarginLocked();
        String crossMarginLockedValueAsString = "";
        crossMarginLockedValueAsString = crossMarginLockedValue.toString();
        sb.append("crossMarginLocked=")
                .append(urlEncode(crossMarginLockedValueAsString))
                .append("");
        Object umWalletBalanceValue = getUmWalletBalance();
        String umWalletBalanceValueAsString = "";
        umWalletBalanceValueAsString = umWalletBalanceValue.toString();
        sb.append("umWalletBalance=").append(urlEncode(umWalletBalanceValueAsString)).append("");
        Object umUnrealizedPNLValue = getUmUnrealizedPNL();
        String umUnrealizedPNLValueAsString = "";
        umUnrealizedPNLValueAsString = umUnrealizedPNLValue.toString();
        sb.append("umUnrealizedPNL=").append(urlEncode(umUnrealizedPNLValueAsString)).append("");
        Object cmWalletBalanceValue = getCmWalletBalance();
        String cmWalletBalanceValueAsString = "";
        cmWalletBalanceValueAsString = cmWalletBalanceValue.toString();
        sb.append("cmWalletBalance=").append(urlEncode(cmWalletBalanceValueAsString)).append("");
        Object cmUnrealizedPNLValue = getCmUnrealizedPNL();
        String cmUnrealizedPNLValueAsString = "";
        cmUnrealizedPNLValueAsString = cmUnrealizedPNLValue.toString();
        sb.append("cmUnrealizedPNL=").append(urlEncode(cmUnrealizedPNLValueAsString)).append("");
        Object updateTimeValue = getUpdateTime();
        String updateTimeValueAsString = "";
        updateTimeValueAsString = updateTimeValue.toString();
        sb.append("updateTime=").append(urlEncode(updateTimeValueAsString)).append("");
        Object negativeBalanceValue = getNegativeBalance();
        String negativeBalanceValueAsString = "";
        negativeBalanceValueAsString = negativeBalanceValue.toString();
        sb.append("negativeBalance=").append(urlEncode(negativeBalanceValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("asset");
        openapiFields.add("totalWalletBalance");
        openapiFields.add("crossMarginAsset");
        openapiFields.add("crossMarginBorrowed");
        openapiFields.add("crossMarginFree");
        openapiFields.add("crossMarginInterest");
        openapiFields.add("crossMarginLocked");
        openapiFields.add("umWalletBalance");
        openapiFields.add("umUnrealizedPNL");
        openapiFields.add("cmWalletBalance");
        openapiFields.add("cmUnrealizedPNL");
        openapiFields.add("updateTime");
        openapiFields.add("negativeBalance");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     AccountBalanceResponse1Inner
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!AccountBalanceResponse1Inner.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in AccountBalanceResponse1Inner is not"
                                        + " found in the empty JSON string",
                                AccountBalanceResponse1Inner.openapiRequiredFields.toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!AccountBalanceResponse1Inner.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                        + " `AccountBalanceResponse1Inner` properties. JSON: %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if ((jsonObj.get("asset") != null && !jsonObj.get("asset").isJsonNull())
                && !jsonObj.get("asset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `asset` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("asset").toString()));
        }
        if ((jsonObj.get("totalWalletBalance") != null
                        && !jsonObj.get("totalWalletBalance").isJsonNull())
                && !jsonObj.get("totalWalletBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `totalWalletBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("totalWalletBalance").toString()));
        }
        if ((jsonObj.get("crossMarginAsset") != null
                        && !jsonObj.get("crossMarginAsset").isJsonNull())
                && !jsonObj.get("crossMarginAsset").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossMarginAsset` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("crossMarginAsset").toString()));
        }
        if ((jsonObj.get("crossMarginBorrowed") != null
                        && !jsonObj.get("crossMarginBorrowed").isJsonNull())
                && !jsonObj.get("crossMarginBorrowed").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossMarginBorrowed` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("crossMarginBorrowed").toString()));
        }
        if ((jsonObj.get("crossMarginFree") != null && !jsonObj.get("crossMarginFree").isJsonNull())
                && !jsonObj.get("crossMarginFree").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossMarginFree` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("crossMarginFree").toString()));
        }
        if ((jsonObj.get("crossMarginInterest") != null
                        && !jsonObj.get("crossMarginInterest").isJsonNull())
                && !jsonObj.get("crossMarginInterest").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossMarginInterest` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("crossMarginInterest").toString()));
        }
        if ((jsonObj.get("crossMarginLocked") != null
                        && !jsonObj.get("crossMarginLocked").isJsonNull())
                && !jsonObj.get("crossMarginLocked").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `crossMarginLocked` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("crossMarginLocked").toString()));
        }
        if ((jsonObj.get("umWalletBalance") != null && !jsonObj.get("umWalletBalance").isJsonNull())
                && !jsonObj.get("umWalletBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `umWalletBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("umWalletBalance").toString()));
        }
        if ((jsonObj.get("umUnrealizedPNL") != null && !jsonObj.get("umUnrealizedPNL").isJsonNull())
                && !jsonObj.get("umUnrealizedPNL").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `umUnrealizedPNL` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("umUnrealizedPNL").toString()));
        }
        if ((jsonObj.get("cmWalletBalance") != null && !jsonObj.get("cmWalletBalance").isJsonNull())
                && !jsonObj.get("cmWalletBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cmWalletBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("cmWalletBalance").toString()));
        }
        if ((jsonObj.get("cmUnrealizedPNL") != null && !jsonObj.get("cmUnrealizedPNL").isJsonNull())
                && !jsonObj.get("cmUnrealizedPNL").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `cmUnrealizedPNL` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("cmUnrealizedPNL").toString()));
        }
        if ((jsonObj.get("negativeBalance") != null && !jsonObj.get("negativeBalance").isJsonNull())
                && !jsonObj.get("negativeBalance").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `negativeBalance` to be a primitive type in the"
                                    + " JSON string but got `%s`",
                            jsonObj.get("negativeBalance").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!AccountBalanceResponse1Inner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'AccountBalanceResponse1Inner' and its
                // subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AccountBalanceResponse1Inner> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(AccountBalanceResponse1Inner.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<AccountBalanceResponse1Inner>() {
                        @Override
                        public void write(JsonWriter out, AccountBalanceResponse1Inner value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public AccountBalanceResponse1Inner read(JsonReader in) throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of AccountBalanceResponse1Inner given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of AccountBalanceResponse1Inner
     * @throws IOException if the JSON string is invalid with respect to
     *     AccountBalanceResponse1Inner
     */
    public static AccountBalanceResponse1Inner fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, AccountBalanceResponse1Inner.class);
    }

    /**
     * Convert an instance of AccountBalanceResponse1Inner to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
