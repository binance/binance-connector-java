/*
 * Binance Derivatives Trading Portfolio Margin REST API
 * OpenAPI Specification for the Binance Derivatives Trading Portfolio Margin REST API
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.binance.connector.client.derivatives_trading_portfolio_margin.rest.model;

import com.binance.connector.client.derivatives_trading_portfolio_margin.rest.JSON;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.annotations.SerializedName;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import jakarta.validation.constraints.*;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.HashSet;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import org.hibernate.validator.constraints.*;

/** ToggleBnbBurnOnUmFuturesTradeRequest */
@jakarta.annotation.Generated(
        value = "org.openapitools.codegen.languages.JavaClientCodegen",
        comments = "Generator version: 7.12.0")
public class ToggleBnbBurnOnUmFuturesTradeRequest {
    public static final String SERIALIZED_NAME_FEE_BURN = "feeBurn";

    @SerializedName(SERIALIZED_NAME_FEE_BURN)
    @jakarta.annotation.Nonnull
    private String feeBurn;

    public static final String SERIALIZED_NAME_RECV_WINDOW = "recvWindow";

    @SerializedName(SERIALIZED_NAME_RECV_WINDOW)
    @jakarta.annotation.Nullable
    private Long recvWindow;

    public ToggleBnbBurnOnUmFuturesTradeRequest() {}

    public ToggleBnbBurnOnUmFuturesTradeRequest feeBurn(
            @jakarta.annotation.Nonnull String feeBurn) {
        this.feeBurn = feeBurn;
        return this;
    }

    /**
     * Get feeBurn
     *
     * @return feeBurn
     */
    @jakarta.annotation.Nonnull
    @NotNull
    public String getFeeBurn() {
        return feeBurn;
    }

    public void setFeeBurn(@jakarta.annotation.Nonnull String feeBurn) {
        this.feeBurn = feeBurn;
    }

    public ToggleBnbBurnOnUmFuturesTradeRequest recvWindow(
            @jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
        return this;
    }

    /**
     * Get recvWindow
     *
     * @return recvWindow
     */
    @jakarta.annotation.Nullable
    public Long getRecvWindow() {
        return recvWindow;
    }

    public void setRecvWindow(@jakarta.annotation.Nullable Long recvWindow) {
        this.recvWindow = recvWindow;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ToggleBnbBurnOnUmFuturesTradeRequest toggleBnbBurnOnUmFuturesTradeRequest =
                (ToggleBnbBurnOnUmFuturesTradeRequest) o;
        return Objects.equals(this.feeBurn, toggleBnbBurnOnUmFuturesTradeRequest.feeBurn)
                && Objects.equals(this.recvWindow, toggleBnbBurnOnUmFuturesTradeRequest.recvWindow);
    }

    @Override
    public int hashCode() {
        return Objects.hash(feeBurn, recvWindow);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ToggleBnbBurnOnUmFuturesTradeRequest {\n");
        sb.append("		feeBurn: ").append(toIndentedString(feeBurn)).append("\n");
        sb.append("		recvWindow: ").append(toIndentedString(recvWindow)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    public String toUrlQueryString() {
        StringBuilder sb = new StringBuilder();

        Object feeBurnValue = getFeeBurn();
        String feeBurnValueAsString = "";
        feeBurnValueAsString = feeBurnValue.toString();
        sb.append("feeBurn=").append(urlEncode(feeBurnValueAsString)).append("");
        Object recvWindowValue = getRecvWindow();
        String recvWindowValueAsString = "";
        recvWindowValueAsString = recvWindowValue.toString();
        sb.append("recvWindow=").append(urlEncode(recvWindowValueAsString)).append("");
        return sb.toString();
    }

    public static String urlEncode(String s) {
        try {
            return URLEncoder.encode(s, StandardCharsets.UTF_8.name());
        } catch (UnsupportedEncodingException e) {
            throw new RuntimeException(StandardCharsets.UTF_8.name() + " is unsupported", e);
        }
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces (except the first
     * line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n		");
    }

    public static HashSet<String> openapiFields;
    public static HashSet<String> openapiRequiredFields;

    static {
        // a set of all properties/fields (JSON key names)
        openapiFields = new HashSet<String>();
        openapiFields.add("feeBurn");
        openapiFields.add("recvWindow");

        // a set of required properties/fields (JSON key names)
        openapiRequiredFields = new HashSet<String>();
        openapiRequiredFields.add("feeBurn");
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to
     *     ToggleBnbBurnOnUmFuturesTradeRequest
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        if (jsonElement == null) {
            if (!ToggleBnbBurnOnUmFuturesTradeRequest.openapiRequiredFields
                    .isEmpty()) { // has required fields but JSON element is null
                throw new IllegalArgumentException(
                        String.format(
                                "The required field(s) %s in ToggleBnbBurnOnUmFuturesTradeRequest"
                                        + " is not found in the empty JSON string",
                                ToggleBnbBurnOnUmFuturesTradeRequest.openapiRequiredFields
                                        .toString()));
            }
        }

        Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
        // check to see if the JSON string contains additional fields
        for (Map.Entry<String, JsonElement> entry : entries) {
            if (!ToggleBnbBurnOnUmFuturesTradeRequest.openapiFields.contains(entry.getKey())) {
                throw new IllegalArgumentException(
                        String.format(
                                "The field `%s` in the JSON string is not defined in the"
                                    + " `ToggleBnbBurnOnUmFuturesTradeRequest` properties. JSON:"
                                    + " %s",
                                entry.getKey(), jsonElement.toString()));
            }
        }

        // check to make sure all required properties/fields are present in the JSON string
        for (String requiredField : ToggleBnbBurnOnUmFuturesTradeRequest.openapiRequiredFields) {
            if (jsonElement.getAsJsonObject().get(requiredField) == null) {
                throw new IllegalArgumentException(
                        String.format(
                                "The required field `%s` is not found in the JSON string: %s",
                                requiredField, jsonElement.toString()));
            }
        }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
        if (!jsonObj.get("feeBurn").isJsonPrimitive()) {
            throw new IllegalArgumentException(
                    String.format(
                            "Expected the field `feeBurn` to be a primitive type in the JSON string"
                                    + " but got `%s`",
                            jsonObj.get("feeBurn").toString()));
        }
    }

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!ToggleBnbBurnOnUmFuturesTradeRequest.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'ToggleBnbBurnOnUmFuturesTradeRequest'
                // and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ToggleBnbBurnOnUmFuturesTradeRequest> thisAdapter =
                    gson.getDelegateAdapter(
                            this, TypeToken.get(ToggleBnbBurnOnUmFuturesTradeRequest.class));

            return (TypeAdapter<T>)
                    new TypeAdapter<ToggleBnbBurnOnUmFuturesTradeRequest>() {
                        @Override
                        public void write(
                                JsonWriter out, ToggleBnbBurnOnUmFuturesTradeRequest value)
                                throws IOException {
                            JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
                            elementAdapter.write(out, obj);
                        }

                        @Override
                        public ToggleBnbBurnOnUmFuturesTradeRequest read(JsonReader in)
                                throws IOException {
                            JsonElement jsonElement = elementAdapter.read(in);
                            // validateJsonElement(jsonElement);
                            return thisAdapter.fromJsonTree(jsonElement);
                        }
                    }.nullSafe();
        }
    }

    /**
     * Create an instance of ToggleBnbBurnOnUmFuturesTradeRequest given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of ToggleBnbBurnOnUmFuturesTradeRequest
     * @throws IOException if the JSON string is invalid with respect to
     *     ToggleBnbBurnOnUmFuturesTradeRequest
     */
    public static ToggleBnbBurnOnUmFuturesTradeRequest fromJson(String jsonString)
            throws IOException {
        return JSON.getGson().fromJson(jsonString, ToggleBnbBurnOnUmFuturesTradeRequest.class);
    }

    /**
     * Convert an instance of ToggleBnbBurnOnUmFuturesTradeRequest to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}
